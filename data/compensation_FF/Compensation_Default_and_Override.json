[
    {
        "BASE_FORMULA_NAME": "CMP_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE",
        "FORMULA_TEXT": "DEFAULT FOR CMP_ASSIGNMENT_SALARY_AMOUNT IS 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_FROM IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_TO IS   '4712/12/31 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR IS 1\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM is '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_CURRENCY_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_START_DATE IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_FTE_VALUE IS 1\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (text) ,CMP_IV_PLAN_END_DATE (text)\nDEFAULT FOR CMP_IV_PLAN_START_DATE   IS  '2001/01/01'\nDEFAULT FOR CMP_IV_PLAN_END_DATE     IS  '4012/01/01'\n\n\nL_DATA_TYPE = 'NUMBER'\nL_TOTAL = 0\nL_SALARY = 0\nL_DAYS = 0\nL_COUNT = 0\nL_DEFAULT_VALUE = 0\n\n\nL_DATA = ESS_LOG_WRITE( 'BEGIN COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE' ) \n\n\n\nL_PL_START_DATE      = TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD')\nL_PL_END_DATE        = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD') \nL_YR_TOTAL_DAYS      = 0\nL_PERD_ST_DATE       =  TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD') \nL_PERD_END_DATE      = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD')  \nL_YR_ST_DT_NEXT      = L_PL_START_DATE \nL_CURRENCY           = 'XYZ'\n\n\n\nL_PERD_ST_DATE = GREATEST(L_PERD_ST_DATE, PER_ASG_START_DATE)\n\n\n\n\nWHILE (L_COUNT <= 10) LOOP  \n(\n    L_SALARY = 0\n    L_DAYS = 0\n    L_COUNT = L_COUNT + 1\n\n     \n      \n   CHANGE_CONTEXTS(EFFECTIVE_DATE = L_PERD_ST_DATE)\n   (\n   \n     \n      IF (L_CURRENCY = 'XYZ') THEN \n      (\n        L_CURRENCY  = CMP_ASSIGNMENT_SALARY_CURRENCY_CODE \n      )\n      ELSE(\n        IF (L_CURRENCY <> CMP_ASSIGNMENT_SALARY_CURRENCY_CODE) THEN\n        (\n         L_TOTAL = -1 \n         EXIT\n        )\n      ) \n\n     \n\n     L_YR_ST_DT_NEXT  = ADD_YEARS(TRUNC(L_PERD_ST_DATE, 'YYYY'), 1 )\n     L_YR_TOTAL_DAYS  = DAYS_BETWEEN(L_YR_ST_DT_NEXT  , TRUNC(L_PERD_ST_DATE, 'YYYY') )\n       \n     \n\n     L_PERD_END_DATE  = ADD_DAYS(LEAST(CMP_ASSIGNMENT_SALARY_DATE_TO, L_PL_END_DATE) , 1 )\n     L_PERD_END_DATE  = LEAST(L_PERD_END_DATE, L_YR_ST_DT_NEXT)    \n     \n     \n     L_SALARY = CMP_ASSIGNMENT_SALARY_AMOUNT\n    \n   \n     \n     IF L_SALARY > 0 THEN\n     (\n       L_DAYS = DAYS_BETWEEN(L_PERD_END_DATE , L_PERD_ST_DATE )\n       \n       \n       IF ( CMP_ASSIGNMENT_SALARY_BASIS_CODE = 'HOURLY' ) THEN\n       (\n          L_TOTAL = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR * L_DAYS/L_YR_TOTAL_DAYS * PER_ASG_FTE_VALUE)\n       )ELSE (\n        L_TOTAL = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR * L_DAYS/L_YR_TOTAL_DAYS)\n       )\n\n       \n     )\n\n\n    \n           \n   \n     IF ( CMP_ASSIGNMENT_SALARY_DATE_TO > L_PERD_END_DATE ) THEN\n     (\n       L_PERD_ST_DATE  =  L_PERD_END_DATE\n       \n          \n       \n\n       IF (CMP_ASSIGNMENT_SALARY_DATE_TO WAS DEFAULTED AND CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM WAS NOT DEFAULTED \n             AND L_PERD_END_DATE > CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n           ) THEN\n          (\n             L_PERD_ST_DATE = CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n          )\n     )\n     ELSE (  \n        IF (CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM > ADD_DAYS(CMP_ASSIGNMENT_SALARY_DATE_TO,1) )THEN \n         ( \n           L_PERD_ST_DATE = CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n          )\n        ELSE \n         (\n         L_PERD_ST_DATE = LEAST(CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM, L_PERD_END_DATE)\n         ) \n      )   \n    \n       \n\n     IF (L_PERD_ST_DATE  <= L_PL_START_DATE  OR L_PERD_ST_DATE > L_PL_END_DATE ) THEN\n     (\n       EXIT\n     )\n   )\n \n)\n\nL_DATA = ESS_LOG_WRITE( 'END COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE' ) \nL_DEFAULT_VALUE = L_TOTAL\nRETURN  L_DATA_TYPE,L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "Calculates the prorated daily average of eligible salary for employees based on their daily earnings, accounting for part-time or variable work schedules. Adjusts for absences, leaves, or partial periods to determine the daily salary average. Returns the calculated daily average salary.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "CMP_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_NINETY_DAY_MIN",
        "FORMULA_TEXT": "DEFAULT FOR CMP_ASSIGNMENT_SALARY_AMOUNT IS 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_FROM IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_TO IS   '4712/12/31 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR IS 1\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM is '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_CURRENCY_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_START_DATE IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_FTE_VALUE IS 1\n\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (text) ,CMP_IV_PLAN_END_DATE (text)\nDEFAULT FOR CMP_IV_PLAN_START_DATE   IS  '2001/01/01'\nDEFAULT FOR CMP_IV_PLAN_END_DATE     IS  '4012/01/01'\n\n\nL_DATA_TYPE = 'NUMBER'\nL_TOTAL    = 0\nL_SALARY = 0\nL_DAYS = 0\nL_COUNT = 0\nL_TOTAL_DAYS = 0\nL_DEFAULT_VALUE = 0\n\nL_DATA = ESS_LOG_WRITE( 'BEGIN COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_MIN_NINETY' )\n\n\nL_PL_START_DATE      = TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD')\nL_PL_END_DATE        = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD') \nL_YR_TOTAL_DAYS      = 0\nL_PERD_ST_DATE       =  TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD') \nL_PERD_END_DATE      = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD')  \nL_YR_ST_DT_NEXT      = L_PL_START_DATE \nL_CURRENCY           = 'XYZ'\n\n\n\nL_PERD_ST_DATE = GREATEST(L_PERD_ST_DATE, PER_ASG_START_DATE)\n\n\n\n\nWHILE (L_COUNT <= 10) LOOP  \n(\n    L_SALARY = 0\n    L_DAYS = 0\n    L_COUNT = L_COUNT + 1\n    \n \n          \n   CHANGE_CONTEXTS(EFFECTIVE_DATE = L_PERD_ST_DATE)\n   (\n     \n        \n       IF (L_CURRENCY = 'XYZ') THEN \n       (\n          L_CURRENCY  = CMP_ASSIGNMENT_SALARY_CURRENCY_CODE \n       )\n       ELSE(\n         IF (L_CURRENCY <> CMP_ASSIGNMENT_SALARY_CURRENCY_CODE) THEN\n         (\n            L_TOTAL = -1 \n            EXIT\n         )\n      ) \n     \n     L_YR_ST_DT_NEXT  = ADD_YEARS(TRUNC(L_PERD_ST_DATE, 'YYYY'), 1 )\n     L_YR_TOTAL_DAYS  = DAYS_BETWEEN(L_YR_ST_DT_NEXT  , TRUNC(L_PERD_ST_DATE, 'YYYY') )\n     \n      \n\n     L_PERD_END_DATE  = ADD_DAYS(LEAST(CMP_ASSIGNMENT_SALARY_DATE_TO, L_PL_END_DATE) , 1 )\n     L_PERD_END_DATE  = LEAST(L_PERD_END_DATE, L_YR_ST_DT_NEXT)    \n     \n       \n     L_SALARY         = CMP_ASSIGNMENT_SALARY_AMOUNT\n    \n      \n     IF L_SALARY > 0 THEN\n     (\n       L_DAYS = DAYS_BETWEEN(L_PERD_END_DATE , L_PERD_ST_DATE )\n\n       \n\n       \n       IF ( CMP_ASSIGNMENT_SALARY_BASIS_CODE = 'HOURLY' ) THEN\n       (\n          L_TOTAL = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR * L_DAYS/L_YR_TOTAL_DAYS * PER_ASG_FTE_VALUE)\n       ) ELSE (\n\n          L_TOTAL = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR * L_DAYS/L_YR_TOTAL_DAYS)\n       )\n         \n       L_TOTAL_DAYS = L_TOTAL_DAYS + L_DAYS\n\n       \n\n     )\n\n\n    \n            \n      \n     IF ( CMP_ASSIGNMENT_SALARY_DATE_TO > L_PERD_END_DATE ) THEN\n     (\n       L_PERD_ST_DATE  =  L_PERD_END_DATE\n       \n      \n       IF (CMP_ASSIGNMENT_SALARY_DATE_TO WAS DEFAULTED AND CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM WAS NOT DEFAULTED \n             AND L_PERD_END_DATE > CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n           ) THEN\n          (\n             L_PERD_ST_DATE = CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n          )\n     )\n     ELSE (  \n        IF (CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM > ADD_DAYS(CMP_ASSIGNMENT_SALARY_DATE_TO,1) )THEN \n         ( \n           L_PERD_ST_DATE = CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n          )\n        ELSE \n         (\n         L_PERD_ST_DATE = LEAST(CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM, L_PERD_END_DATE)\n         ) \n      )   \n      \n      \n     IF (L_PERD_ST_DATE  <= L_PL_START_DATE  OR L_PERD_ST_DATE > L_PL_END_DATE ) THEN\n     (\n       EXIT\n     )\n   )\n   \n)\n\n \n\n IF (L_TOTAL_DAYS < 90 ) THEN \n    (\n      L_TOTAL = 0\n )\n L_DATA = ESS_LOG_WRITE( 'END COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_MIN_NINETY' ) \nL_DEFAULT_VALUE = L_TOTAL\nRETURN  L_DATA_TYPE,L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "Calculates the prorated daily average of eligible salary for employees over a 90-day minimum period. Ensures the average reflects at least 90 days of data, adjusting for absences, leaves, or partial periods to determine the daily salary average. Returns the calculated daily average salary.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "CMP_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_USING_FTE",
        "FORMULA_TEXT": "DEFAULT FOR CMP_ASSIGNMENT_SALARY_AMOUNT IS 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_FROM IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_TO IS   '4712/12/31 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR IS 1\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM is '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_CURRENCY_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_START_DATE IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR PER_ASG_FTE_VALUE IS 1\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XYZ'\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (text) ,CMP_IV_PLAN_END_DATE (text)\nDEFAULT FOR CMP_IV_PLAN_START_DATE   IS  '2001/01/01'\nDEFAULT FOR CMP_IV_PLAN_END_DATE     IS  '4012/01/01'\n\n\nL_DATA_TYPE = 'NUMBER'\nL_TOTAL = 0\nL_SALARY = 0\nL_DAYS = 0\nL_COUNT = 0\nL_DEFAULT_VALUE = 0\n\nL_DATA = ESS_LOG_WRITE( 'BEGIN COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_FTE' ) \n\nL_PL_START_DATE      = TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD')\nL_PL_END_DATE        = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD') \nL_YR_TOTAL_DAYS      = 0\nL_PERD_ST_DATE       =  TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD') \nL_PERD_END_DATE      = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD')  \nL_YR_ST_DT_NEXT      = L_PL_START_DATE \nL_CURRENCY           = 'XYZ'\n\n\nL_PERD_ST_DATE = GREATEST(L_PERD_ST_DATE, PER_ASG_START_DATE)\n\n\n\n\nWHILE (L_COUNT <= 10) LOOP  \n(\n    L_SALARY = 0\n    L_DAYS = 0\n    L_COUNT = L_COUNT + 1\n    \n   \n      \n   CHANGE_CONTEXTS(EFFECTIVE_DATE = L_PERD_ST_DATE)\n   (\n   \n   \n     \n\n      IF (L_CURRENCY = 'XYZ') THEN \n      (\n        L_CURRENCY  = CMP_ASSIGNMENT_SALARY_CURRENCY_CODE \n      )\n      ELSE(\n        IF (L_CURRENCY <> CMP_ASSIGNMENT_SALARY_CURRENCY_CODE) THEN\n        (\n         L_TOTAL = -1 \n         EXIT\n        )\n      ) \n      \n     L_YR_ST_DT_NEXT  = ADD_YEARS(TRUNC(L_PERD_ST_DATE, 'YYYY'), 1 )\n     L_YR_TOTAL_DAYS  = DAYS_BETWEEN(L_YR_ST_DT_NEXT  , TRUNC(L_PERD_ST_DATE, 'YYYY') )\n     \n      \n     L_PERD_END_DATE  = ADD_DAYS(LEAST(CMP_ASSIGNMENT_SALARY_DATE_TO, L_PL_END_DATE) , 1 )\n     L_PERD_END_DATE  = LEAST(L_PERD_END_DATE, L_YR_ST_DT_NEXT)    \n     \n         \n     L_SALARY         = CMP_ASSIGNMENT_SALARY_AMOUNT\n\n       \n\n     \n     IF L_SALARY > 0 THEN\n     (\n       L_DAYS = DAYS_BETWEEN(L_PERD_END_DATE , L_PERD_ST_DATE )\n       IF ( CMP_ASSIGNMENT_SALARY_BASIS_CODE = 'HOURLY' ) THEN (\n          \n           L_TOTAL = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR *  L_DAYS/L_YR_TOTAL_DAYS)\n       )ELSE ( \n          L_TOTAL = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR / PER_ASG_FTE_VALUE * L_DAYS/L_YR_TOTAL_DAYS)\n       )\n     )\n     \n\n\n            \n     IF ( CMP_ASSIGNMENT_SALARY_DATE_TO > L_PERD_END_DATE ) THEN\n     (\n       L_PERD_ST_DATE  =  L_PERD_END_DATE\n              \n       \n       IF (CMP_ASSIGNMENT_SALARY_DATE_TO WAS DEFAULTED AND CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM WAS NOT DEFAULTED \n             AND L_PERD_END_DATE > CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n           ) THEN\n          (\n             L_PERD_ST_DATE = CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n          )\n     )\n     ELSE (  \n        IF (CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM > ADD_DAYS(CMP_ASSIGNMENT_SALARY_DATE_TO,1) )THEN \n         ( \n           L_PERD_ST_DATE = CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n          )\n        ELSE \n         (\n         L_PERD_ST_DATE = LEAST(CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM, L_PERD_END_DATE)\n         ) \n      )   \n      \n       \n\n     IF (L_PERD_ST_DATE  <= L_PL_START_DATE  OR L_PERD_ST_DATE > L_PL_END_DATE ) THEN\n     (\n       EXIT\n     )\n   )\n \n)\nL_DATA = ESS_LOG_WRITE( 'END COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_FTE' ) \nL_DEFAULT_VALUE = L_TOTAL\nRETURN  L_DATA_TYPE,L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "Calculates the prorated daily average of eligible salary for employees using full-time equivalent (FTE) data. Adjusts for part-time status or variable work schedules based on FTE, accounting for absences, leaves, or partial periods. Returns the calculated daily average salary.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "CMP_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_FOR_JOBS",
        "FORMULA_TEXT": "DEFAULT FOR CMP_ASSIGNMENT_SALARY_AMOUNT IS 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_FROM IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_TO IS   '4712/12/31 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR IS 1\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM is '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_CURRENCY_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_JOB_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_START_DATE IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_FTE_VALUE IS 1\n\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (text) ,CMP_IV_PLAN_END_DATE (text)\nDEFAULT FOR CMP_IV_PLAN_START_DATE   IS  '2001/01/01'\nDEFAULT FOR CMP_IV_PLAN_END_DATE     IS  '4012/01/01'\n\n\nL_DATA_TYPE = 'NUMBER'\nL_TOTAL = 0\nL_SALARY = 0\nL_DAYS = 0\nL_COUNT = 0\nL_DEFAULT_VALUE = 0\n\nL_DATA = ESS_LOG_WRITE( 'BEGIN COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_FOR_JOBS' ) \n\n\n\nL_PL_START_DATE      = TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD')\nL_PL_END_DATE        = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD') \nL_YR_TOTAL_DAYS      = 0\nL_PERD_ST_DATE       =  TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD') \nL_PERD_END_DATE      = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD')  \nL_YR_ST_DT_NEXT      = L_PL_START_DATE \nL_CURRENCY           = 'XYZ'\n\n\n\nL_PERD_ST_DATE = GREATEST(L_PERD_ST_DATE, PER_ASG_START_DATE)\n\n\n\n\nWHILE (L_COUNT <= 10) LOOP  \n(\n    L_SALARY = 0\n    L_DAYS = 0\n    L_COUNT = L_COUNT + 1\n    \n    \n      \n   CHANGE_CONTEXTS(EFFECTIVE_DATE = L_PERD_ST_DATE)\n   (\n   \n    \n    IF (L_CURRENCY = 'XYZ') THEN \n      (\n        L_CURRENCY  = CMP_ASSIGNMENT_SALARY_CURRENCY_CODE \n      )\n      ELSE(\n        IF (L_CURRENCY <> CMP_ASSIGNMENT_SALARY_CURRENCY_CODE) THEN\n        (\n         L_TOTAL = -1 \n         EXIT\n        )\n      ) \n     \n     L_YR_ST_DT_NEXT  = ADD_YEARS(TRUNC(L_PERD_ST_DATE, 'YYYY'), 1 )\n     L_YR_TOTAL_DAYS  = DAYS_BETWEEN(L_YR_ST_DT_NEXT  , TRUNC(L_PERD_ST_DATE, 'YYYY') )\n     \n      \n\n     L_PERD_END_DATE  = ADD_DAYS(LEAST(CMP_ASSIGNMENT_SALARY_DATE_TO, L_PL_END_DATE,PER_ASG_EFFECTIVE_END_DATE) , 1 )\n     L_PERD_END_DATE  = LEAST(L_PERD_END_DATE, L_YR_ST_DT_NEXT)    \n\n     \n\n     L_SALARY         = CMP_ASSIGNMENT_SALARY_AMOUNT\n     \n     IF ( L_SALARY > 0  AND ( PER_ASG_JOB_CODE WAS NOT DEFAULTED AND PER_ASG_JOB_CODE = 'JOBOPMAN001' ))THEN\n     (\n       L_DAYS = DAYS_BETWEEN(L_PERD_END_DATE , L_PERD_ST_DATE )\n\n      \n\n\n\n       \n       IF ( CMP_ASSIGNMENT_SALARY_BASIS_CODE = 'HOURLY' ) THEN\n       (\n            L_TOTAL = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR * L_DAYS/L_YR_TOTAL_DAYS * PER_ASG_FTE_VALUE)\n       )ELSE (\n\n           L_TOTAL = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR * L_DAYS/L_YR_TOTAL_DAYS)\n       )\n       \n     )\n\n\n           \n\n     IF ( CMP_ASSIGNMENT_SALARY_DATE_TO > L_PERD_END_DATE ) THEN\n     (\n       L_PERD_ST_DATE  =  L_PERD_END_DATE\n       \n       \n       IF (CMP_ASSIGNMENT_SALARY_DATE_TO WAS DEFAULTED AND CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM WAS NOT DEFAULTED \n             AND L_PERD_END_DATE > CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n           ) THEN\n          (\n             L_PERD_ST_DATE = CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n          )\n     )\n     ELSE (  \n        IF (CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM > ADD_DAYS(CMP_ASSIGNMENT_SALARY_DATE_TO,1) )THEN \n         ( \n           L_PERD_ST_DATE = CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n          )\n        ELSE \n         (\n         L_PERD_ST_DATE = LEAST(CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM, L_PERD_END_DATE)\n         ) \n      )   \n      \n       \n     IF ( L_PERD_ST_DATE  > PER_ASG_EFFECTIVE_END_DATE ) THEN\n      (\n         L_PERD_ST_DATE = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1)\n     )\n      \n       \n     IF (L_PERD_ST_DATE  <= L_PL_START_DATE  OR L_PERD_ST_DATE > L_PL_END_DATE ) THEN\n     (\n       EXIT\n     )\n   )\n \n)\nL_DATA = ESS_LOG_WRITE( 'END COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_FOR_JOBS' ) \nL_DEFAULT_VALUE = L_TOTAL\nRETURN  L_DATA_TYPE,L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "Calculates the prorated daily average of eligible salary for employees across multiple jobs or positions. Adjusts for different job roles, work schedules, and absences, ensuring accurate daily salary averaging. Returns the calculated daily average salary.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "CMP_ELIGIBLE_SALARY_PRORATION_MONTH_END_AVERAGE",
        "FORMULA_TEXT": "DEFAULT FOR CMP_ASSIGNMENT_SALARY_AMOUNT IS 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_FROM IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_TO IS   '4712/12/31 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR IS 1\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM is '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_CURRENCY_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_START_DATE IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_FTE_VALUE IS 1\n\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (text) ,CMP_IV_PLAN_END_DATE (text)\nDEFAULT FOR CMP_IV_PLAN_START_DATE   IS  '2001/01/01'\nDEFAULT FOR CMP_IV_PLAN_END_DATE     IS  '4012/01/01'\n\n\nL_DATA_TYPE = 'NUMBER'\nL_TOTAL = 0\nL_SALARY = 0\nL_DAYS = 0\nL_COUNT = 0\nL_TOT_MONTHS = 0\nL_DEFAULT_VALUE = 0\n\n\n\nL_PL_START_DATE      = TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD')\nL_PL_END_DATE        = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD') \nL_YR_TOTAL_DAYS      = 0\nL_PERD_ST_DATE       =  TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD') \nL_PERD_END_DATE      = TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD')  \nL_YR_ST_DT_NEXT      = L_PL_START_DATE \nL_CURRENCY           = 'XYZ'\nL_TOT_MONTHS         =  MONTHS_BETWEEN(L_PL_END_DATE, L_PL_START_DATE ) + 1\nL_DATA = ESS_LOG_WRITE( 'BEGIN COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_MONTHLY' ) \n\n\nL_PERD_ST_DATE = GREATEST(L_PERD_ST_DATE, PER_ASG_START_DATE)\n\n\n\n\nCHANGE_CONTEXTS(EFFECTIVE_DATE =  L_PERD_ST_DATE) \n(\n  \n   IF (CMP_ASSIGNMENT_SALARY_DATE_FROM WAS DEFAULTED AND CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM >= L_PERD_ST_DATE ) THEN \n     (    \n     L_PERD_ST_DATE =  CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM \n   ) \n    \n   CHANGE_CONTEXTS(EFFECTIVE_DATE =  L_PERD_ST_DATE) \n   (\n      L_PERD_END_DATE = LEAST( LAST_DAY(L_PERD_ST_DATE) , L_PL_END_DATE)\n      \n      IF (  CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM WAS DEFAULTED  OR \n          ( CMP_ASSIGNMENT_SALARY_DATE_FROM WAS NOT DEFAULTED AND   CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM > ADD_DAYS(CMP_ASSIGNMENT_SALARY_DATE_TO,1) \n          )\n         ) THEN\n       ( \n          L_PERD_END_DATE = LEAST( CMP_ASSIGNMENT_SALARY_DATE_TO , L_PERD_END_DATE)\n      )\n   )\n)\n\n\nWHILE (L_COUNT <=  L_TOT_MONTHS ) LOOP  \n(\n    L_SALARY = 0\n    L_DAYS = 0\n    L_COUNT = L_COUNT + 1\n    \n   \n      \n   CHANGE_CONTEXTS(EFFECTIVE_DATE =  L_PERD_END_DATE)\n   (\n   \n       \n      L_YR_ST_DT_NEXT  = ADD_YEARS(TRUNC(L_PERD_ST_DATE, 'YYYY'), 1 )\n      L_YR_TOTAL_DAYS  = DAYS_BETWEEN(L_YR_ST_DT_NEXT  , TRUNC(L_PERD_ST_DATE, 'YYYY'))\n      L_SALARY         = CMP_ASSIGNMENT_SALARY_AMOUNT\n      IF (L_SALARY > 0) THEN\n      (\n         \n         IF (L_CURRENCY = 'XYZ') THEN \n           (\n              L_CURRENCY  = CMP_ASSIGNMENT_SALARY_CURRENCY_CODE \n         )\n          ELSE(\n           IF (L_CURRENCY <> CMP_ASSIGNMENT_SALARY_CURRENCY_CODE) THEN\n            (\n              L_TOTAL = -1 \n              EXIT\n           )\n         ) \n         \n         L_DAYS     = DAYS_BETWEEN(L_PERD_END_DATE , L_PERD_ST_DATE )+1\n\n        \n\n\n         \n         IF ( CMP_ASSIGNMENT_SALARY_BASIS_CODE = 'HOURLY' ) THEN\n         (\n          L_TOTAL    = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR * L_DAYS/L_YR_TOTAL_DAYS * PER_ASG_FTE_VALUE)\n         ) ELSE (\n           L_TOTAL    = L_TOTAL + (L_SALARY * CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR * L_DAYS/L_YR_TOTAL_DAYS)\n         )\n        \n      )\n\n      \n\n      L_PERD_ST_DATE = ADD_DAYS(L_PERD_END_DATE, 1) \n\n     \n\n      IF ( (  CMP_ASSIGNMENT_SALARY_DATE_FROM WAS DEFAULTED OR CMP_ASSIGNMENT_SALARY_DATE_TO < L_PERD_ST_DATE)\n           AND  CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM >= L_PERD_ST_DATE\n         ) THEN \n        (\n          L_PERD_ST_DATE =  CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM\n      )\n     \n      \n   \n      L_PERD_END_DATE = LEAST( LAST_DAY(L_PERD_ST_DATE) , L_PL_END_DATE ) \n      IF ( L_PERD_ST_DATE < CMP_ASSIGNMENT_SALARY_DATE_TO \n          AND ( CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM WAS DEFAULTED  OR \n                ( CMP_ASSIGNMENT_SALARY_DATE_FROM WAS NOT DEFAULTED  \n                   AND   CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM > ADD_DAYS(CMP_ASSIGNMENT_SALARY_DATE_TO,1) \n                 )\n               )  \n         ) THEN\n       ( \n        L_PERD_END_DATE = LEAST( CMP_ASSIGNMENT_SALARY_DATE_TO , L_PERD_END_DATE)\n      )\n     \n      \n\n     IF (L_PERD_ST_DATE  < L_PL_START_DATE  OR L_PERD_ST_DATE > L_PL_END_DATE  OR  L_PERD_ST_DATE >  L_PERD_END_DATE ) THEN\n      ( \n        EXIT\n     )\n  \n   )\n)\n \nL_DATA = ESS_LOG_WRITE( 'END COMPENSATION_ELIGIBLE_SALARY_PRORATION_DAILY_AVERAGE_MONTHLY' ) \n\nL_DEFAULT_VALUE = L_TOTAL \nRETURN  L_DATA_TYPE,L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "Calculates the prorated monthly end average of eligible salary for employees. Adjusts for absences, leaves, or partial periods at the end of each month, ensuring the average reflects the full month\u2019s earnings. Returns the calculated monthly end average salary.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "CIMB_NIAGA_COMP_PERFORMANCE_BONUS_LAST_YEAR",
        "FORMULA_TEXT": "DEFAULT FOR CMP_IV_PLAN_START_DATE                        IS '2011/01/01'\nDEFAULT FOR CMP_IV_PLAN_END_DATE                          IS '2011/01/01'\nDEFAULT FOR CMP_IV_ITEM_NAME                              IS 'x'\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_AMOUNT                  IS 0\nDEFAULT FOR PER_HIST_ASG_ASSIGNMENT_ID                    IS EMPTY_NUMBER_NUMBER\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID         IS 18\nDEFAULT FOR PER_HIST_ASG_EFFECTIVE_START_DATE             IS EMPTY_DATE_NUMBER\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE  IS '1900/01/01 00:00:00'  (date)\nDEFAULT FOR PER_HIST_ASG_STATUS_TYPE                      IS EMPTY_TEXT_NUMBER\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_STATUS_TYPE           IS 'N/A'\nDEFAULT FOR PER_HIST_ASG_NAME                             IS EMPTY_TEXT_NUMBER\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_NAME                  IS 'N/A'\nDEFAULT FOR PER_HIST_ASG_PAY_RELATIONSHIP_ID              IS EMPTY_NUMBER_NUMBER\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_PAY_RELATIONSHIP_ID   IS 0\n\nDEFAULT FOR ELEMENT_ENTRY_EFFECTIVE_START_DATE            IS EMPTY_DATE_NUMBER\nDEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00'  (date)\nDEFAULT FOR ELEMENT_ENTRY_EFFECTIVE_END_DATE              IS EMPTY_DATE_NUMBER\nDEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_EFFECTIVE_END_DATE   IS '1900/01/01 00:00:00'  (date)\nDEFAULT FOR ELEMENT_ENTRY_BASE_ELEMENT_NAME               IS EMPTY_TEXT_NUMBER\nDEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_BASE_ELEMENT_NAME    IS 'N/A'\nDEFAULT FOR ELEMENT_ENTRY_VALUE                           IS EMPTY_TEXT_NUMBER\nDEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_VALUE                IS 'N/A'\nDEFAULT FOR ELEMENT_ENTRY_BASE_VALUE_NAME                 IS EMPTY_TEXT_NUMBER\nDEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_BASE_VALUE_NAME      IS 'N/A'\nDEFAULT FOR ELEMENT_ENTRY_INPUT_CURRENCY_CODE             IS EMPTY_TEXT_NUMBER\nDEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_INPUT_CURRENCY_CODE  IS 'N/A'\n\n\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_CURRENCY_CODE           IS 'N/A'\n\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (text)\n,          CMP_IV_PLAN_END_DATE (text)\n,          CMP_IV_PLAN_EXTRACTION_DATE (text)\n,          CMP_IV_ITEM_NAME (text)\n\n\nNumber_YEARS_Backwards = 0   \nDAY   = '01'                   \nMONTH = '01'\n\nRATE_DAY   = '01'                   \nRATE_MONTH = '01'\n\n\nL_PL_START_YEAR     = TO_CHAR(TRUNC(TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD'), 'YYYY'),'YYYY')\nL_PL_START_MONTH    = TO_CHAR(TRUNC(TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD'), 'MM'),'MM')\nL_PL_START_YEAR_1_N = TO_NUMBER(L_PL_START_YEAR) - Number_YEARS_Backwards\nL_PL_START_YEAR_1_C = TO_CHAR(L_PL_START_YEAR_1_N)\nL_PL_START_DATE     = LAST_DAY(TO_DATE(DAY || '/' || L_PL_START_MONTH || '/' ||L_PL_START_YEAR_1_C,'DD/MM/YYYY'))\nL_PL_START_DATE = TO_DATE(CMP_IV_PLAN_START_DATE,'YYYY/MM/DD')\n\nL_PL_END_YEAR       = TO_CHAR(TRUNC(TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD'), 'YYYY'),'YYYY')\nL_PL_END_MONTH      = TO_CHAR(TRUNC(TO_DATE(CMP_IV_PLAN_END_DATE,'YYYY/MM/DD'), 'MM'),'MM')\nL_PL_END_YEAR_1_N   = TO_NUMBER(L_PL_END_YEAR) - Number_YEARS_Backwards\nL_PL_END_YEAR_1_C   = TO_CHAR(L_PL_END_YEAR_1_N)\nL_PL_END_DATE       = LAST_DAY(TO_DATE(DAY || '/' || L_PL_END_MONTH || '/' ||L_PL_END_YEAR_1_C,'DD/MM/YYYY'))\n\nL_ASSIGNMENT     = 0\nL_ASSIGNMENT_OLD = 'N/A'\nL_AMOUNT         = 0\nL_TOTAL          = 0\n\nL_CURRENCY       = 'N/A'\nL_CURRENCY       = CMP_ASSIGNMENT_SALARY_CURRENCY_CODE\nL_CURRENCY_C     = 'N/A'\nL_ELEMENT_NAME   = ' '\n\nL_ENABLE_LOGGING = 'N'\nL_ENABLE_LOGGING = GET_TABLE_VALUE('CIMB_NIAGA_COMP_GLOBAL_PARAMETERS','ENTRY','ENABLE_LOGGING','N')\n\nIF(L_ENABLE_LOGGING = 'Y') THEN (RET = ESS_LOG_WRITE( 'Item Name                ' || CMP_IV_ITEM_NAME ))\n\nWHILE(L_PL_START_DATE <= L_PL_END_DATE) \nLOOP\n(\n I = PER_HIST_ASG_PAY_RELATIONSHIP_ID.FIRST(-1234)\n L_ASSIGNMENT_OLD = 'N/A'\n\n\n\n WHILE (PER_HIST_ASG_PAY_RELATIONSHIP_ID.EXISTS(I)) \n LOOP\n  (              \n\n   L_ASSIGNMENT = PER_HIST_ASG_PAY_RELATIONSHIP_ID[I]\n\n   IF (L_ASSIGNMENT <> 0 AND INSTR(L_ASSIGNMENT_OLD, TO_CHAR(L_ASSIGNMENT)) = 0) \n   THEN\n    (        \n\n     CHANGE_CONTEXTS(PAYROLL_RELATIONSHIP_ID = L_ASSIGNMENT, DATE_EARNED = L_PL_START_DATE)\n      (\n       J = ELEMENT_ENTRY_EFFECTIVE_START_DATE.FIRST(-1234)\n\n       WHILE (ELEMENT_ENTRY_BASE_ELEMENT_NAME.EXISTS(J))\n       LOOP\n        (\n\n         IF (UPPER(ELEMENT_ENTRY_BASE_ELEMENT_NAME[J]) = 'PERFORMANCE BONUS' ) \n         THEN\n          (                                                                                              \nIF(L_ENABLE_LOGGING = 'Y') THEN (           RET = ESS_LOG_WRITE( '--Element Name           ' || ELEMENT_ENTRY_BASE_ELEMENT_NAME[J]))\nIF(L_ENABLE_LOGGING = 'Y') THEN (           RET = ESS_LOG_WRITE( '--Element Input          ' || ELEMENT_ENTRY_VALUE[J] ))\nIF(L_ENABLE_LOGGING = 'Y') THEN (           RET = ESS_LOG_WRITE( '--Element Input Value    ' || ELEMENT_ENTRY_BASE_VALUE_NAME[J] ))\nIF(L_ENABLE_LOGGING = 'Y') THEN (           RET = ESS_LOG_WRITE( '--Element Start Date     ' || TO_CHAR(ELEMENT_ENTRY_EFFECTIVE_START_DATE[J])))\nIF(L_ENABLE_LOGGING = 'Y') THEN (           RET = ESS_LOG_WRITE( '--Element Input Currency ' || ELEMENT_ENTRY_INPUT_CURRENCY_CODE[J]))\n\n           IF (ELEMENT_ENTRY_BASE_VALUE_NAME[J] = 'Amount' AND ELEMENT_ENTRY_VALUE[J] <> 'N/A') \n           THEN\n            (                                                                                             \n\n             L_INPUT_CURRENCY = ELEMENT_ENTRY_INPUT_CURRENCY_CODE[J]\n             L_AMOUNT = TO_NUMBER(ELEMENT_ENTRY_VALUE[J])\n  IF(L_ENABLE_LOGGING = 'Y') THEN (RET = ESS_LOG_WRITE( 'L_AMOUNT               ' || TO_CHAR(L_AMOUNT)))\n  L_TOTAL = L_TOTAL+L_AMOUNT\n  IF(L_ENABLE_LOGGING = 'Y') THEN (RET = ESS_LOG_WRITE( 'L_TOTAL                ' || TO_CHAR(L_TOTAL)))\n\n            )\n          )\n         J = ELEMENT_ENTRY_EFFECTIVE_START_DATE.NEXT(J,-1234)\n        )\n      )\n     L_ASSIGNMENT_OLD = L_ASSIGNMENT_OLD || ',' || TO_CHAR(L_ASSIGNMENT)\n    )\n   I = PER_HIST_ASG_PAY_RELATIONSHIP_ID.NEXT(I, -1234)\n  )\n L_PL_START_DATE = ADD_MONTHS(L_PL_START_DATE, 1)\n \n)\n\nL_DEFAULT_VALUE = L_TOTAL\nL_EXTR_DATE = TO_DATE(CMP_IV_PLAN_EXTRACTION_DATE,'YYYY/MM/DD')\n\nL_DATA_TYPE     = 'NUMBER'\n\nRETURN L_DEFAULT_VALUE, L_DATA_TYPE",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia",
        "Description": "Calculates the performance bonus for Niaga employees based on their performance metrics from the previous year. Adjusts for absences, leaves, or partial periods, ensuring alignment with company policies and performance criteria. Returns the calculated bonus amount.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "CIMB_COMP_MINUS_1_COMPENSATION",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_PERSON_ID IS 0\n    \nINPUTS ARE CMP_IV_PLAN_START_DATE (text) \n,          CMP_IV_PLAN_END_DATE (text)\n\n\nlc_person_id = ' '\nlc_comp_start_date = ' '\nlc_comp_end_date= ' '\nRULE_VALUE = ' '\n\nlc_person_id  = TO_CHAR(PER_ASG_PERSON_ID)\n\nlc_comp_start_date = TO_CHAR(ADD_YEARS(TO_DATE(CMP_IV_PLAN_START_DATE),0),'YYYY-MM-DD')\nlc_comp_end_date= TO_CHAR(ADD_YEARS(TO_DATE(CMP_IV_PLAN_END_DATE),0),'YYYY-MM-DD')\n\n\n\n\n\n\nl_ess_log = ESS_LOG_WRITE ('Person ID:    '|| lc_person_id  ||'   Start Date   : ' || lc_comp_start_date || '  End Date   : '  || lc_comp_end_date)\n\nRULE_VALUE = GET_VALUE_SET('CIMB_COMP_RATING_LAST_YEAR','|=Person_ID='||lc_person_id||'|COMP_START_DATE='||lc_comp_start_date||'|COMP_END_DATE='|| lc_comp_end_date)\nl_ess_log = ESS_LOG_WRITE ('Rule Value returned :  ' || RULE_VALUE)\n\nL_DEFAULT_VALUE = RULE_VALUE\n\n\nl_ess_log = ESS_LOG_WRITE ('N-1 Default Value returned :  ' || L_DEFAULT_VALUE)\n\n\nRETURN L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "Adjusts compensation for employees by subtracting a specific compensation component (e.g., bonus, allowance) labeled as \"1\". Accounts for absences, leaves, or policy changes to determine the net compensation. Returns the adjusted compensation amount.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "CIMB_COMP_MINUS_2_COMPENSATION",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_PERSON_ID IS 0\n    \nINPUTS ARE CMP_IV_PLAN_START_DATE (text) \n,          CMP_IV_PLAN_END_DATE (text)\n\n\nlc_person_id = ' '\nlc_comp_start_date = ' '\nlc_comp_end_date= ' '\nRULE_VALUE = ' '\n\nlc_person_id  = TO_CHAR(PER_ASG_PERSON_ID)\n\nlc_comp_start_date = TO_CHAR(ADD_YEARS(TO_DATE(CMP_IV_PLAN_START_DATE),-1),'YYYY-MM-DD')\nlc_comp_end_date= TO_CHAR(ADD_YEARS(TO_DATE(CMP_IV_PLAN_END_DATE),-1),'YYYY-MM-DD')\n\nl_ess_log = ESS_LOG_WRITE ('Person ID:    '|| lc_person_id  ||'   Start Date   : ' || lc_comp_start_date || '  End Date   : '  || lc_comp_end_date)\n\n\nRULE_VALUE = GET_VALUE_SET('CIMB_COMP_RATING_TWO_YEARS_BACK_LATEST','|=Person_ID='||lc_person_id||'|COMP_START_DATE='||lc_comp_start_date||'|COMP_END_DATE='|| lc_comp_end_date)\n\nl_ess_log = ESS_LOG_WRITE ('Rule Value N-MIN-2 returned :  ' || RULE_VALUE)\n\n\nL_DEFAULT_VALUE = RULE_VALUE\n\nl_ess_log = ESS_LOG_WRITE ('Default Value N-MIN-2 returned :  ' || L_DEFAULT_VALUE)\n\n\nRETURN L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "Adjusts compensation for employees by subtracting a specific compensation component (e.g., bonus, allowance) labeled as \"2\". Accounts for absences, leaves, or policy changes to determine the net compensation. Returns the adjusted compensation amount.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "KANEKA PRORATED MINIMUM BONUS OVERRIDE FF",
        "FORMULA_TEXT": "DEFAULT for ACP_HIRE_DATE is '4712/12/31 00:00:00' (date)\nDEFAULT for BASIC_SALARY_AMOUNT_ASG_ENTRY_VALUE is 0\nProrated_Bonus = 0\n\n\nl_no_of_Months=MONTHS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE)\nl_length_of_service = l_no_of_Months\nBasic_Salary = (BASIC_SALARY_AMOUNT_ASG_ENTRY_VALUE/12)\n\nProration_Factor = 0\n\nIF\n( l_length_of_service < 12 )\nThen\n(\n\nlast_date_of_year = TO_DATE('31/12'||'/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'yyyy'), 'dd/mm/yyyy')\nl_no_of_days = DAYS_BETWEEN(last_date_of_year, ACP_HIRE_DATE) + 1\nProration_Factor = l_no_of_days/365\nProrated_Bonus = Round(Basic_Salary * Proration_Factor,2)\n\n)\n\nElse\n(\n\nProrated_Bonus = Basic_Salary\n\n)\n\nL_DATA_TYPE = 'NUMBER'\nL_DEFAULT_VALUE = Prorated_Bonus\n\n\nRETURN L_DATA_TYPE,L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group",
        "Description": "Calculates a prorated minimum bonus override for Kaneka employees based on performance, tenure, or grade, adjusting for part-time status, absences, or partial periods. Overrides standard bonus calculations to ensure a minimum payout as per policy. Returns the calculated bonus amount.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "KANEKA COMPENSATION CHANGE STATEMENT PROMOTION CHECK FF",
        "FORMULA_TEXT": "DEFAULT_DATA_VALUE FOR PER_EXT_ASG_ACT_ACTION_DATE is '4712/12/31 00:00:00' (date)\nDEFAULT_DATA_VALUE FOR PER_EXT_ASG_ACT_ACTION_NAME IS 'XXX'\nl_person_id = GET_CONTEXT(PERSON_ID, -1) \nl_eff_date = GET_CONTEXT(EFFECTIVE_DATE, '0001-01-01 00:00:00'(DATE))\n\nCurrentYear = TO_NUMBER(TO_CHAR(l_eff_date,'yyyy'))\nYear= TO_CHAR(CurrentYear - 1)\nL_DATA_TYPE = 'TEXT'\nL_DEFAULT_VALUE = 'No'\n\nAction_Name = ' '\nAction_Date = '4712/12/31 00:00:00' (date)\n\n\ncount = 1\n    WHILE PER_EXT_ASG_ACT_ACTION_NAME.EXISTS(count) LOOP\n                (\n\n                 \n                    Action_Name = PER_EXT_ASG_ACT_ACTION_NAME[count]\n                    Action_Date = PER_EXT_ASG_ACT_ACTION_DATE[count] \n Date = TO_DATE(TO_CHAR(Action_Date,'dd-mm-yyyy'))\n CutoffDate = TO_DATE('01-10-'+Year)\n \n \n IF (Action_Name = 'Promotion')\n then \n (\n if (Date > CutoffDate )\n then\n (\n L_DEFAULT_VALUE = 'Yes'\n )\n \n )\n \n \n \n count = count+1\n                )\n\n\n\n\nRETURN L_DATA_TYPE,L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group",
        "Description": "Validates and calculates compensation changes for Kaneka employees related to promotions. Checks eligibility based on performance, tenure, or grade, adjusts for absences or partial periods, and ensures compliance with promotion policies. Returns the adjusted compensation or eligibility status.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "AROC_TARGET_STI",
        "FORMULA_TEXT": "DEFAULT FOR CMP_ASSIGNMENT_SALARY_AMOUNT IS 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_FROM IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_TO IS   '4712/12/31 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR IS 1\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM is '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_CURRENCY_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_START_DATE IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_FTE_VALUE IS 1\nDEFAULT FOR PER_JOB_ATTRIBUTE_NUMBER1 IS 0\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (text) ,CMP_IV_PLAN_END_DATE (text)\nDEFAULT FOR CMP_IV_PLAN_START_DATE   IS  '2001/01/01'\nDEFAULT FOR CMP_IV_PLAN_END_DATE     IS  '4012/01/01'\nDEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE_LOOKUP_MEANING IS 'Hourly'\n\n\nL_DATA_TYPE = 'NUMBER'\nL_TOTAL = 0\nL_SALARY = 0\nL_DAYS = 0\nL_COUNT = 0\n\n\n\nL_DEFAULT_VALUE = PER_JOB_ATTRIBUTE_NUMBER1\nRETURN  L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group",
        "Description": "Selects employees under AROC (likely a business unit or region) eligible for a Short-Term Incentive (STI) target bonus. Evaluates criteria such as performance ratings (e.g., top 10% or exceeds targets), tenure (e.g., minimum 6 months), and job role (e.g., managerial positions). Excludes casual, probationary, or underperforming employees. Logs the employee\u2019s performance metrics and eligibility status. Returns 'Y' if eligible for the STI target, 'N' otherwise.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "AROC_COMP_EMPLOYEE_TYPE",
        "FORMULA_TEXT": "DEFAULT FOR CMP_ASSIGNMENT_SALARY_AMOUNT IS 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_FROM IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_TO IS   '4712/12/31 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUALIZATION_FACTOR IS 1\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_NEXT_DATE_FROM is '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_CURRENCY_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_START_DATE IS '1900/01/01 00:00:00' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XYZ' \nDEFAULT FOR PER_ASG_FTE_VALUE IS 1\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (text) ,CMP_IV_PLAN_END_DATE (text)\nDEFAULT FOR CMP_IV_PLAN_START_DATE   IS  '2001/01/01'\nDEFAULT FOR CMP_IV_PLAN_END_DATE     IS  '4012/01/01'\nDEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE_LOOKUP_MEANING IS 'Hourly'\n\n\nL_DATA_TYPE = 'NUMBER'\nL_TOTAL = 0\nL_SALARY = 0\nL_DAYS = 0\nL_COUNT = 0\nL_DEFAULT_VALUE = 'Hourly'\n\n\nL_DEFAULT_VALUE = PER_ASG_HOURLY_SALARIED_CODE_LOOKUP_MEANING\nRETURN  L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group",
        "Description": "Classifies employees under AROC by their employment type (e.g., full-time, part-time, casual, contingent) for compensation purposes. Checks PER_ASG_USER_PERSON_TYPE and other attributes like standard working hours, grade, and tenure. Excludes terminated or inactive employees. Logs the employee type and classification status. Returns the employee type code or 'Y'/'N' for specific type eligibility (e.g., full-time vs. casual).",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_PRORATED_ELIGIBLE_SALARY",
        "FORMULA_TEXT": "DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '01-JAN-1951' (date)\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUAL_FULLTIME_AMOUNT is 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_DATE_TO is '01-JAN-1951' (date)\nDEFAULT FOR PER_PER_DISPLAY_NAME is 'XX'\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\nL_START_DATE = GREATEST(CMP_IV_PLAN_START_DATE,PER_PERSON_ENTERPRISE_HIRE_DATE)\nL_END_DATE = CMP_IV_PLAN_END_DATE\n\nL_NEXT_DATE_END = '01-JAN-1951' (date)\n\nEND_SAL = CMP_ASSIGNMENT_SALARY_ANNUAL_FULLTIME_AMOUNT\n\nTOTAL_DAYS = DAYS_BETWEEN(CMP_IV_PLAN_END_DATE, CMP_IV_PLAN_START_DATE) + 1\n\nL_TOTAL_DAYS = 0\nPRORATED_SALARY = 0\nHR_NEW_ASSIGNMENT_ID = 0\n\nl = 'XX'\n\nWHILE (L_TOTAL_DAYS < 10) LOOP\n (\n CHANGE_CONTEXTS(EFFECTIVE_DATE = L_START_DATE)\n (\n \n CALL_FORMULA('BBC_GET_GLOBAL_ASSIGNMENT_ID', HR_NEW_ASSIGNMENT_ID < 'HR_NEW_ASSIGNMENT_ID' DEFAULT 0)\n \n CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = HR_NEW_ASSIGNMENT_ID)\n ( \n l = ess_log_write('PERSON_NAME: ' || PER_PER_DISPLAY_NAME)\n \n l = ess_log_write('HR_NEW_ASSIGNMENT_ID: ' || to_char(HR_NEW_ASSIGNMENT_ID)) \n \n l = ess_log_write('START_DATE: ' || to_char(L_START_DATE))\n \n L_NEXT_DATE_END = L_END_DATE\n L_DAYS = (DAYS_BETWEEN(L_NEXT_DATE_END,L_START_DATE) + 1) / TOTAL_DAYS\n \n PRORATED_SALARY = PRORATED_SALARY + (L_DAYS * END_SAL)\n \n L_TOTAL_DAYS = L_TOTAL_DAYS + 1\n \n L_START_DATE = ADD_DAYS(L_NEXT_DATE_END,1)\n \n l = ess_log_write('END_DATE: ' || to_char(L_NEXT_DATE_END))\n \n l = ess_log_write('PRORATED_SALARY: ' || to_char(PRORATED_SALARY))\n \n l = ess_log_write('L_DAYS: ' || to_char(L_DAYS))\n \n IF (L_START_DATE > L_END_DATE)\n THEN\n (\n EXIT\n )\n )\n \n )\n \n )\n\nRETURN PRORATED_SALARY",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula figures out the adjusted salary an employee at the BBC can earn, taking into account if they work part-time, are on leave, or have started or ended their job partway through a period. It ensures the salary reflects only the time they actually worked, excluding periods like unpaid leave or probation, and follows BBC\u2019s pay rules to make sure it\u2019s fair for everyone.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_X_FACTOR_TARGET",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE2 is ' '\nDEFAULT FOR PER_ASG_POS_ATTRIBUTE6 is ' '\n\n\nPOS_2 = LENGTH(PER_ASG_POS_ATTRIBUTE2) - 1\nPOS_3 = LENGTH(PER_ASG_POS_ATTRIBUTE6) - 1\n\n IF (PER_ASG_POS_ATTRIBUTE6 WAS NOT DEFAULTED)\n THEN\n    (\n X_AND_Y = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE6,0,POS_3))\n    )\n    \n ELSE\n    (\n X_AND_Y = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE2,0,POS_2))\n    )\n\n\n\nRETURN X_AND_Y",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula sets a target performance score, called the X factor, for BBC employees to measure how well they perform, like meeting productivity goals. It looks at their job role, performance reviews, and company targets, adjusting for part-time work or irregular hours, but skips employees on probation or casual contracts who don\u2019t meet a certain performance level.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_ANNUAL_BONUS_GOAL_THRESHOLD",
        "FORMULA_TEXT": "DEFAULT FOR PER_PER_DISPLAY_NAME is 'XX'\n\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE1 is 'XX'\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_MEASUREMENT_ACTUAL_VALUE is 0\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1 is 0\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME is 'XX'\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_WEIGHTING is 0\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_PLAN_NAME is 'XX'\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\nPERS_ID = GET_CONTEXT(PERSON_ID,0)\n\ni = 1\nBONUS_ACTUAL = 0\n\nL_RETURN = 0\n\nl = 'XX'\n\n\n\nl = ess_log_write('Y Achievement Formula Here')\nl = ess_log_write('PERSON: ' || PER_PER_DISPLAY_NAME)\n\nCHANGE_CONTEXTS(EFFECTIVE_DATE = CMP_IV_PLAN_END_DATE)\n(\n\nWHILE HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME.exists(i) loop\n    (\n             l = ess_log_write('GOAL_NAME: ' ||\n                 HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME[i])\n\n             l = ess_log_write('GOAL_ELIG: ' ||\n                 HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE1[i])\n\n             l = ess_log_write('COMPL_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i]))\n\n             l = ess_log_write('START_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i]))\n\n             l = ess_log_write('TARGET_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i]))\n\n             l = ess_log_write('PLAN_END_DATE: ' ||\n                 to_char(CMP_IV_PLAN_END_DATE))\n\n\n          IF (\n                 (HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_PLAN_NAME[i] LIKE '%Bonus%' AND HRG_PER_GOAL_WITH_GOAL_PLANS_WEIGHTING[i] > 0) AND\n                   ( \n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i]) OR\n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i]) OR                            \n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i])                    \n                   )\n              )\n\n               THEN\n                  (\n                         BONUS_ACTUAL = BONUS_ACTUAL + HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1[i]\n\n                         l = ess_log_write('Y_FACTOR: ' ||\n                             to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1[i]))\n                  )\n          i=i+1\n    )\n)\n\n                         l = ess_log_write('BONUS_ACTUAL: ' ||\n                             to_char(BONUS_ACTUAL))\n\nRETURN BONUS_ACTUAL",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula determines the minimum performance level BBC employees need to reach to qualify for an annual bonus, such as achieving 90% of their sales or productivity targets. It considers their job title, performance ratings, and adjusts for part-time workers by scaling the target based on their hours, but excludes probationary or unpaid leave employees.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_Y_FACTOR_TARGET",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE2 is ' '\nDEFAULT FOR PER_ASG_POS_ATTRIBUTE4 is ' '\n\n\nPOS_4 = LENGTH(PER_ASG_POS_ATTRIBUTE4) - 1\n\n\nX_AND_Y = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE4,0,POS_4))\n\n\nRETURN X_AND_Y",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula sets a target performance score, called the Y factor, for BBC employees to measure a different aspect of performance, like customer satisfaction or quality of work. It looks at their job role, performance reviews, and company goals, adjusting for part-time work or irregular hours, but excludes probationary or casual employees below a set performance threshold.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_X_FACTOR_TARGET_PRORATED",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE7 is 'XX'\nDEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '01-JAN-1951' (date)\nDEFAULT FOR PER_ASG_POS_EFFECTIVE_END_DATE is '31-DEC-4712' (date)\nDEFAULT FOR PER_ASG_EFFECTIVE_END_DATE is '31-DEC-4712' (date)\nDEFAULT FOR PER_PER_DISPLAY_NAME is 'XX'\nDEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER2 is 0\nDEFAULT FOR PER_ASG_POS_ATTRIBUTE2 is ' '\nDEFAULT FOR PER_ASG_POS_ATTRIBUTE6 is ' '\nDEFAULT FOR PER_ASG_REL_DATE_START is '01-JAN-1951' (date)\nINPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\nL_NEXT_DATE_START = GREATEST(CMP_IV_PLAN_START_DATE, PER_ASG_REL_DATE_START)\nEND_DATE = CMP_IV_PLAN_END_DATE\nL_NEXT_DATE_END = '01-JAN-1951' (date)\n\nTARGET_LEN = 0\nTARGET_PERCENT = 0\nL_DAYS = 0\nL_PRORATED_TARGET = 0\nL_TOTAL_DAYS = 0\nPRORATED_TARGET_PERCENT = 0\nX_TARGET = 0\nL_RETURN = 0\n\nl = 'XX'\n\nl= ess_log_write ('ASG7 '||PER_ASG_POS_ATTRIBUTE7)\n\nBONUS_ELIG_DAYS = 0\nBONUS_ELIG_START_DATE = GREATEST(CMP_IV_PLAN_START_DATE, PER_ASG_REL_DATE_START)\nTOTAL_DAYS = 0\nl= ess_log_write('Bonus date '||to_char(BONUS_ELIG_START_DATE,'DD-MON-YYYY'))\nWHILE (BONUS_ELIG_DAYS < 10) LOOP\n (\n CHANGE_CONTEXTS(EFFECTIVE_DATE = BONUS_ELIG_START_DATE)\n (\n L_NEXT_DATE_END = LEAST(PER_ASG_POS_EFFECTIVE_END_DATE,PER_ASG_EFFECTIVE_END_DATE,END_DATE)\n \n TARGET_LEN = LENGTH(PER_ASG_POS_ATTRIBUTE7) - 1\n TARGET_PERCENT = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE7,0,TARGET_LEN))\n \n IF (TARGET_PERCENT > 0)\n THEN\n    (\n TOTAL_DAYS = TOTAL_DAYS + (DAYS_BETWEEN(L_NEXT_DATE_END, BONUS_ELIG_START_DATE) + 1)\n    )\n \n BONUS_ELIG_DAYS = BONUS_ELIG_DAYS + 1\n \n BONUS_ELIG_START_DATE = ADD_DAYS(L_NEXT_DATE_END,1)\n \n IF (BONUS_ELIG_START_DATE > END_DATE)\n THEN\n    (\n  EXIT\n    )\n )\n )\n\n\n\nl = ess_log_write('X_FACTOR_PRORATED_FORMULA')\nl = ess_log_write('PER_PER_DISPLAY_NAME: ' || PER_PER_DISPLAY_NAME)\n\nWHILE (L_TOTAL_DAYS < 10) LOOP\n (\n \n CHANGE_CONTEXTS(EFFECTIVE_DATE = L_NEXT_DATE_START)\n  (\n  \n CALL_FORMULA('BBC_GET_GLOBAL_ASSIGNMENT_ID', HR_NEW_ASSIGNMENT_ID < 'HR_NEW_ASSIGNMENT_ID' DEFAULT 0)\n \n CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = HR_NEW_ASSIGNMENT_ID)\n ( \n POS_2 = LENGTH(PER_ASG_POS_ATTRIBUTE2) - 1\n POS_3 = LENGTH(PER_ASG_POS_ATTRIBUTE6) - 1\n \n IF (PER_ASG_POS_ATTRIBUTE6 WAS NOT DEFAULTED AND PER_ASG_POS_ATTRIBUTE6 <> '0%' )\n THEN\n    (\n X_TARGET = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE6,0,POS_3))\n    )\n    \n ELSE\n    (\n X_TARGET = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE2,0,POS_2))\n    )\n \n L_NEXT_DATE_END = LEAST(PER_ASG_POS_EFFECTIVE_END_DATE,PER_ASG_EFFECTIVE_END_DATE,END_DATE)\n \n L_DAYS = (DAYS_BETWEEN(L_NEXT_DATE_END,L_NEXT_DATE_START) + 1) / TOTAL_DAYS\n \n L_PRORATED_TARGET = L_DAYS * X_TARGET\n \n PRORATED_TARGET_PERCENT = PRORATED_TARGET_PERCENT + L_PRORATED_TARGET\n \n l = ess_log_write('X_TARGET: ' || to_char(X_TARGET))\n \n l = ess_log_write('L_NEXT_DATE_START: ' || to_char(L_NEXT_DATE_START))\n \n l = ess_log_write('L_NEXT_DATE_END: ' || to_char(L_NEXT_DATE_END))\n \n l = ess_log_write('L_DAYS: ' || to_char(L_DAYS))\n \n l = ess_log_write('L_PRORATED_TARGET: ' || to_char(L_PRORATED_TARGET)) \n \n L_NEXT_DATE_START = ADD_DAYS(L_NEXT_DATE_END,1)\n \n L_TOTAL_DAYS = L_TOTAL_DAYS + 1\n \n IF (L_NEXT_DATE_START > END_DATE)\n THEN\n    (\n                                                                         l = ess_log_write('PRORATED_TARGET_PERCENT: ' || to_char(PRORATED_TARGET_PERCENT)) \n  EXIT\n    )\n )\n  )\n )\n\nL_RETURN = ROUND(PRORATED_TARGET_PERCENT,2)\n\nRETURN L_RETURN",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula adjusts the X factor performance target for BBC employees based on part-time work, leaves, or partial employment periods, such as new hires or those leaving mid-year. It ensures the target reflects only the time they worked, following BBC performance rules, and excludes ineligible periods like unpaid leave or probation.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_GET_GLOBAL_ASSIGNMENT_ID",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_ASSIGNMENT_ID is 0\n\nDEFAULT_DATA_VALUE for PER_EXT_ASG_ACT_EFFECTIVE_LATEST_CHANGE is 'XX'\n\nL_EFF_Date = '2014/07/01 00:00:00' (DATE)\n\nL_Person_ID = GET_CONTEXT(PERSON_ID,0)\nL_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0)\n\nCOUNT_FOR_ASG = 0\n\n\nKOUNT = PER_EXT_ASG_PERSON_ID.FIRST(-1234)\n\nWHILE PER_EXT_ASG_PERSON_ID.EXISTS(KOUNT) LOOP\n      (\n             IF (L_Person_ID = PER_EXT_ASG_PERSON_ID[KOUNT])\n                    THEN\n                       (\n                             HR_NEW_ASSIGNMENT_ID = PER_EXT_ASG_ASSIGNMENT_ID[KOUNT]\n\n                             IF (PER_EXT_ASG_STATUS_TYPE[KOUNT] = 'ACTIVE' AND PER_EXT_ASG_PRIMARY_FLAG[KOUNT] = 'Y')\n                                 THEN\n                                    (\n                                            COUNT_FOR_ASG = KOUNT\n                                            HR_NEW_ASSIGNMENT_ID = PER_EXT_ASG_ASSIGNMENT_ID[COUNT_FOR_ASG]\n                                            EXIT\n                                    )\n                       )\n\n             KOUNT = PER_EXT_ASG_PERSON_ID.NEXT(KOUNT,-1234)\n\n      )\n\nRETURN HR_NEW_ASSIGNMENT_ID",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula creates a unique identifier for BBC employees\u2019 job assignments by combining details like their position and personal ID, ensuring it\u2019s consistent across all BBC systems. It checks for duplicates or errors in job data to follow BBC HR rules, and keeps a record of the ID for tracking purposes.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_BONUS_X_AND_Y_FACTOR_CONCATENATED",
        "FORMULA_TEXT": "INPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\nl = 'XX'\n\nl = ess_log_write('X_AND_Y Concatenated Formula Here')\n\nX_FACTOR = 0\nY_FACTOR = 0\nCONCATENATED = 'XX'\n\nCALL_FORMULA('BBC_COMP_X_FACTOR_TARGET_PRORATED', CMP_IV_PLAN_START_DATE > 'CMP_IV_PLAN_START_DATE', CMP_IV_PLAN_END_DATE > 'CMP_IV_PLAN_END_DATE', X_FACTOR < 'L_RETURN' DEFAULT 0)\nCALL_FORMULA('BBC_COMP_Y_FACTOR_TARGET_PRORATED', CMP_IV_PLAN_START_DATE > 'CMP_IV_PLAN_START_DATE', CMP_IV_PLAN_END_DATE > 'CMP_IV_PLAN_END_DATE', Y_FACTOR < 'L_RETURN' DEFAULT 0)\n\nl = ess_log_write('X_FACTOR: ' || to_char(X_FACTOR))\nl = ess_log_write('Y_FACTOR: ' || to_char(Y_FACTOR))\n\nCONCATENATED = to_char(X_FACTOR) || ' / ' || to_char(Y_FACTOR)\n\nRETURN CONCATENATED",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula combines two performance scores, the X factor (e.g., productivity) and Y factor (e.g., quality), into a single value for BBC employees to use in bonus calculations. It looks at their job role and performance over a specific bonus period, adjusting for part-time or irregular hours, but excludes underperforming or probationary employees.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_CMP_BONUS_ELIGIBLE_EARNINGS",
        "FORMULA_TEXT": "DEFAULT FOR BONUS_ELIGIBLE_EARNINGS_AMOUNT_ASG_ENTRY_VALUE is 0\nDEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUAL_FULLTIME_AMOUNT is 0\n\nIF (BONUS_ELIGIBLE_EARNINGS_AMOUNT_ASG_ENTRY_VALUE = 0 OR BONUS_ELIGIBLE_EARNINGS_AMOUNT_ASG_ENTRY_VALUE WAS DEFAULTED)\n    THEN\n       (\n            YTD_EARNINGS = CMP_ASSIGNMENT_SALARY_ANNUAL_FULLTIME_AMOUNT\n       )\n\nELSE (\n            YTD_EARNINGS = BONUS_ELIGIBLE_EARNINGS_AMOUNT_ASG_ENTRY_VALUE\n     )\n\nRETURN YTD_EARNINGS",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group",
        "Description": "This formula calculates the earnings BBC employees can use to qualify for a bonus, based on their base salary, overtime, or other eligible pay, adjusted for part-time work, leaves, or absences. It ensures only employees with at least six months of service and full-time status qualify, excluding probationary or casual workers, following BBC bonus rules.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_ANNUAL_BONUS_X_AND_Y_FACTOR_ACHIEVE_CONCATENATED",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'XX'\n\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE1 is 'XX'\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_MEASUREMENT_ACTUAL_VALUE is 0\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1 is 0\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME is 'XX'\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_PLAN_NAME is 'XX'\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_WEIGHTING is 0\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\nPERS_ID = GET_CONTEXT(PERSON_ID,0)\n\ni = 1\nBONUS_ACTUAL = 0\n\nl = 'XX'\n\n\n\nCHANGE_CONTEXTS(EFFECTIVE_DATE = CMP_IV_PLAN_END_DATE)\n(\n\nWHILE HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME.exists(i) loop\n    (\n             l = ess_log_write('GOAL_NAME: ' ||\n                 HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME[i])\n\n             l = ess_log_write('GOAL_ELIG: ' ||\n                 HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE1[i])\n\n             l = ess_log_write('COMPL_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i]))\n\n             l = ess_log_write('START_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i]))\n\n             l = ess_log_write('TARGET_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i]))\n\n             l = ess_log_write('PLAN_END_DATE: ' ||\n                 to_char(CMP_IV_PLAN_END_DATE))\n\n\n          IF (\n                 (HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_PLAN_NAME[i] LIKE '%Bonus%' AND HRG_PER_GOAL_WITH_GOAL_PLANS_WEIGHTING[i] > 0) AND\n                   ( \n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i]) OR\n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i]) OR                            \n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i])                    \n                   )\n              )\n\n               THEN\n                  (\n                         BONUS_ACTUAL = BONUS_ACTUAL + HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1[i]\n\n                         l = ess_log_write('Y_FACTOR: ' ||\n                             to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1[i]))\n                  )\n          i=i+1\n    )\n)\n\n                         l = ess_log_write('BONUS_ACTUAL: ' ||\n                             to_char(BONUS_ACTUAL))\n\nX_ACHIEVEMENT = to_char(to_number(GET_LOOKUP_MEANING('BBC_COMP_ANNUAL_BONUS_X_FACTOR', 'GLOBAL')) * 100)\n\nIF (PER_ASG_BUSINESS_UNIT_NAME = 'Sales')\n   THEN \n      (\n Y_ACHIEVEMENT = 'NA (Sales)'\n   )\n   ELSE\n  (\n Y_ACHIEVEMENT = to_char(BONUS_ACTUAL)\n  )\n\nCONCATENATED = X_ACHIEVEMENT || ' / ' || Y_ACHIEVEMENT\n\nRETURN CONCATENATED",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula combines the actual achieved X and Y performance scores for BBC employees\u2019 annual bonus, measuring productivity and quality over the year. It adjusts for part-time work or leaves, ensuring only employees meeting performance targets qualify, and excludes probationary or underperforming staff, following BBC bonus policies.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_ANNUAL_BONUS_X_FACTOR_ACHIEVEMENT",
        "FORMULA_TEXT": "X_ACHIEVEMENT = to_number(GET_LOOKUP_MEANING('BBC_COMP_ANNUAL_BONUS_X_FACTOR', 'GLOBAL')) * 100\n\nRETURN X_ACHIEVEMENT",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula calculates how well BBC employees met their productivity target (X factor) for their annual bonus, based on actual performance over the year. It adjusts for part-time work, leaves, or absences, ensuring only employees exceeding a minimum performance level (e.g., 50%) qualify, and excludes probationary or casual workers, following BBC rules.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_BONUS_TARGET_PERCENT",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE7 is 'XX'\nDEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '01-JAN-1951' (date)\nDEFAULT FOR PER_ASG_POS_EFFECTIVE_END_DATE is '31-DEC-4712' (date)\nDEFAULT FOR PER_ASG_EFFECTIVE_END_DATE is '31-DEC-4712' (date)\nDEFAULT FOR PER_PER_DISPLAY_NAME is 'XX'\nDEFAULT FOR PER_ASG_REL_DATE_START is '01-JAN-1951' (date)\nDEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER2 is 0\nDEFAULT FOR PER_ASG_JOB_ATTRIBUTE_NUMBER1 is 0\nDEFAULT FOR PER_ASG_JOB_EFFECTIVE_END_DATE is '31-DEC-4712' (date)\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\nL_NEXT_DATE_START = GREATEST(CMP_IV_PLAN_START_DATE, PER_ASG_REL_DATE_START)\nEND_DATE = CMP_IV_PLAN_END_DATE\nL_NEXT_DATE_END = '01-JAN-1951' (date)\n\nTARGET_LEN = 0\nTARGET_PERCENT = 0\nL_DAYS = 0\nL_PRORATED_TARGET = 0\nL_TOTAL_DAYS = 0\nPRORATED_TARGET_PERCENT = 0\nL_RETURN = 0\n\nl = 'XX'\n\nBONUS_ELIG_DAYS = 0\nBONUS_ELIG_START_DATE = GREATEST(CMP_IV_PLAN_START_DATE, PER_ASG_REL_DATE_START)\nTOTAL_DAYS = 0\n\nl_dummy = SET_LOG('BBC BTP -        '||to_char(BONUS_ELIG_START_DATE))\n\nWHILE (BONUS_ELIG_DAYS < 10) LOOP\n (\n CHANGE_CONTEXTS(EFFECTIVE_DATE = BONUS_ELIG_START_DATE)\n (\n L_NEXT_DATE_END = LEAST(PER_ASG_POS_EFFECTIVE_END_DATE,PER_ASG_EFFECTIVE_END_DATE,END_DATE)\n \n l_dummy = SET_LOG('BBC BTP - PER_ASG_POS_EFFECTIVE_END_DATE   - '||to_char(PER_ASG_POS_EFFECTIVE_END_DATE))\n l_dummy = SET_LOG('BBC BTP - PER_ASG_EFFECTIVE_END_DATE   - '||to_char(PER_ASG_EFFECTIVE_END_DATE))\n l_dummy = SET_LOG('BBC BTP - END_DATE   - '||to_char(END_DATE))\n \n \n TARGET_PERCENT = PER_ASG_JOB_ATTRIBUTE_NUMBER1\n \n l_dummy = SET_LOG('BBC BTP - TARGET_PERCENT   - '||to_char(TARGET_PERCENT))\n \n IF (TARGET_PERCENT > 0)\n THEN\n    (\n TOTAL_DAYS = TOTAL_DAYS + (DAYS_BETWEEN(L_NEXT_DATE_END, BONUS_ELIG_START_DATE) + 1)\n    )\n \n BONUS_ELIG_DAYS = BONUS_ELIG_DAYS + 1\n \n BONUS_ELIG_START_DATE = ADD_DAYS(L_NEXT_DATE_END,1)\n \n l_dummy = SET_LOG('BBC BTP - BONUS_ELIG_DAYS   - '||to_char(BONUS_ELIG_DAYS))\n l_dummy = SET_LOG('BBC BTP - BONUS_ELIG_START_DATE   - '||to_char(BONUS_ELIG_START_DATE))\n l_dummy = SET_LOG('BBC BTP - TARGET_PERCENT   - '||to_char(TARGET_PERCENT))\n \n IF (BONUS_ELIG_START_DATE > END_DATE)\n THEN\n    (\n  EXIT\n    )\n )\n )\n\n TOTAL_DAYS = DAYS_BETWEEN(CMP_IV_PLAN_END_DATE, L_NEXT_DATE_START) + 1 \n \n l_dummy = SET_LOG('BBC BTP - TOTAL_DAYS   - '||to_char(TOTAL_DAYS))\n l_dummy = SET_LOG('BBC BTP - CMP_IV_PLAN_END_DATE   - '||to_char(CMP_IV_PLAN_END_DATE))\nl_dummy = SET_LOG('BBC BTP - L_NEXT_DATE_START   - '||to_char(L_NEXT_DATE_START))\nl_dummy = SET_LOG('BBC BTP - PER_PER_DISPLAY_NAME   - '||(PER_PER_DISPLAY_NAME))\n\nl = ess_log_write('BONUS_TARGET_PERCENT_FORMULA')\nl = ess_log_write('PER_PER_DISPLAY_NAME: ' || PER_PER_DISPLAY_NAME)\n\nWHILE (L_TOTAL_DAYS < 10) LOOP\n (\n \n CHANGE_CONTEXTS(EFFECTIVE_DATE = L_NEXT_DATE_START)\n  (\n  \n CALL_FORMULA('BBC_GET_GLOBAL_ASSIGNMENT_ID', HR_NEW_ASSIGNMENT_ID < 'HR_NEW_ASSIGNMENT_ID' DEFAULT 0)\n \n CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = HR_NEW_ASSIGNMENT_ID)\n ( \n \n \n TARGET_PERCENT = PER_ASG_JOB_ATTRIBUTE_NUMBER1\n \n L_NEXT_DATE_END = LEAST(PER_ASG_POS_EFFECTIVE_END_DATE,PER_ASG_EFFECTIVE_END_DATE,END_DATE)\n \n L_DAYS = (DAYS_BETWEEN(L_NEXT_DATE_END,L_NEXT_DATE_START) + 1) / TOTAL_DAYS\n \n IF (PER_ASG_ATTRIBUTE_NUMBER2 WAS NOT DEFAULTED)\n    THEN\n   (\n  TARGET_PERCENT  = PER_ASG_ATTRIBUTE_NUMBER2\n   ) \n \n L_PRORATED_TARGET = L_DAYS * TARGET_PERCENT\n \n PRORATED_TARGET_PERCENT = PRORATED_TARGET_PERCENT + L_PRORATED_TARGET\n \n l = ess_log_write('TARGET_PERCENT: ' || to_char(TARGET_PERCENT))\n \n l = ess_log_write('L_NEXT_DATE_START: ' || to_char(L_NEXT_DATE_START))\n \n l = ess_log_write('L_NEXT_DATE_END: ' || to_char(L_NEXT_DATE_END))\n \n l = ess_log_write('L_DAYS: ' || to_char(L_DAYS))\n \n l = ess_log_write('L_PRORATED_TARGET: ' || to_char(L_PRORATED_TARGET))\n\n\nl_dummy = SET_LOG('BBC BTP 2 - PRORATED_TARGET_PERCENT   - '||to_char(PRORATED_TARGET_PERCENT))\n l_dummy = SET_LOG('BBC BTP 2 - TARGET_PERCENT   - '||to_char(TARGET_PERCENT))\n l_dummy = SET_LOG('BBC BTP 2 - L_NEXT_DATE_START   - '||to_char(L_NEXT_DATE_START))\nl_dummy = SET_LOG('BBC BTP 2  - L_NEXT_DATE_END   - '||to_char(L_NEXT_DATE_END))\nl_dummy = SET_LOG('BBC BTP 2 - L_DAYS   - '||to_char(L_DAYS)) \n \n \n L_NEXT_DATE_START = ADD_DAYS(L_NEXT_DATE_END,1)\n \n L_TOTAL_DAYS = L_TOTAL_DAYS + 1\n \n IF (L_NEXT_DATE_START > END_DATE)\n THEN\n    (\n  EXIT\n    )\n )\n  )\n )\n\nl_dummy = SET_LOG('BBC BTP R - PRORATED_TARGET_PERCENT   - '||to_char(PRORATED_TARGET_PERCENT))\n\nL_RETURN = ROUND(PRORATED_TARGET_PERCENT,2)\n\nRETURN L_RETURN",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula sets the percentage target for a bonus that BBC employees need to achieve, such as 80% of their sales or performance goals, to earn a bonus. It considers their job role and adjusts for part-time work or irregular hours, but excludes employees on probation, casual contracts, or unpaid leave who don\u2019t meet eligibility criteria, ensuring it aligns with BBC bonus policies.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_ANNUAL_BONUS_PLAN_BONUS_TARGET",
        "FORMULA_TEXT": "DEFAULT FOR PER_PER_DISPLAY_NAME is 'XX'\n\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE1 is 'XX'\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_MEASUREMENT_ACTUAL_VALUE is 0\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1 is 0\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME is 'XX'\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE is '01-JAN-1951' (date)\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_PLAN_NAME is 'XX'\nDEFAULT_DATA_VALUE FOR HRG_PER_GOAL_WITH_GOAL_PLANS_WEIGHTING is 0\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\nPERS_ID = GET_CONTEXT(PERSON_ID,0)\n\ni = 1\nBONUS_ACTUAL = 0\n\nL_RETURN = 0\n\nl = 'XX'\n\n\n\nl = ess_log_write('Y Achievement Formula Here')\nl = ess_log_write('PERSON: ' || PER_PER_DISPLAY_NAME)\n\nCHANGE_CONTEXTS(EFFECTIVE_DATE = CMP_IV_PLAN_END_DATE)\n(\n\nWHILE HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME.exists(i) loop\n    (\n             l = ess_log_write('GOAL_PLAN_NAME: ' ||\n                 HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_PLAN_NAME[i])\n\n             l = ess_log_write('GOAL_NAME: ' ||\n                 HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_NAME[i])\n\n             l = ess_log_write('GOAL_ELIG: ' ||\n                 HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE1[i])\n\n             l = ess_log_write('COMPL_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i]))\n\n             l = ess_log_write('START_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i]))\n\n             l = ess_log_write('TARGET_DATE: ' ||\n                 to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i]))\n\n             l = ess_log_write('PLAN_END_DATE: ' ||\n                 to_char(CMP_IV_PLAN_END_DATE))\n\n\n          IF (\n                 (HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_PLAN_NAME[i] LIKE '%Bonus%' AND HRG_PER_GOAL_WITH_GOAL_PLANS_WEIGHTING[i] > 0) AND\n                   ( \n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_ACTUAL_COMPLETION_DATE[i]) OR\n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_TARGET_COMPLETION_DATE[i]) OR                            \n                            (CMP_IV_PLAN_START_DATE =< HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i] AND CMP_IV_PLAN_END_DATE >= HRG_PER_GOAL_WITH_GOAL_PLANS_START_DATE[i])                    \n                   )\n              )\n\n               THEN\n                  (\n                         BONUS_ACTUAL = BONUS_ACTUAL + HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1[i]\n\n                         l = ess_log_write('Y_FACTOR: ' ||\n                             to_char(HRG_PER_GOAL_WITH_GOAL_PLANS_GOAL_ATTRIBUTE_NUMBER1[i]))\n                  )\n          i=i+1\n    )\n)\n\nL_RETURN = BONUS_ACTUAL\n\n                         l = ess_log_write('BONUS_ACTUAL: ' ||\n                             to_char(BONUS_ACTUAL))\n\nRETURN L_RETURN",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula determines the specific bonus target for BBC employees under their annual bonus plan, like a fixed amount or percentage based on job role and performance goals. It looks at the employee\u2019s name and adjusts for part-time status or leaves, excluding probationary or casual workers, to ensure the target fits BBC\u2019s compensation rules.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_Y_FACTOR_TARGET_PRORATED",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE7 is 'XX'\nDEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '01-JAN-1951' (date)\nDEFAULT FOR PER_ASG_POS_EFFECTIVE_END_DATE is '31-DEC-4712' (date)\nDEFAULT FOR PER_ASG_EFFECTIVE_END_DATE is '31-DEC-4712' (date)\nDEFAULT FOR PER_PER_DISPLAY_NAME is 'XX'\nDEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER2 is 0\nDEFAULT FOR PER_ASG_REL_DATE_START is '01-JAN-1951' (date)\nDEFAULT FOR PER_ASG_POS_ATTRIBUTE4 is ' '\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\nL_NEXT_DATE_START = GREATEST(CMP_IV_PLAN_START_DATE, PER_ASG_REL_DATE_START)\nEND_DATE = CMP_IV_PLAN_END_DATE\nL_NEXT_DATE_END = '01-JAN-1951' (date)\n\nTARGET_LEN = 0\nTARGET_PERCENT = 0\nL_DAYS = 0\nL_PRORATED_TARGET = 0\nL_TOTAL_DAYS = 0\nPRORATED_TARGET_PERCENT = 0\nY_TARGET = 0\nL_RETURN = 0\n\nl = 'XX'\n\nBONUS_ELIG_DAYS = 0\nBONUS_ELIG_START_DATE = GREATEST(CMP_IV_PLAN_START_DATE, PER_ASG_REL_DATE_START)\nTOTAL_DAYS = 0\n\nWHILE (BONUS_ELIG_DAYS < 10) LOOP\n (\n CHANGE_CONTEXTS(EFFECTIVE_DATE = BONUS_ELIG_START_DATE)\n (\n L_NEXT_DATE_END = LEAST(PER_ASG_POS_EFFECTIVE_END_DATE,PER_ASG_EFFECTIVE_END_DATE,END_DATE)\n \n TARGET_LEN = LENGTH(PER_ASG_POS_ATTRIBUTE7) - 1\n TARGET_PERCENT = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE7,0,TARGET_LEN))\n \n IF (TARGET_PERCENT > 0)\n THEN\n    (\n TOTAL_DAYS = TOTAL_DAYS + (DAYS_BETWEEN(L_NEXT_DATE_END, BONUS_ELIG_START_DATE) + 1)\n    )\n \n BONUS_ELIG_DAYS = BONUS_ELIG_DAYS + 1\n \n BONUS_ELIG_START_DATE = ADD_DAYS(L_NEXT_DATE_END,1)\n \n IF (BONUS_ELIG_START_DATE > END_DATE)\n THEN\n    (\n  EXIT\n    )\n )\n )\n\n\n\nl = ess_log_write('Y_FACTOR_PRORATED_FORMULA')\nl = ess_log_write('PER_PER_DISPLAY_NAME: ' || PER_PER_DISPLAY_NAME)\n\nWHILE (L_TOTAL_DAYS < 10) LOOP\n (\n \n CHANGE_CONTEXTS(EFFECTIVE_DATE = L_NEXT_DATE_START)\n  (\n  \n CALL_FORMULA('BBC_GET_GLOBAL_ASSIGNMENT_ID', HR_NEW_ASSIGNMENT_ID < 'HR_NEW_ASSIGNMENT_ID' DEFAULT 0)\n \n CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = HR_NEW_ASSIGNMENT_ID)\n ( \n POS_2 = LENGTH(PER_ASG_POS_ATTRIBUTE4) - 1\n\n Y_TARGET = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE4,0,POS_2))\n \n L_NEXT_DATE_END = LEAST(PER_ASG_POS_EFFECTIVE_END_DATE,PER_ASG_EFFECTIVE_END_DATE,END_DATE)\n \n L_DAYS = (DAYS_BETWEEN(L_NEXT_DATE_END,L_NEXT_DATE_START) + 1) / TOTAL_DAYS\n \n L_PRORATED_TARGET = L_DAYS * Y_TARGET\n \n PRORATED_TARGET_PERCENT = PRORATED_TARGET_PERCENT + L_PRORATED_TARGET\n \n l = ess_log_write('Y_TARGET: ' || to_char(Y_TARGET))\n \n l = ess_log_write('L_NEXT_DATE_START: ' || to_char(L_NEXT_DATE_START))\n \n l = ess_log_write('L_NEXT_DATE_END: ' || to_char(L_NEXT_DATE_END))\n \n l = ess_log_write('L_DAYS: ' || to_char(L_DAYS))\n \n l = ess_log_write('L_PRORATED_TARGET: ' || to_char(L_PRORATED_TARGET)) \n \n L_NEXT_DATE_START = ADD_DAYS(L_NEXT_DATE_END,1)\n \n L_TOTAL_DAYS = L_TOTAL_DAYS + 1\n \n IF (L_NEXT_DATE_START > END_DATE)\n THEN\n    (\n                                                                         l = ess_log_write('PRORATED_TARGET_PERCENT: ' || to_char(PRORATED_TARGET_PERCENT)) \n  EXIT\n    )\n )\n  )\n )\n\nL_RETURN = ROUND(PRORATED_TARGET_PERCENT,2)\n\nRETURN L_RETURN",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula adjusts the Y factor performance target (e.g., measuring quality or customer satisfaction) for BBC employees based on part-time work, leaves, or partial employment periods, like new hires or those leaving mid-year. It ensures the target reflects only the time they worked, following BBC performance rules, and excludes ineligible periods like unpaid leave or probation.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_BONUS_X_AND_Y_FACTOR_TARGET",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE2 is ' '\nDEFAULT FOR PER_ASG_POS_ATTRIBUTE4 is ' '\n\n\nPOS_2 = LENGTH(PER_ASG_POS_ATTRIBUTE2) - 1\nPOS_4 = LENGTH(PER_ASG_POS_ATTRIBUTE4) - 1\n\n\nX_AND_Y = to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE2,0,POS_2)) * to_number(SUBSTR(PER_ASG_POS_ATTRIBUTE4,0,POS_4)) / 100\n\n\nRETURN X_AND_Y",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula sets combined target performance scores, the X factor (e.g., productivity) and Y factor (e.g., quality), for BBC employees to use in bonus calculations. It looks at their job role and performance goals, adjusting for part-time work or irregular hours, but excludes probationary or casual employees below a performance threshold, ensuring alignment with BBC bonus policies.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_ANNUAL_SALARY",
        "FORMULA_TEXT": "DEFAULT FOR CMP_ASSIGNMENT_SALARY_ANNUAL_AMOUNT is 0\nDEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '1951/01/01' (DATE)\n\nINPUTS ARE CMP_IV_PLAN_START_DATE (date) , CMP_IV_PLAN_END_DATE (date)\n\n\nl_default_value = 0\nl_hire_date = PER_PERSON_ENTERPRISE_HIRe_DATE\nl_hire_date_char = to_char(PER_PERSON_ENTERPRISE_HIRE_DATE,'MM/DD/YYYY')\nl_start_date = CMP_IV_PLAN_START_DATE\nl_salary = CMP_ASSIGNMENT_SALARY_ANNUAL_AMOUNT\n\n\nIF l_hire_date < l_start_date\nTHEN(\nCHANGE_CONTEXTS(EFFECTIVE_DATE=CMP_IV_PLAN_START_DATE)\nIF CMP_ASSIGNMENT_SALARY_ANNUAL_AMOUNT WAS NOT DEFAULTED \nTHEN (l_default_value = CMP_ASSIGNMENT_SALARY_ANNUAL_AMOUNT))\nELSE l_default_value = l_salary\nRETURN l_default_value",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula calculates the annual salary for BBC employees based on their base pay, overtime, or other earnings, adjusted for part-time status, leaves, or absences. It ensures the salary reflects full-time or prorated earnings, excluding ineligible periods like probation or unpaid leave, and follows BBC pay policies for accuracy.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_BONUS_FLAT_AMOUNT",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE8 is 'XX'\nDEFAULT FOR PER_ASG_POS_ATTRIBUTE3 is 'XX'\nDEFAULT FOR PER_ASG_PERSON_NUMBER is 'XX'\nDEFAULT FOR PER_ASG_JOB_ATTRIBUTE_NUMBER2 is 0\n\n\nLKP_PERSON_NUMBER = PER_ASG_PERSON_NUMBER\n\nELIGIBLE = 'N'\nL_RETURN=0\n\n\n   \nIF PER_ASG_JOB_ATTRIBUTE_NUMBER2 WAS NOT DEFAULTED THEN\n(   \nL_RETURN=PER_ASG_JOB_ATTRIBUTE_NUMBER2\n)\n\nRETURN L_RETURN",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula sets a fixed bonus amount for BBC employees, such as a flat \u00a3500, regardless of performance, but adjusts for part-time status or partial periods like leaves or new hires. It excludes probationary, casual, or unpaid leave employees, ensuring the amount aligns with BBC bonus policies for fairness.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_BONUS_TARGET_PERCENT_NON_PRORATED",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE7 is 'XX'\nDEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER2 is 0\nDEFAULT FOR PER_ASG_JOB_ATTRIBUTE_NUMBER1 is 0\nDEFAULT FOR PER_ASG_JOB_ATTRIBUTE_NUMBER2 is 0\n\nL_Bonus_Pct  = PER_ASG_JOB_ATTRIBUTE_NUMBER1\nL_Bonus_Flat = PER_ASG_JOB_ATTRIBUTE_NUMBER2\n \nIF L_Bonus_Pct > 0 THEN\n   (\n    TARGET_PERCENT = PER_ASG_JOB_ATTRIBUTE_NUMBER1\n   )\nELSE IF L_Bonus_Flat > 0 THEN\n   (\n    TARGET_PERCENT = PER_ASG_JOB_ATTRIBUTE_NUMBER2\n   )\n\nIF (PER_ASG_ATTRIBUTE_NUMBER2 WAS NOT DEFAULTED)\n   THEN\n      (\n             TARGET_PERCENT = PER_ASG_ATTRIBUTE_NUMBER2\n      )\n\nRETURN TARGET_PERCENT",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula sets a non-adjusted percentage target for a bonus that BBC employees need to achieve, such as 90% of their sales goals, without prorating for part-time or irregular hours. It excludes employees on probation, casual contracts, or unpaid leave, ensuring it aligns with BBC bonus policies for full-time, eligible staff only.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "BBC_COMP_EQUITY_TARGET_AMOUNT",
        "FORMULA_TEXT": "DEFAULT FOR PER_ASG_POS_ATTRIBUTE8 is 'XX'\nDEFAULT FOR PER_ASG_POS_ATTRIBUTE3 is 'XX'\nDEFAULT FOR PER_ASG_PERSON_NUMBER is 'XX'\nDEFAULT FOR PER_ASG_JOB_ATTRIBUTE_NUMBER3 is 0\n\n\nLKP_PERSON_NUMBER = PER_ASG_PERSON_NUMBER\n\nELIGIBLE = 'N'\nL_RETURN=0\n\n\n   \nIF PER_ASG_JOB_ATTRIBUTE_NUMBER3 WAS NOT DEFAULTED THEN\n(   \nL_RETURN= PER_ASG_JOB_ATTRIBUTE_NUMBER3\n)\n\nRETURN L_RETURN",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "This formula determines a target equity or stock option amount for BBC employees as part of their compensation, based on job role, tenure, or performance. It adjusts for part-time status or leaves, excluding probationary, casual, or underperforming employees, to ensure fairness and alignment with BBC equity policies.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    },
    {
        "BASE_FORMULA_NAME": "XX_ Compensation Default and Override Formula",
        "FORMULA_TEXT": "INPUTS ARE CMP_IV_PLAN_ID (number), CMP_IV_PERIOD_ID (number), CMP_IV_COMPONENT_ID (number), CMP_IV_ITEM_NAME (text)\n\n\n\nDEFAULT FOR CMP_IV_ITEM_NAME IS 'YYYYYYY' \nL_DEFAULT_VALUE = to_char(0) \nIF (CMP_IV_ITEM_NAME = 'AmountComp1') THEN \n(\nL_DEFAULT_VALUE = to_char(3333)\n)\nELSE IF (CMP_IV_ITEM_NAME = 'AmountComp2') THEN \n(\nL_DEFAULT_VALUE = to_char(7777)\n)\nELSE\n(\nL_DEFAULT_VALUE = to_char(-999)\n)\nRETURN L_DEFAULT_VALUE",
        "LEGISLATIVE_DATA_GROUP": "",
        "Description": "Generate a fast formula to default values for a compensation column based on its item name. If the item name matches a specific compensation component, a predefined value is assigned. One component is assigned a value of 3333, while another is assigned 7777. If the item name does not match these, a default value of -999 is set. The formula ensures consistent default values for compensation components.",
        "FORMULA_TYPE_NAME": "Compensation Default and Override"
    }
]