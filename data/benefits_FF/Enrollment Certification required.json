[
    {
        "BASE_FORMULA_NAME": "XX_ENROLLMENT_CERTIFICATION_REQUIRED",
        "FORMULA_TEXT": "DEFAULT FOR BEN_PLN_NAME IS 'X'\nDEFAULT FOR BEN_OPT_NAME IS 'X'\nDEFAULT FOR BEN_LER_NAME is 'XXX'\nl_return='Y'\nl_emp_enrd='N'\nl_lf_evt_ocrd_dt = GET_CONTEXT(EFFECTIVE_DATE,to_date('1951/01/01 00:00:00') )\nl_self_assign_event = 'N'\nl_first_event = 'N'\nl_ler_name = BEN_LER_NAME\nl_pl_name = BEN_PLN_NAME\nl_opt_name = BEN_OPT_NAME\nIF\n(\nl_ler_name = 'Marriage' OR\nl_ler_name = 'Birth' OR\nl_ler_name = 'Adoption' OR\nl_ler_name = 'Divorce' OR\nl_ler_name = 'Change Beneficiary' OR\nl_ler_name = 'Death of a Dependent'\n) THEN (l_self_assign_event = 'Y')\nl_day_before = add_days(l_lf_evt_ocrd_dt,-1)\nchange_contexts(EFFECTIVE_DATE=l_day_before)\n(\nl_emp_enrd = ben_fn_get_char_value('BEN_PRTT_ENRT_RSLT','ENROLLED',l_pl_name,l_opt_name)\n)\nif ( (l_emp_enrd = 'Y')\nor (l_ler_name like '%System Implementation%')\nor (l_self_assign_event = 'N' )\n) then\n(\nl_return = 'N'\n)\nreturn l_return",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula **determines if an employee should be allowed to self-assign an event for benefits enrollment**:  \n\n- **Certain life events** (Marriage, Birth, Adoption, etc.) qualify for self-assignment.  \n- It **checks if the employee was already enrolled** in the plan the day before the event.  \n- If **already enrolled, the event is system-related, or not a self-assignable event**, it returns **'N'** (not allowed).  \n- Otherwise, it returns **'Y'** (allowed).",
        "FORMULA_TYPE_NAME": "Enrollment Certification Required"
    },
    {
        "BASE_FORMULA_NAME": "XX_ENROLLMENT_CERTIFICATION_REQUIRED",
        "FORMULA_TEXT": "DEFAULT FOR BEN_OPT_NAME is 'ABC'\nDEFAULT_DATA_VALUE FOR BEN_PIL_LF_EVT_OCRD_DT_TN IS '1951/01/01 00:00:00'(date)\nDEFAULT_DATA_VALUE FOR BEN_PIL_PER_IN_LER_STAT_CD_TN IS 'NA'\nl_opt_name = BEN_OPT_NAME\ni=1\nl_cert_reqd ='Y'\nl_eff_date = GET_CONTEXT(EFFECTIVE_DATE, to_date('1951/01/01 00:00:00') )\n/* get the life date for the started event */\nWHILE BEN_PIL_LF_EVT_OCRD_DT_TN.exists(i) LOOP\n( IF (BEN_PIL_PER_IN_LER_STAT_CD_TN[i] ='STRTD') THEN\n(\nl_eff_date = BEN_PIL_LF_EVT_OCRD_DT_TN[i]\nEXIT\n)\ni=i+1\n) /* end while */\n/* get the enrolled option in the past life event*/\nCHANGE_CONTEXTS(EFFECTIVE_DATE=add_days(l_eff_date,-1))\n(\nl_opt1_prev = ben_fn_get_char_value('BEN_PRTT_ENRT_RSLT','ENROLLED','Supplemental Employee Life','1X Annual Salary')\nl_opt2_prev = ben_fn_get_char_value('BEN_PRTT_ENRT_RSLT','ENROLLED','Supplemental Employee Life','2X Annual Salary')\nl_opt3_prev = ben_fn_get_char_value('BEN_PRTT_ENRT_RSLT','ENROLLED','Supplemental Employee Life','3X Annual Salary')\nl_opt4_prev = ben_fn_get_char_value('BEN_PRTT_ENRT_RSLT','ENROLLED','Supplemental Employee Life','4X Annual Salary')\nl_opt5_prev = ben_fn_get_char_value('BEN_PRTT_ENRT_RSLT','ENROLLED','Supplemental Employee Life','5X Annual Salary')\n) /* end change contexts*/\nif (l_opt_name = 'Waive') then\n(\nl_cert_reqd='N'\n)\nelse if ( l_opt_name = '5X Annual Salary'\nand l_opt5_prev = 'Y'\n) then\n(\nl_cert_reqd='N'\n)\nelse if ( l_opt_name = '4X Annual Salary'\nand ( l_opt5_prev = 'Y'\nOR l_opt4_prev = 'Y'\n)\n) then\n(\nl_cert_reqd='N'\n)\nelse if ( l_opt_name = '3X Annual Salary'\nand ( l_opt5_prev = 'Y'\nOR l_opt4_prev = 'Y'\nOR l_opt3_prev = 'Y'\n)\n) then\n(\nl_cert_reqd='N'\n)\nelse if ( l_opt_name = '2X Annual Salary'\nand ( l_opt5_prev = 'Y'\nOR l_opt4_prev = 'Y'\nOR l_opt3_prev = 'Y'\nOR l_opt2_prev = 'Y'\n)\n) then\n(\nl_cert_reqd='N'\n)\nelse if ( l_opt_name = '1X Annual Salary'\nand ( l_opt5_prev = 'Y'\nOR l_opt4_prev = 'Y'\nOR l_opt3_prev = 'Y'\nOR l_opt2_prev = 'Y'\nOR l_opt1_prev = 'Y'\n)\n) then\n(\nl_cert_reqd='N'\n)\nRETURN l_cert_reqd",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula **determines if certification is required for selecting a Supplemental Employee Life insurance option**:  \n\n- It checks **if the employee has previously enrolled** in the selected coverage level.  \n- If they **waive coverage**, no certification is required.  \n- If they **are increasing coverage** but had a higher or the same level before, no certification is required.  \n- Otherwise, certification **is required** for new or increased enrollments.",
        "FORMULA_TYPE_NAME": "Enrollment Certification Required"
    },
    {
        "BASE_FORMULA_NAME": "XX_DEFAULT_TO_ASSIGN_PENDING_ACTION",
        "FORMULA_TEXT": "DEFAULT_DATA_VALUE FOR BEN_EXT_RSLT_BNFT_AMT is 0\nDEFAULT_DATA_VALUE FOR BEN_EXT_RSLT_PER_IN_LER_ID is 0\nDEFAULT_DATA_VALUE FOR BEN_EXT_RSLT_PRTT_ENRT_RSLT_ID is 0\nDEFAULT_DATA_VALUE FOR BEN_EXT_RSLT_PL_NAME is 'NA'\nl_eff_dt = GET_CONTEXT(EFFECTIVE_DATE,'1900/01/01 00:00:00'(date))\nl_bnft_amt_num_o=0\nl_bnft_amt_num_n=0\nl_pil_o=0\nl_pil_n=0\nl_prtt_o=0\nl_prtt_n=0\nl_pndg_actn='CLNL'\nl_debug='NA'\n/* main() */\n/* get the old benefit amount and pil */\nl_eff_dt=add_days(l_eff_dt,-1)\nl_debug=ESS_LOG_WRITE(' l_eff_dt: '||to_char(l_eff_dt))\nl_debug=ESS_LOG_WRITE(' l_iv_pil: '||to_char(l_iv_pil))\ni=1\nCHANGE_CONTEXTS(EFFECTIVE_DATE=l_eff_dt)\n(\nwhile (BEN_EXT_RSLT_PL_NAME.exists(i) )\nloop\n(\nif (BEN_EXT_RSLT_PL_NAME[i] = 'STU3_Stuller Supplemental Life - Employee')\nthen\n(\nl_bnft_amt_num_o=BEN_EXT_RSLT_BNFT_AMT[i]\nl_pil_o=BEN_EXT_RSLT_PER_IN_LER_ID[i]\nl_prtt_o=BEN_EXT_RSLT_PRTT_ENRT_RSLT_ID[i]\n) /* end if */\ni=i+1 /* increment loop counter */\n) /* end loop */\n) /* end change contexts*/\nl_debug=ESS_LOG_WRITE(' l_bnft_amt_num_o: '||to_char(l_bnft_amt_num_o))\nl_debug=ESS_LOG_WRITE(' l_pil_o: '||to_char(l_pil_o))\nl_debug=ESS_LOG_WRITE(' l_prtt_o: '||to_char(l_prtt_o))\n/* get the new benefit amount and pil */\nl_eff_dt=add_days(l_eff_dt,90)\nl_debug=ESS_LOG_WRITE(' l_eff_dt: '||to_char(l_eff_dt))\ni=1\nCHANGE_CONTEXTS(EFFECTIVE_DATE=l_eff_dt)\n(\nwhile (BEN_EXT_RSLT_PL_NAME.exists(i) )\nloop\n(\nif (BEN_EXT_RSLT_PL_NAME[i] = 'STU3_Stuller Supplemental Life - Employee')\nthen\n(\nl_bnft_amt_num_n=BEN_EXT_RSLT_BNFT_AMT[i]\nl_pil_n=BEN_EXT_RSLT_PER_IN_LER_ID[i]\nl_prtt_n=BEN_EXT_RSLT_PRTT_ENRT_RSLT_ID[i]\n) /* end if */\ni=i+1 /* increment loop counter */\n) /* end loop */\n) /* end change contexts*/\nl_debug=ESS_LOG_WRITE(' l_bnft_amt_num_n: '||to_char(l_bnft_amt_num_n))\nl_debug=ESS_LOG_WRITE(' l_pil_n: '||to_char(l_pil_n))\nl_debug=ESS_LOG_WRITE(' l_prtt_n: '||to_char(l_prtt_n))\n/* conditional logic */\nif ( (l_bnft_amt_num_o > 150000)\nand (l_bnft_amt_num_n > 150000)\n) then\n(\nif ( l_pil_o <> l_iv_pil ) then\n(l_pndg_actn = 'CLNL')\nelse\n(l_pndg_actn ='CSENLNNL')\n)\nelse if ( (l_bnft_amt_num_o < 150000)\nand (l_bnft_amt_num_n > 150000)\n) then\n(\nl_pndg_actn = 'CLNL'\n)\nreturn l_pndg_actn",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula evaluates pending actions based on benefit amounts for the \"STU3_Stuller Supplemental Life - Employee\" plan by comparing past and future values.",
        "FORMULA_TYPE_NAME": "Default to Assign Pending Action"
    },
    {
        "BASE_FORMULA_NAME": "XX_DEFAULT_TO_ASSIGN_PENDING_ACTION",
        "FORMULA_TEXT": "DEFAULT_DATA_VALUE FOR BEN_EPE_ELIG_PER_ELCTBL_CHC_ID_NN is 0\nDEFAULT_DATA_VALUE FOR BEN_EPE_PL_NAME_TN is 'NA'\nDEFAULT_DATA_VALUE FOR BEN_EPE_OPT_NAME_TN is 'NA'\n/* initialization */\nL_ELIG_PER_ELCTBL_CHC_ID=345\ni=1\n/*main()*/\nwhile (BEN_EPE_ELIG_PER_ELCTBL_CHC_ID_NN.exists(i)) loop\n(\nif ( (BEN_EPE_PL_NAME_TN[i] = 'MMO_SUPP_LIFE_P')\nand (BEN_EPE_OPT_NAME_TN[i] = 'MMO_GUARANTEE_ISSUE' )\n)\nthen\n( L_ELIG_PER_ELCTBL_CHC_ID = BEN_EPE_ELIG_PER_ELCTBL_CHC_ID_NN[i]\n)\n/* increment the counter */\ni=i+1\n) /* end loop */\nreturn L_ELIG_PER_ELCTBL_CHC_ID",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula determines the **eligible choice ID** for employees selecting the \"MMO_SUPP_LIFE_P\" plan with the \"MMO_GUARANTEE_ISSUE\" option. It loops through available choices and updates the eligible choice ID when a match is found. If no match exists, the default value remains unchanged. This is used to identify and assign the correct election choice for supplemental life insurance.",
        "FORMULA_TYPE_NAME": "Default to Assign Pending Action"
    },
    {
        "BASE_FORMULA_NAME": "XX_DEFAULT_TO_ASSIGN_PENDING_ACTION",
        "FORMULA_TEXT": "DEFAULT FOR BEN_PIL_LF_EVT_OCRD_DT is '1951/01/01 00:00:00'(date)\nDEFAULT_DATA_VALUE FOR BEN_EPE_ELIG_PER_ELCTBL_CHC_ID_NN is 0\nDEFAULT_DATA_VALUE FOR BEN_EPE_PL_NAME_TN is 'WAIVE'\nDEFAULT_DATA_VALUE FOR BEN_EPE_CRNTLY_ENRD_FLAG_TN is 'N'\nDEFAULT_DATA_VALUE FOR BEN_EPE_CVRD_FLAG_TN is 'N'\nDEFAULT_DATA_VALUE FOR BEN_EPE_INTERIM_FLAG_TN is 'N'\nDEFAULT_DATA_VALUE FOR BEN_EPE_OPT_NAME_TN is 'NA'\nDEFAULT_DATA_VALUE FOR BEN_EPE_ELCTBL_FLAG_TN is 'NA'\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE is '1951/01/01 00:00:00'(date)\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_END_DATE is '1951/01/01 00:00:00'(date)\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_TYPE is 'NA'\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_STATUS_TYPE is 'NA'\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_PRIMARY_FLAG is 'NA'\nDEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_LATEST_CHANGE is 'NA'\nDEFAULT FOR l_sal_amount is 0\nDEFAULT FOR l_sal_fctr is 0\nDEFAULT FOR l_max is 0\nDEFAULT FOR l_enrld_flag is 'Y'\nL_MN_CVG_RQD_AMT = 0 /*Minimum coverage amount*/\nL_MX_CVG_ALWD_AMT = 150000 /*Maximum coverage amount*/\nL_MX_CVG_INCR_ALWD_AMT = 50000 /*Maximum coverage increment*/\nL_MX_CVG_INCR_WCF_ALWD_AMT = 500000 /*Maximum coverage increment with certification*/\nL_MX_CVG_WCFN_AMT = 500000 /*Maximum coverage amount with certification*/\nl_prev_enrld_amt = '0'\nl_prev_enrld_amt1 = '0'\nl_prev_enrld_amt_num1 = 0\nl_curr_enrld_amt = '0'\nl_curr_enrld_amt_num1 = 0\nl_new_effective_date = '1951/01/01 00:00:00'(date)\nl_actual_eff_date = '1951/01/01 00:00:00'(date)\nl_asg_id=1234\nl_sal_amount=0\nl_sal_fctr=0\nl_max = 500000\nl_sal_amount1=BEN_FN_GET_CHAR_VALUE(\n'CMP_SALARY'\n,'SALARY_AMOUNT'\n)\nl_sal_fctr1=BEN_FN_GET_CHAR_VALUE(\n'CMP_SALARY'\n,'SALARY_ANNUALIZATION_FACTOR'\n)\nIF l_sal_amount1 <> 'NO_DATA_FOUND' AND l_sal_amount1 <> ' ' AND l_sal_amount1 <> 'N'\nTHEN\n(\nl_sal_amount=to_num(l_sal_amount1)\n)\nELSE\n(\nl_sal_amount = 0\n)\nIF l_sal_fctr1 <> 'NO_DATA_FOUND' AND l_sal_fctr1 <> ' ' AND l_sal_fctr1 <> 'N'\nTHEN\n(\nl_sal_fctr=to_num(l_sal_fctr1)\n)\nELSE\n(\nl_sal_fctr=0\n)\nIF ( 5 * l_sal_amount * l_sal_fctr ) > 500000\nTHEN\n(\nL_MX_CVG_ALWD_AMT = 500000\n)\nELSE\n(\nL_MX_CVG_ALWD_AMT = trunc((5*l_sal_amount * l_sal_fctr)/10000)*10000\n)\nl_actual_eff_date = GET_CONTEXT(EFFECTIVE_DATE, to_date('1951/01/01 00:00:00'))\nl_new_effective_date = ADD_DAYS (l_actual_eff_date, - 1)\nl_log_data = ESS_LOG_WRITE ('Start of the formula after initial ')\nret = HR_TRACE('Start Debugging AGIOS_SUPP_EMP_LIFE_INTERIM_LIMIT_FF')\n/* get Previous Coverage Amount - Change the contexts since coverage is starting as of the processing end\ndate */\nCHANGE_CONTEXTS(EFFECTIVE_DATE = l_new_effective_date )\n(\nl_enrld_amt1 = ben_fn_get_char_value( 'BEN_PRTT_ENRT_RSLT'\n,'BNFT_AMT'\n,'Supplemental Employee Life'\n,'Elected'\n)\nl_enrld_flag = ben_fn_get_char_value(\n'BEN_PRTT_ENRT_RSLT'\n,'ENROLLED'\n,'Supplemental Employee Life'\n,'Elected')\nl_log_data = ESS_LOG_WRITE (' Previous Supp Life Insured Coverage Amount :' ||l_enrld_amt1)\nIF (l_enrld_amt1 <> ' ' AND l_enrld_amt1 <> 'NO_DATA_FOUND' AND l_enrld_amt1 <> 'N')\nTHEN\n(\nl_prev_enrld_amt_num1 = to_number(l_enrld_amt1)\n)\nELSE\n(\nl_prev_enrld_amt_num1 = 0\n)\n)\nl_log_data = ESS_LOG_WRITE (' Previous Supp Life Insured Coverage Amount l_prev_enrld_amt_num1: ' ||to_char(l_prev_enrld_amt_num1))\nl_new_effective_date = GET_CONTEXT(EFFECTIVE_DATE,to_date('1951/01/01 00:00:00'))\nCHANGE_CONTEXTS(EFFECTIVE_DATE = ADD_DAYS(l_new_effective_date,120))\n(\nl_curr_enrld_amt1 = ben_fn_get_char_value( 'BEN_PRTT_ENRT_RSLT'\n,'BNFT_AMT'\n,'Supplemental Employee Life'\n,'Elected'\n)\nl_enrld_flag = ben_fn_get_char_value(\n'BEN_PRTT_ENRT_RSLT'\n,'ENROLLED'\n,'Supplemental Employee Life'\n,'Elected')\nl_log_data = ESS_LOG_WRITE (' Current Supp Life Insured Coverage Amount :' ||l_curr_enrld_amt1)\nIF (l_curr_enrld_amt1 <> ' ' AND l_curr_enrld_amt1 <> 'NO_DATA_FOUND' AND l_curr_enrld_amt1 <> 'N')\nTHEN\n(\nl_curr_enrld_amt_num1 = to_number(l_prev_enrld_amt1)\n)\nELSE\n(\nl_curr_enrld_amt_num1 = 0\n)\n)\n/* reasign 1 to i */\ni=1\nl_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1)\nCHANGE_CONTEXTS(HR_ASSIGNMENT_ID=l_asg_id)\n(\nwhile (BEN_EPE_ELIG_PER_ELCTBL_CHC_ID_NN.exists(i)) loop\n(\nif ( (BEN_EPE_PL_NAME_TN[i]='Supplemental Employee Life')\nand (BEN_EPE_OPT_NAME_TN[i]='Elected')\nand (BEN_EPE_ELCTBL_FLAG_TN[i]='Y')\n) then\n(\n/* this will hold the choice id of the (elected) option */\nl_elig_per_elctbl_chc_id = BEN_EPE_ELIG_PER_ELCTBL_CHC_ID_NN[i]\n)\ni=i+1\n)\n)\nif (l_curr_enrld_amt_num1 > 150000)\nthen\n(\nif (l_prev_enrld_amt_num1 < 100000) then\n(\nl_b_bnft_amt = 150000\n)\nelse if (l_prev_enrld_amt_num1 > 100000) then\n(\nl_b_bnft_amt = l_prev_enrld_amt_num1\n)\n)\nelse if (l_curr_enrld_amt_num1<150000) then\n(\nif (l_prev_enrld_amt_num1>100000) then\n(\nl_b_bnft_amt = l_curr_enrld_amt_num1\n)\nelse if (l_prev_enrld_amt_num1<100000) then\n(\nl_b_bnft_amt = 150000\n)\n)\nreturn l_b_bnft_amt,l_elig_per_elctbl_chc_id",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula calculates the **maximum allowable supplemental life insurance coverage** for an employee based on their salary and enrollment history. It first retrieves the employee's salary and annualization factor to determine the coverage cap (up to $500,000). Then, it checks the employee's **previous and current enrolled coverage amounts** over different time periods. If the new elected amount exceeds $150,000, the formula ensures that at least $150,000 or the previously enrolled amount is retained. Additionally, it identifies the **eligible choice ID** for the employee\u2019s elected option.",
        "FORMULA_TYPE_NAME": "Default to Assign Pending Action"
    }
]