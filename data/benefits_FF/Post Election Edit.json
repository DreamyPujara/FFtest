[
    {
        "BASE_FORMULA_NAME": "XX_POST_ELECTION_EDIT",
        "FORMULA_TEXT": "DEFAULT FOR l_enrld is 'Y'\nDEFAULT FOR l_dpnt_enrld1 is 'Y'\nDEFAULT FOR l_dpnt_enrld2 is 'Y'\nSUCCESSFUL = 'Y'\nERROR_MESSAGE=' '\nl_enrld = ben_fn_get_char_value(\n'BEN_PRTT_ENRT_RSLT'\n,'ENROLLED'\n,'Spousal Supplemental'\n,'NA'\n)\nl_dpnt_enrld1 = ben_fn_get_char_value(\n'BEN_PRTT_ENRT_RSLT'\n,'ENROLLED'\n,'Basic_Life'\n,'Lifex1'\n)\nl_dpnt_enrld2 = ben_fn_get_char_value(\n'BEN_PRTT_ENRT_RSLT'\n,'ENROLLED'\n,'Basic_Life'\n,'Lifex2'\n)\nIf ( l_enrld = 'Y' and l_dpnt_enrld1='N' and l_dpnt_enrld2='N' ) then (SUCCESSFUL='N'\nERROR_MESSAGE = 'Election to any option within plan Spousal Supplemental, you should also enroll in plan Basic_Life.')\nreturn SUCCESSFUL,ERROR_MESSAGE",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula checks if an employee has enrolled in the **\"Spousal Supplemental\"** plan. If they have, but are **not enrolled** in either **\"Basic Life - Lifex1\"** or **\"Basic Life - Lifex2\"**, it sets the enrollment as **unsuccessful** and returns an **error message** stating that enrollment in \"Basic Life\" is required. Otherwise, the enrollment is considered successful.",
        "FORMULA_TYPE_NAME": "Post Election Edit"
    },
    {
        "BASE_FORMULA_NAME": "XX_POST_ELECTION_EDIT",
        "FORMULA_TEXT": "DEFAULT_DATA_VALUE for BEN_PEN_PL_NAME_TN is 'My-Default'\nDEFAULT FOR l_enrolled is 'N'\nDEFAULT FOR l_dpnt_enrolled is 'N'\nDEFAULT FOR i is 1\nDEFAULT FOR SUCCESSFUL is 'Y'\nDEFAULT FOR ERROR_MESSAGE is ' '\n/*---------------------------------*/\nSUCCESSFUL='Y'\nERROR_MESSAGE=' '\ni=1\nl_enrolled='N'\nl_dpnt_enrolled='N'\nwhile BEN_PEN_PL_NAME_TN.exists(i) loop\n(\nif BEN_PEN_PL_NAME_TN[i]='PPO (Out of Area)' then (l_enrolled='Y')\nif BEN_PEN_PL_NAME_TN[i]='Aetna PPO' then\n(l_dpnt_enrolled='Y')\ni=i+1\n)\nif l_enrolled='Y' and l_dpnt_enrolled='N' then\n(SUCCESSFUL='N'\nERROR_MESSAGE='Election to PPO (Out of Area) requires enrt in Aetna PPO.'\n)\nreturn SUCCESSFUL,ERROR_MESSAGE",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula checks if an employee has enrolled in the **\"PPO (Out of Area)\"** plan. If they have, but **have not enrolled** in the **\"Aetna PPO\"** plan, the enrollment is marked as **unsuccessful**, and an **error message** is returned stating that enrollment in \"Aetna PPO\" is required. Otherwise, the enrollment is considered successful.",
        "FORMULA_TYPE_NAME": "Post Election Edit"
    },
    {
        "BASE_FORMULA_NAME": "XX_POST_ELECTION_EDIT",
        "FORMULA_TEXT": "DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'NA'\nDEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS -99\nDEFAULT_DATA_VALUE FOR BEN_EXT_RSLT_PL_NAME IS 'NA'\nl_couple_flag = 'N'\nl_sp_dp_id = 0\nSUCCESSFUL = 'Y'\nERROR_MESSAGE = ' '\ni =1\nWHILE (PER_PER_CONT_REL_CONTACT_TYPE.EXISTS(i))\nLOOP\n(\nIF ((PER_PER_CONT_REL_CONTACT_TYPE[i] = 'S') OR (PER_PER_CONT_REL_CONTACT_TYPE[i] = 'DP')) THEN\n(\nl_sp_dp_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[i]\n)\ni = i + 1\n)\ni = 1\nCHANGE_CONTEXTS(PERSON_ID = l_sp_dp_id)\n(\nWHILE(BEN_EXT_RSLT_PL_NAME.EXISTS(i))\nLOOP\n(\nIF ( BEN_EXT_RSLT_PL_NAME[i] = 'Dependent Life Insurance - Spouse/DP' )\nTHEN\n( l_couple_flag = 'Y'\n)\n/* the dependent has enrolled the participant */\ni = i + 1\n)\n)\nIF (l_couple_flag = 'Y')\nTHEN\n(\nSUCCESSFUL = 'N'\nERROR_MESSAGE = 'You cannot enroll in Life Insurance as you are already covered in Dependent Life Insurance - Spouse/DP under your spouse'\n)\nRETURN SUCCESSFUL, ERROR_MESSAGE",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula checks if an employee's **spouse or domestic partner** has already enrolled them in **\"Dependent Life Insurance - Spouse/DP.\"** If they have, the employee is **not allowed** to enroll in Life Insurance, and an **error message** is returned stating that they are already covered under their spouse's plan. Otherwise, the enrollment is considered successful.",
        "FORMULA_TYPE_NAME": "Post Election Edit"
    },
    {
        "BASE_FORMULA_NAME": "XX_POST_ELECTION_EDIT",
        "FORMULA_TEXT": "DEFAULT_DATA_VALUE for BEN_PEN_PL_NAME_TN is 'My-Default'\nDEFAULT_DATA_VALUE for BEN_PEN_OPT_NAME_TN is 'My-Default'\nDEFAULT FOR BEN_PIL_LF_EVT_OCRD_DT is '1950/01/01 00:00:00'(date)\nDEFAULT FOR BEN_LER_NAME is 'abc'\nSUCCESSFUL='N'\nERROR_MESSAGE=' '\ni=1\nl_plan1_enrld='N'\nl_plan2_enrld='N'\nl_new_effective_date = GET_CONTEXT(EFFECTIVE_DATE,to_date('1951/01/0100:00:00') )\nl_person_id = GET_CONTEXT(PERSON_ID,0 )\nl_last_day = '1950/01/01 00:00:00'(date)\nl_ler_name = BEN_LER_NAME\nl_lf_evt_ocrd_dt = BEN_PIL_LF_EVT_OCRD_DT\nl_new_effective_date = l_lf_evt_ocrd_dt\nl_log_data = ESS_LOG_WRITE( 'Effective Date = '||to_char(l_new_effective_date))\nERROR_MESSAGE = to_text(l_new_effective_date)||' : '\nCHANGE_CONTEXTS(EFFECTIVE_DATE = l_new_effective_date)\n(\nwhile BEN_PEN_PL_NAME_TN.exists(i) loop\n(\nif (BEN_PEN_PL_NAME_TN[i] = 'Voluntary Child Life' ) then\n(\nl_plan1_enrld= 'Y'\nERROR_MESSAGE = 'Vol Life : '\nl_log_data = ESS_LOG_WRITE('Employee has elected Voluntary Spouse Life')\n)\nif (BEN_PEN_PL_NAME_TN[i] = 'Supplemental Employee Life') then\n(\nl_plan2_enrld= 'Y'\nERROR_MESSAGE = ERROR_MESSAGE||'Supp Life : '\nl_log_data = ESS_LOG_WRITE('Employee has elected Supplemental Employee Life')\n)\ni=i+1\n)\n)\nIF (l_plan1_enrld = 'Y') THEN\n(\nl_log_data = ESS_LOG_WRITE('Employee has elected Voluntary Child Life')\nIF (l_plan2_enrld= 'Y') THEN\n(\nl_log_data = ESS_LOG_WRITE('Employee has elected Supplemental Employee Life')\nSUCCESSFUL='Y'\nreturn SUCCESSFUL,ERROR_MESSAGE\n)\nELSE\n(\nl_log_data = ESS_LOG_WRITE('Employee has NOT elected Supplemental Employee Life')\nSUCCESSFUL='N'\nERROR_MESSAGE = ERROR_MESSAGE||'You cannot elected Voluntary Child Life without electing Supplemental Employee Life as well '\nreturn SUCCESSFUL,ERROR_MESSAGE\n)\n)\nELSE\n(\nSUCCESSFUL='Y'\nreturn SUCCESSFUL,ERROR_MESSAGE\n)",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula ensures that an employee **cannot enroll** in **\"Voluntary Child Life\"** unless they also enroll in **\"Supplemental Employee Life.\"** If both plans are selected, the enrollment is successful. If only **\"Voluntary Child Life\"** is selected, the formula returns an **error message** stating that **\"Supplemental Employee Life\"** must also be chosen. If neither plan is selected, the enrollment is successful without any issues.",
        "FORMULA_TYPE_NAME": "Post Election Edit"
    },
    {
        "BASE_FORMULA_NAME": "XX_POST_ELECTION_EDIT",
        "FORMULA_TEXT": "DEFAULT_DATA_VALUE for BEN_PEN_PL_NAME_TN is 'My-Default'\nDEFAULT_DATA_VALUE for BEN_PEN_OPT_NAME_TN is 'My-Default'\nDEFAULT_DATA_VALUE for BEN_EXT_DPNT_PL_NAME IS 'XYZ'\nDEFAULT_DATA_VALUE for BEN_EXT_BNF_OPT_NAME IS 'ABC'\nDEFAULT FOR BEN_PIL_LF_EVT_OCRD_DT IS '1950/01/01 12:00:00' (date)\nSUCCESSFUL='Y'\nERROR_MESSAGE=' '\ni=1\nj=1\nl_family = 'N'\nl_count = 1\nl_lf_evt_ocrd_dt = BEN_PIL_LF_EVT_OCRD_DT\nl_phase = BEN_GET_PROCESS_NAME()\n/* skip the rule when loading participant enrollments through HDL */\nif (l_phase != 'PARTICIPANT_ENROLLMENT')\nthen\n(\nCHANGE_CONTEXTS(EFFECTIVE_DATE = l_lf_evt_ocrd_dt)\n(\nwhile BEN_PEN_PL_NAME_TN.exists(i) loop\n(\nif BEN_PEN_PL_NAME_TN[i] like 'Private Health%' then\n(\nif BEN_PEN_OPT_NAME_TN[i] like 'Couple%' then\n(\nl_family = 'Y'\nEXIT\n)\n)\ni=i+1\n) /* end while */\nIF l_family = 'Y' THEN\n(\nj=1\nwhile BEN_EXT_DPNT_PL_NAME.exists(j)\nloop\n(\nif ( BEN_EXT_DPNT_PL_NAME[i] like 'Private Health%' and BEN_EXT_BNF_OPT_NAME[i] like 'Couple%' )\nthen\n(\nl_plan =BEN_EXT_DPNT_PL_NAME[i]\nl_option=BEN_EXT_BNF_OPT_NAME[i]\nl_count = l_count + 1\nexit\n)\nj=j+1\n) /* end loop for checking for dependents */\n) /* if l_famlily */\n) /* end change contexts */\nIF l_family = 'Y' and l_count=1 THEN\n(\nSUCCESSFUL = 'N'\nERROR_MESSAGE='Designate at least one dependent in your Healthcare plans' ||to_char(i)\n)\n) /* end l_phase */\nRETURN SUCCESSFUL, ERROR_MESSAGE",
        "LEGISLATIVE_DATA_GROUP": "XX",
        "Description": "This formula ensures that if an employee selects a **\"Private Health\"** plan with a **\"Couple\"** option, they must also enroll at least one dependent in a corresponding **dependent healthcare plan.** If the employee selects the **\"Couple\"** option but does not designate a dependent, the formula returns an **error message** prompting them to add one. The rule is **skipped** when processing enrollments via **HDL (HCM Data Loader).**",
        "FORMULA_TYPE_NAME": "Post Election Edit"
    }
]