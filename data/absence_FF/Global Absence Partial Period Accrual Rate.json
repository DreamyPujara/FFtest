[
    {
        "FORMULA_NAME": "HE_HRX_DE_ANNUAL_LEAVE_PRARTIAL",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_NOTIFIED_TERMINATION_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_NOTIFIED_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_TRM_NORMAL_HOURS IS 0 DEFAULT FOR PER_PER_DATE_OF_BIRTH IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_DATE_PROBATION_END IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_INFORMATION_NUMBER2 IS 0 DEFAULT FOR PER_ASG_INFORMATION4 IS ' ' DEFAULT FOR PER_ASG_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_INFORMATION_NUMBER3 IS 0 DEFAULT FOR PER_ASG_INFORMATION5 IS ' ' DEFAULT FOR PER_ASG_INFORMATION6 IS ' ' DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER3 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION1 IS ' ' DEFAULT FOR ANC_ABS_PLN_INFORMATION2 IS ' ' DEFAULT FOR PER_PERSON_DISABILITY_LEG_DDF_DE_HRX_DE_DIS_DEGREE is ' ' DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PROCD_DATE IS '1900/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_TYPE is ' ' DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_VALUE is 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PL_ID is ' ' l_hire_date = '0001/01/01 00:00:00' (DATE) l_termination_date = '4712/12/31 00:00:00' (DATE) l_termination_announced_date = '4712/12/31 00:00:00' (DATE) l_birth_date = '0001/01/01 00:00:00' (DATE) l_annual_vacation = 0.0 l_disability_degree = ' ' l_work_days_per_week = 0.0 l_company_work_days_per_week = 0.0 l_prorata_temporis = 'Y' l_waiting_months = 0.0 l_waiting_period_start_date = '0001/01/01 00:00:00' (DATE) l_accrue_vacation = 'N' l_accrual_pct = 0.0 l_normal_hours = 40.0 l_effective_date = '0001/01/01 00:00:00' (DATE) l_null_date = '0001/01/01 00:00:00' (DATE) l_accrue_vacation = 'N' l_accrual_pct = 0.0 l_disability_degree = '0' IF PER_TERM_REL_DATE_START WAS NOT DEFAULTED THEN l_hire_date = PER_TERM_REL_DATE_START IF PER_TRM_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE IF PER_TRM_REL_NOTIFIED_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_announced_date = PER_TRM_REL_NOTIFIED_TERMINATION_DATE IF PER_TRM_NORMAL_HOURS WAS NOT DEFAULTED THEN l_normal_hours = PER_TRM_NORMAL_HOURS if (to_text(l_hire_date,'YYYY')= '0001') then ( IF PER_ASG_REL_DATE_START WAS NOT DEFAULTED THEN l_hire_date = PER_ASG_REL_DATE_START IF PER_ASG_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE IF PER_ASG_REL_NOTIFIED_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_announced_date = PER_ASG_REL_NOTIFIED_TERMINATION_DATE IF PER_ASG_NORMAL_HOURS WAS NOT DEFAULTED THEN l_normal_hours = PER_ASG_NORMAL_HOURS ) IF PER_PER_DATE_OF_BIRTH WAS NOT DEFAULTED THEN l_birth_date = PER_PER_DATE_OF_BIRTH IF PER_PERSON_DISABILITY_LEG_DDF_DE_HRX_DE_DIS_DEGREE WAS NOT DEFAULTED THEN l_disability_degree = PER_PERSON_DISABILITY_LEG_DDF_DE_HRX_DE_DIS_DEGREE l_effective_date = GET_CONTEXT( EFFECTIVE_DATE, to_date('0001-01-01','YYYY-MM-DD')) l_waiting_period_start_date = l_null_date l_annual_vacation = 0.0 l_work_days_per_week = 0.0 l_company_work_days_per_week = 0.0 l_prorata_temporis = ' ' l_emp_annual_leave_days = 0 l_emp_work_days_per_week = 0 l_emp_irregular_wt_distribution = 'N' l_waiting_period_start_date = '0001/01/01 00:00:00' (DATE) l_emp_waiting_period = -1 l_emp_waiting_units = 'X' l_emp_prorata_temporis = ' ' l_pln_annual_leave_days = 0 l_pln_work_days_per_week = 0 l_pln_waiting_period = -1 l_pln_waiting_units = 'X' l_pln_prorata_temporis = ' ' l_term_id = 0 l_assignment_id = 0 l_term_id = GET_CONTEXT( HR_TERM_ID, 0) l_assignment_id = GET_CONTEXT( HR_ASSIGNMENT_ID, 0) l_level_id = 0 IF PER_ASG_INFORMATION_NUMBER1 WAS NOT DEFAULTED OR PER_ASG_INFORMATION_NUMBER2 WAS NOT DEFAULTED OR PER_ASG_INFORMATION_NUMBER3 WAS NOT DEFAULTED OR PER_ASG_INFORMATION_DATE1 WAS NOT DEFAULTED THEN ( l_level_id = l_assignment_id ) ELSE ( l_level_id = l_term_id ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_level_id) ( IF PER_ASG_INFORMATION_NUMBER1 WAS NOT DEFAULTED THEN ( l_emp_annual_leave_days = PER_ASG_INFORMATION_NUMBER1 l_annual_vacation = l_emp_annual_leave_days ) ELSE ( IF ANC_ABS_PLN_INFORMATION_NUMBER1 WAS NOT DEFAULTED THEN l_pln_annual_leave_days = ANC_ABS_PLN_INFORMATION_NUMBER1 l_annual_vacation = l_pln_annual_leave_days ) IF PER_ASG_INFORMATION_NUMBER2 WAS NOT DEFAULTED THEN ( l_emp_work_days_per_week = PER_ASG_INFORMATION_NUMBER2 l_work_days_per_week = l_emp_work_days_per_week ) IF PER_ASG_INFORMATION4 WAS NOT DEFAULTED THEN l_emp_irregular_wt_distribution = PER_ASG_INFORMATION4 IF PER_ASG_INFORMATION_DATE1 WAS NOT DEFAULTED THEN l_waiting_period_start_date = PER_ASG_INFORMATION_DATE1 Else l_waiting_period_start_date = l_hire_date IF PER_ASG_INFORMATION_NUMBER3 WAS NOT DEFAULTED THEN l_emp_waiting_period = PER_ASG_INFORMATION_NUMBER3 IF PER_ASG_INFORMATION5 WAS NOT DEFAULTED THEN l_emp_waiting_units = PER_ASG_INFORMATION5 IF PER_ASG_INFORMATION6 WAS NOT DEFAULTED THEN ( l_emp_prorata_temporis = PER_ASG_INFORMATION6 l_prorata_temporis = l_emp_prorata_temporis ) ELSE IF ANC_ABS_PLN_INFORMATION2 WAS NOT DEFAULTED THEN ( l_pln_prorata_temporis = ANC_ABS_PLN_INFORMATION2 l_prorata_temporis = l_pln_prorata_temporis ) ELSE l_prorata_temporis = 'N' ) IF ANC_ABS_PLN_INFORMATION_NUMBER2 WAS NOT DEFAULTED THEN ( l_pln_work_days_per_week = ANC_ABS_PLN_INFORMATION_NUMBER2 l_company_work_days_per_week = l_pln_work_days_per_week ) if (l_work_days_per_week=0.0) then l_work_days_per_week = l_company_work_days_per_week IF ANC_ABS_PLN_INFORMATION_NUMBER3 WAS NOT DEFAULTED THEN l_pln_waiting_period = ANC_ABS_PLN_INFORMATION_NUMBER3 IF ANC_ABS_PLN_INFORMATION1 WAS NOT DEFAULTED THEN l_pln_waiting_units = ANC_ABS_PLN_INFORMATION1 l_final_waiting_period = 0 l_final_waiting_units = ' ' if l_emp_waiting_period >= 0 then ( l_final_waiting_period = l_emp_waiting_period l_final_waiting_units = l_pln_waiting_units ) else ( l_final_waiting_period = l_pln_waiting_period l_final_waiting_units = l_pln_waiting_units ) if (l_final_waiting_units = 'M') then ( l_waiting_months = l_final_waiting_period ) if (l_final_waiting_units = 'W') then ( l_waiting_months = ROUND (l_final_waiting_period / 4.25 ) ) if (l_final_waiting_units = 'D') then ( l_waiting_months = ROUND (l_final_waiting_period / 30 ) ) hire_date = l_hire_date termination_date = l_termination_date termination_announced_date = l_termination_announced_date birth_date = l_birth_date annual_vacation = l_annual_vacation disability_degree = l_disability_degree work_days_per_week = l_work_days_per_week company_work_days_per_week = l_company_work_days_per_week prorata_temporis = l_prorata_temporis waiting_months = l_waiting_months waiting_period_start_date = l_waiting_period_start_date accrue_vacation = l_accrue_vacation accrual_pct = l_accrual_pct irregular_worktime = l_emp_irregular_wt_distribution weekly_normal_hours = l_normal_hours c_min_vacation_days = 20 c_min_vacation_days_lt16 = 30 c_min_vacation_days_lt17 = 25 c_min_vacation_days_lt18 = 23 c_disabled_extra_vacation_days = 5 vacation_days = 0.0 l_vacation_days = 0.0 l_zero = 0.0 l_emp_age = 0 l_reference_date = '0001/01/01 00:00:00' (DATE) l_end_date = '0001/01/01 00:00:00' (DATE) l_months_since_hire = 0 l_months_since_waiting_start = 0 l_months_in_current_year = 0 l_workday_factor = 1 l_already_granted = 0 l_leg_vacation_days = 0 if (l_pln_work_days_per_week = 0) then ( temp = ESS_LOG_WRITE('Plan setup is missing company number of weekly work days') return l_zero ) if (termination_date < l_effective_date) then return l_zero l_begin_of_current_year = to_date( to_text(l_effective_date,'YYYY') || '0101' , 'YYYYMMDD') months_unrounded = months_between(l_begin_of_current_year, birth_date) years = months_unrounded / 12 l_emp_age = trunc(years) l_reference_date = GREATEST(hire_date, to_date( to_text(l_effective_date,'YYYY') || '0101' , 'YYYYMMDD')) l_end_date = LEAST (termination_date, to_date( to_text(l_effective_date,'YYYY') || '1231' , 'YYYYMMDD')) l_months_since_hire = trunc(MONTHS_BETWEEN (ADD_DAYS(l_effective_date,1), hire_date)) l_months_since_waiting_start = trunc(MONTHS_BETWEEN (ADD_DAYS(l_effective_date,1), waiting_period_start_date)) l_months_in_current_year = trunc(MONTHS_BETWEEN (ADD_DAYS(l_effective_date,1), l_reference_date)) l_months_between_reference_and_end = trunc(MONTHS_BETWEEN (ADD_DAYS(l_end_date,1), l_reference_date)) l_months_to_year_end = trunc(MONTHS_BETWEEN(ADD_DAYS(to_date( to_text(l_effective_date,'YYYY') || '1231' , 'YYYYMMDD'),1), l_reference_date)) if l_emp_age < 16 then l_vacation_days = c_min_vacation_days_lt16 else if l_emp_age < 17 then l_vacation_days = c_min_vacation_days_lt17 else if l_emp_age < 18 then l_vacation_days = c_min_vacation_days_lt18 else l_vacation_days = c_min_vacation_days l_leg_vacation_days = l_vacation_days l_vacation_days = GREATEST(annual_vacation, l_vacation_days) if to_num(disability_degree) >= 50 then ( l_vacation_days = l_vacation_days + c_disabled_extra_vacation_days l_leg_vacation_days = l_leg_vacation_days + c_disabled_extra_vacation_days ) l_workday_factor = work_days_per_week / company_work_days_per_week l_wd_index = 1 l_asg_effective_date = '4712/12/31 00:00:00' (DATE) l_asg_days_per_week = 0.0 l_interval_start = '4712/12/31 00:00:00' (DATE) l_interval1_end = '4712/12/31 00:00:00' (DATE) l_interval2_end = '4712/12/31 00:00:00' (DATE) l_prev_asg_days_per_week = 0.0 interval_workday_factor = 1.0 l_interval1 = 0.0 l_interval2 = 0.0 l_vacation1 = 0.0 l_vacation1min = 0.0 l_vacation2 = 0.0 l_vacation3 = 0.0 l_context_date = l_end_date l_temp_workday_factor = 0.0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_level_id) ( WHILE (l_context_date > l_reference_date) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_context_date) ( IF PER_ASG_EFFECTIVE_START_DATE WAS NOT DEFAULTED THEN ( l_asg_effective_date = PER_ASG_EFFECTIVE_START_DATE ) ELSE exit IF PER_ASG_INFORMATION_NUMBER2 WAS NOT DEFAULTED THEN l_asg_days_per_week = PER_ASG_INFORMATION_NUMBER2 ELSE l_asg_days_per_week = l_company_work_days_per_week if (l_wd_index = 1) then ( l_interval_start = l_asg_effective_date l_interval1_end = ADD_DAYS(l_context_date,1) l_interval2_end = ADD_DAYS(to_date( to_text(l_context_date,'YYYY') || '1231' , 'YYYYMMDD'),1) l_prev_asg_days_per_week = l_asg_days_per_week ) if (l_prev_asg_days_per_week <> l_asg_days_per_week) then ( if (irregular_worktime='Y') then interval_workday_factor = 1.0 else interval_workday_factor = l_prev_asg_days_per_week / company_work_days_per_week l_interval1 = TRUNC(MONTHS_BETWEEN (l_interval1_end, ADD_DAYS(l_context_date,1))) l_interval2 = TRUNC(MONTHS_BETWEEN (l_interval2_end, ADD_DAYS(l_context_date,1))) l_vacation1 = l_vacation1 + (ROUND(l_vacation_days * interval_workday_factor * l_interval1/12)) l_vacation2 = l_vacation2 + (ROUND(l_vacation_days * interval_workday_factor * l_interval2/12)) l_vacation1min = l_vacation1min + (ROUND(c_min_vacation_days * interval_workday_factor * l_interval1/12)) l_vacation3 = l_vacation3 + (ROUND ((l_leg_vacation_days * interval_workday_factor * l_interval2/12) + ((l_vacation_days - l_leg_vacation_days) * interval_workday_factor * l_interval1/12))) l_interval1_end = ADD_DAYS(l_context_date,1) l_interval2_end = l_interval1_end l_prev_asg_days_per_week = l_asg_days_per_week ) if (l_asg_effective_date <= l_reference_date) then ( if (irregular_worktime='Y') then interval_workday_factor = 1.0 else interval_workday_factor = l_asg_days_per_week / company_work_days_per_week l_interval1 = TRUNC(MONTHS_BETWEEN (l_interval1_end, l_reference_date)) l_interval2 = TRUNC(MONTHS_BETWEEN (l_interval2_end, l_reference_date)) l_vacation1 = l_vacation1 + (ROUND(l_vacation_days * interval_workday_factor * l_interval1/12)) l_vacation2 = l_vacation2 + (ROUND(l_vacation_days * interval_workday_factor * l_interval2/12)) l_vacation1min = l_vacation1min + (ROUND(c_min_vacation_days * interval_workday_factor * l_interval1/12)) l_vacation3 = l_vacation3 + (ROUND ((l_leg_vacation_days * interval_workday_factor * l_interval2/12) + ((l_vacation_days - l_leg_vacation_days) * interval_workday_factor * l_interval1/12))) ) ) l_wd_index = l_wd_index + 1 l_context_date = ADD_DAYS(l_asg_effective_date,-1) if (l_wd_index > 100) then exit ) ) if (irregular_worktime='Y') then l_workday_factor = 1.0 b_january = 0 b_no_waiting = 0 b_last_waiting_month = 0 b_six_months_passed = 0 b_grant_minimum = 0 b_year_end_in_waiting = 0 b_term_in_waiting = 0 b_term_in_current_year = 0 b_uncommitted_data = 0 if to_num(to_text(l_effective_date,'MM'))= 1 then b_january = 1 if ((waiting_months = 0) and (to_text(waiting_period_start_date,'YYYY') = to_text(l_effective_date,'YYYY')) and (to_text(waiting_period_start_date,'MM') = to_text(l_effective_date,'MM')) and (to_num(to_text(waiting_period_start_date,'MM')) > 1)) then ( b_no_waiting = 1 ) if ((l_months_since_hire = waiting_months) and (termination_date > ADD_MONTHS (waiting_period_start_date, waiting_months))) then ( b_last_waiting_month = 1 ) if ((l_months_since_hire = 6) and (waiting_months > 6)) then ( temp = PAY_INTERNAL_LOG_WRITE('HRX_DE > setting b_six_months_passed') b_six_months_passed = 1 ) if ((waiting_months > 6) and (l_months_since_hire > 6) and (l_months_since_hire < waiting_months) and (b_january =1)) then ( b_grant_minimum = 1 ) if (trunc(MONTHS_BETWEEN (ADD_DAYS(to_date( to_text(l_effective_date,'YYYY') || '1231' , 'YYYYMMDD'),1),waiting_period_start_date)) < waiting_months) then b_year_end_in_waiting = 1 if trunc(MONTHS_BETWEEN (termination_date, waiting_period_start_date)) < waiting_months then b_term_in_waiting = 1 if trunc(MONTHS_BETWEEN (termination_date, waiting_period_start_date)) < waiting_months and b_january = 1 then b_term_in_waiting = 1 if (to_text(l_effective_date, 'YYYY') = to_text(l_termination_date, 'YYYY')) then b_term_in_current_year = 1 l_accrued_ytd= 0 l_accrued_current_month = 0 l_accrual_plan_id = GET_CONTEXT( ACCRUAL_PLAN_ID, 0) l_number_of_month_stored = 0 l_expected_months = 0 index = ABS_EXT_ACR_ENT_PROCD_DATE.FIRST(-1) WHILE (ABS_EXT_ACR_ENT_PROCD_DATE.EXISTS(index)) LOOP ( l_proc_date = ABS_EXT_ACR_ENT_PROCD_DATE[index] l_plan_id = ABS_EXT_ACR_ENT_PL_ID[index] l_acrl_type = ABS_EXT_ACR_ENT_TYPE[index] l_acrl_value = ABS_EXT_ACR_ENT_VALUE[index] if (to_num(l_plan_id) = l_accrual_plan_id AND l_proc_date >= to_date( to_text(l_effective_date,'YYYY') || '0101' , 'YYYYMMDD') AND l_proc_date < l_effective_date AND l_acrl_type = 'ACRL') then ( l_accrued_ytd = l_accrued_ytd + l_acrl_value l_number_of_month_stored = l_number_of_month_stored + 1 ) index = ABS_EXT_ACR_ENT_PROCD_DATE.NEXT(index ,-1) ) l_expected_months = TRUNC(MONTHS_BETWEEN(ADD_DAYS(l_effective_date,1),TO_DATE((to_text(l_reference_date,'YYYYMM')||'01'),'YYYYMMDD') )) -1 l_expected_months = l_expected_months + 1 if (l_number_of_month_stored < l_expected_months) then b_uncommitted_data = 1 l_upper_edge = ADD_DAYS(l_effective_date,1) l_final_edge = TO_DATE(to_text(l_reference_date,'YYYYMM')||'01') l_temp1 = to_text(l_reference_date,'YYYYMM')||'01' if termination_date < l_effective_date then vacation_days = 0.0 else if (l_months_since_waiting_start > waiting_months) then ( vacation_days = l_vacation2 if (to_text(termination_date,'YYYY') = to_text(l_effective_date,'YYYY')) then ( if (to_num(to_text(termination_date,'MM')) <= 6) then vacation_days = l_vacation1 else if (prorata_temporis = 'Y') then vacation_days = l_vacation3 ) vacation_days = vacation_days - l_accrued_ytd if (b_term_in_current_year =1 and b_uncommitted_data = 1) then ( vacation_days = 0 ) ) else if (b_no_waiting = 1) then ( vacation_days = l_vacation1 ) else if (b_term_in_waiting = 1) then ( vacation_days = l_vacation1 vacation_days = vacation_days - l_accrued_ytd if b_uncommitted_data = 1 then ( vacation_days = 0 ) ) else if (b_year_end_in_waiting = 1 and (DAYS_BETWEEN(l_effective_date, hire_date) < 31 )) then ( vacation_days = l_vacation1 if ((waiting_months > 6) and (l_months_since_hire > 6)) then ( vacation_days = vacation_days - l_accrued_ytd ) ) else if ((b_six_months_passed = 1 and b_year_end_in_waiting = 0) or (b_grant_minimum = 1)) then ( vacation_days = l_vacation1min - l_accrued_ytd ) else if (b_last_waiting_month = 1) then ( if (waiting_months > 6) then ( vacation_days = l_vacation1 - l_accrued_ytd ) else ( vacation_days = l_vacation1 - l_accrued_ytd ) ) else ( if b_term_in_current_year = 0 then ( if b_year_end_in_waiting = 1 then vacation_days = l_vacation1 - l_accrued_ytd else if (waiting_months > 6) and (l_months_since_hire > 6) and (l_months_since_hire <= waiting_months) then vacation_days = l_vacation1min - l_accrued_ytd ) ) if (l_workday_factor <> 1.0) then ( l_average_minutes_per_day = (weekly_normal_hours / work_days_per_week) * 60 l_precision = 1 / l_average_minutes_per_day vacation_days = ROUND ( (ROUND (vacation_days/l_precision) * l_precision), 3 ) ) accrual = vacation_days return accrual",
        "question": "The formula validates unpaid leave applications in Singapore. It ensures no annual leave balance remains, the leave does not overlap calendar years, and for emergency leave, a reason is provided. It also prohibits leave during the first 3 months or probation period unless all annual leave is exhausted, and checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "CIMB_ID_ANNUAL_LEAVE_PARTIAL_PERIOD",
        "answer": "INPUTS ARE IV_ACCRUAL accrual = IV_ACCRUAL return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_LEAVE_PARTIAL_PERIOD_ACCRUAL_RATE",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' INPUTS ARE IV_ACCRUAL,IV_CALEDARSTARTDATE (date),IV_CALEDARENDDATE(date) l_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_accrual = 1 l_length_of_service=(l_no_of_days) hire_year_number = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'yyyy')) current_year_number = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'yyyy')) hire_month_no= to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'mm')) current_month_no = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'mm')) no_of_days_month = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd')) Last_month_day = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'dd')) l_last_date_of_term_month = to_num(to_char(LAST_DAY(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),'dd')) term_year_number = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'yyyy')) term_month_no= to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'mm')) no_of_days_term_month = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd')) if( term_year_number=current_year_number AND term_month_no = current_month_no) then ( l_accrual = (no_of_days_term_month/l_last_date_of_term_month) ) if( hire_year_number = current_year_number AND hire_month_no = current_month_no) then ( l_accrual = l_no_of_days/Last_month_day ) accrual = l_accrual*IV_ACCRUAL return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_IN_ANC_PARACC",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' DEFAULT FOR IV_ACCRUAL IS 18 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) ln_same_year_duration = 0 lc_first_month_flag = 'N' ln_first_month_accrual = 0 ln_participation_duration = 0 ln_term_duration = 1 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ld_start_date = GREATEST (IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) ld_end_date = LEAST (IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE) ln_participation_duration = (TO_NUMBER(TO_CHAR(ld_end_date, 'yy')) - TO_NUMBER(TO_CHAR(ld_start_date, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(ld_end_date, 'mm')) - TO_NUMBER(TO_CHAR(ld_start_date, 'mm'))) + 1 l_log =ESS_LOG_WRITE('Line 27 - ln_participation_duration : '||TO_CHAR(ln_participation_duration)) ln_first_month_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) l_log =ESS_LOG_WRITE('Line 31 - ln_first_month_accrual : '||TO_CHAR(ln_first_month_accrual)) (prorated_accrual = ln_first_month_accrual) l_log =ESS_LOG_WRITE('Line 34 - ln_first_month_accrual = Y : '||TO_CHAR(prorated_accrual)) accrual = ROUND(prorated_accrual,2) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual l_log =ESS_LOG_WRITE('Line 37 - accrual'||TO_CHAR(accrual)) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_IN_MEDICAL_PARACC",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) ln_same_year_duration = 0 lc_first_month_flag = 'N' ln_first_month_accrual = 0 ln_participation_duration = 0 ln_term_duration = 1 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ld_start_date = GREATEST (IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) ld_end_date = LEAST (IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE) ln_participation_duration = (TO_NUMBER(TO_CHAR(ld_end_date, 'yy')) - TO_NUMBER(TO_CHAR(ld_start_date, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(ld_end_date, 'mm')) - TO_NUMBER(TO_CHAR(ld_start_date, 'mm'))) + 1 ln_first_month_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF IV_PLANENROLLMENTENDDATE < IV_CALEDARENDDATE THEN ( IF (IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE) THEN ( ln_same_year_duration = (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ) ln_participation_duration = -1 * (ln_term_duration - ln_participation_duration - ln_same_year_duration) IF ( (TO_CHAR(IV_CALEDARSTARTDATE, 'mm') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'mm')) AND (TO_CHAR(IV_CALEDARSTARTDATE, 'yyyy') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'yyyy')) ) THEN (lc_first_month_flag = 'Y') ) prorated_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF (lc_first_month_flag = 'Y') THEN (prorated_accrual = ln_first_month_accrual) accrual = ROUND(prorated_accrual,2) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_IN_CASUAL_PARACC",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) ln_same_year_duration = 0 lc_first_month_flag = 'N' ln_first_month_accrual = 0 ln_participation_duration = 0 ln_term_duration = 1 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ld_start_date = GREATEST (IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) ld_end_date = LEAST (IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE) ln_participation_duration = (TO_NUMBER(TO_CHAR(ld_end_date, 'yy')) - TO_NUMBER(TO_CHAR(ld_start_date, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(ld_end_date, 'mm')) - TO_NUMBER(TO_CHAR(ld_start_date, 'mm'))) + 1 ln_first_month_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF IV_PLANENROLLMENTENDDATE < IV_CALEDARENDDATE THEN ( IF (IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE) THEN ( ln_same_year_duration = (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ) ln_participation_duration = -1 * (ln_term_duration - ln_participation_duration - ln_same_year_duration) IF ( (TO_CHAR(IV_CALEDARSTARTDATE, 'mm') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'mm')) AND (TO_CHAR(IV_CALEDARSTARTDATE, 'yyyy') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'yyyy')) ) THEN (lc_first_month_flag = 'Y') ) prorated_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF (lc_first_month_flag = 'Y') THEN (prorated_accrual = ln_first_month_accrual) accrual = ROUND(prorated_accrual,2) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_HK_PARTIAL_PERIOD_ACCRUAL",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) ln_accrual = 0 ln_same_year_duration = 0 lc_first_month_flag = 'N' ln_first_month_accrual = 0 ln_participation_duration = 0 ln_term_duration = 1 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ld_start_date = GREATEST (IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) ld_end_date = LEAST (IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE) ln_participation_duration = (TO_NUMBER(TO_CHAR(ld_end_date, 'yy')) - TO_NUMBER(TO_CHAR(ld_start_date, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(ld_end_date, 'mm')) - TO_NUMBER(TO_CHAR(ld_start_date, 'mm'))) + 0.7 ln_first_month_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF IV_PLANENROLLMENTENDDATE < IV_CALEDARENDDATE THEN ( IF (IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE) THEN ( ln_same_year_duration = (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ) ln_participation_duration = (ln_term_duration - ln_participation_duration - ln_same_year_duration) IF ( (TO_CHAR(IV_CALEDARSTARTDATE, 'mm') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'mm')) AND (TO_CHAR(IV_CALEDARSTARTDATE, 'yyyy') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'yyyy')) ) THEN (lc_first_month_flag = 'Y') ) prorated_accrual = ln_participation_duration * ( IV_ACCRUAL / ln_term_duration) IF (lc_first_month_flag = 'Y') THEN (prorated_accrual = ln_first_month_accrual) accrual = prorated_accrual ln_accrual = accrual - FLOOR(accrual) IF ln_accrual <= 0.7 THEN accrual = FLOOR(accrual) + 0.5 IF ln_accrual > 0.7 THEN accrual = FLOOR(accrual) + 1 RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "CIMB Hong Kong"
    },
    {
        "FORMULA_NAME": "Kaneka Annual proration 1",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) l_participartion_start_date = GREATEST(IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) l_participartion_end_date = LEAST(IV_PLANENROLLMENTENDDATE,IV_CALEDARENDDATE) l_hire_date_proration_days = DAYS_BETWEEN(IV_CALEDARENDDATE,l_participartion_start_date)+1 l_term_date_proration_days = DAYS_BETWEEN(l_participartion_end_date,l_participartion_start_date)+1 l_accrual_calendar_duration = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 l_accrual_rate = 0 l_hire_date_to_term_accrual_rate = IV_ACCRUAL * (l_term_date_proration_days/l_accrual_calendar_duration) IF l_participartion_end_date <= IV_CALEDARENDDATE THEN l_accrual_rate = l_hire_date_to_term_accrual_rate accrual = ROUND(l_accrual_rate,2) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Absence annual leave partial accrual",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' l_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days) hire_year_number = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'yyyy')) Termination_year_number = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'yyyy')) current_year_number = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'yyyy')) hire_month_no= to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'mm')) Termination_month_no= to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'mm')) current_month_no = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'mm')) no_of_days_month = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd')) no_of_days_month1 = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd')) Last_date_Hire_month = LAST_DAY(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) Last_date_terminate_month = LAST_DAY(PER_ASG_REL_ACTUAL_TERMINATION_DATE) Las_day_Hire = to_num(to_char(Last_date_Hire_month, 'dd')) Last_day_terminate_month = to_num(to_char(Last_date_terminate_month, 'dd')) if (ANC_ABS_PLN_NAME='Annual Leave Plan') then( if(hire_year_number = current_year_number AND hire_month_no = current_month_no) then ( Days = DAYS_BETWEEN(Last_date_Hire_month,PER_ASG_REL_ORIGINAL_DATE_OF_HIRE)+1 prorationFactor = Days/Las_day_Hire ) Else if(Termination_year_number = current_year_number AND Termination_month_no = current_month_no) Then ( First_date_of_terminate_month = TRUNC(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'MONTH') Days = DAYS_BETWEEN(PER_ASG_REL_ACTUAL_TERMINATION_DATE,First_date_of_terminate_month)+1 prorationFactor = Days/Last_day_terminate_month ) else ( prorationFactor = 1.0 ) ) return prorationFactor",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Absence partial accrual",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' INPUTS ARE IV_ACCRUAL,IV_CALEDARSTARTDATE (date),IV_CALEDARENDDATE(date) l_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE)+1 l_accrual = 1 l_length_of_service=(l_no_of_days) hire_year_number = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'yyyy')) current_year_number = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'yyyy')) hire_month_no= to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'mm')) current_month_no = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'mm')) no_of_days_month = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd')) Last_month_day = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'dd')) l_last_date_of_term_month = to_num(to_char(LAST_DAY(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),'dd')) term_year_number = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'yyyy')) term_month_no= to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'mm')) no_of_days_term_month = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd')) if( term_year_number=current_year_number AND term_month_no = current_month_no) then ( l_accrual = (no_of_days_term_month/l_last_date_of_term_month) l_log = ess_log_write('***********************START********************************') l_log = ess_log_write('***********If Termination only in this Month****************') l_log = ess_log_write('Hire Date : '||to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd/mm/yyyy')) l_log = ess_log_write('Termination Date : '||to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd/mm/yyyy')) l_log = ess_log_write('EFFECTIVE_DATE: '||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'dd/mm/yyyy')) l_log = ess_log_write('no_of_days_term_month: '||TO_CHAR(no_of_days_term_month)) l_log = ess_log_write('l_last_date_of_term_month: '||TO_CHAR(l_last_date_of_term_month)) l_log = ess_log_write('l_accrual: '||TO_CHAR(l_accrual)) l_log = ess_log_write('IV_ACCRUAL: '||TO_CHAR(IV_ACCRUAL)) ) if( hire_year_number = current_year_number AND hire_month_no = current_month_no ) then ( l_accrual = l_no_of_days/Last_month_day l_log = ess_log_write('****************** If Hire only at this Month *********************') l_log = ess_log_write('l_no_of_days: '||TO_CHAR(l_no_of_days)) l_log = ess_log_write('Last_month_day: '||TO_CHAR(Last_month_day)) l_log = ess_log_write('l_accrual: '||TO_CHAR(l_accrual)) l_log = ess_log_write('IV_ACCRUAL: '||TO_CHAR(IV_ACCRUAL)) l_log = ess_log_write('***********************End********************************') ) if( hire_year_number = current_year_number AND hire_month_no = current_month_no AND term_year_number=current_year_number AND term_month_no = current_month_no) then ( l_accrual = (l_no_of_days/l_last_date_of_term_month) l_log = ess_log_write('*************** If Hire and Termination at the Same Date ********************') l_log = ess_log_write('l_no_of_days: '||TO_CHAR(l_no_of_days)) l_log = ess_log_write('l_last_date_of_term_month: '||TO_CHAR(l_last_date_of_term_month)) l_log = ess_log_write('l_accrual: '||TO_CHAR(l_accrual)) l_log = ess_log_write('IV_ACCRUAL: '||TO_CHAR(IV_ACCRUAL)) l_log = ess_log_write('***********************End********************************') ) accrual = l_accrual*IV_ACCRUAL return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_PTO_LEAVE_PARTIAL_ACCRUAL_FF",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR ACP_HIRE_DATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (DATE) DEFAULT FOR PER_REL_ACTUAL_TERMINATION_DATE is '1951/01/01 00:00:00'(date) DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE_NAME is 'XX' DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XX' DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_NAME is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_LOOKUP_MEANING is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_MEANING is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_ID IS 0 Default for PAYROLL_NAME is 'ABC' INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE(date) l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,TO_DATE('1951/01/01')) l_hire_date = PER_ASG_REL_DATE_START l_accrual_period_start_date = IV_ACCRUALPERIODSTARTDATE l_accrual_period_end_date = IV_ACCRUALPERIODENDDATE l_accrual_matrix = IV_ACCRUAL l_debug_flag = 'Y' Accrual = 0 l_payroll_name = PAYROLL_NAME l_sal_basis_name = CMP_ASSIGNMENT_SALARY_BASIS_CODE_NAME l_sal_basis_code = CMP_ASSIGNMENT_SALARY_BASIS_CODE l_sal_basis = CMP_ASSIGNMENT_SALARY_BASIS_NAME l_asg_status = PER_ASG_ASSIGNMENT_STATUS_TYPE l_asg_status_meaning = PER_ASG_ASSIGNMENT_STATUS_TYPE_MEANING l_asg_status_lookup = PER_ASG_ASSIGNMENT_STATUS_TYPE_LOOKUP_MEANING l_asg_status_id = PER_ASG_ASSIGNMENT_STATUS_TYPE_ID L_TERM_DATE = to_date('1951/01/01','YYYY/MM/DD') l_yos = 0 l_hours_sum = 0 l_total_hours_worked = 0 l_tc_hours_ref = '#' l_first_week_hours_ref = '#' l_second_week_hours_ref = '#' l_first_week_date = add_days(l_accrual_period_start_date,6) l_second_week_start = add_days(l_accrual_period_start_date,7) l_hire_date = to_date(GET_VALUE_SET('LHC_ENTERPRISE_HIRE_DATE_VS','|=P_PERSON_ID='''||to_char(l_person_id)||''''),'YYYY/MM/DD') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_assignment_id, EFFECTIVE_DATE = l_effective_date) ( L_TERM_DATE = PER_REL_ACTUAL_TERMINATION_DATE ) l_tc_hours_ref = '#' if (to_char(L_TERM_DATE,'YYYY/MM/DD') = '1951/01/01') then ( l_log_accrual = ess_log_write('Employee is newly hired..') Accrual = l_accrual_matrix l_yos = GREATEST(TRUNC((MONTHS_BETWEEN(l_accrual_period_end_date,l_hire_date))/12,3),0) if ((l_yos >= 0) and (l_yos < 1)) then Accrual = 3.38 if ((l_yos >= 1) and (l_yos < 2)) then Accrual = 4.92 if ((l_yos >= 2) and (l_yos < 5)) then Accrual = 6.46 if ((l_yos >= 5) and (l_yos < 10)) then Accrual = 8 if (l_yos >= 10) then Accrual = 9.54 if (l_sal_basis <> 'Salaried') then ( l_log_accrual = ess_log_write('Employee is hourly..') if (l_payroll_name = 'LHC Weekly') THEN ( l_log_accrual = ess_log_write('Employee is Weekly..') l_first_week_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_accrual_period_start_date,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_first_week_date,'YYYY/MM/DD') ||'''')||'#' l_second_week_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_second_week_start,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_accrual_period_end_date,'YYYY/MM/DD') ||'''')||'#' if ((l_first_week_hours_ref = '0#') and (l_second_week_hours_ref = '0#')) then ( Accrual = 0 l_log_accrual = ess_log_write('No Time card hours found..') ) if ((l_first_week_hours_ref = '0#') and (l_second_week_hours_ref = '1#')) then ( Accrual = Accrual / 2 l_log_accrual = ess_log_write('No first week Time card hours found.. So, giving only half accruals..') ) if ((l_first_week_hours_ref = '1#') and (l_second_week_hours_ref = '0#')) then ( Accrual = Accrual / 2 l_log_accrual = ess_log_write('No second week Time card hours found.. So, giving only half accruals..') ) if ((l_first_week_hours_ref = '1#') and (l_second_week_hours_ref = '1#')) then ( Accrual = Accrual ) ) ELSE ( l_log_accrual = ess_log_write('Employee is Bi Weekly..') l_tc_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_accrual_period_start_date,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_accrual_period_end_date,'YYYY/MM/DD') ||'''')||'#' if (l_tc_hours_ref = '0#') then ( Accrual = 0 l_log_accrual = ess_log_write('No Time card hours found..') ) else ( l_tc_hours = to_number(substr(l_tc_hours_ref,1,instr(l_tc_hours_ref,'#')-1)) if (l_tc_hours > 0) then ( Accrual = Accrual ) ) ) ) if ((l_sal_basis = 'Salaried') and ((to_char(l_asg_status_id) = '3001') or (to_char(l_asg_status_id) = '2001'))) THEN ( l_log_accrual = ess_log_write('Employee is salaried..') Accrual = 0 ) ) if (to_char(L_TERM_DATE,'YYYY/MM/DD') != '1951/01/01') then ( l_log_accrual = ess_log_write('Employee is terminated..') Accrual = l_accrual_matrix l_yos = GREATEST(TRUNC((MONTHS_BETWEEN(L_TERM_DATE, l_hire_date))/12,3),0) if ((l_yos >= 0) and (l_yos < 1)) then Accrual = 3.38 if ((l_yos >= 1) and (l_yos < 2)) then Accrual = 4.92 if ((l_yos >= 2) and (l_yos < 5)) then Accrual = 6.46 if ((l_yos >= 5) and (l_yos < 10)) then Accrual = 8 if (l_yos >= 10) then Accrual = 9.54 if (l_sal_basis <> 'Salaried') then ( l_log_accrual = ess_log_write('Employee is hourly..') if (l_payroll_name = 'LHC Weekly') THEN ( l_log_accrual = ess_log_write('Employee is Weekly..') l_first_week_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_accrual_period_start_date,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_first_week_date,'YYYY/MM/DD') ||'''')||'#' l_second_week_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_second_week_start,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_accrual_period_end_date,'YYYY/MM/DD') ||'''')||'#' if ((l_first_week_hours_ref = '0#') and (l_second_week_hours_ref = '0#')) then ( Accrual = 0 l_log_accrual = ess_log_write('No Time card hours found..') ) if ((l_first_week_hours_ref = '0#') and (l_second_week_hours_ref = '1#')) then ( Accrual = Accrual / 2 l_log_accrual = ess_log_write('No first week Time card hours found.. So, giving only half accruals..') ) if ((l_first_week_hours_ref = '1#') and (l_second_week_hours_ref = '0#')) then ( Accrual = Accrual / 2 l_log_accrual = ess_log_write('No second week Time card hours found.. So, giving only half accruals..') ) if ((l_first_week_hours_ref = '1#') and (l_second_week_hours_ref = '1#')) then ( Accrual = Accrual ) ) ELSE ( l_log_accrual = ess_log_write('Employee is Bi Weekly..') l_tc_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_accrual_period_start_date,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_accrual_period_end_date,'YYYY/MM/DD') ||'''')||'#' if (l_tc_hours_ref = '0#') then ( Accrual = 0 l_log_accrual = ess_log_write('No Time card hours found..') ) else ( l_tc_hours = to_number(substr(l_tc_hours_ref,1,instr(l_tc_hours_ref,'#')-1)) if (l_tc_hours > 0) then ( Accrual = Accrual ) ) ) ) if ((l_sal_basis = 'Salaried') and ((to_char(l_asg_status_id) = '3001') or (to_char(l_asg_status_id) = '2001'))) THEN ( l_log_accrual = ess_log_write('Employee is salaried..') Accrual = 0 ) ) if (l_debug_flag = 'Y') THEN ( l_log_accrual = ess_log_write('l_tc_hours_ref: ' || (l_tc_hours_ref)) l_log_accrual = ess_log_write('l_accrual_matrix: ' || to_char(l_accrual_matrix)) l_log_accrual = ess_log_write('l_person_id: ' || to_char(l_person_id)) l_log_accrual = ess_log_write('l_accrual_period_start_date: ' || to_char(l_accrual_period_start_date)) l_log_accrual = ess_log_write('l_accrual_period_end_date: ' || to_char(l_accrual_period_end_date)) l_log_accrual = ess_log_write('L_TERM_DATE: ' || to_char(L_TERM_DATE)) l_log_accrual = ess_log_write('Accrual: ' || to_char(Accrual)) l_log_accrual = ess_log_write('l_yos: ' || to_char(l_yos)) l_log_accrual = ess_log_write('l_hire_date: ' || to_char(l_hire_date)) l_log_accrual = ess_log_write('l_sal_basis_name: ' || (l_sal_basis_name)) l_log_accrual = ess_log_write('l_sal_basis_code: ' || (l_sal_basis_code)) l_log_accrual = ess_log_write('l_sal_basis: ' || (l_sal_basis)) l_log_accrual = ess_log_write('l_asg_status: ' || (l_asg_status)) l_log_accrual = ess_log_write('l_asg_status_meaning: ' || (l_asg_status_meaning)) l_log_accrual = ess_log_write('l_asg_status_lookup: ' || (l_asg_status_lookup)) l_log_accrual = ess_log_write('l_asg_status_id: ' || to_char(l_asg_status_id)) ) return Accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LHC_HCBC_PTO_PARTIAL_ACCRUAL_FF",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_first_week_accrual = 0 l_second_week_accrual = 0 Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_first_week_date = add_days(Period_start_date,6) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_start_date: '||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_End_date '||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'L_Assignemnt_id '||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= l_first_week_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) if (l_total_hours_worked < 32) then ( l_first_week_accrual = 0 ) ELSE ( l_first_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) ) l_total_hours_worked = 0 WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) if (l_total_hours_worked < 32) then ( l_second_week_accrual = 0 ) ELSE ( l_second_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) ) accrual = l_first_week_accrual + l_second_week_accrual l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BKD ABS PTO Partial Period Accrual",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) IF IV_ACCRUAL <> 0 THEN accrual = IV_ACCRUAL RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BKD ABS Generic Proration Accrual",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) IF IV_ACCRUAL <> 0 THEN accrual = IV_ACCRUAL RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "Amico Absence Partial Period Proration Weeks",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT for accrual is 0 DEFAULT for numberdays is 0 DEFAULT for numberofaccuratedays is 0 DEFAULT for numberofweeks is 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR first_thursday_of_next_year IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) days_enrolled = DAYS_BETWEEN(IV_CALEDARENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 first_thursday_of_next_year = NEXT_DAY(IV_CALEDARENDDATE, 'THU') numberdays= DAYS_BETWEEN(first_thursday_of_next_year, IV_ACCRUALPERIODSTARTDATE) + 1 numberofaccuratedays= numberdays-11 numberofweeks = numberofaccuratedays/7 prorated_accrual = (numberofweeks / 52) * IV_ACCRUAL accrual = prorated_accrual remainder = MOD(accrual, 1) IF (remainder >= 0.75) THEN (accrual = FLOOR(accrual) + 1) ELSE IF (remainder >= 0.25 AND remainder < 0.75) THEN (accrual = FLOOR(accrual) + 0.5) ELSE (accrual = FLOOR(accrual)) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "CA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Amico Absence Partial Period Proration Accural",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT for accrual is 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) days_enrolled = DAYS_BETWEEN(IV_CALEDARENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 prorated_accrual = (days_enrolled / 365) * IV_ACCRUAL accrual = prorated_accrual remainder = MOD(accrual, 1) IF (remainder >= 0.75) THEN (accrual = FLOOR(accrual) + 1) ELSE IF (remainder >= 0.25 AND remainder < 0.75) THEN (accrual = FLOOR(accrual) + 0.5) ELSE (accrual = FLOOR(accrual)) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "CA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BBC_ABS_Floating_Partial",
        "answer": "DEFAULT for IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) Inputs are IV_PLANENROLLMENTSTARTDATE l_enroll_day = 0 l_enroll_date = IV_PLANENROLLMENTSTARTDATE l_enroll_day = To_Number(To_Char(l_enroll_date,'MM')) IF (l_enroll_day >= 1 and l_enroll_day <= 3) THEN (accrual = 24) ELSE IF (l_enroll_day >= 4 and l_enroll_day <= 6) THEN (accrual = 16) ELSE IF (l_enroll_day >=7 and l_enroll_day <=9) THEN (accrual = 8) ELSE IF (l_enroll_day >=10 and l_enroll_day <=12) THEN (accrual = 0) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Partial Period Accrual Rate",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    }
]