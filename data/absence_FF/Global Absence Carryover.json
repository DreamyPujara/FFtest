[
    {
        "FORMULA_NAME": "AKF PT Accrual Carryover",
        "answer": "INPUTS ARE IV_PLANENROLLMENTSTARTDATE(DATE), IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUAL L_DATE = TO_DATE('0107'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY'),'DDMMYYYY') carryover = 11*8 IF IV_PLANENROLLMENTSTARTDATE >= L_DATE THEN ( carryover = 8*8 ) RETURN carryover",
        "question": "write a  formula calculates the duration of an absence while excluding the dates July 10, 2022, July 11, 2022, July 12, 2022, and July 13, 2022. It first determines the total number of days between the start and end dates of the absence. Then, it checks if any of these dates fall within the absence period and subtracts those days from the total duration. The final duration is the total number of days minus the excluded dates. write a  ensures that the absence duration accurately reflects the number of working days the employee is absent, excluding the specified dates.",
        "FORMULA_TYPE_NAME": "Global Absence Carryover",
        "LEGISLATIVE_DATA_GROUP": "PT Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_GB_CARRYOVER",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' INPUTS ARE IV_PLANENROLLMENTSTARTDATE(DATE), IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUAL L_MATERNITY = 'N' L_CARRYOVER = 35 I=1 L_LAST_YEAR = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY'))-1 L_CHECK_DATE = TO_DATE('3112'||TO_CHAR(L_LAST_YEAR)) l_start_date = ADD_DAYS(L_CHECK_DATE,-1) l_end_date = ADD_DAYS(L_CHECK_DATE, 1) CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = 'Maternity Leave' THEN ( L_MATERNITY = 'Y' ) ) ) ) ) IF L_MATERNITY = 'Y' THEN ( L_CARRYOVER = 0 ) carryover = L_CARRYOVER RETURN carryover",
        "question": "Length of Service:  If the length of service is less than 5 years: Accrual is 28/12 for grades 1 to 6, 7, 8, B3, G2, I2, S1, and N7 (if citizenship is not 'SA'). Accrual is 21/12 for grades 1 to 6, N7, and S2 (if citizenship is not 'SA'). If the length of service is 5 years or more: Accrual is 30/12 for grades 1 to 6, 7, 8, B3, G2, I2, S1, and N7 (if citizenship is not 'SA'). Grade and Citizenship:  For grades 9A, 9B, 9C: If the hire date is before 1st March 2010 and citizenship is 'SA', accrual is 30 plus 5 for every 10 years of service, divided by 12. Otherwise, accrual is 30/12. For grades 10A, 10B, 10C, 11, 12: If the hire date is before 1st March 2010 and citizenship is 'SA', accrual is 40 plus 5 for every 10 years of service, divided by 12. Otherwise, accrual is 35/12 or 44/12 for grades 10A, 10B, 10C. For grades CEO, T8, Z4, R4, W8, E6, P1, F2, RS, and if PER_ASG_ATTRIBUTE8 is 'Y': Accrual is 30/12. For grade S2: If citizenship is 'SA' and length of service is less than 5 years, accrual is 28/12. If citizenship is 'SA' and length of service is 5 years or more, accrual is 30/12. If citizenship is not 'SA' and length of service is less than 5 years, accrual is 21/12. If citizenship is not 'SA' and length of service is 5 years or more, accrual is 30/12. Exceptions:  If Exception_Flag is 'Y' and Exception_value is not 'X', accrual is set to the value of Exception_value. If accrual exceeds 2.5 and Exception_Flag is not 'Y', accrual is capped at 2.5. Unpaid Leave Adjustment:  If there are unpaid leave days (L_VAC_DAYS > 0), the accrual is adjusted by subtracting the unpaid leave days from the total days and multiplying by the daily accrual rate. The ceiling is consistently set to 12000 and carryover to 6000 across all conditions.",
        "FORMULA_TYPE_NAME": "Global Absence Carryover",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "CIMB_SG_ANNUAL_LEAVE_CARRYOVER",
        "answer": "DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS ' ' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) carryover = 0 l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_name = 'X' L_los_in_months = MONTHS_BETWEEN(IV_ACCRUALPERIODENDDATE, PER_ASG_REL_DATE_START) l_hire_date = PER_ASG_REL_DATE_START CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_ACCRUALPERIODENDDATE, HR_ASSIGNMENT_ID = l_hr_assign_id) ( l_grade_name = PER_ASG_GRADE_NAME ) IF (l_grade_name = 'U9.' AND l_grade_name = 'U10.' AND l_grade_name = 'U11.') THEN ( IF l_hire_date > ADD_MONTHS(IV_ACCRUALPERIODSTARTDATE,-4) AND l_hire_date < IV_ACCRUALPERIODSTARTDATE THEN carryover = 5 ELSE carryover = 0 ) ELSE IF (l_grade_name = 'U1.' OR l_grade_name = 'U2.' OR l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'MA.' OR l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3' OR l_grade_name = 'S4' OR l_grade_name = 'S5' OR l_grade_name = 'S6' OR l_grade_name = 'S7' OR l_grade_name = 'S8' OR l_grade_name = 'S9' OR l_grade_name = 'S10' OR l_grade_name = 'S11' OR l_grade_name = 'S12') THEN carryover = 5 RETURN carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Carryover",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Annual Leave Carryover for Days",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'X' DEFAULT for PER_ASG_PERSON_NUMBER is 'NA' Inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date) carryover = 0 L_FTE = 0 l_carry_over = 0 l_column_carry_over = 'X' l_plan_name = 'X' l_debug = ess_log_write('************************ Absence Carryover - Formula Start *******************************') SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', IV_ACCRUALPERIODSTARTDATE) SET_INPUT ('mode', 'PER_ASG_FTE_VALUE') EXECUTE('XX_GET_HR_DATA') L_FTE = GET_OUTPUT('X_OUTPUT_NUMBER', L_FTE ) l_debug = ess_log_write('FTE: '||to_Char(L_FTE)) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', IV_ACCRUALPERIODSTARTDATE) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT2') EXECUTE('XX_GET_HR_DATA') l_plan_name = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_name) l_debug = ess_log_write('Plan Name = '||l_plan_name) l_column_carry_over = 'CARRY_OVER' l_carry_over = to_number(GET_TABLE_VALUE('POD_ANNUAL_LEAVE_DAYS_PLAN_UDT' , l_column_carry_over , l_plan_name,'0')) l_debug = ess_log_write('CarryOver Date: '||to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('CarryOver From UDT: '||TO_CHAR(l_carry_over)) IF (l_carry_over > 0) THEN carryover = L_FTE * l_carry_over l_debug = ess_log_write('CarryOver: '||TO_CHAR(l_carry_over)) l_debug = ess_log_write('************************ Absence Carryover - Formula End *******************************') RETURN carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Carryover",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Annual Leave Carryover for Hours",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'X' DEFAULT for PER_ASG_PERSON_NUMBER is 'NA' Inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date) carryover = 0 L_PER_ASG_WORKING_HOURS = 0 l_carry_over = 'X' l_column = 'X' l_plan_name = 'X' l_debug = ess_log_write('************************ Absence Carryover - Formula Start *******************************') SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', IV_ACCRUALPERIODSTARTDATE) SET_INPUT ('mode', 'PER_ASG_WORKING_HOURS') EXECUTE('XX_GET_HR_DATA') L_PER_ASG_WORKING_HOURS = GET_OUTPUT('X_OUTPUT_NUMBER', L_PER_ASG_WORKING_HOURS ) l_debug = ess_log_write('L_PER_ASG_WORKING_HOURS : '|| TO_CHAR(L_PER_ASG_WORKING_HOURS)) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', IV_ACCRUALPERIODSTARTDATE) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT2') EXECUTE('XX_GET_HR_DATA') l_plan_name = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_name) l_debug = ess_log_write('Plan Name = '||l_plan_name) l_column = 'CARRY_OVER_FLAG' l_carry_over = (GET_TABLE_VALUE('POD_ANNUAL_LEAVE_HOURS_PLAN_UDT' , l_column , l_plan_name,'0')) l_debug = ess_log_write('CarryOver Date: '||to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('CarryOver Flag From UDT: '||(l_carry_over)) IF (l_carry_over = 'Y') THEN carryover = L_PER_ASG_WORKING_HOURS l_debug = ess_log_write('Carryover Hours: '||TO_CHAR(carryover)) l_debug = ess_log_write('************************ Absence Carryover - Formula End *******************************') RETURN carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Carryover",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BKD ABS Part Time PTO Carryover",
        "answer": "DEFAULT FOR PER_ASG_JOB_ATTRIBUTE1 IS 'XX' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_WORK_AT_HOME IS 'N' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION2 IS 'CA' DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE_CODE IS ' ' DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_JOB_CODE IS 'XX' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_JOB_ID IS 0 DEFAULT FOR PER_JOBS_LEG_EFF_HRX_US_JOBS_FLSA_STATUS IS 'XX' DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_INFORMATION_CATEGORY IS ' ' DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_INFORMATION1 IS ' ' DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_LOC_REGION2 IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION2 IS 'XX' DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XX' DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_ASG_ADD_TOWN_OR_CITY IS 'XX' DEFAULT FOR IV_CARRYOVER IS 0 DEFAULT FOR IV_CEILING IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MAX_REHIRE_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CARRYOVER, IV_CEILING, IV_ACCRUALPERIODENDDATE(date), IV_CALEDARENDDATE(date), IV_ACCRUALPERIODSTARTDATE(date) TEMP_CARRYOVER=IV_CARRYOVER TEMP_CEILING=IV_CEILING TEMP_ACCRUAL_PERIOD_END_DATE=IV_ACCRUALPERIODENDDATE TEMP_ACCRUAL_CAL_PERIOD_START_DATE=IV_CALEDARENDDATE TEMP_ACCRUAL_PERIOD_START_DATE=IV_ACCRUALPERIODSTARTDATE l_debug= ESS_LOG_WRITE('IV_ACCRUALPERIODENDDATE before ADD DAYS '|| 'IV_ACCRUALPERIODENDDATE before ADD DAYS '||TO_CHAR(TEMP_ACCRUAL_PERIOD_START_DATE)) TEMP_ACCRUAL_PERIOD_START_DATE = ADD_DAYS(TEMP_ACCRUAL_PERIOD_START_DATE,-1) l_debug= ESS_LOG_WRITE('IV_CARRYOVER '|| 'IV_CARRYOVER '||TO_CHAR(TEMP_CARRYOVER)) l_debug= ESS_LOG_WRITE('IV_CEILING '|| 'IV_CEILING '||TO_CHAR(TEMP_CEILING)) l_debug= ESS_LOG_WRITE('IV_ACCRUALPERIODENDDATE after ADD Days '|| 'IV_ACCRUALPERIODENDDATE after ADD Days '||TO_CHAR(TEMP_ACCRUAL_PERIOD_END_DATE)) l_debug= ESS_LOG_WRITE('IV_CALEDARENDDATE '|| 'IV_CALEDARENDDATE '||TO_CHAR(TEMP_ACCRUAL_CAL_PERIOD_START_DATE)) l_debug= ESS_LOG_WRITE('IV_ACCRUALPERIODSTARTDATE After Add Days '|| 'IV_ACCRUALPERIODSTARTDATE '||TO_CHAR(TEMP_ACCRUAL_PERIOD_START_DATE)) ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) E = GET_PAYROLL_PERIOD(ld_effective_date) l_pay_period_sd = GET_DATE('PAYROLL_PERIOD_START_DATE') l_pay_period_ed = GET_DATE('PAYROLL_PERIOD_END_DATE') accrual = 0 l_udt_column_name = 'HFT' l_udt_row='0-1' l_udt_value = 0 l_ceiling=0 l_carryover=0 l_rollover=0 l_LOS=0 l_Plan_Type='XYZ' l_JOB_CODE=PER_ASG_JOB_CODE l_SICK_ELG_STATE='N' l_LEGAL_EMP_NAME=PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_JOB_ID=PER_ASG_JOB_ID l_FLSA_STATUS='XYZ' l_LOC_ADD_R2=PER_ASG_ADD_REGION2 l_LOC_ASG_R2=PER_ASG_LOC_REGION2 l_PERSON_NUMBER=PER_ASG_PERSON_NUMBER l_PERSON_ID=GET_CONTEXT(PERSON_ID,0) l_WORKED_HOURS=0 l_WORKED_HOURS_CHAR='0' l_CITY_TEST=PER_ASG_ADD_TOWN_OR_CITY l_ROLLOVER_BALANCE=0 l_PLAN_NAME='Full Time PTO Plan' l_seniority_date = '4712/12/31 00:00:00' (date) l_debug= ESS_LOG_WRITE('Address Region2 '|| 'Address Region2 '||l_LOC_ADD_R2) l_debug= ESS_LOG_WRITE('ASG_Region 2 '|| 'ASG_Region 2 '||l_LOC_ASG_R2) l_debug= ESS_LOG_WRITE('Person Number '|| 'Person Number '||l_PERSON_NUMBER) l_debug= ESS_LOG_WRITE('Person ID '|| 'Person ID '||TO_CHAR(l_PERSON_ID)) l_debug= ESS_LOG_WRITE('l_COUNTY_TEST '|| 'l_COUNTY_TEST '||l_CITY_TEST) l_debug= ESS_LOG_WRITE('ld_effective_date '|| 'ld_effective_date '||TO_CHAR(ld_effective_date)) CHANGE_CONTEXTS(JOB_ID=l_JOB_ID) ( I=1 WHILE (PER_JOB_LEG_ALL_INFORMATION1.EXISTS(I)) LOOP ( If (ld_effective_date>= PER_JOB_LEG_ALL_EFFECTIVE_START_DATE[I] AND ld_effective_date <=PER_JOB_LEG_ALL_EFFECTIVE_END_DATE[I] AND PER_JOB_LEG_ALL_INFORMATION_CATEGORY[I]='HRX_US_JOBS') THEN ( l_FLSA_STATUS=PER_JOB_LEG_ALL_INFORMATION1[I] l_debug= ESS_LOG_WRITE('FLSA STATUS '|| 'FLSA STATUS '||l_FLSA_STATUS) EXIT ) I=I+1 ) ) l_udt_row_Ceiling='XYZ' l_udt_row_Rollover='XYZ' l_udt_row_Carryover='XYZ' l_State_Code=PER_ASG_LOC_REGION2 l_Job_DFF =PER_ASG_JOB_ATTRIBUTE1 l_ASG_NUM='X' l_WORK_AT_HOME=PER_ASG_WORK_AT_HOME l_ASG_NUM= PER_ASG_ASSIGNMENT_NUMBER if PER_ASG_WORK_AT_HOME = 'Y' Then l_State_Code=PER_ASG_ADD_REGION2 l_debug= ESS_LOG_WRITE('State Code'|| 'PER_ASG_ADD_REGION2 '||l_State_Code) l_debug= ESS_LOG_WRITE('Job DFF'|| 'PER_ASG_JOB_ATTRIBUTE1 '||l_Job_DFF) l_debug= ESS_LOG_WRITE('Work from Home Flag'|| 'l_WORK_AT_HOME '||l_WORK_AT_HOME) l_debug= ESS_LOG_WRITE('Legal Empployer name'|| 'Legal Empployer name '||l_LEGAL_EMP_NAME) IF (l_State_Code= 'CA' OR l_State_Code= 'CO' OR l_State_Code= 'IL' OR l_State_Code= 'LA' OR l_State_Code= 'MA' OR l_State_Code= 'MT' OR l_State_Code= 'ND' OR l_State_Code= 'NE' OR l_State_Code= 'NH' OR l_State_Code= 'RI') Then ( l_udt_row='CEILING (CAPPED)' l_SICK_ELG_STATE='Y' l_udt_row_Ceiling='CEILING (CAPPED)' l_udt_row_Rollover='ROLLOVER(CAPPED)' l_udt_row_Carryover='CARRYOVER (CAPPED)' ) Else ( l_udt_row='CEILING(NON-CAPPED)' l_SICK_ELG_STATE='N' l_udt_row_Ceiling='CEILING(NON-CAPPED)' l_udt_row_Rollover='ROLLOVER(NON-CAPPED)' l_udt_row_Carryover='CARRYOVER (NON-CAPPED)' ) l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_GRANDFATHER_PTO', l_PERSON_NUMBER,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_GRANDFATHER_PTO' IF l_Plan_Type= 'XYZ' THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_VP_UP_JOB_CODE', l_PERSON_NUMBER,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN (l_Plan_Type= 'BKD_ABS_VP_UP_JOB_CODE') ) l_debug= ESS_LOG_WRITE('Lookup Plan Type '|| 'Lookup Plan Type1 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ') THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_CORP_DIRECTORS_AND_UP', l_JOB_CODE,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_CORP_DIRECTORS_AND_UP' ) l_debug= ESS_LOG_WRITE('Lookup Plan Type2 '|| 'Lookup Plan Type2 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ') THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_CORP_NURSE_THERAP_DIRE', l_JOB_CODE,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_CORP_NURSE_THERAP_DIRECTOR' ) l_debug= ESS_LOG_WRITE('Lookup Plan Type '|| 'Lookup Plan Type3 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ') THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_CORP_NURSE_THERAPIST', l_JOB_CODE,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_CORP_NURSE_THERAPIST' ) l_debug= ESS_LOG_WRITE('Lookup Plan Type '|| 'Lookup Plan Type4 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ') THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_FIELD_NURSE_THERAPIST', l_JOB_CODE,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_FIELD_NURSE_THERAPIST' ) l_debug= ESS_LOG_WRITE('Lookup Plan Type '|| 'Lookup Plan Type5 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME='Brookdale Employee Services Corporate LLC' AND l_FLSA_STATUS='EXEMPT') THEN ( l_Plan_Type= 'BKD_ABS_CORP_SAL' l_debug= ESS_LOG_WRITE('Corp Sal '|| 'Corp Sal '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME='Brookdale Employee Services Corporate LLC' AND l_FLSA_STATUS='NONEXEMPT') THEN ( l_Plan_Type= 'BKD_ABS_CORP_HOUR' l_debug= ESS_LOG_WRITE('Corp Hour '|| 'Corp Hour '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME<>'Brookdale Employee Services Corporate LLC' AND l_JOB_CODE='110230') THEN ( l_Plan_Type= 'BKD_ABS_FIELD_SAL' l_debug= ESS_LOG_WRITE('Field Salary '|| 'Field Salary '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME<>'Brookdale Employee Services Corporate LLC' AND l_FLSA_STATUS='EXEMPT') THEN ( l_Plan_Type= 'BKD_ABS_FIELD_SAL' l_debug= ESS_LOG_WRITE('Field Salary '|| 'Field Salary '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_SICK_ELG_STATE='Y' AND l_FLSA_STATUS='NONEXEMPT') THEN ( l_Plan_Type= 'BKD_PTO_FOR_SICK_STATES' l_debug= ESS_LOG_WRITE('PTO_PLAN '|| 'PTO_PLAN '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME<>'Brookdale Employee Services Corporate LLC' AND l_FLSA_STATUS='NONEXEMPT') THEN ( l_Plan_Type= 'BKD_ABS_FIELD_HOUR' l_debug= ESS_LOG_WRITE('Field Hour'|| 'Field Hour '||l_Plan_Type) ) l_debug= ESS_LOG_WRITE('Plan Type at the End: '||l_Plan_Type) IF l_Plan_Type = 'XYZ' THEN ( carryover = 0 RETURN carryover ) l_udt_value = TO_NUMBER(GET_TABLE_VALUE ( 'BKD_ABS_PTO_PLAN_LIMITS', l_Plan_Type, l_udt_row_Carryover, '0')) l_carryover=l_udt_value carryover=l_carryover l_debug= ESS_LOG_WRITE('l_carryover'|| 'l_carryover'||To_CHAR(l_carryover)) RETURN carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Carryover",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    }
]