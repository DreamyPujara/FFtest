[
    {
        "FORMULA_NAME": "FR Maternity Paternity Adoption Entitlement",
        "answer": "DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_LEG_GROUPING_CD is 'Unknown' DEFAULT for ANC_ABS_PLN_LEG_GROUPING_CD is 'Unknown' DEFAULT FOR IV_INFORMATION_4 is 'Unknown' DEFAULT FOR IV_INFORMATION_5 is 'Unknown' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION ,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE ,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE, IV_INFORMATION_4(TEXT), IV_INFORMATION_5(TEXT) BAND1PAYFACTOR = 0 BAND1ENTITLEMENT =0 ret = ess_log_write ( '-- Start of ENTITLMENT FORMULA------') IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_MATERNITY' ) THEN ( lc_variable_to_be_logged = 'ante patho status: '|| IV_INFORMATION_4 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'Post patho status : '|| IV_INFORMATION_5 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (ANC_ABS_PLN_LEG_GROUPING_CD = 'ORA_HRX_FR_ANT') THEN ( ret = ess_log_write ( '-- Start of ANT------') lc_variable_to_be_logged = 'ANC_ABS_PLN_LEG_GROUPING_CD : '|| ANC_ABS_PLN_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED) THEN ( l_weeks = DAYS_BETWEEN(trunc(IV_ACTUALCHILDBIRTHDATE) ,trunc(IV_ACTUALSTARTDATE))/7 lc_variable_to_be_logged = 'trunc(IV_ACTUALCHILDBIRTHDATE): '|| to_char(trunc(IV_ACTUALCHILDBIRTHDATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'trunc(IV_ACTUALCHILDBIRTHDATE) : '|| to_char(trunc(IV_ACTUALCHILDBIRTHDATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'trunc(IV_ACTUALSTARTDATE) : '|| to_char(trunc(IV_ACTUALSTARTDATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = '(DAYS_BETWEEN(trunc(IV_ACTUALCHILDBIRTHDATE) ,trunc(IV_ACTUALSTARTDATE)))) : '|| to_char((DAYS_BETWEEN(trunc(IV_ACTUALCHILDBIRTHDATE) ,trunc(IV_ACTUALSTARTDATE)))) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) ELSE (l_weeks = (DAYS_BETWEEN(trunc(IV_EXPECTEDCHILDBIRTHDATE) ,trunc(IV_PLANNEDSTARTDATE)))/7) band1entitlement = l_weeks band1payfactor = 100 lc_variable_to_be_logged = 'percent is : '|| TO_CHAR(band1payfactor ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(band1entitlement ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT ) IF (ANC_ABS_PLN_LEG_GROUPING_CD = 'ORA_HRX_FR_POST') THEN ( ret = ess_log_write ( '-- Start of post natal ------') lc_variable_to_be_logged = 'ANC_ABS_PLN_LEG_GROUPING_CD : '|| ANC_ABS_PLN_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED) THEN (l_weeks_post = (DAYS_BETWEEN(add_days(trunc(IV_ACTUALENDDATE),1) ,add_days(trunc(IV_ACTUALCHILDBIRTHDATE),1)))/7) ELSE (l_weeks_post = (DAYS_BETWEEN(add_days(trunc(IV_PLANNEDENDDATE),1) ,add_days(trunc(IV_EXPECTEDCHILDBIRTHDATE),1)))/7) band1payfactor = 100 band1entitlement = 99999 lc_variable_to_be_logged = 'percent is : '|| TO_CHAR(band1payfactor ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(band1entitlement ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT ) ) Else ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADOPT' OR ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_PATERNITY' OR ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ANT_PAT' OR ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_POST_PAT') THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 99999 lc_variable_to_be_logged = 'ANC_ABS_TYP_LEG_GROUPING_CD : '|| ANC_ABS_TYP_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'percent is : '|| TO_CHAR(band1payfactor ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(band1entitlement ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT )",
        "question": "write a  formula calculates the pay factors and entitlements for employees based on their length of service. Here's the business logic:  Seniority Date Calculation: The formula determines the seniority date based on either the statutory absence service start date or the assignment start date.  Service Days Calculation: It calculates the number of service days from the seniority date to the start date of the absence. It then converts the service days into years and months of service.  Entitlement and Pay Factor Determination:  For employees with less than 1 year of service, the entitlements are set to 22 days at 100% pay and 43 days at 50% pay. For employees with 1 to 2 years of service, the entitlements are set to 43 days at 100% pay and 43 days at 50% pay. For employees with 2 to 3 years of service, the entitlements are set to 87 days at 100% pay and 87 days at 50% pay. For employees with 3 to 5 years of service, the entitlements are set to 108 days at 100% pay and 108 days at 50% pay. For employees with more than 5 years of service, the entitlements are set to 130 days at 100% pay and 130 days at 50% pay. The formula returns the pay factors and entitlements for the two bands based on these calculations.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Statutory Sick Pay Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT for ANC_ABS_PLN_WS_CATEGORY_CD is 'NONE' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=1 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=ESS_LOG_WRITE('UK:SSP:MAIN:ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:absentryid='+to_char(l_context_absence_entry_id)+' startdt='+to_char(IV_START_DATE)) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) FIRST_DAY_DATE=l_start_date LAST_DAY_DATE=l_end_date wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert_flag='N' multi_assign_cert_flag='N' deemed_worker_cert_flag='N' weeks_man_flag='N' years_man_flag='N' wait_man_flag='N' prev_man_flag='N' lel_man_flag='N' piw_man_flag='N' sdm_man_flag='N' paychg_man_flag='N' l_insuff_info_man_flag='N' multi_assign_man_flag='N' deemed_worker_man_flag='N' link_letter_man_flag='N' partial_start_man_flag='N' partial_end_man_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' internal_certs['ORX_HRX_GB_OFFPAYROLL_WORKER']='Off-payroll Worker Subject to 2020 Rules' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) ui_cert_alt_cd=' ' ui_abs_cert_id_num=0 if length(rtrim(v_IV_UI_ABS_CERT_ID))>0 then ( ui_abs_cert_id_num=to_number(v_IV_UI_ABS_CERT_ID) if (ui_abs_cert_id_num > 0) then ( ui_cert_alt_cd = GET_VALUE_SET(cert_altcd_valueset ,'|=CURRENT_CERT_ID='||v_IV_UI_ABS_CERT_ID ) ) ) if (ui_cert_alt_cd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(IV_UI_CERT_REVPAYSTART_DATE)=trunc(IV_START_DATE)) then (partial_start_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(IV_UI_CERT_REVPAYEND_DATE)=trunc(IV_END_DATE)) then (partial_end_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_WAITING_DAYS') then (wait_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MAX_28WEEKS_PAID') then (weeks_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MAX_3YEARS_PAID') then (years_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LINKING_LETTER') then (link_letter_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LEL_NOT_REACHED') then (lel_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_NON_PAYABLE_LINKED') then (prev_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LESSTHAN_4DAYS') then (piw_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_INSUFF_INFO_AWE') then (l_insuff_info_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MULTI_ASSIGNMENT') then (multi_assign_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LINKED_TO_SDM') then (sdm_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_PAYROLL_CHANGED') then (paychg_man_flag='Y') if (ui_cert_alt_cd='ORX_HRX_GB_OFFPAYROLL_WORKER') then (deemed_worker_man_flag='Y') blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) row_plan_id=ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR[ni6] if (row_plan_id=0 or row_plan_id=l_absence_plan_id) then ( if row_cert_status='C' then ( if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) else ( if (row_cert_status='V') then ( e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CERT_CHECK:VOID='|| row_altcd) if (row_altcd='ORA_HRX_GB_WAITING_DAYS') then (wait_man_flag='Y') if (row_altcd='ORA_HRX_GB_MAX_28WEEKS_PAID') then (weeks_man_flag='Y') if (row_altcd='ORA_HRX_GB_MAX_3YEARS_PAID') then (years_man_flag='Y') if (row_altcd='ORA_HRX_GB_LINKING_LETTER') then (link_letter_man_flag='Y') if (row_altcd='ORA_HRX_GB_LEL_NOT_REACHED') then (lel_man_flag='Y') if (row_altcd='ORA_HRX_GB_NON_PAYABLE_LINKED') then (prev_man_flag='Y') if (row_altcd='ORA_HRX_GB_LESSTHAN_4DAYS') then (piw_man_flag='Y') if (row_altcd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(row_rev_start_dt)=trunc(IV_START_DATE)) then (partial_start_man_flag='Y') if (row_altcd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(row_rev_end_dt)=trunc(IV_END_DATE)) then (partial_end_man_flag='Y') if (row_altcd='ORA_HRX_GB_INSUFF_INFO_AWE') then (l_insuff_info_man_flag='Y') if (row_altcd='ORA_HRX_GB_MULTI_ASSIGNMENT') then (multi_assign_man_flag='Y') if (row_altcd='ORA_HRX_GB_LINKED_TO_SDM') then (sdm_man_flag='Y') if (row_altcd='ORA_HRX_GB_PAYROLL_CHANGED') then (paychg_man_flag='Y') if (row_altcd='ORX_HRX_GB_OFFPAYROLL_WORKER') then (deemed_worker_man_flag='Y') ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CERT_CHECK certcount='|| to_char(blocked_index)) l_deemed_worker='N' CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker=PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker='Y' THEN ( if (deemed_worker_man_flag='N') then (deemed_worker_cert_flag='Y') ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = TRUNC(IV_START_DATE), END_DATE = TRUNC(IV_END_DATE)) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( if (multi_assign_man_flag='N') then (multi_assign_cert_flag='Y') ) ) USE_ALT_SCHEDULE='N' CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( ALT_SCHEDULE_CAT_NAME=ANC_ABS_PLN_WS_CATEGORY_CD E_LOG=ESS_LOG_WRITE('UK:SSP:MAIN:SCHED:ALT_SCHEDULE_CAT_NAME=' ||ALT_SCHEDULE_CAT_NAME) ) IF ALT_SCHEDULE_CAT_NAME ='SSP' THEN ( USE_ALT_SCHEDULE='Y' ) E_LOG=ESS_LOG_WRITE('UK:SSP:MAIN:SCHED:USE_ALT_SCHEDULE=' ||USE_ALT_SCHEDULE) type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:PARTIAL_DAY_OVERNIGHT') CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( if (partial_start_man_flag='N') then (l_start_date=add_days(l_start_date,1)) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( if (partial_end_man_flag='N') then (l_end_date=add_days(l_end_date,-1)) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:FIRST_IS_PARTIAL:'|| FIRST_IS_PARTIAL) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:LAST_IS_PARTIAL:'|| LAST_IS_PARTIAL) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:FIRST_DAY_DATE:'|| to_char(FIRST_DAY_DATE)) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:LAST_DAY_DATE:'|| to_char(LAST_DAY_DATE)) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CAL_DAY_DURATION:'|| to_char(l_cal_day_duration)) if (l_cal_day_duration < 4) then( if (piw_man_flag='N') then (piw_cert_flag='Y') ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:after hist call l_total_ssp_weeks:'|| to_char(l_total_ssp_weeks)) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('UK:SSP:MAIN:SDM linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( if (sdm_man_flag='N') then (sdm_cert_flag='Y') ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('UK:SSP:MAIN:LTR link_letter_cert_flag: '|| link_letter_cert_flag) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:AWE1 man_flags='||l_insuff_info_man_flag||lel_man_flag||paychg_man_flag) if (l_insuff_info_man_flag='Y') then ( do_lel_check=0 ) if (lel_man_flag='Y') then ( do_lel_check=0 ) if (paychg_man_flag='Y') then ( do_lel_check=0 ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:AWE2 man_flags='||l_insuff_info_man_flag||lel_man_flag||paychg_man_flag||to_char(do_lel_check)) lel_cert_flag='N' l_insuff_info_cert_flag='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id,_x0000_",
        "question": "write a  formula calculates the duration of an absence for teachers based on various factors. Here's the detailed business logic:  The formula first determines the start and end dates and times of the absence period. It checks if the employee has a primary assignment. If not, the duration is set to 0. It calculates the availability of the employee during the absence period. It checks if the absence falls on a term-off day. If it does, the duration is set to 0. If the absence starts on the same date as the absence start date, the duration is set to the absence start duration. Otherwise, it is set to 1 day. If the absence falls on a weekend, the duration is set to 0. The formula rounds the calculated duration to two decimal places and returns it. In summary, the formula ensures that the duration of the absence is accurately calculated based on the employee's availability, term-off days, and primary assignment status.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Statutory sick pay to detect partial days",
        "answer": "DEFAULT FOR ANC_AVAIL_RESEXCEP_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_AVAIL_RESEXCEP_DURATION_ARR is -1 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_AVAIL_RESEXCEP_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_AVAIL_RESEXCEP_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_AVAIL_RESEXCEP_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_AVAIL_RESEXCEP_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_AVAIL_RESEXCEP_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAIL_RESEXCEP_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_TYP_DURATION_UOM_CD is ' ' DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR TYPE_OF_SHIFT IS 'TIME' DEFAULT FOR USE_ALT_SCHEDULE IS 'Y' DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PUB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_PUB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PUB_ALT_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_PUB_ALT_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION, IV_END_DURATION, TYPE_OF_SHIFT,USE_ALT_SCHEDULE l_start_date=IV_START_DATE l_end_date=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION DAY_STATUS= EMPTY_NUMBER_TEXT PARTIAL_DAY_STATUS=EMPTY_TEXT_TEXT PARTIAL_DAY_DATES=EMPTY_DATE_TEXT FIRST_IS_PARTIAL='N' LAST_IS_PARTIAL='N' FIRST_DAY_DATE=trunc(IV_START_DATE) LAST_DAY_DATE=trunc(IV_END_DATE) doublepartial='N' end_of_time='4712/12/31 00:00:00' (DATE) almost_end_of_time='4712/12/20 00:00:00' (DATE) abslimit=almost_end_of_time l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_trunced_context_effective_date=trunc(l_context_effective_date) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( unit_of_measure=ANC_ABS_TYP_DURATION_UOM_CD ) l_uom='H' if (unit_of_measure='D' or unit_of_measure='C') then ( l_uom='D' ) full_scheduled_duration_first_day=0 full_scheduled_duration_last_day=0 l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) start_date_0000=trunc(IV_START_DATE) end_date_0000=trunc(IV_END_DATE) start_date_2359=add_days(start_date_0000,1) end_date_2359=add_days(end_date_0000,1) overnight_end_flag='N' ll_input_start_date=trunc(IV_START_DATE) ll_input_start_date_EOD=add_days(ll_input_start_date,1) CHANGE_CONTEXTS( START_DATE=ll_input_start_date, END_DATE=ll_input_start_date_EOD ) ( ni9=ANC_AVAILABILITY_OBJ_CATEGORY_ARR.FIRST(-1) first_is_public_holiday='N' ni9continue='Y' while (ANC_AVAILABILITY_OBJ_CATEGORY_ARR.exists(ni9) and ni9continue='Y') loop ( temp=ANC_AVAILABILITY_OBJ_CATEGORY_ARR[ni9] if (temp='PH') then ( first_is_public_holiday='Y' ni9continue='N' ) else ( ni9=ANC_AVAILABILITY_OBJ_CATEGORY_ARR.next(ni9,-1) ) ) ) ll_input_end_date=trunc(IV_END_DATE) ll_input_end_date_EOD=add_days(ll_input_end_date,1) CHANGE_CONTEXTS( START_DATE=ll_input_end_date, END_DATE=ll_input_end_date_EOD ) ( ni9=ANC_AVAILABILITY_OBJ_CATEGORY_ARR.FIRST(-1) last_is_public_holiday='N' ni9continue='Y' while (ANC_AVAILABILITY_OBJ_CATEGORY_ARR.exists(ni9) and ni9continue='Y') loop ( temp=ANC_AVAILABILITY_OBJ_CATEGORY_ARR[ni9] if (temp='PH') then ( last_is_public_holiday='Y' ni9continue='N' ) else ( ni9=ANC_AVAILABILITY_OBJ_CATEGORY_ARR.next(ni9,-1) ) ) ) ph_corrected_enddate_enddatetime=l_end_date if (last_is_public_holiday = 'Y') then ( if (l_end_date=end_date_0000) then ( str_date_only=to_char(end_date_0000,'YYYY/MM/DD') ph_corrected_enddate_enddatetime=to_date(str_date_only+' 23:59:00','YYYY/MM/DD hh24:mi:ss') ) ) if (type_of_shift='SCH') then ( FIRST_DAY_DATE=l_start_date LAST_DAY_DATE=l_end_date single_day_diff=0 last_day_diff=0 first_day_diff=0 full_scheduled_duration_first_day=0 full_scheduled_duration_last_day=0 real_scheduled_duration_first_day=0 real_scheduled_duration_last_day=0 full_scheduled_duration_single_day=0 real_scheduled_duration_single_day=0 if start_date_0000=end_date_0000 then ( full_scheduled_duration_single_day=GET_PAY_AVAILABILITY('ASSIGN',start_date_0000,start_date_2359,'Y','Y','Y','R',l_uom ,'N','N',8,'N','N','N','NONE','ORA_ANC_PUB_SCHED') real_scheduled_duration_single_day=GET_PAY_AVAILABILITY('ASSIGN',IV_START_DATE,ph_corrected_enddate_enddatetime,'Y','Y','Y','R',l_uom ,'N','N',8,'N','N','N','NONE','ORA_ANC_PUB_SCHED') single_day_diff=full_scheduled_duration_single_day-real_scheduled_duration_single_day E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_SSP_ENT_DETAIL:1:full_scheduled_duration_single_day=' ||to_char(full_scheduled_duration_single_day)) E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_SSP_ENT_DETAIL:2:real_scheduled_duration_single_day=' ||to_char(real_scheduled_duration_single_day)) ) else ( full_scheduled_duration_first_day=GET_PAY_AVAILABILITY('ASSIGN',start_date_0000,start_date_2359,'Y','Y','Y','R',l_uom ,'N','N',8,'N','N','N','NONE','ORA_ANC_PUB_SCHED') full_scheduled_duration_last_day =GET_PAY_AVAILABILITY('ASSIGN',end_date_0000,end_date_2359,'Y','Y','Y','R',l_uom ,'N','N',8,'N','N','N','NONE','ORA_ANC_PUB_SCHED') E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_SSP_ENT_DETAIL:3:full_scheduled_duration_first_day=' ||to_char(full_scheduled_duration_first_day)) E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_SSP_ENT_DETAIL:4:full_scheduled_duration_last_day=' ||to_char(full_scheduled_duration_last_day)) real_scheduled_duration_first_day=GET_PAY_AVAILABILITY('ASSIGN',IV_START_DATE,start_date_2359,'Y','Y','Y','R',l_uom ,'N','N',8,'N','N','N','NONE','ORA_ANC_PUB_SCHED') real_scheduled_duration_last_day =GET_PAY_AVAILABILITY('ASSIGN',end_date_0000,ph_corrected_enddate_enddatetime,'Y','Y','Y','R',l_uom ,'N','N',8,'N','N','N','NONE','ORA_ANC_PUB_SCHED') E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_SSP_ENT_DETAIL:5:real_scheduled_duration_first_day=' ||to_char(real_scheduled_duration_first_day)) E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_SSP_ENT_DETAIL:6:real_scheduled_duration_last_day=' ||to_char(real_scheduled_duration_last_day)) first_day_diff=full_scheduled_duration_first_day-real_scheduled_duration_first_day last_day_diff=full_scheduled_duration_last_day-real_scheduled_duration_last_day ) if first_day_diff > 0 then ( FIRST_IS_PARTIAL='Y' ) if last_day_diff > 0 then ( LAST_IS_PARTIAL='Y' ) if single_day_diff > 0 then ( FIRST_IS_PARTIAL='Y' ) ) if (type_of_shift='ELAPSED') then ( FIRST_DAY_DATE=l_start_date LAST_DAY_DATE=l_end_date start_date_0000=trunc(IV_START_DATE) start_date_2359=add_days(start_date_0000,1) if (IV_END_DATE was defaulted) then ( end_date_0000='4712/12/31 00:00:00' (DATE) end_date_0000=trunc(end_date_0000) end_date_2359=add_days(end_date_0000,1) ) else ( end_date_0000=trunc(IV_END_DATE) end_date_2359=add_days(end_date_0000,1) ) full_scheduled_duration_first_day=0 full_scheduled_duration_last_day=0 full_scheduled_duration_first_day=GET_PAY_AVAILABILITY('ASSIGN',start_date_0000,start_date_2359,'Y','Y','Y','R',l_uom,'N','N',8,'N','N','N','NONE','ORA_ANC_PUB_SCHED') full_scheduled_duration_last_day=GET_PAY_AVAILABILITY('ASSIGN',end_date_0000,end_date_2359,'Y','Y','Y','R',l_uom,'N','N',8,'N','N','N','NONE','ORA_ANC_PUB_SCHED') E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_SSP_ENT_DETAIL:7:full_scheduled_duration_first_day=' ||to_char(full_scheduled_duration_first_day)) E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_SSP_ENT_DETAIL:8:full_scheduled_duration_last_day=' ||to_char(full_scheduled_duration_last_day)) if ((v_IV_START_DURATION > 0) and (v_IV_START_DURATION < full_scheduled_duration_first_day)) then ( FIRST_IS_PARTIAL='Y' ) if (not (IV_END_DURATION was defaulted)) then ( if ((v_IV_END_DURATION > 0) and (v_IV_END_DURATION < full_scheduled_duration_last_day)) then ( LAST_IS_PARTIAL='Y' ) ) ) if (type_of_shift='TIME' and USE_ALT_SCHEDULE='N') then ( E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule set for time without alternate schedule') absence_start_date=IV_START_DATE absence_end_date=ph_corrected_enddate_enddatetime abslimit=add_days(absence_start_date,1500) if absence_end_date > abslimit then ( absence_end_date=abslimit ) trunced_absence_start_date=trunc(absence_start_date) trunced_absence_end_date=trunc(absence_end_date) absence_start_date_minus=add_days(trunced_absence_start_date,-1) absence_start_date_plus=add_days(trunced_absence_start_date,1) absence_end_date_minus=add_days(trunced_absence_end_date,-1) absence_end_date_plus=add_days(trunced_absence_end_date,1) loop_start_date=add_days(trunced_absence_start_date,-8) loop_end_date=add_days(trunced_absence_end_date,8) full_abscence=1 part_abscence=2 no_abscence=3 CHANGE_CONTEXTS( START_DATE=loop_start_date, END_DATE=loop_end_date ) ( ni4=ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) while (ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( shift_start=ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR[ni4] shift_end=ORA_HRX_GB_PUB_AVAILABILITY_END_DATE_TIME_ARR[ni4] E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:shift='||to_char(shift_start,'YYYY-MM-DD hh24:mi:ss')||' - '||to_char(shift_end,'YYYY-MM-DD hh24:mi:ss')) if ( shift_end = absence_end_date ) then ( if (trunc(shift_start) <> trunc(shift_end)) then ( overnight_end_flag='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:shift is overnight shift at end of absence') ) ) shift_start_str=to_char(trunc(shift_start)) if ((absence_start_date <= shift_start and absence_end_date <= shift_start) or (absence_start_date >= shift_end and absence_end_date >= shift_end)) then ( if (DAY_STATUS.exists(shift_start_str)) then ( if (DAY_STATUS[shift_start_str]=full_abscence) then ( DAY_STATUS[shift_start_str]=part_abscence ) ) else ( DAY_STATUS[shift_start_str]=no_abscence ) ) if ((absence_start_date > shift_start and absence_start_date < shift_end) or (absence_end_date > shift_start and absence_end_date < shift_end)) then ( DAY_STATUS[shift_start_str]=part_abscence ) if ( absence_start_date <= shift_start and absence_end_date >= shift_end ) then ( if (DAY_STATUS.exists(shift_start_str)) then ( if (DAY_STATUS[shift_start_str]=no_abscence) then ( DAY_STATUS[shift_start_str]=part_abscence ) ) else ( DAY_STATUS[shift_start_str]=full_abscence ) ) E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:shift_start_str='||shift_start_str||' DAY_STATUS='||to_char(DAY_STATUS[shift_start_str])) ni4=ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) array_index=DAY_STATUS.FIRST('-1') is_first_partial_identified='N' is_last_partial_identified='N' FIRST_IS_PARTIAL='N' FIRST_DAY_DATE='4712-12-31T00:00:00.000Z' (DATE) LAST_IS_PARTIAL='N' LAST_DAY_DATE='4712-12-31T00:00:00.000Z' (DATE) E_LOG=ESS_LOG_WRITE('UK:SSP:DET:2:TIME_SHIFT_PARTIAL_DAY_LOGIC') if (is_first_partial_identified='N') then ( if (DAY_STATUS.exists(to_char(absence_start_date_minus))) then ( if (DAY_STATUS[to_char(absence_start_date_minus)]=part_abscence) then ( E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule stime1') FIRST_IS_PARTIAL='Y' FIRST_DAY_DATE=absence_start_date_minus is_first_partial_identified='Y' ) ) ) if (is_first_partial_identified='N') then ( if (DAY_STATUS.exists(to_char(trunced_absence_start_date))) then ( if (DAY_STATUS[to_char(trunced_absence_start_date)]=full_abscence) then ( FIRST_IS_PARTIAL='N' FIRST_DAY_DATE=trunced_absence_start_date is_first_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule stime2a') )else if (DAY_STATUS[to_char(trunced_absence_start_date)]=part_abscence) then ( FIRST_IS_PARTIAL='Y' FIRST_DAY_DATE=trunced_absence_start_date is_first_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule stime2b') ) )else ( FIRST_IS_PARTIAL='N' FIRST_DAY_DATE=trunced_absence_start_date is_first_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule stime2c') ) ) if (is_first_partial_identified='N') then ( if (DAY_STATUS.exists(to_char(absence_start_date_plus))) then ( if (DAY_STATUS[to_char(absence_start_date_plus)]=full_abscence) then ( FIRST_IS_PARTIAL='N' FIRST_DAY_DATE=absence_start_date_plus is_first_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule stime3') ) ) ) doublepartial='N' if (trunc(absence_start_date) = absence_end_date_minus) then (doublepartial='Y') if (is_last_partial_identified='N') then ( if (doublepartial='N') then ( if (DAY_STATUS.exists(to_char(absence_end_date_minus))) then ( if (DAY_STATUS[to_char(absence_end_date_minus)]=part_abscence) then ( LAST_IS_PARTIAL='Y' LAST_DAY_DATE=absence_end_date_minus is_last_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime4') ) ) ) ) if (is_last_partial_identified='N') then ( if (DAY_STATUS.exists(to_char(trunced_absence_end_date))) then ( if (DAY_STATUS[to_char(trunced_absence_end_date)]=full_abscence) then ( LAST_IS_PARTIAL='N' LAST_DAY_DATE =trunced_absence_end_date is_last_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime5a') )else if (DAY_STATUS[to_char(trunced_absence_end_date)]=part_abscence) then ( LAST_IS_PARTIAL='Y' LAST_DAY_DATE =trunced_absence_end_date is_last_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime5b') ) else ( E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime5b2') ) )else ( LAST_IS_PARTIAL ='N' LAST_DAY_DATE =trunced_absence_end_date is_last_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime5c') ) ) if (is_last_partial_identified='N') then ( if (DAY_STATUS.exists(to_char(absence_end_date_minus))) then ( if (DAY_STATUS[to_char(absence_end_date_minus)]=full_abscence) then ( LAST_IS_PARTIAL='N' LAST_DAY_DATE=absence_end_date_minus is_last_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime6') ) ) ) if (absence_end_date=abslimit) then ( LAST_DAY_DATE=end_of_time LAST_IS_PARTIAL='N' is_last_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime7') ) if (is_last_partial_identified='N') then ( LAST_IS_PARTIAL='N' LAST_DAY_DATE =trunced_absence_end_date is_last_partial_identified='Y' E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime8') ) if ( overnight_end_flag='Y' ) then ( LAST_DAY_DATE=absence_end_date_minus E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule etime9 ovn end day') ) ) if (type_of_shift='TIME' and USE_ALT_SCHEDULE='Y') then ( E_LOG=ESS_LOG_WRITE('UK:SSP:DET:3:rule set for time with alternate schedule') absence_start_date=IV_START_DATE absence_end_date=ph_corrected_enddate_enddatetime abslimit=add_days(absence_start_date,1500) if absence_end_date > abslimit then ( absence_end_date=abslimit ) trunced_absence_start_date=trunc(absence_start_date) trunced_absence_end_date=trunc(absence_end_date) absence_start_date_minus=add_days(trunced_absence_start_date,-1) absence_start_date_plus=add_days(trunced_absence_start_date,1) absence_end_date_minus=add_days(trunced_absence_end_date,-1) absence_end_date_plus=add_days(trunced_absence_end_date,1) loop_start_date=add_days(trunced_absence_start_date,-8) loop_end_date=add_days(trunced_absence_end_date,8) full_abscence=1 part_abscence=2 no_abscence=3 CHANGE_CONTEXTS( START_DATE=loop_start_date, END_DATE=loop_end_date ) ( ni4=ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) while (ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( shift_start=ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR[ni4] shift_end=ORA_HRX_GB_PUB_ALT_AVAILABILITY_END_DATE_TIME_ARR[ni4] debug_times=' from '|| to_char(shift_start)|| ' to ' ||to_char(shift_end) shift_start_str=to_char(trunc(shift_start)) if ((absence_start_date <= shift_start and absence_end_date <= shift_start) or (absence_start_date >= shift_end and absence_end_date >= shift_end)) then ( if (DAY_STATUS.exists(shift_start_str)) then ( if (DAY_STATUS[shift_start_str]=full_abscence) then ( DAY_STATUS[shift_start_str]=part_abscence ) ) else ( DAY_STATUS[shift_start_str]=no_abscence ) ) if ((absence_start_date > shift_start and absence_start_date < shift_end) or (absence_end_date > shift_start and absence_end_date < shift_end)) then ( DAY_STATUS[shift_start_str]=part_abscence ) if ( absence_start_date <= shift_start and absence_end_date >= shift_end ) then ( if (DAY_STATUS.exists(shift_start_str)) then ( if (DAY_STATUS[shift_start_str]=no_abscence) then ( DAY_STATUS[shift_start_str]=part_abscence ) ) else ( DAY_STATUS[shift_start_str]=full_abscence ) ) ni4=ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) is_first_partial_identified='N' is_last_partial_identified='N' FIRST_IS_PARTIAL='N' FIRST_DAY_DATE=absence_start_date LAST_IS_PARTIAL='N' LAST_DAY_DATE=absence_end_date if (absence_end_date=abslimit) then ( LAST_DAY_DATE=end_of_time LAST_IS_PARTIAL='N' is_last_partial_identified='Y' ) if (is_last_partial_identified='N') then ( LAST_IS_PARTIAL='N' LAST_DAY_DATE =trunced_absence_end_date is_last_partial_identified='Y' ) ) if (unit_of_measure='C' or unit_of_measure='D') then ( if v_IV_START_DURATION > 0 and v_IV_START_DURATION < 1 then ( FIRST_IS_PARTIAL='Y' ) if v_IV_END_DURATION > 0 and v_IV_END_DURATION < 1 then ( LAST_IS_PARTIAL='Y' ) ) if (IV_END_DATE was defaulted) then (LAST_IS_PARTIAL='N') if (LAST_DAY_DATE > almost_end_of_time and LAST_DAY_DATE < end_of_time) then ( LAST_DAY_DATE=end_of_time LAST_IS_PARTIAL='N' ) PARTIAL_DAY_STATUS['FIRST_IS_PARTIAL']=FIRST_IS_PARTIAL PARTIAL_DAY_STATUS['LAST_IS_PARTIAL']=LAST_IS_PARTIAL PARTIAL_DAY_DATES['FIRST_DAY_DATE']=trunc(FIRST_DAY_DATE) PARTIAL_DAY_DATES['LAST_DAY_DATE']=trunc(LAST_DAY_DATE) PARTIAL_DAY_STATUS['FIRST_IS_PUBLIC_HOLIDAY']=first_is_public_holiday PARTIAL_DAY_STATUS['LAST_IS_PUBLIC_HOLIDAY']=last_is_public_holiday wsa_set('DAY_STATUS_LIST',DAY_STATUS) wsa_set('PARTIAL_DAY_DATES_LIST',PARTIAL_DAY_DATES) wsa_set('PARTIAL_DAY_STATUS_LIST',PARTIAL_DAY_STATUS) band1payfactor=77 band1entitlement=77 band2payfactor=0 band2entitlement=9999999 return band1payfactor,band1entitlement, band2payfactor,band2entitlement",
        "question": "write a  fast formula is designed to validate Brought Forward Leave (BFL) requests for Cambodia employees. Here's the detailed calculation logic:  Balance Check: The formula checks if the employee has a balance in either the \"Brought Forward Leave Plan No Expiry\" or the \"Brought Forward Leave Plan 3 Years Expiry\" (including Year 1, Year 2, and Year 3). If the balance is zero in both plans, the leave request is invalid, and an error message is returned.  Overlap Check: The formula checks if the leave request overlaps between two calendar years. If it does, the leave request is invalid, and an error message is returned.  Future Absence Check: If the leave reason is not \"Emergency Leave\" and the leave start date is more than two days in advance, the formula checks the next working day. If the next working day is after the leave start date, the leave request is invalid, and an error message is returned.  Shift and Grade Check: If the employee is on a 2-shift, 3-shift, or 7-days banking schedule and the grade does not end with 'C', or if the grade starts with '32' or '33' and the union is \"National Union of Bank Employees (NUBE)\", and the leave duration is not a whole number, the leave request is invalid, and an error message is returned.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Sickness During Maternity Pay Period Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT FOR ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is 0 DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT is 1 DEFAULT FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is ' ' DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER11 IS 0 DEFAULT FOR ORA_HRX_GB_ABS_MAT_TYPE_PLAN_ID IS -1 DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR l_dummy = ess_log_write( 'SDM_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) band1name = 'Band1Pay' band2name = 'Band2Pay' band1payfactor = 100 band2payfactor = 100 band1entitlement = 0 band2entitlement = 0 l_related_smp_calculated_awe = 0 l_related_smp_override_awe = 0 l_related_smp_abs_type_id = 0 l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Start' ) l_tot_sdm_and_smp_used_entl = 0 CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER LOC_API_SKIP = 'N' l_iv_start_date = IV_START_DATE If ( IV_END_DATE was NOT DEFAULTED ) THEN ( l_iv_end_date = IV_END_DATE ) ELSE ( end_date_0000='4712/12/31 00:00:00' (DATE) end_date_0000=trunc(end_date_0000) l_iv_end_date = end_date_0000 ) l_sdm_band1_end_date='0001/01/01 00:00:00' (DATE) l_sdm_band2_end_date='0001/01/01 00:00:00' (DATE) l_mat_band2_end_date='0001/01/01 00:00:00' (DATE) l_temp_date='0001/01/01 00:00:00' (DATE) l_sdm_being_entered_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,-1) MATERNITY_ABSENCE_ENTRY_ID = 0 l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : CURRENT Absence Entry ID is : '|| to_char(l_sdm_being_entered_entry_id) ) search_start_date=add_days(l_iv_start_date,-272) search_end_date=l_iv_start_date i=1 CURRENT_ABS_IN_MAT39WEEKS = 'N' CURTAILMENT_PRESENT='N' FOUND_PREVIOUS_SDM = 'N' l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : CURRENT Absence = From '|| to_char(IV_START_DATE) ||' to '|| to_char( l_iv_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Search Range = From '|| to_char(search_start_date) ||' to '|| to_char( search_end_date ) ) l_end_date_to_consider = '0001/01/01 00:00:00' (date) l_max_start_date = l_end_date_to_consider l_max_end_date = l_end_date_to_consider l_latest_smp_actual_start_date = l_end_date_to_consider l_latest_smp_actual_end_date = l_end_date_to_consider l_latest_smp_planned_start_date = l_end_date_to_consider l_latest_smp_planned_end_date = l_end_date_to_consider l_no_of_weeks_smp_entl_used=0 CHANGE_CONTEXTS(START_DATE= trunc(search_start_date), END_DATE= search_end_date) ( l_tot = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.COUNT l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Array Size is = '|| to_char(l_tot)) while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] :=======================================================================================') l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] :================================== No ' || to_char(i) || '=============================') iter_absentry = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry) ( mat_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID l_leg_grp_code = 'XYZ' CHANGE_CONTEXTS(ABSENCE_TYPE_ID=mat_absence_type_id) ( map_event_type=ANC_ABS_TYP_MAP_EVENT_TYPE_CODE l_leg_grp_code = ANC_ABS_TYP_LEG_GROUPING_CD ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : mat_absence_type_id : '|| to_char(mat_absence_type_id)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : map_event_type : '|| map_event_type) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : : ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR [' ||to_char(i) ||'] = '|| to_char(ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] )) mat_absence_pattern=ANC_ABS_ENTRS_ABSENCE_PATTERN_CD abs_entry_status_cd='XYZ' abs_entry_status_cd=ANC_ABS_ENTRS_ABSENCE_STATUS_CD abs_entry_approval_status_cd='XYZ' abs_entry_approval_status_cd=ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : abs_entry_status_cd : '|| abs_entry_status_cd) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : mat_absence_pattern : '|| mat_absence_pattern) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_leg_grp_code : '|| l_leg_grp_code) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_start_date : '|| to_char( l_max_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_end_date : '|| to_char( l_max_end_date ) ) IF ( l_leg_grp_code = 'ORA_HRX_GB_MAT' AND mat_absence_pattern = 'MAP' and map_event_type = 'CHB' and abs_entry_status_cd='SUBMITTED' AND abs_entry_approval_status_cd='APPROVED' ) Then ( IF (ANC_ABS_MTRNT_ACTUAL_START_DATE was not DEFAULTED) then ( l_smp_actual_start_date = ANC_ABS_MTRNT_ACTUAL_START_DATE ) else ( l_smp_actual_start_date = '0001/01/01 00:00:00' (date) ) IF ( ANC_ABS_MTRNT_ACTUAL_RETURN_DATE was not DEFAULTED) then ( l_smp_actual_end_date = ANC_ABS_MTRNT_ACTUAL_RETURN_DATE ) else ( l_smp_actual_end_date = l_iv_end_date (date) ) IF ( ANC_ABS_MTRNT_PLANNED_START_DATE was not DEFAULTED) then ( l_smp_planned_start_date = ANC_ABS_MTRNT_PLANNED_START_DATE ) else ( l_smp_planned_start_date = '0001/01/01 00:00:00' (date) ) IF ( ANC_ABS_MTRNT_PLANNED_RETURN_DATE was not DEFAULTED) then ( l_smp_planned_end_date = ANC_ABS_MTRNT_PLANNED_RETURN_DATE ) else ( l_smp_planned_end_date = '0001/01/01 00:00:00' (date) l_smp_planned_end_date = l_iv_end_date (date) ) IF ( ANC_ABS_MTRNT_ACTUAL_START_DATE was not DEFAULTED) then ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : CONSIDERING ACTUAL DATES IF CRITERIA IS MET ') if ( l_max_end_date <= l_smp_actual_end_date) then ( l_max_end_date = l_smp_actual_end_date l_max_start_date = l_smp_actual_start_date MATERNITY_ABSENCE_ENTRY_ID = iter_absentry l_related_smp_abs_type_id=mat_absence_type_id l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : ACTUAL DATES CONSIDERED from Entry ID ' || to_char(MATERNITY_ABSENCE_ENTRY_ID)) ) ) ELSE ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : CONSIDERING PLANNED DATES IF CRITERIA IS MET ') if ( l_max_end_date <= l_smp_planned_end_date) then ( l_max_end_date = l_smp_planned_end_date l_max_start_date = l_smp_planned_start_date l_related_smp_abs_type_id=mat_absence_type_id MATERNITY_ABSENCE_ENTRY_ID = iter_absentry l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : PLANNED DATES CONSIDERED from Entry ID ' || to_char(MATERNITY_ABSENCE_ENTRY_ID)) ) ) CURRENT_ABS_IN_MAT39WEEKS = 'Y' l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : ****************** CURRENT_ABS_IN_MAT39WEEKS : '|| CURRENT_ABS_IN_MAT39WEEKS ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : ****************** ****************** ' ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_smp_planned_start_date : '|| to_char( l_smp_planned_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_smp_planned_end_date : '|| to_char( l_smp_planned_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_smp_actual_start_date : '|| to_char( l_smp_actual_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_smp_actual_end_date : '|| to_char( l_smp_actual_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_start_date : '|| to_char( l_max_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_end_date : '|| to_char( l_max_end_date ) ) ) i=i+1 ) ) ) l_mat_band2_end_date=add_days(l_max_start_date,272) l_diff_mat_vs_sdm_day=0 l_create_block_a_cert = 'N' l_create_block_b_cert = 'N' l_days_of_block_b = 0 l_cert_a_days=0 l_mat_weekdayno=to_number(to_char(l_max_start_date(date),'D') ) l_dummy = ess_log_write( 'l_mat_weekdayno is ' || to_char(l_mat_weekdayno)) l_sdm_weekdayno=to_number(to_char(l_iv_start_date(date),'D')) l_dummy = ess_log_write( ' l_sdm_weekdayno is ' || to_char(l_sdm_weekdayno)) l_diff_mat_vs_sdm_day=l_sdm_weekdayno - l_mat_weekdayno if ( l_diff_mat_vs_sdm_day> 0 ) then ( l_mat_week_matched_start_date = ADD_DAYS( l_iv_start_date , (l_diff_mat_vs_sdm_day*-1) + 7 ) l_dummy = ess_log_write ( 'l_mat_week_matched_start_date from if clause is ' || to_char(l_mat_week_matched_start_date)) ) else ( l_mat_week_matched_start_date = ADD_DAYS ( l_iv_start_date , l_diff_mat_vs_sdm_day*-1) l_dummy = ess_log_write ( 'l_mat_week_matched_start_date from ELSE clause is ' || to_char(l_mat_week_matched_start_date)) ) if ( l_iv_start_date < l_mat_week_matched_start_date ) then ( l_create_block_a_cert = 'Y' l_block_a_cert_start_date = trunc(l_iv_start_date) l_block_a_cert_end_date = trunc(LEAST ( l_iv_end_date, ADD_DAYS(l_mat_week_matched_start_date, -1) )) l_cert_a_days = days_between(l_block_a_cert_end_date,l_block_a_cert_start_date) + 1 ) l_sdm_ends_before_mat_week_date = 'N' if ( l_mat_week_matched_start_date > l_iv_end_date ) then ( l_create_block_b_cert = 'N' l_end_before_week_matched_date = 'Y' ) else ( l_end_before_week_matched_date = 'N' l_days_of_block_b = MOD( DAYS_BETWEEN(trunc(l_iv_end_date) , trunc(l_mat_week_matched_start_date)) + 1 , 7) if (l_days_of_block_b > 0 ) then ( l_create_block_b_cert = 'Y' l_block_b_cert_start_date = trunc(ADD_DAYS (l_iv_end_date , (-1*l_days_of_block_b) + 1) ) l_block_b_cert_end_date = trunc(l_iv_end_date) ) ) l_dummy = ess_log_write('l_create_block_a_cert is ' || l_create_block_a_cert) if (l_create_block_a_cert = 'Y') then l_dummy = ess_log_write('CERT A betweeen ' || to_char(l_block_a_cert_start_date) ||' and '|| to_char(l_block_a_cert_end_date)) l_dummy = ess_log_write('l_create_block_b_cert is ' || l_create_block_b_cert) if (l_create_block_b_cert = 'Y') then l_dummy = ess_log_write('CERT B betweeen ' || to_char(l_block_b_cert_start_date) ||' and '|| to_char(l_block_b_cert_end_date)) IF ( CURRENT_ABS_IN_MAT39WEEKS = 'Y') then ( l_all_days_smp_entl_used = days_between( l_max_end_date, l_max_start_date) + 1 l_no_of_weeks_smp_entl_used = trunc(l_all_days_smp_entl_used / 7) l_smp_entl_used = l_no_of_weeks_smp_entl_used * 7 ) search_start_date=add_days(l_max_end_date,1) search_end_date= trunc(l_iv_start_date) i=1 l_old_sdm_entl_total = 0 l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : -------------------------------------------------------') l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : -------- Starting Search of SDM records : ' || to_char(search_start_date ) ||' to '|| to_char(search_end_date) ||' -----') l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : -------------------------------------------------------') CHANGE_CONTEXTS(START_DATE= trunc(search_start_date), END_DATE= search_end_date) ( l_tot = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.COUNT l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : In SDM Search Loop') while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( iter_absentry = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry) ( mat_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID l_leg_grp_code = 'XYZ' CHANGE_CONTEXTS(ABSENCE_TYPE_ID=mat_absence_type_id, EFFECTIVE_DATE=l_trunc_eff_date ) ( l_leg_grp_code = ANC_ABS_TYP_LEG_GROUPING_CD ) l_absence_pattern=ANC_ABS_ENTRS_ABSENCE_PATTERN_CD abs_entry_status_cd='XYZ' abs_entry_status_cd=ANC_ABS_ENTRS_ABSENCE_STATUS_CD abs_entry_approval_status_cd='XYZ' abs_entry_approval_status_cd=ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : abs_entry_status_cd : '|| abs_entry_status_cd) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_absence_pattern : '|| l_absence_pattern) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_leg_grp_code : '|| l_leg_grp_code) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_start_date : '|| to_char( l_max_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_end_date : '|| to_char( l_max_end_date ) ) IF ( l_leg_grp_code = 'ORA_HRX_GB_SDM' AND l_absence_pattern = 'II' and abs_entry_status_cd='SUBMITTED' AND l_sdm_being_entered_entry_id <> iter_absentry AND abs_entry_approval_status_cd='APPROVED' ) Then ( l_sdm_start_date = ANC_ABS_ENTRS_START_DATE If ( ANC_ABS_ENTRS_END_DATE was NOT DEFAULTED ) THEN ( l_sdm_end_date = ANC_ABS_ENTRS_END_DATE ) ELSE ( end_date_0000='4712/12/31 00:00:00' (DATE) end_date_0000=trunc(end_date_0000) l_sdm_end_date = end_date_0000 ) FOUND_PREVIOUS_SDM = 'Y' l_old_sdm_duration = days_between(l_sdm_end_date, l_sdm_start_date) + 1 l_old_sdm_weekdayno = to_number(to_char( l_sdm_start_date , 'd' )) l_diff_for_old_sdm = 0 l_diff_for_old_sdm = l_old_sdm_weekdayno - l_mat_weekdayno if ( l_diff_for_old_sdm > 0 ) then ( l_old_sdm_mat_week_matched_start_date = ADD_DAYS ( l_sdm_start_date , l_diff_for_old_sdm + 7) ) else ( l_old_sdm_mat_week_matched_start_date = ADD_DAYS(l_sdm_start_date, -1 * l_diff_for_old_sdm ) ) if ( l_sdm_end_date > l_old_sdm_mat_week_matched_start_date ) then ( l_old_sdm_duration_weeks = trunc( (DAYS_BETWEEN( l_sdm_end_date , l_old_sdm_mat_week_matched_start_date) + 1) / 7) ) else ( l_old_sdm_duration_weeks = 0 ) l_old_sdm_entl = l_old_sdm_duration_weeks * 7 l_old_sdm_entl_total = l_old_sdm_entl_total + l_old_sdm_entl l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Found previous sdm from : '|| to_char(l_sdm_start_date) ||' to ' || to_char(l_sdm_end_date)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Days_between Function for : '|| to_char(l_sdm_start_date) ||' to ' || to_char(l_sdm_end_date) ||' Returns ' || to_char(l_old_sdm_duration)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Current sdm entitlement used is : '|| to_char(l_old_sdm_entl)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Cumulative of all sdm entitlements used is : '|| to_char(l_old_sdm_entl_total)) ) i=i+1 ) ) ) l_tot_sdm_and_smp_used_entl = l_smp_entl_used + l_old_sdm_entl_total l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Sum of all SMP and SDM entitlements used is : '|| to_char(l_tot_sdm_and_smp_used_entl)) l_cert_status = IV_UI_CERT_STATUS l_cert_id_being_changed=IV_UI_ABS_CERT_ID l_altcd_of_changed_cert='XYZ' l_cert_index = 1 IF l_cert_id_being_changed != ' ' THEN ( l_altcd_of_changed_cert = GET_VALUE_SET('ORA_HRX_GB_CERT_ALTCD' ,'|=CURRENT_CERT_ID='||l_cert_id_being_changed ) ) l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = IV_START_DATE l_cert_end_date = IV_END_DATE IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) if ( l_create_block_a_cert = 'Y') then ( l_create = 'N' l_cert_start_date = l_block_a_cert_start_date l_cert_end_date = l_block_a_cert_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) if ( l_create_block_b_cert = 'Y') then ( l_create = 'N' l_cert_start_date = l_block_b_cert_start_date l_cert_end_date = l_block_b_cert_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Before Checking for Payable day in SMP Eff date = '|| to_char(l_context_effective_Date) ||' person_id is '|| to_char(l_context_person_id)) l_related_smp_plan_id = 0 CHANGE_CONTEXTS( EFFECTIVE_DATE=l_max_start_date, ABSENCE_TYPE_ID=l_related_smp_abs_type_id) ( l_related_smp_plan_id = ORA_HRX_GB_ABS_MAT_TYPE_PLAN_ID l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Related SMP Plan ID from DBI is '|| to_char(l_related_smp_plan_id)) ) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE= l_max_start_date, ABSENCE_TYPE_ID= l_related_smp_abs_type_id, ABSENCE_ENTRY_ID= MATERNITY_ABSENCE_ENTRY_ID, HR_ASSIGNMENT_ID=l_context_assignment_id, ACCRUAL_PLAN_ID=l_related_smp_plan_id) ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : In Context scope Checking for Payable day in SMP ') l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : In Context scope Checking for Payable day in ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.count : '|| to_char(ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.count)) l_current_factor=0 l_current_unit=0 l_smp_is_paid='N' ni4=ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.FIRST(-1) while (ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.exists(ni4) and l_smp_is_paid = 'N') loop ( l_current_factor=ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR[ni4] l_current_unit = ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[ni4] l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Looping through Pay Factors -- Current Factor = '|| to_char(l_current_factor)|| ' Current Unit = ' || to_char(l_current_unit)) if ( l_current_factor > 0 and l_current_unit > 0) Then ( l_smp_is_paid = 'Y' l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Found a PAYABLE day in SMP , l_smp is paid = Y' ) ) ni4=ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.NEXT(ni4,-1) ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Before IF clause of certificate Not payabe SDM ') if ( l_smp_is_paid = 'N') Then ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Inside IF clause of Disqualification certificate ') l_create = 'N' l_cert_start_date = l_iv_start_date l_cert_end_date = l_iv_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NON_PAYABLE_LINKED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Related maternity absence is unpaid')) T_x0000_",
        "question": "The formula calculates the accrual for the \"Brought Forward Leave Plan 3 Years Expiry - Year 2.\" It determines the length of service in months by calculating the number of months between the start of the accrual period and the hire date. It retrieves the balance for the specified leave plan as of the end date of the previous year. The accrual is then set to write a  retrieved balance. The formula returns the calculated accrual along with any adjustment values, dates, and types.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Adoption Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_NOTIFICATION_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION, IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE, IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE, IV_NOTIFICATION_DATE,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'ADO_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_absence_type = 'ORA_HRX_GB_SA' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_matching_date = IV_MATCHING_DATE l_matching_week = l_matching_date l_awe_eff_date = l_matching_week CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_day_of_week = GET_DATE_DAY_OF_WEEK(l_matching_date) IF(l_day_of_week = 'SUN') THEN ( l_mws = l_matching_date) ELSE IF(l_day_of_week = 'MON') THEN (l_mws = ADD_DAYS(l_matching_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_mws = ADD_DAYS(l_matching_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_mws = ADD_DAYS(l_matching_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_mws = ADD_DAYS(l_matching_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_mws = ADD_DAYS(l_matching_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_mws = ADD_DAYS(l_matching_date,-6)) l_matching_week = add_days(l_mws,6) ) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_eff_date = l_matching_week l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_PLACEMENT_DATE',l_placement_date ) SET_INPUT ('IV_ABS_MATCHING_DATE',l_matching_date ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_matching_week)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN ( l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN ( l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ess_log_write( 'ADO_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'Average Weekly Earnings may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y' ) ) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( l_awe_eff_date = l_matching_week CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'ADO_Entitlement >> l_regprocdate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'ADO_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'ADO_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_dummy = ess_log_write( 'ADO_Entitlement >> l_ret_bal is = 0') ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'ADO_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_no_of_days=days_between(l_matching_week,l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_no_of_days < 176) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 if (l_days_bew > 273) then ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bew,7) if (l_days_after >= 1) then ( l_create = 'N' l_cert_start_date = TRUNC(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 CHANGE_CONTEXTS(START_DATE = trunc(l_start_date), END_DATE = l_end_date) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_cert_index] = 'The absence has multiple assignments associated with it and cannot be processed.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_band1end_date =add_days(l_start_date,band1entitlement-1) l_band2end_date =add_days(l_band1end_date,band2entitlement-1) l_entl_info = to_char(band1entitlement)||':'|| to_char(band1payfactor)||':'||to_char(l_band1end_date,'YYYY/MM/DD')||'#'|| to_char(band2entitlement) ||':'|| to_char(band2payfactor) ||':'||to_char(l_band2end_date,'YYYY/MM/DD') LOC_STRING_ARRAY['ENTITLEMENT_INFO']=l_entl_info LOC_NUMBER_ARRAY['AWE_CALCULATED']=l_calculated_awe l_dummy = ess_log_write( 'ADO_Entitlement >> LOC_STRING_ARRAY[ENTITLEMENT_INFO] is = '|| LOC_STRING_ARRAY['ENTITLEMENT_INFO'] ) l_dummy = ess_log_write( 'ADO_Entitlement >> LOC_NUMBER_ARRAY[AWE_CALCULATED] is = '|| to_char(LOC_NUMBER_ARRAY['AWE_CALCULATED']) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP",
        "question": "The formula validates pilgrimage leave applications in Malaysia. It ensures the duration does not exceed 7 days, the employee has 10 years of service, and no prior Hajj leave of 30 days has been taken. It also checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Maternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_qweek) is = '|| to_char(trunc(l_qweek))) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_complete_qweek) is = '|| to_char(trunc(l_complete_qweek))) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_complete_qweek),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_rel_period_end_for_awe_calc)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_rel_period_end_for_awe_calc,1) l_awe_eff_date = l_relevant_period_end_date_mod ) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_rel_period_end_for_awe_calc) is = '|| to_char(trunc(l_rel_period_end_for_awe_calc))) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0 ) l_dummy = ess_log_write( 'MAT_Entitlement >> get context payroll is l_payroll_id = '|| to_char(l_payroll_id)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'MAT_Entitlement >> l_regprocdate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'MAT_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'MAT_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_dummy = ess_log_write( 'MAT_Entitlement >>l_ret_bal = 0') ) ELSE ( IF (l_seniority_date > l_rel_period_start_for_awe_calc) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 2 = ' ||l_insuff_info_cert) ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) ) ) ) ) l_calculated_awe = l_awe l_dummy = ess_log_write( 'MAT_Entitlement >> l_calculated_awe = ' ||to_char(l_calculated_awe)) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_no_of_days < 176) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_ce_x0000_",
        "question": "The formula calculates the enrollment start date for absence plans in Thailand. It uses the later of the employee\u2019s hire date or September 5, 2019, as the start date. The formula returns the calculated enrollment start date.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Paternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_CHILD_BIRTH_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER11 IS 0 DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_INFORMATION_NUMBER5 IS 0 DEFAULT for ANC_ABS_ENTRS_INFORMATION_NUMBER5 is 0 DEFAULT for IV_INFORMATION_5 IS ' ' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION ,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE ,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE ,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4 , IV_MATCHING_DATE,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE ,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1,IV_INFORMATION_NUMBER5,IV_INFORMATION_5 l_dummy = ess_log_write( 'PAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_cert_index = 1 band1name = 'Band1Pay' band1payfactor = 100 band1entitlement = 14 band2name = 'Band2Pay' band2payfactor = 0 band2entitlement = 9999999 l_early_birth_indicator = 'N' l_cert_id_being_changed = ' ' l_cert_id_being_changed = IV_UI_ABS_CERT_ID l_cert_status = IV_UI_CERT_STATUS CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) l_altcd_of_changed_cert = 'XYZ' l_chk_payroll_tfr = 'Y' l_skip_payroll_trf_dbi = 'N' l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' l_create_diff_payrolls_cert = 'N' l_awe=0 l_calculated_awe = 0 l_statutory_2024_flag='N' main_absence_days = 0 main_entitled_days = 0 main_absence_days1 = 0 main_entitled_days1 = 0 l_actual_birth_date = '0001/01/01 00:00:00' (date) reference_birth_date = '0001/01/01 00:00:00' (date) reference_52week_date = '0001/01/01 00:00:00' (date) reference_52week_end_date = '0001/01/01 00:00:00' (date) l_expected_child_birth = '0001/01/01 00:00:00' (date) l_complete_qweek = '0001/01/01 00:00:00' (date) l_maximum_weeks_paid='N' l_not_payable_after_52_weeks='N' l_not_payable_missing_dates='N' l_not_payable_missing_dates_cert='N' l_days_bew = 0 FOUND_PREVIOUS_PAT = 'N' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_northern_ireland_flag=IV_INFORMATION_5 IF l_cert_id_being_changed != ' ' THEN ( l_altcd_of_changed_cert = GET_VALUE_SET('ORA_HRX_GB_CERT_ALTCD' ,'|=CURRENT_CERT_ID='||l_cert_id_being_changed ) ) if ((ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_EXTN' ) OR (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO_EXTN' )) THEN ( IF IV_INFORMATION_NUMBER5 WAS NOT DEFAULTED THEN ( l_expected_child_birth = '0001/01/01 00:00:00' (date) l_actual_birth_date = '0001/01/01 00:00:00' (date) l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=IV_INFORMATION_NUMBER5) ( l_expected_child_birth = ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH l_actual_birth_date = ANC_ABS_MTRNT_ACTUAL_CHILD_BIRTH_DATE l_override_awe= ANC_ABS_ENTRS_INFORMATION_NUMBER1 l_calculated_awe = ANC_ABS_ENTRS_INFORMATION_NUMBER11 main_absence_days = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_array_index=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR.FIRST(-1) while (ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR.exists(l_array_index)) loop ( if ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] != 'V' THEN ( IF ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[l_array_index] = 'ORA_HRX_GB_PAYROLL_CHANGED' THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'Average Weekly Earnings may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ELSE IF ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[l_array_index] = 'ORA_HRX_GB_LEL_NOT_REACHED' THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ELSE IF ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[l_array_index] = 'ORA_HRX_GB_INSUFF_INFO_AWE' THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ELSE IF ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[l_array_index] = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ELSE IF ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[l_array_index] = 'ORA_HRX_GB_EXCEEDED_52_WEEKS' THEN ( CERT_NAMES[l_cert_index] = 'Not payable after 52 weeks' CERT_COMMENTS[l_cert_index] = 'Statutory Paternity is not payable post 52 weeks of the birth of a child.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 l_not_payable_after_52_weeks = 'Y' ) ELSE IF ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[l_array_index] = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Statutory Paternity has already been paid for a previous absence.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 l_maximum_weeks_paid='Y' ) ELSE IF ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[l_array_index] = 'ORA_HRX_GB_MAIN_PAT_EXISTS' THEN ( CERT_NAMES[l_cert_index] = 'A main paternity leave record exists for this date of birth/placement date' CERT_COMMENTS[l_cert_index] = 'A main paternity record already exists for this date of birth/placement date.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ELSE IF ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[l_array_index] = 'ORA_HRX_GB_NO_PAY_MISSING_AD' THEN ( CERT_NAMES[l_cert_index] = 'The actual placement or childbirth date on the main paternity absence record is blank' CERT_COMMENTS[l_cert_index] = 'The actual date of birth field is not populated and so the absence cannot be processed.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 l_not_payable_missing_dates_cert = 'Y' ) ) l_array_index=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR.NEXT(l_array_index,-1) ) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> IV_INFORMATION_NUMBER5 '||to_char(IV_INFORMATION_NUMBER5)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_override_awe '||to_char(l_override_awe)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_calculated_awe '||to_char(l_calculated_awe)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_expected_child_birth '||to_char(l_expected_child_birth)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_actual_birth_date '||to_char(l_actual_birth_date)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_not_payable_after_52_weeks '||l_not_payable_after_52_weeks) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_not_payable_missing_dates_cert '||l_not_payable_missing_dates_cert) ) ) ) if ((ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT' ) OR (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO' )) THEN ( IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_placement_date = IV_ACTUALCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE ) l_start_date = IV_START_DATE l_end_date = IV_END_DATE IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_pay_stop_date = l_end_date l_rate_def_name = ' ' l_early_birth_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_absence_type = 'ORA_HRX_GB_SPB' l_perform_awe_check = 'Y' ) LOC_API_SKIP = 'N' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) if ((l_event_type = 'CHB')) then ( l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_absence_type = 'ORA_HRX_GB_SPB' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_ewc_param_for_override_formula = l_ewc l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) IF (l_actual_birth_date (date) > '0001/01/01 00:00:00' (date)) THEN ( IF l_actual_birth_date (date) < l_complete_qweek (date) THEN ( l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_awe_eff_date = l_ewc l_EFF_DATE = l_complete_qweek l_statutory_date_2024 = '2024/04/07 00:00:00' (date) IF ((l_ewc_param_for_override_formula (date) < l_statutory_date_2024 (date)) OR (l_northern_ireland_flag = 'Y')) THEN ( l_statutory_2024_flag='N' ) else ( l_statutory_2024_flag='Y' IF (l_actual_birth_date (date) > '0001/01/01 00:00:00' (date)) THEN ( reference_52week_date = l_actual_birth_date IF (l_actual_birth_date (date) < l_ewc_param_for_override_formula (date) ) THEN ( reference_52week_date = l_ewc_param_for_override_formula ) ) else ( l_not_payable_missing_dates='Y' reference_52week_date = l_expected_child_birth ) ) ) else if (l_event_type = 'PLC') then ( l_absence_type = 'ORA_HRX_GB_SPA' if((IV_MATCHING_DATE WAS NOT DEFAULTED) AND (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO' )) then ( l_mws = trunc( IV_MATCHING_DATE, 'DAY') l_matching_week = add_days(l_mws,6) l_no_of_days=days_between(l_matching_week,l_seniority_date) l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_awe_eff_date = l_matching_week l_EFF_DATE = l_matching_week ) l_statutory_date_2024 = '2024/04/06 00:00:00' (date) reference_birth_date = l_actual_birth_date if((IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED) AND (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO' )) then ( reference_birth_date = IV_EXPECTEDCHILDBIRTHDATE ) if(('0001/01/01 00:00:00' (date) = l_actual_birth_date (date)) AND (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO_EXTN' )) then ( reference_birth_date = l_expected_child_birth ) IF ((reference_birth_date (date) < l_statutory_date_2024 (date)) OR (l_northern_ireland_flag = 'Y')) THEN ( l_statutory_2024_flag='N' ) else ( l_statutory_2024_flag='Y' reference_52week_date = l_actual_birth_date if((IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED) AND (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO' )) then ( l_not_payable_missing_dates='Y' reference_52week_date = l_expected_child_birth ) if(('0001/01/01 00:00:00' (date) = l_actual_birth_date (date)) AND (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO_EXTN' )) then ( l_not_payable_missing_dates='Y' reference_52week_date = l_expected_child_birth ) ) ) if ((ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT' ) OR (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO' )) THEN ( l_lel = 0 l_ret_bal = 0 l_bal_periodicity = 'UNK' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_awe_factor = 1 l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPB') THEN ( SET_INPUT ('IV_ABS_QUAL_WEEK', l_qweek) SET_INPUT ('IV_ABS_EDC', l_ewc_param_for_override_formula) ) IF (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPA') THEN ( SET_INPUT ('IV_ABS_PLACEMENT_DATE', l_placement_date) SET_INPUT ('IV_ABS_MATCHING_DATE', IV_MATCHING_DATE) ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( IF (l_chk_payroll_tfr = 'Y') THEN ( IF l_event_type = 'CHB' THEN ( IF (l_early_birth_indicator = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement Early Birth >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement Early Birth >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement Early Birth >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) ) IF l_event_type = 'PLC' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_matching_week)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ess_log_write( 'PAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant_x0000_",
        "question": "Validates adoption/paternity leave applications in Malaysia. Ensures the leave start date matches the child\u2019s birth date, the employee has worked at least 3 months, prohibits leave during probation for contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Statutory Sick Pay History Formula",
        "answer": "DEFAULT FOR IV_LNKG_LNKD_ABS_START is EMPTY_DATE_NUMBER DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR is 0 DEFAULT FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT FOR ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER2 is 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER4 is -1 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_DATE1 is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_VOID_YN_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_VOID_YN_ARR is ' ' INPUTS ARE IV_L_START_DATE (DATE), IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_DETAILS_FORMULA_NAME (TEXT), IV_DISQUALIFICATION_SEEN (TEXT) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) details_formula_name=IV_DETAILS_FORMULA_NAME disqualification_seen=IV_DISQUALIFICATION_SEEN end_of_time='4712/12/31 00:00:00' (DATE) statutory_year_limit=3 l_absentry_qualified_days=0 l_absentry_ssp_weeks=0 l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date='4712/12/31 00:00:00' (DATE) l_first_absence_start_date=IV_L_START_DATE l_linked_absences_exist=0 migration_waiting_days= -1 ALT_SCHEDULE_EXISTS_ON_ASG='N' ALT_SCHEDULE_ENABLED_ON_PLAN='N' USE_ALT_SCHEDULE='N' type_of_reg_shift=' ' type_of_alt_shift=' ' ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 l_first_absence_start_date = IV_LNKG_LNKD_ABS_START[ni] while (IV_LNKG_LNKD_ABS_ID.exists(ni)) loop ( l_iv_lnkd_abs_id=IV_LNKG_LNKD_ABS_ID[ni] l_iv_lnkg_lnkd_abs_start_date = IV_LNKG_LNKD_ABS_START[ni] l_iv_lnkg_lnkd_abs_end_date = IV_LNKG_LNKD_ABS_END[ni] l_abs_entry_start_date=l_iv_lnkg_lnkd_abs_start_date l_abs_entry_end_date=l_iv_lnkg_lnkd_abs_end_date CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=trunc(l_context_effective_date), ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_iv_lnkd_abs_id, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( l_scheduled_units_arr=EMPTY_NUMBER_TEXT l_absent_units_arr=EMPTY_NUMBER_TEXT week_start_of_first_week=NEXT_DAY(add_days(l_abs_entry_start_date,-7),'SUNDAY') week_start_of_last_week=NEXT_DAY(add_days(l_abs_entry_end_date,-7),'SUNDAY') l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) dc_absentry_ssp_weeks=0 dc_absentry_qualified_days=0 USE_ALT_SCHEDULE='N' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',l_iv_lnkg_lnkd_abs_start_date) if USE_ALT_SCHEDULE='N' then ( type_of_alt_shift=type_of_reg_shift ) ELSE ( type_of_alt_shift=type_of_reg_shift ) if type_of_alt_shift='NO_ALTERNATE' then ( type_of_alt_shift=type_of_reg_shift ) USE_ALT_SCHEDULE='Y' if(type_of_alt_shift='TIME') then ( week_end_of_last_week=add_days(week_start_of_last_week,6) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=trunc(l_context_effective_date) )( set_input('IV_START_DATE',week_start_of_first_week) set_input('IV_END_DATE',week_end_of_last_week) set_input('TYPE_OF_SHIFT','TIME') set_input('USE_ALT_SCHEDULE','Y') execute(details_formula_name) HIST_DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) ni4=ANC_ABS_PLN_ENTR_START_DATE_ARR.FIRST(-1) while (ANC_ABS_PLN_ENTR_START_DATE_ARR.exists(ni4)) loop ( l_current_date=ANC_ABS_PLN_ENTR_START_DATE_ARR[ni4] SUNDAY_DATE=to_char(NEXT_DAY(add_days(ANC_ABS_PLN_ENTR_START_DATE_ARR[ni4],-7),'SUNDAY'),'YYYY-MM-DD') if not l_absent_units_arr.exists(SUNDAY_DATE) then ( l_scheduled_units_arr[SUNDAY_DATE]=0 l_absent_units_arr[SUNDAY_DATE]=0 ) l_scheduled_units_arr[SUNDAY_DATE]=l_scheduled_units_arr[SUNDAY_DATE]+ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR[ni4] l_absent_units_today=((ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[ni4]*ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR[ni4])/100.0) l_absent_units_arr[SUNDAY_DATE]=l_absent_units_arr[SUNDAY_DATE]+l_absent_units_today dc_absentry_qualified_days = dc_absentry_qualified_days + ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR[ni4] ni4=ANC_ABS_PLN_ENTR_START_DATE_ARR.NEXT(ni4,-1) ) SUNDAY_DATE=l_absent_units_arr.FIRST('x') while (l_absent_units_arr.exists(SUNDAY_DATE)) loop ( l_week_start_date=to_date(SUNDAY_DATE,'YYYY-MM-DD') l_next_week_start_date=add_days(l_week_start_date,7) if(type_of_alt_shift='TIME') then ( l_scheduled_units=0 current_day = l_week_start_date while(current_day < l_next_week_start_date) loop( trunc_current_day = to_char(trunc(current_day)) if(HIST_DAY_STATUS_LIST.exists(trunc_current_day)) then ( l_scheduled_units = l_scheduled_units+1 ) current_day=add_days(current_day,1) ) ) else ( l_scheduled_units=GET_PAY_AVAILABILITY('ASSIGN',l_week_start_date,l_next_week_start_date,'Y','Y','Y','R','D' ,'N','N',8,'N','N',USE_ALT_SCHEDULE,'SSP') ) l_ssp_fraction=0 if (l_scheduled_units=1) then ( l_ssp_fraction=1 ) if (l_scheduled_units=2) then ( l_ssp_fraction=0.5 ) if (l_scheduled_units=3) then ( l_ssp_fraction=0.334 ) if (l_scheduled_units=4) then ( l_ssp_fraction=0.25 ) if (l_scheduled_units=5) then ( l_ssp_fraction=0.2 ) if (l_scheduled_units=6) then ( l_ssp_fraction=0.167 ) if (l_scheduled_units=7) then ( l_ssp_fraction=0.143 ) l_week_value=0 if (l_scheduled_units > 0) then( absent_units=l_absent_units_arr[SUNDAY_DATE] if (absent_units=l_scheduled_units) then( l_week_value=1.0 ) else ( l_week_value = absent_units * l_ssp_fraction ) dc_absentry_ssp_weeks = dc_absentry_ssp_weeks + l_week_value ) SUNDAY_DATE=l_absent_units_arr.NEXT(SUNDAY_DATE,'x') ) cert_comments_collection=' ' if (disqualification_seen='N') then ( ni4=ANC_ABS_ENTR_CERTS_STATUS_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_STATUS_ARR.exists(ni4)) loop ( if (ANC_ABS_ENTR_CERTS_STATUS_ARR[ni4]='C') then ( if (ANC_ABS_CERTS_INFORMATION1_ARR[ni4]='Y') then ( if not cert_comments_collection=' ' then cert_comments_collection=cert_comments_collection+', ' text=ANC_ABS_CERTS_NAME_ARR[ni4]+'/'+to_char(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni4],'YYYY-MM-DD')+'/'+to_char(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni4],'YYYY-MM-DD') cert_comments_collection=cert_comments_collection+text disqualification_seen='Y' ) ) ni4=ANC_ABS_ENTR_CERTS_STATUS_ARR.NEXT(ni4,-1) ) ) if ( IV_LNKG_LNKD_ABS_START[ni] = l_first_absence_start_date ) then ( if (ANC_ABS_ENTRS_INFORMATION_NUMBER2 > 0 ) then ( dc_absentry_ssp_weeks = dc_absentry_ssp_weeks + ANC_ABS_ENTRS_INFORMATION_NUMBER2 ) if (ANC_ABS_ENTRS_INFORMATION_NUMBER4 >= 0 ) then ( migration_waiting_days = ANC_ABS_ENTRS_INFORMATION_NUMBER4 ) ) if (ANC_ABS_ENTRS_INFORMATION_DATE1 < end_of_time) then ( l_max_years_exceed_date_hist = add_years(ANC_ABS_ENTRS_INFORMATION_DATE1,statutory_year_limit) l_max_years_exceed_date_hist = add_days(l_max_years_exceed_date_hist,-1) ) partialDaysInAbsEntry=0 ni2=ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR.FIRST(-1) while ( ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR.exists(ni2)) loop ( certName=ANC_ABS_CERTS_NAME_ARR[ni2] if ( certName = 'Day Not Eligible For SSP' ) then ( certDate=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni2] certStatus=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni2] certVoid=ANC_ABS_ENTR_CERTS_VOID_YN_ARR[ni2] if (certStatus='C' and certVoid='N') then ( partialDaysInAbsEntry=partialDaysInAbsEntry+1 E_LOG=ESS_LOG_WRITE('UK:SSP:HIST:PARTIAL:partial day not valid for waiting day use:' ||to_char(certDate)) ) ) ni2=ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR.NEXT(ni2,-1) ) ) l_absentry_qualified_days=dc_absentry_qualified_days-partialDaysInAbsEntry l_absentry_ssp_weeks=dc_absentry_ssp_weeks l_total_qualified_days=l_total_qualified_days+l_absentry_qualified_days l_total_ssp_weeks=l_total_ssp_weeks+l_absentry_ssp_weeks ni=IV_LNKG_LNKD_ABS_ID.NEXT(ni,-1) ) ) return l_total_qualified_days,l_total_ssp_weeks,migration_waiting_days,l_max_years_exceed_date_hist,l_first_absence_start_date,disqualification_seen",
        "question": "Validates no-pay leave applications in Singapore. Ensures annual leave and sick leave (60 days) are fully utilized, prohibits leave during the first 3 months or probation unless all leave is exhausted, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Statutory Sick Pay Check for Sickness During Maternity",
        "answer": "DEFAULT FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR is 0 DEFAULT FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT FOR ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER2 is 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER4 is -1 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_DATE1 is '4712/12/31 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_SSP_START_DATE (DATE) l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_iv_start_date=IV_SSP_START_DATE linked_to_sdm='N' search_start_date=add_days(l_iv_start_date,-(39+8)*7) search_end_date=l_iv_start_date start_date_56days=add_days(l_iv_start_date,-56) i=1 e_log=('DEBUG:SDM.SEARCH_ANY_SDM CURRENT Absence uncorrected StartDate: '|| to_char(IV_SSP_START_DATE)) e_log=('DEBUG:SDM.SEARCH_ANY_SDM search_start_date: '|| to_char(search_start_date)) e_log=('DEBUG:SDM.SEARCH_ANY_SDM search_end_date: '|| to_char(search_end_date)) e_log=('DEBUG:SDM.SEARCH_ANY_SDM start_date_56days: '|| to_char(start_date_56days)) CHANGE_CONTEXTS(START_DATE= search_start_date, END_DATE= search_end_date) ( l_tot = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.COUNT e_log=('DEBUG:SDM.SEARCH_ANY_SDM Array Size is = '|| to_char(l_tot)) while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( e_log=('DEBUG:SDM.SDM_CHECK_LOOP ===================== iteration: '|| to_char(i)) iter_absentry = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] if (l_context_absence_entry_id <> iter_absentry) then ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry) ( mat_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID mat_start_date=trunc(ANC_ABS_ENTRS_START_DATE) l_leg_grp_code = 'XYZ' CHANGE_CONTEXTS(ABSENCE_TYPE_ID=mat_absence_type_id,EFFECTIVE_DATE=mat_start_date) ( map_event_type=ANC_ABS_TYP_MAP_EVENT_TYPE_CODE l_leg_grp_code = ANC_ABS_TYP_LEG_GROUPING_CD ) e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL mat_absence_type_id : '|| to_char(mat_absence_type_id)) e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL map_event_type : '|| map_event_type) e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL : ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR [' ||to_char(i) ||'] = '|| to_char(ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] )) abs_absence_pattern=ANC_ABS_ENTRS_ABSENCE_PATTERN_CD abs_entry_status_cd='XYZ' abs_entry_status_cd=ANC_ABS_ENTRS_ABSENCE_STATUS_CD abs_entry_approval_status_cd = ANC_ABS_ENTRS_APPROVAL_STATUS_CD e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL abs_entry_status_cd : '|| abs_entry_status_cd) e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL abs_absence_pattern : '|| abs_absence_pattern) e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL l_leg_grp_code : '|| l_leg_grp_code) if ( l_leg_grp_code = 'ORA_HRX_GB_SDM' AND abs_absence_pattern = 'II' and abs_entry_status_cd='SUBMITTED' and abs_entry_approval_status_cd='APPROVED') then ( e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL found SDM absence id: '|| to_char(iter_absentry)) sdm_end_date=ANC_ABS_ENTRS_END_DATE e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL SDM end date: '|| to_char(sdm_end_date)) if ((sdm_end_date >= start_date_56days) and (sdm_end_date < search_end_date)) then ( linked_to_sdm='Y' e_log=('DEBUG:SDM.SDM_CHECK_LINK_FOUND SDM.END_DATE='|| to_char(sdm_end_date)) ) e_log=('DEBUG:SDM.SDM_CHECK_ABS_DETAIL linked_to_sdm: '|| linked_to_sdm) ) ) ) i=i+1 ) ) e_log=('DEBUG:SDM.SDM_CHECK_RESULT linked_to_sdm: '|| linked_to_sdm) return linked_to_sdm",
        "question": "Validates critical illness leave applications in Singapore. Ensures the duration does not exceed 2 days per instance and 10 days per year for illness of immediate family, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Statutory Sick Pay Linking Letter Detection",
        "answer": "DEFAULT FOR PER_PER_DOR_DOCUMENT_CODE is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_CODE is 'X' DEFAULT FOR PER_PER_DOR_DOCUMENT_TYPE_ID is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_ID is 0 DEFAULT FOR PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is 'X' DEFAULT FOR PER_PER_DOR_DATE_FROM is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_FROM is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PER_DOR_DATE_TO is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_TO is '4712/12/31 00:00:00' (DATE) INPUTS are IV_L_START_DATE (date) l_start_date=IV_L_START_DATE link_letter_cert_flag = 'N' ni=PER_PER_DOR_DOCUMENT_CODE.FIRST(-1) if PER_PER_DOR_DOCUMENT_CODE.exists(ni) then ( l_found=0 while (PER_PER_DOR_DOCUMENT_CODE.exists(ni) and l_found=0) loop ( l_dor_document_code=PER_PER_DOR_DOCUMENT_CODE[ni] l_dor_document_type_id=PER_PER_DOR_DOCUMENT_TYPE_ID[ni] l_dor_system_doc_type=PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME[ni] l_dor_date_from=PER_PER_DOR_DATE_FROM[ni] l_dor_date_to=PER_PER_DOR_DATE_TO[ni] if 'ORA_HRX_GB_JC_LINK_LETTER'=l_dor_system_doc_type then ( if l_start_date >= l_dor_date_from and l_start_date <= l_dor_date_to then ( l_found=1 link_letter_cert_flag = 'Y' ) ) ni=PER_PER_DOR_DOCUMENT_CODE.NEXT(ni,-1) ) ) return link_letter_cert_flag",
        "question": "Validates sick leave applications in the UK. Ensures the duration does not exceed 30 days, requires a medical certificate for durations over 7 days, checks the manager\u2019s active status, and prevents overlap between calendar years for non-contract employees. Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Statutory Sick Pay Average Earnings Calculation",
        "answer": "DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT for PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE (DATE),IV_END_DATE (DATE),IV_L_START_DATE (DATE) end_of_time='4712/12/31 00:00:00' (DATE) l_start_date=IV_L_START_DATE lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' configure_check_payroll_transfer='Y' l_altawe_cert='N' l_awe=0 l_lel=0 l_override_awe=0 l_relevant_period_end_date = end_of_time l_relevant_period_start_date = end_of_time l_absence_type = 'ORA_HRX_GB_SS' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_rel_date_start=PER_REL_DATE_START IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = '4712/12/31 00:00:00' (date) ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_pay_rel_date_start = GET_PLSD_FSED l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel=GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF (l_license <> 'PAY') THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_license = 'PAY') THEN ( l_reference_date = ADD_DAYS(trunc(l_start_date),-1) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_reference_date)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'SSP_AWE_Dates >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'SSP_AWE_Dates >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'SSP_AWE_Dates >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date)) ( l_paydate = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_regprocdate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF( l_insuff_info_cert = 'N' ) THEN ( l_rate_eff_date = add_days(l_start_date,-1) l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_rate_eff_date BEFORE = '|| to_char(l_rate_eff_date )) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rate_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_ret_bal AFTER = '||TO_CHAR(l_ret_bal)) ) IF (l_ret_bal = 0) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' IF (l_override_awe = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( l_insuff_info_cert = 'N' ) ) ELSE ( lel_cert_flag = 'Y' ) ) ) ELSE ( IF l_seniority_date < l_rel_date_start THEN ( l_rel_date_start = l_seniority_date ) IF l_rel_date_start > l_relevant_period_end_date THEN ( l_insuff_info_cert = 'Y' ) ELSE IF (l_rel_date_start > l_relevant_period_start_date) THEN ( IF l_pay_rel_date_start < l_rel_date_start THEN ( l_insuff_info_cert = 'Y' ) ELSE ( l_service_days = DAYS_BETWEEN(l_relevant_period_end_date,l_rel_date_start)+1 l_service_weeks = l_service_days/7 l_service_weeks_floor = FLOOR(l_service_weeks) IF l_service_weeks = 0 THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_service_weeks_floor = l_service_weeks) THEN ( l_awe = l_ret_bal/l_service_weeks ) ELSE ( l_awe = (l_ret_bal/l_service_days)*7 ) ) ) ) ELSE ( if (l_src_periodicity = 'YEAR') then( l_awe_factor = 1/52 ) else if (l_src_periodicity = 'SEMI-YEAR') then( l_awe_factor = 2/52 ) else if (l_src_periodicity = 'QUARTER') then( l_awe_factor = 4/52 ) else if (l_src_periodicity = 'WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'BI-WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'LUNAR MONTH') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'CALENDAR MONTH') then( l_awe_factor = 6/52 ) else if (l_src_periodicity = 'BI-MONTH') then( l_awe_factor = 6/52 ) l_awe = (l_ret_bal * l_awe_factor) ) ) ) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') then( lel_cert_flag='Y' ) if (l_insuff_info_cert='Y') then (lel_cert_flag='N') l_payroll_name_a='X' l_payroll_name_b='X' IF ((configure_check_payroll_transfer='Y') AND (l_license = 'PAY') ) THEN ( If ( l_rel_date_start > l_rel_period_end_for_awe_calc ) THEN ( configure_check_payroll_transfer='N' xlog=ESS_LOG_WRITE ( 'SSP_Entitlement: Skip chkpaytfr as reldatestart after relevant period end') ) ELSE IF ( l_rel_date_start > l_rel_period_start_for_awe_calc ) then ( l_rel_period_start_for_awe_calc=l_rel_date_start xlog=ESS_LOG_WRITE ( 'SSP_Entitlement: chkpaytfr as reldatestart between relevant period start and end') ) xlog=ESS_LOG_WRITE ( 'SSP_Entitlement:Payroll Name Check Dates are: ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF ( configure_check_payroll_transfer='Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc)( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) then ( l_payroll_name_b=PAY_PRIMARY_PAYROLL_NAME_NF xlog=ESS_LOG_WRITE ( 'SSP_Entitlement:l_payroll_name_b: ' || l_payroll_name_b) ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc)( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) then ( l_payroll_name_a=PAY_PRIMARY_PAYROLL_NAME_NF xlog=ESS_LOG_WRITE ('SSP_Entitlement:l_payroll_name_a: ' || l_payroll_name_a) ) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( paychg_cert_flag='Y' xlog=ESS_LOG_WRITE ('SSP_Entitlement:Create Different Payrolls certificate is Y') ) if (paychg_cert_flag='Y') then (l_insuff_info_cert='N') if (paychg_cert_flag='Y') then (lel_cert_flag='N') ) ) return lel_cert_flag,l_insuff_info_cert,paychg_cert_flag,l_awe",
        "question": "Calculates prorated brought forward leave accrual for employees in Malaysia with 3-year expiry, year 2. Carries over the balance from year 1, restricts accrual during unpaid, maternity, emergency, or Hajj leave. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "FR - Maternit\u00e9, paternit\u00e9, adoption - Droits",
        "answer": "DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_LEG_GROUPING_CD is 'Unknown' DEFAULT for ANC_ABS_PLN_LEG_GROUPING_CD is 'Unknown' DEFAULT FOR IV_INFORMATION_4 is 'Unknown' DEFAULT FOR IV_INFORMATION_5 is 'Unknown' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION ,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE ,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE, IV_INFORMATION_4(TEXT), IV_INFORMATION_5(TEXT) BAND1PAYFACTOR = 0 BAND1ENTITLEMENT =0 ret = ess_log_write ( '-- Start of ENTITLMENT FORMULA------') IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_MATERNITY' ) THEN ( lc_variable_to_be_logged = 'ante patho status: '|| IV_INFORMATION_4 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'Post patho status : '|| IV_INFORMATION_5 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (ANC_ABS_PLN_LEG_GROUPING_CD = 'ORA_HRX_FR_ANT') THEN ( ret = ess_log_write ( '-- Start of ANT------') lc_variable_to_be_logged = 'ANC_ABS_PLN_LEG_GROUPING_CD : '|| ANC_ABS_PLN_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED) THEN ( l_weeks = DAYS_BETWEEN(trunc(IV_ACTUALCHILDBIRTHDATE) ,trunc(IV_ACTUALSTARTDATE))/7 lc_variable_to_be_logged = 'trunc(IV_ACTUALCHILDBIRTHDATE): '|| to_char(trunc(IV_ACTUALCHILDBIRTHDATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'trunc(IV_ACTUALCHILDBIRTHDATE) : '|| to_char(trunc(IV_ACTUALCHILDBIRTHDATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'trunc(IV_ACTUALSTARTDATE) : '|| to_char(trunc(IV_ACTUALSTARTDATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = '(DAYS_BETWEEN(trunc(IV_ACTUALCHILDBIRTHDATE) ,trunc(IV_ACTUALSTARTDATE)))) : '|| to_char((DAYS_BETWEEN(trunc(IV_ACTUALCHILDBIRTHDATE) ,trunc(IV_ACTUALSTARTDATE)))) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) ELSE (l_weeks = (DAYS_BETWEEN(trunc(IV_EXPECTEDCHILDBIRTHDATE) ,trunc(IV_PLANNEDSTARTDATE)))/7) band1entitlement = l_weeks band1payfactor = 100 lc_variable_to_be_logged = 'percent is : '|| TO_CHAR(band1payfactor ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(band1entitlement ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT ) IF (ANC_ABS_PLN_LEG_GROUPING_CD = 'ORA_HRX_FR_POST') THEN ( ret = ess_log_write ( '-- Start of post natal ------') lc_variable_to_be_logged = 'ANC_ABS_PLN_LEG_GROUPING_CD : '|| ANC_ABS_PLN_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED) THEN (l_weeks_post = (DAYS_BETWEEN(add_days(trunc(IV_ACTUALENDDATE),1) ,add_days(trunc(IV_ACTUALCHILDBIRTHDATE),1)))/7) ELSE (l_weeks_post = (DAYS_BETWEEN(add_days(trunc(IV_PLANNEDENDDATE),1) ,add_days(trunc(IV_EXPECTEDCHILDBIRTHDATE),1)))/7) band1payfactor = 100 band1entitlement = 99999 lc_variable_to_be_logged = 'percent is : '|| TO_CHAR(band1payfactor ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(band1entitlement ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT ) ) Else ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADOPT' OR ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_PATERNITY' OR ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ANT_PAT' OR ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_POST_PAT') THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 99999 lc_variable_to_be_logged = 'ANC_ABS_TYP_LEG_GROUPING_CD : '|| ANC_ABS_TYP_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'percent is : '|| TO_CHAR(band1payfactor ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(band1entitlement ) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BC OAP Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 is ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 IS 'N' DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_MATCHING_DATE(date), IV_ATTRIBUTE_1(text), IV_INFORMATION_DATE1 (date), IV_PLANNEDSTARTDATE (date), IV_PLANNEDENDDATE (date) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 l_debug = ess_log_write(' OAP Entitlement IV_START_DATE = '+to_char(IV_START_DATE)) Service_days=0 l_fte=0 l_contract_fte = 0 l_start_dt='0001/01/01 00:00:00' (date) l_ed_date = IV_START_DATE l_seniority_date ='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_MATCHING_DATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>=1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE3 Like '%Y')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 42 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 42 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 ) l_debug = ess_log_write('ANC_ABS_ENTRS_ATTRIBUTE3 '+ ANC_ABS_ENTRS_ATTRIBUTE3) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT, BAND4ENTITLEMENT, BAND4PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OMP Officers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE2 IS 'N' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>=1 AND PER_ASG_PRIMARY_FLAG = 'Y') THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE2 Like '%Y')THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 147 ) ELSE ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 147 ) ) ELSE ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) l_debug = ess_log_write('ANC_ABS_ENTRS_ATTRIBUTE2 '+ ANC_ABS_ENTRS_ATTRIBUTE2) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OPA Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_START_DATE l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-105) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days = DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service = Service_days/365 Weeks_of_service = Year_of_service * 52.143 IF(Weeks_of_service > 26) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OMP NHS Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE2 IS 'N' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>1) OR (Year_of_service=1) THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE2 Like '%Y%')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 182 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 182 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OSP NHS Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_START IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) Service_days=DAYS_BETWEEN(l_seniority_date,IV_START_DATE)+1 Year_of_service=Service_days/365 Months_of_service = MONTHS_BETWEEN(IV_START_DATE,l_seniority_date) IF(Year_of_service > 0 AND Year_of_service < 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 22 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service >= 1 AND Year_of_service < 2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 43 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service >= 2 AND Year_of_service < 3) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 87 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 87 ) ELSE IF(Year_of_service >= 3 AND Year_of_service < 5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 108 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 108 ) ELSE IF(Year_of_service >= 5) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OSP NHS Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_START IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) Service_days=DAYS_BETWEEN(IV_START_DATE,l_seniority_date)+1 Year_of_service=Service_days/365 Months_of_service = MONTHS_BETWEEN(IV_START_DATE,l_seniority_date) IF(Year_of_service > 0 AND Year_of_service < 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 22 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service >= 1 AND Year_of_service < 2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 43 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service >= 2 AND Year_of_service < 3) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 87 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 87 ) ELSE IF(Year_of_service >= 3 AND Year_of_service < 5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 108 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 108 ) ELSE IF(Year_of_service >= 5) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OPA NHS ENTITLEMENT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 is ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_MATCHING_DATE(date), IV_ATTRIBUTE_1(text), IV_INFORMATION_DATE1 (date), IV_PLANNEDSTARTDATE (date), IV_PLANNEDENDDATE (date) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 l_debug = ess_log_write(' OPA Entitlement IV_START_DATE = '+to_char(IV_START_DATE)) Service_days=0 l_fte=0 l_contract_fte = 0 l_start_dt='0001/01/01 00:00:00' (date) l_ed_date = IV_START_DATE l_seniority_date ='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_START_DATE Service_days = DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service = Service_days/365 Weeks_of_service = Year_of_service * 52.143 IF(Year_of_service >= 1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC UK Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='Y' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='Y' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id )( set_input('IV_L_START_DATE',l_start_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='Y' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 if (continue_to_count='Y') then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DATE=l_start_date, END_DATE=l_end_date, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( p_ssp_weeks_linked=l_total_ssp_weeks p_waiting_days_to_serve=band1entitlement if (FLEX_CONSUMED_SSP_WEEKS > 0 and 0 = p_ssp_weeks_linked) then ( p_ssp_weeks_linked = FLEX_CONSUMED_SSP_WEEKS ) ssp_weeks_to_go = statutory_week_limit - p_ssp_weeks_linked waiting_days_processed_count=0 entitlement_days=0 l_running_week_start_date='4712-12-31T00:00:00.000Z' (DATE) day_scheduled_value=0 l_continue_flag=1 /* check entry status, absenc_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC UK Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' weeks_man_flag='N' years_man_flag='N' wait_man_flag='N' prev_man_flag='N' lel_man_flag='N' piw_man_flag='N' sdm_man_flag='N' paychg_man_flag='N' l_insuff_info_man_flag='N' multi_assign_man_flag='N' deemed_worker_man_flag='N' link_letter_man_flag='N' partial_start_man_flag='N' partial_end_man_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='Y' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='Y' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_START_DATE',l_start_date) set_input('IV_END_DATE',l_end_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='Y' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DATE=l_start_date, END_DATE=l_end_date, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( p_ssp_weeks_linked=l_total_ssp_weeks p_waiting_days_to_serve=band1entitlement if (FLEX_CONSUMED_SSP_WEEKS > 0 and 0 = p_ssp_weeks_linked) then ( p_ss_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC UK Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' R = ess_log_write('********************************BC UK Sickness Start**********************************************') if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' R = ess_log_write('row 247 OWC'||to_char(v_IV_START_DATE)||'v_IV_END_DATE : '|| to_char(v_IV_END_DATE)||'end_of_time'||to_char(end_of_time)) if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' weeks_man_flag='N' years_man_flag='N' wait_man_flag='N' prev_man_flag='N' lel_man_flag='N' piw_man_flag='N' sdm_man_flag='N' paychg_man_flag='N' l_insuff_info_man_flag='N' multi_assign_man_flag='N' deemed_worker_man_flag='N' link_letter_man_flag='N' partial_start_man_flag='N' partial_end_man_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' R = ess_log_write('row 340 OWC'||to_char(l_trunced_context_effective_date)||'IV_start_date : '|| to_char(IV_START_DATE)) if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='Y' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='Y' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_START_DATE',l_start_date) set_input('IV_END_DATE',l_end_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='Y' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DA_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OSP Officers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_START IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 0 Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) Service_days=DAYS_BETWEEN(IV_START_DATE,l_seniority_date)+1 Year_of_service=Service_days/365 Months_of_service = MONTHS_BETWEEN(IV_START_DATE,l_seniority_date) l_debug = ess_log_write('l_seniority_date= '+ to_char(l_seniority_date)) l_debug = ess_log_write('Year_of_service= '+ to_char(Year_of_service)) l_debug = ess_log_write('Service_days= '+ to_char(Service_days)) IF(Year_of_service > 0 AND Year_of_service <= 0.33) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 22 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 0 ) ELSE IF(Year_of_service > 0.33 AND Year_of_service <= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 22 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service > 1 AND Year_of_service <= 2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 43 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service > 2 AND Year_of_service <= 3) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 87 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 87 ) ELSE IF(Year_of_service > 3 AND Year_of_service <= 5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 108 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 108 ) ELSE IF(Year_of_service > 5) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OPB Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_START_DATE l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-105) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days = DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service = Service_days/365 Weeks_of_service = Year_of_service * 52.143 IF(Weeks_of_service > 26 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OAP NHS ENTITLEMENT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 is ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 IS 'N' DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_MATCHING_DATE(date), IV_ATTRIBUTE_1(text), IV_INFORMATION_DATE1 (date), IV_PLANNEDSTARTDATE (date), IV_PLANNEDENDDATE (date) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 l_debug = ess_log_write(' OAP Entitlement IV_START_DATE = '+to_char(IV_START_DATE)) Service_days=0 l_fte=0 l_contract_fte = 0 l_start_dt='0001/01/01 00:00:00' (date) l_ed_date = IV_START_DATE l_seniority_date ='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_MATCHING_DATE l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>=1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE3 Like '%Y')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 126 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 182 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 182 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 ) l_debug = ess_log_write('ANC_ABS_ENTRS_ATTRIBUTE3 '+ ANC_ABS_ENTRS_ATTRIBUTE3) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT, BAND4ENTITLEMENT, BAND4PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OSP Teachers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_START IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) Service_days=DAYS_BETWEEN(IV_START_DATE,l_seniority_date)+1 Year_of_service=Service_days/365 Months_of_service = MONTHS_BETWEEN(IV_START_DATE,l_seniority_date) l_debug = ess_log_write('PER_ASG_REL_DATE_START '+ to_char(PER_ASG_REL_DATE_START)) l_debug = ess_log_write('ACP_HIRE_DATE '+ to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE '+ to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) l_debug = ess_log_write('Year_of_service '+ to_char(Year_of_service)) IF(Year_of_service > 0 AND Year_of_service <= 0.33) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 0 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 0.33 AND Year_of_service <= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 50 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 1 AND Year_of_service <= 2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 50 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 2 AND Year_of_service <= 3) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 75 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 3 AND Year_of_service <= 15) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 100 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 15 AND Year_of_service <= 20) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 115 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 115 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 20) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 138 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 138 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OPB NHS ENTITLEMENT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_START_DATE Service_days = DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service = Service_days/365 Weeks_of_service = Year_of_service * 52.143 IF(Year_of_service >= 1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OAP TEACHERS ENTITLEMENT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 is ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 IS 'N' DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_MATCHING_DATE(date), IV_ATTRIBUTE_1(text), IV_INFORMATION_DATE1 (date), IV_PLANNEDSTARTDATE (date), IV_PLANNEDENDDATE (date) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 l_debug = ess_log_write(' OAP Entitlement IV_START_DATE = '+to_char(IV_START_DATE)) Service_days=0 l_fte=0 l_contract_fte = 0 l_start_dt='0001/01/01 00:00:00' (date) l_ed_date = IV_START_DATE l_seniority_date ='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_MATCHING_DATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>=1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE3 Like '%Y')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 ) l_debug = ess_log_write('ANC_ABS_ENTRS_ATTRIBUTE3 '+ ANC_ABS_ENTRS_ATTRIBUTE3) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT, BAND4ENTITLEMENT, BAND4PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC OMP Teachers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE2 IS 'N' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>1) OR (Year_of_service=1) THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE2 Like '%Y%')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC UK Maternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_qweek) is = '|| to_char(trunc(l_qweek))) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_complete_qweek) is = '|| to_char(trunc(l_complete_qweek))) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_awe_eff_date = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_start_date)) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_56_days_prior_date)) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) l_awe_eff_date = l_relevant_period_end_date_mod ) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_rel_period_end_for_awe_calc) is = '|| to_char(trunc(l_rel_period_end_for_awe_calc))) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0 ) l_dummy = ess_log_write( 'MAT_Entitlement >> get context payroll is l_payroll_id = '|| to_char(l_payroll_id)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE l_dummy = ess_log_write( 'MAT_Entitlement >> l_paydate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'MAT_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'MAT_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 1 = ' ||l_insuff_info_cert) ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 2 = ' ||l_insuff_info_cert) ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) ) ) ) ) l_calculated_awe = l_awe l_dummy = ess_log_write( 'MAT_Entitlement >> l_calculated_awe = ' ||to_char(l_calculated_awe)) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_length_of_service < 25 ) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array__x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC UK Maternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_qweek) is = '|| to_char(trunc(l_qweek))) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_complete_qweek) is = '|| to_char(trunc(l_complete_qweek))) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_rel_period_end_for_awe_calc)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_rel_period_end_for_awe_calc,1) l_awe_eff_date = l_relevant_period_end_date_mod ) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_rel_period_end_for_awe_calc) is = '|| to_char(trunc(l_rel_period_end_for_awe_calc))) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0 ) l_dummy = ess_log_write( 'MAT_Entitlement >> get context payroll is l_payroll_id = '|| to_char(l_payroll_id)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'MAT_Entitlement >> l_paydate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'MAT_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'MAT_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 1 = ' ||l_insuff_info_cert) ) ELSE ( IF (l_seniority_date > l_rel_period_start_for_awe_calc) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 2 = ' ||l_insuff_info_cert) ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) ) ) ) ) l_calculated_awe = l_awe l_dummy = ess_log_write( 'MAT_Entitlement >> l_calculated_awe = ' ||to_char(l_calculated_awe)) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_no_of_days < 176) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) _x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "L Support OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 339 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 287 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 261 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 157 ) IF Year_of_service>3 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 105 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 53 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "TRCH OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of TRCH OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_bu = PER_ASG_BUSINESS_UNIT_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) x = ESS_LOG_WRITE('Business Unit: '||l_bu) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_ASG_BUSINESS_UNIT_NAME = 'NCC BU' or PER_ASG_BUSINESS_UNIT_NAME = 'NRB BU' then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.49) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 334 ) IF ((Year_of_service>0.49) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 273 ) IF Year_of_service>1 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 92 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 273 ) IF Year_of_service>3 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 92 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 92 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 181 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 92 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 92 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 181 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG Statutory Sick Pay Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='N' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='N' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id )( set_input('IV_L_START_DATE',l_start_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='N' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 if (continue_to_count='Y') then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DATE=l_start_date, END_DATE=l_end_date, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( p_ssp_weeks_linked=l_total_ssp_weeks p_waiting_days_to_serve=band1entitlement if (FLEX_CONSUMED_SSP_WEEKS > 0 and 0 = p_ssp_weeks_linked) then ( p_ssp_weeks_linked = FLEX_CONSUMED_SSP_WEEKS ) ssp_weeks_to_go = statutory_week_limit - p_ssp_weeks_linked waiting_days_processed_count=0 entitlement_days=0 l_running_week_start_date='4712-12-31T00:00:00.000Z' (DATE) day_scheduled_value=0 l_continue_fla_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OMP Teachers Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE2 is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of OMP Teachers Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('*** end of OMP Teachers Entitlement Formula Log ***') x = ESS_LOG_WRITE('Half Pay Flag: ' + (ANC_ABS_ENTRS_ATTRIBUTE4)) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if length_of_service < 63 then ( BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 365 ) if length_of_service >=63 then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 if ANC_ABS_ENTRS_ATTRIBUTE3 = 'Yes' then ( BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE1 = 'Yes' then ( BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 231 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND3PAYFACTOR=18.1818 BAND3ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND3PAYFACTOR=30 BAND3ENTITLEMENT = 140 ) else ( BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 ) ) BAND4PAYFACTOR=0 BAND4ENTITLEMENT = 239 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT ,BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG Statutory Sick Pay Entitlement v1",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT for ANC_ABS_PLN_WS_CATEGORY_CD is 'NONE' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=ESS_LOG_WRITE('UK:SSP:MAIN:ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:absentryid='+to_char(l_context_absence_entry_id)+' startdt='+to_char(IV_START_DATE)) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) FIRST_DAY_DATE=l_start_date LAST_DAY_DATE=l_end_date wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert_flag='N' multi_assign_cert_flag='N' deemed_worker_cert_flag='N' weeks_man_flag='N' years_man_flag='N' wait_man_flag='N' prev_man_flag='N' lel_man_flag='N' piw_man_flag='N' sdm_man_flag='N' paychg_man_flag='N' l_insuff_info_man_flag='N' multi_assign_man_flag='N' deemed_worker_man_flag='N' link_letter_man_flag='N' partial_start_man_flag='N' partial_end_man_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' internal_certs['ORX_HRX_GB_OFFPAYROLL_WORKER']='Off-payroll Worker Subject to 2020 Rules' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) ui_cert_alt_cd=' ' ui_abs_cert_id_num=0 if length(rtrim(v_IV_UI_ABS_CERT_ID))>0 then ( ui_abs_cert_id_num=to_number(v_IV_UI_ABS_CERT_ID) if (ui_abs_cert_id_num > 0) then ( ui_cert_alt_cd = GET_VALUE_SET(cert_altcd_valueset ,'|=CURRENT_CERT_ID='||v_IV_UI_ABS_CERT_ID ) ) ) if (ui_cert_alt_cd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(IV_UI_CERT_REVPAYSTART_DATE)=trunc(IV_START_DATE)) then (partial_start_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(IV_UI_CERT_REVPAYEND_DATE)=trunc(IV_END_DATE)) then (partial_end_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_WAITING_DAYS') then (wait_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MAX_28WEEKS_PAID') then (weeks_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MAX_3YEARS_PAID') then (years_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LINKING_LETTER') then (link_letter_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LEL_NOT_REACHED') then (lel_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_NON_PAYABLE_LINKED') then (prev_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LESSTHAN_4DAYS') then (piw_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_INSUFF_INFO_AWE') then (l_insuff_info_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MULTI_ASSIGNMENT') then (multi_assign_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LINKED_TO_SDM') then (sdm_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_PAYROLL_CHANGED') then (paychg_man_flag='Y') if (ui_cert_alt_cd='ORX_HRX_GB_OFFPAYROLL_WORKER') then (deemed_worker_man_flag='Y') blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) row_plan_id=ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR[ni6] if (row_plan_id=0 or row_plan_id=l_absence_plan_id) then ( if row_cert_status='C' then ( if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) else ( if (row_cert_status='V') then ( e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CERT_CHECK:VOID='|| row_altcd) if (row_altcd='ORA_HRX_GB_WAITING_DAYS') then (wait_man_flag='Y') if (row_altcd='ORA_HRX_GB_MAX_28WEEKS_PAID') then (weeks_man_flag='Y') if (row_altcd='ORA_HRX_GB_MAX_3YEARS_PAID') then (years_man_flag='Y') if (row_altcd='ORA_HRX_GB_LINKING_LETTER') then (link_letter_man_flag='Y') if (row_altcd='ORA_HRX_GB_LEL_NOT_REACHED') then (lel_man_flag='Y') if (row_altcd='ORA_HRX_GB_NON_PAYABLE_LINKED') then (prev_man_flag='Y') if (row_altcd='ORA_HRX_GB_LESSTHAN_4DAYS') then (piw_man_flag='Y') if (row_altcd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(row_rev_start_dt)=trunc(IV_START_DATE)) then (partial_start_man_flag='Y') if (row_altcd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(row_rev_end_dt)=trunc(IV_END_DATE)) then (partial_end_man_flag='Y') if (row_altcd='ORA_HRX_GB_INSUFF_INFO_AWE') then (l_insuff_info_man_flag='Y') if (row_altcd='ORA_HRX_GB_MULTI_ASSIGNMENT') then (multi_assign_man_flag='Y') if (row_altcd='ORA_HRX_GB_LINKED_TO_SDM') then (sdm_man_flag='Y') if (row_altcd='ORA_HRX_GB_PAYROLL_CHANGED') then (paychg_man_flag='Y') if (row_altcd='ORX_HRX_GB_OFFPAYROLL_WORKER') then (deemed_worker_man_flag='Y') ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CERT_CHECK certcount='|| to_char(blocked_index)) l_deemed_worker='N' CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker=PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker='Y' THEN ( if (deemed_worker_man_flag='N') then (deemed_worker_cert_flag='Y') ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = TRUNC(IV_START_DATE), END_DATE = TRUNC(IV_END_DATE)) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( if (multi_assign_man_flag='N') then (multi_assign_cert_flag='Y') ) ) USE_ALT_SCHEDULE='N' CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( ALT_SCHEDULE_CAT_NAME=ANC_ABS_PLN_WS_CATEGORY_CD E_LOG=ESS_LOG_WRITE('UK:SSP:MAIN:SCHED:ALT_SCHEDULE_CAT_NAME=' ||ALT_SCHEDULE_CAT_NAME) ) IF ALT_SCHEDULE_CAT_NAME ='SSP' THEN ( USE_ALT_SCHEDULE='Y' ) E_LOG=ESS_LOG_WRITE('UK:SSP:MAIN:SCHED:USE_ALT_SCHEDULE=' ||USE_ALT_SCHEDULE) type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:PARTIAL_DAY_OVERNIGHT') CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( if (partial_start_man_flag='N') then (l_start_date=add_days(l_start_date,1)) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( if (partial_end_man_flag='N') then (l_end_date=add_days(l_end_date,-1)) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:FIRST_IS_PARTIAL:'|| FIRST_IS_PARTIAL) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:LAST_IS_PARTIAL:'|| LAST_IS_PARTIAL) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:FIRST_DAY_DATE:'|| to_char(FIRST_DAY_DATE)) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:LAST_DAY_DATE:'|| to_char(LAST_DAY_DATE)) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CAL_DAY_DURATION:'|| to_char(l_cal_day_duration)) if (l_cal_day_duration < 4) then( if (piw_man_flag='N') then (piw_cert_flag='Y') ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:after hist call l_total_ssp_weeks:'|| to_char(l_total_ssp_weeks)) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('UK:SSP:MAIN:SDM linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( if (sdm_man_flag='N') then (sdm_cert_flag='Y') ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('UK:SSP:MAIN:LTR link_letter_cert_flag: '|| link_letter_cert_flag) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:AWE1 man_flags='||l_insuff_info_man_flag||lel_man_flag||paychg_man_flag) if (l_insuff_info_man_flag='Y') then ( do_lel_check=0 ) if (lel_man_flag='Y') then ( do_lel_check=0 ) if (paychg_man_flag='Y') then ( do_lel_check=0 ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:AWE2 man_flags='||l_insuff_info_man_flag||lel_man_flag||paychg_man_flag||to_char(do_lel_check)) lel_cert_flag='N' l_insuff_info_cert_flag='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id )( set_input('IV_L_START_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG_SSP_AWE",
        "answer": "DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT for PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_END is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_NAME is 'X' INPUTS ARE IV_START_DATE (DATE),IV_END_DATE (DATE),IV_L_START_DATE (DATE) end_of_time='4712/12/31 00:00:00' (DATE) l_start_date=IV_L_START_DATE lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' configure_check_payroll_transfer='Y' l_altawe_cert='N' l_awe=0 l_lel=0 l_override_awe=0 l_relevant_period_end_date = end_of_time l_relevant_period_start_date = end_of_time l_absence_type = 'ORA_HRX_GB_SS' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_rel_date_start=PER_REL_DATE_START IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = '4712/12/31 00:00:00' (date) ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_pay_rel_date_start = GET_PLSD_FSED l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel=GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF (l_license <> 'PAY') THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_license = 'PAY') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_start_date)) ( l_date1 = ORA_HRX_GB_PAY_PERIOD_START l_reference_date = ADD_DAYS(l_date1,-1) ) l_relevant_period_end_date = l_reference_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_relevant_period_end_date for end of relevant period is = '|| to_char(l_relevant_period_end_date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date)) ( l_paydate = ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE l_end_date = ORA_HRX_GB_PAY_PERIOD_END l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_paydate for end of relevant period is = '|| to_char(l_paydate )) l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_end_date for end of relevant period is = '|| to_char(l_end_date )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_end_date)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_no_of_payroll_runs new is = '|| to_char(l_no_of_payroll_runs)) ) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_start_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) ) IF (l_ret_bal = 0) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' l_insuff_info_cert = 'N' ) ELSE ( l_insuff_info_cert = 'Y' ) ) ) ELSE ( IF l_seniority_date < l_rel_date_start THEN ( l_rel_date_start = l_seniority_date ) IF l_rel_date_start > l_relevant_period_end_date THEN ( l_insuff_info_cert = 'Y' ) ELSE IF (l_rel_date_start > l_relevant_period_start_date) THEN ( IF l_pay_rel_date_start < l_rel_date_start THEN ( l_insuff_info_cert = 'Y' ) ELSE ( l_service_days = DAYS_BETWEEN(l_relevant_period_end_date,l_rel_date_start)+1 l_service_weeks = l_service_days/7 l_service_weeks_floor = FLOOR(l_service_weeks) IF l_service_weeks = 0 THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_service_weeks_floor = l_service_weeks) THEN ( l_awe = l_ret_bal/l_service_weeks ) ELSE ( l_awe = (l_ret_bal/l_service_days)*7 ) ) ) ) ELSE ( if (l_src_periodicity = 'YEAR') then( l_awe_factor = 1/52 ) else if (l_src_periodicity = 'SEMI-YEAR') then( l_awe_factor = 2/52 ) else if (l_src_periodicity = 'QUARTER') then( l_awe_factor = 4/52 ) else if (l_src_periodicity = 'WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'BI-WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'LUNAR MONTH') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'CALENDAR MONTH') then( l_awe_factor = 6/52 ) else if (l_src_periodicity = 'BI-MONTH') then( l_awe_factor = 6/52 ) l_awe = (l_ret_bal * l_awe_factor) ) ) ) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') then( lel_cert_flag='Y' ) if (l_insuff_info_cert='Y') then (lel_cert_flag='N') l_payroll_name_a='X' l_payroll_name_b='X' IF ((configure_check_payroll_transfer='Y') AND (l_license = 'PAY') ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date)( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) l_rel_period_end_for_awe_calc=l_relevant_period_end_date If ( l_rel_date_start > l_rel_period_end_for_awe_calc ) THEN ( configure_check_payroll_transfer='N' xlog=ESS_LOG_WRITE ( 'SSP_Entitlement: Skip chkpaytfr as reldatestart after relevant period end') ) ELSE IF ( l_rel_date_start > l_rel_period_start_for_awe_calc ) then ( l_rel_period_start_for_awe_calc=l_rel_date_start xlog=ESS_LOG_WRITE ( 'SSP_Entitlement: chkpaytfr as reldatestart between relevant period start and end') ) xlog=ESS_LOG_WRITE ( 'SSP_Entitlement:Payroll Name Check Dates are: ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF ( configure_check_payroll_transfer='Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc)( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) then ( l_payroll_name_b=PAY_PRIMARY_PAYROLL_NAME_NF xlog=ESS_LOG_WRITE ( 'SSP_Entitlement:l_payroll_name_b: ' || l_payroll_name_b) ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc)( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) then ( l_payroll_name_a=PAY_PRIMARY_PAYROLL_NAME_NF xlog=ESS_LOG_WRITE ('SSP_Entitlement:l_payroll_name_a: ' || l_payroll_name_a) ) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( paychg_cert_flag='Y' xlog=ESS_LOG_WRITE ('SSP_Entitlement:Create Different Payrolls certificate is Y') ) if (paychg_cert_flag='Y') then (l_insuff_info_cert='N') if (paychg_cert_flag='Y') then (lel_cert_flag='N') ) ) return lel_cert_flag,l_insuff_info_cert,paychg_cert_flag,l_awe",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Leicester City Support OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of Leic City Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_bu = PER_ASG_BUSINESS_UNIT_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) x = ESS_LOG_WRITE('Business Unit: '||l_bu) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 l_debug = ESS_LOG_WRITE('LOS: ' + to_char(Year_of_service)) IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 335 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 60 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 275 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 60 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 60 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 120 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 120 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 125 ) IF Year_of_service>3 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 150 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 150 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 65 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 180 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 180 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 5 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OMP Support Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE2 is 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_EXPECTEDCHILDBIRTHDATE, IV_EXPECTEDCHILDBIRTHWEEK x = ESS_LOG_WRITE('*** Start of OMP Support Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 expected_week_date= '1951/01/01 00:00:00' (date) x = ESS_LOG_WRITE(' Hire Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Expected Date: ' + to_char(IV_EXPECTEDCHILDBIRTHDATE)) x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Day=GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) l_debug = ess_log_write('DAY OF EXPECTED CHILD BIRTH: ' + (DAY)) IF (DAY='MON') then expected_week_date=ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-1) ELSE IF (DAY='TUE') then expected_week_date=ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-2) ELSE IF (DAY='WED') then expected_week_date=ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-3) ELSE IF (DAY='THU') then expected_week_date=ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-4) ELSE IF (DAY='FRI') then expected_week_date=ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-5) ELSE IF (DAY='SAT') then expected_week_date=ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-6) ELSE expected_week_date=IV_EXPECTEDCHILDBIRTHDATE Service_days=DAYS_BETWEEN(expected_week_date,l_start_dt) length_of_service=Service_days/7 if length_of_service < 63 then ( BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 365 ) if length_of_service >=63 then ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 if ANC_ABS_ENTRS_ATTRIBUTE3 = 'Yes' then ( BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 365 ) else if ANC_ABS_ENTRS_ATTRIBUTE1 = 'Yes' then ( BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 231 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND2PAYFACTOR=18.1818 BAND2ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND2PAYFACTOR=30 BAND2ENTITLEMENT = 140 ) else ( BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 239 ) ) x = ESS_LOG_WRITE('length_of_service: '+ to_char(length_of_service)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT,BAND4ENTITLEMENT,BAND4PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "NHS OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS 'X' DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of NHS OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_bu = PER_ASG_BUSINESS_UNIT_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) x = ESS_LOG_WRITE('Business Unit: '||l_bu) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('PER_ASG_REL_ATTRIBUTE1 '+to_char(PER_ASG_REL_ATTRIBUTE_DATE1,'DD-MM-YYYY')) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service < 1) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 287 ) IF ((Year_of_service >= 1) AND (Year_of_service<2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 261 ) IF Year_of_service>=2 AND Year_of_service<3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 157 ) IF Year_of_service>=3 AND Year_of_service<5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT =130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 105 ) IF Year_of_service>=5 THEN ( BAND1PAYFACTOR=156 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 109 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT,BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Teachers OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE2 is 'X' INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_ASG_REL_ATTRIBUTE2 was not defaulted then ( if PER_ASG_REL_ATTRIBUTE2 = 'Less than 5 Months' then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 340 ) if PER_ASG_REL_ATTRIBUTE2 = '5 to 12 Months' then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 290 ) if PER_ASG_REL_ATTRIBUTE2 = '1 to 2 Years' then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 265 ) if PER_ASG_REL_ATTRIBUTE2 = '2 to 3 Years' then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 215 ) if PER_ASG_REL_ATTRIBUTE2 = '3 to 4 Years' then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 165 ) if PER_ASG_REL_ATTRIBUTE2 = 'More than 4 Years' then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 165 ) ) else ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_continous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 340 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 290 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 265 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 215 ) IF Year_of_service>3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 165 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Teachers OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE2 is 'X' DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE2 is '0001/01/01' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_ASG_REL_ATTRIBUTE_DATE2 was defaulted then ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_continous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE2 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE2 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 340 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 290 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 265 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 215 ) IF Year_of_service>3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 165 ) l_debug = ess_log_write('Year_of_service:'+to_char(Year_of_service) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Leic City Teachers OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS 'X' DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of Leic City Teachers OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_bu = PER_ASG_BUSINESS_UNIT_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) x = ESS_LOG_WRITE('Business Unit: '||l_bu) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 l_debug=ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE: '+ to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug=ess_log_write('PER_ASG_REL_ATTRIBUTE_DATE1: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1,'DD-Mon-YYYY')) l_debug=ess_log_write('Year_of_service: '+ to_char(Year_of_service)) IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 330 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 70 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 260 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 70 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 70 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 225 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 105 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 105 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 155 ) IF Year_of_service>3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 140 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 140 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 85 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Fire Operations OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01' (date) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of Fire Operations OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) x = ESS_LOG_WRITE('OSP Plan Type: '||PER_ASG_PEOPLE_GROUP_SEGMENT7) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_PER_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PER_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 183 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OMP TRCH Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of OMP Teachers Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('*** end of OMP Teachers Entitlement Formula Log ***') x = ESS_LOG_WRITE('Half Pay Flag: ' + (ANC_ABS_ENTRS_ATTRIBUTE4)) l_start_dt='0001/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if length_of_service >=26 then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 if ANC_ABS_ENTRS_ATTRIBUTE3 = 'Yes' then ( BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 231 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND3PAYFACTOR=18.1818 BAND3ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND3PAYFACTOR=30 BAND3ENTITLEMENT = 140 ) else ( BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 ) ) BAND4PAYFACTOR=0 BAND4ENTITLEMENT = 239 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT ,BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OPP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of OPP Entitlement Formula Log ***') BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Occupational Days Flag: ' + (ANC_ABS_ENTRS_ATTRIBUTE1)) l_start_dt='0001/01/01 00:00:00' (date) if PER_ASG_BUSINESS_UNIT_NAME = 'NCC BU' or PER_ASG_BUSINESS_UNIT_NAME = 'NRB BU' then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if ( ANC_ABS_ENTRS_ATTRIBUTE1 = '1 Week') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR=100 BAND2ENTITLEMENT = 0 ) if ( ANC_ABS_ENTRS_ATTRIBUTE1 = '2 Weeks') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 14 ) x = ESS_LOG_WRITE(' BAND1PAYFACTOR = '+to_char(BAND1PAYFACTOR)) x = ESS_LOG_WRITE(' BAND1ENTITLEMENT = '+to_char(BAND1ENTITLEMENT)) x = ESS_LOG_WRITE(' BAND2PAYFACTOR = '+to_char(BAND2PAYFACTOR)) x = ESS_LOG_WRITE(' BAND2ENTITLEMENT = '+to_char(BAND2ENTITLEMENT)) x = ESS_LOG_WRITE('*** end of OPP Entitlement Formula Log ***') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OPP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' INPUTS ARE IV_START_DATE, IV_EXPECTEDCHILDBIRTHDATE, IV_ACTUALCHILDBIRTHDATE, IV_END_DATE, IV_ACTUALSTARTDATE x = ESS_LOG_WRITE('*** Start of OPP Entitlement Formula Log ***') BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 l_2024_flag='N' l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Occupational Days Flag: ' + (ANC_ABS_ENTRS_ATTRIBUTE1)) l_start_dt='0001/01/01 00:00:00' (date) if PER_ASG_BUSINESS_UNIT_NAME = 'NCC BU' or PER_ASG_BUSINESS_UNIT_NAME = 'NRB BU' then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if ( ANC_ABS_ENTRS_ATTRIBUTE1 = '1 Week') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 7 ) if ( ANC_ABS_ENTRS_ATTRIBUTE1 = '2 Weeks') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 14 ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_expected_child_birth_week = l_ewc l_end_date = IV_END_DATE l_pay_stop_date = add_days(trunc(l_placement_date),363) l_date_2024 = '2024/04/07 00:00:00' (date) IF (l_expected_child_birth_week (date) < l_date_2024 (date)) THEN ( l_2024_flag='N' ) else ( l_2024_flag='Y' ) If (l_start_date >= l_placement_date and l_end_date > l_pay_stop_date and l_2024_flag='Y') then ( if ( ANC_ABS_ENTRS_ATTRIBUTE1 = '1 Week') then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 7 ) if ( ANC_ABS_ENTRS_ATTRIBUTE1 = '2 Weeks') then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 14 ) ) x = ESS_LOG_WRITE(' BAND1PAYFACTOR = '+to_char(BAND1PAYFACTOR)) x = ESS_LOG_WRITE(' BAND1ENTITLEMENT = '+to_char(BAND1ENTITLEMENT)) x = ESS_LOG_WRITE(' BAND2PAYFACTOR = '+to_char(BAND2PAYFACTOR)) x = ESS_LOG_WRITE(' BAND2ENTITLEMENT = '+to_char(BAND2ENTITLEMENT)) x = ESS_LOG_WRITE('*** end of OPP Entitlement Formula Log ***') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OAP Teachers Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of OAP Teachers Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('*** end of OMP Teachers Entitlement Formula Log ***') x = ESS_LOG_WRITE('Half Pay Flag: ' + (ANC_ABS_ENTRS_ATTRIBUTE4)) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if length_of_service < 63 then ( BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 365 ) if length_of_service >=63 then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 if ANC_ABS_ENTRS_ATTRIBUTE1 = 'Yes' then ( BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 231 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND3PAYFACTOR=18.1818 BAND3ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND3PAYFACTOR=30 BAND3ENTITLEMENT = 140 ) else ( BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 ) ) BAND4PAYFACTOR=0 BAND4ENTITLEMENT = 239 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT ,BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OAP FRS Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of FRS OAP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Half Pay Flag: '+ANC_ABS_ENTRS_ATTRIBUTE4) x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) l_start_dt='0001/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if length_of_service>=26 then ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 if ANC_ABS_ENTRS_ATTRIBUTE3 = 'Yes' then ( BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 231 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND2PAYFACTOR=18.1818 BAND2ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND2PAYFACTOR=30 BAND2ENTITLEMENT = 140 ) else ( BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 240 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OMP FRS Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of FRS OMP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) l_start_dt='0001/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if length_of_service>=26 then ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 if ANC_ABS_ENTRS_ATTRIBUTE3 = 'Yes' then ( BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 231 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND2PAYFACTOR=18.1818 BAND2ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND2PAYFACTOR=30 BAND2ENTITLEMENT = 140 ) else ( BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 300 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "N Support OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of N Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_ASG_BUSINESS_UNIT_NAME = 'NCC BU' or PER_ASG_BUSINESS_UNIT_NAME = 'NRB BU' then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 334 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 273 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 243 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 121 ) IF Year_of_service>3 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 153 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 153 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 59 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG Stat Sick Pay Entitlement v2",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT for ANC_ABS_PLN_WS_CATEGORY_CD is 'NONE' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula = 'ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=ESS_LOG_WRITE('UK:SSP:MAIN:ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:absentryid='+to_char(l_context_absence_entry_id)+' startdt='+to_char(IV_START_DATE)) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) FIRST_DAY_DATE=l_start_date LAST_DAY_DATE=l_end_date wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert_flag='N' multi_assign_cert_flag='N' deemed_worker_cert_flag='N' weeks_man_flag='N' years_man_flag='N' wait_man_flag='N' prev_man_flag='N' lel_man_flag='N' piw_man_flag='N' sdm_man_flag='N' paychg_man_flag='N' l_insuff_info_man_flag='N' multi_assign_man_flag='N' deemed_worker_man_flag='N' link_letter_man_flag='N' partial_start_man_flag='N' partial_end_man_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' internal_certs['ORX_HRX_GB_OFFPAYROLL_WORKER']='Off-payroll Worker Subject to 2020 Rules' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) ui_cert_alt_cd=' ' ui_abs_cert_id_num=0 if length(rtrim(v_IV_UI_ABS_CERT_ID))>0 then ( ui_abs_cert_id_num=to_number(v_IV_UI_ABS_CERT_ID) if (ui_abs_cert_id_num > 0) then ( ui_cert_alt_cd = GET_VALUE_SET(cert_altcd_valueset ,'|=CURRENT_CERT_ID='||v_IV_UI_ABS_CERT_ID ) ) ) if (ui_cert_alt_cd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(IV_UI_CERT_REVPAYSTART_DATE)=trunc(IV_START_DATE)) then (partial_start_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(IV_UI_CERT_REVPAYEND_DATE)=trunc(IV_END_DATE)) then (partial_end_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_WAITING_DAYS') then (wait_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MAX_28WEEKS_PAID') then (weeks_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MAX_3YEARS_PAID') then (years_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LINKING_LETTER') then (link_letter_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LEL_NOT_REACHED') then (lel_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_NON_PAYABLE_LINKED') then (prev_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LESSTHAN_4DAYS') then (piw_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_INSUFF_INFO_AWE') then (l_insuff_info_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_MULTI_ASSIGNMENT') then (multi_assign_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_LINKED_TO_SDM') then (sdm_man_flag='Y') if (ui_cert_alt_cd='ORA_HRX_GB_PAYROLL_CHANGED') then (paychg_man_flag='Y') if (ui_cert_alt_cd='ORX_HRX_GB_OFFPAYROLL_WORKER') then (deemed_worker_man_flag='Y') blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) row_plan_id=ANC_ABS_ENTR_CERTS_TARGET_PLAN_ID_ARR[ni6] if (row_plan_id=0 or row_plan_id=l_absence_plan_id) then ( if row_cert_status='C' then ( if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) else ( if (row_cert_status='V') then ( e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CERT_CHECK:VOID='|| row_altcd) if (row_altcd='ORA_HRX_GB_WAITING_DAYS') then (wait_man_flag='Y') if (row_altcd='ORA_HRX_GB_MAX_28WEEKS_PAID') then (weeks_man_flag='Y') if (row_altcd='ORA_HRX_GB_MAX_3YEARS_PAID') then (years_man_flag='Y') if (row_altcd='ORA_HRX_GB_LINKING_LETTER') then (link_letter_man_flag='Y') if (row_altcd='ORA_HRX_GB_LEL_NOT_REACHED') then (lel_man_flag='Y') if (row_altcd='ORA_HRX_GB_NON_PAYABLE_LINKED') then (prev_man_flag='Y') if (row_altcd='ORA_HRX_GB_LESSTHAN_4DAYS') then (piw_man_flag='Y') if (row_altcd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(row_rev_start_dt)=trunc(IV_START_DATE)) then (partial_start_man_flag='Y') if (row_altcd='ORA_HRX_GB_NOT_ELIGIBLE' and trunc(row_rev_end_dt)=trunc(IV_END_DATE)) then (partial_end_man_flag='Y') if (row_altcd='ORA_HRX_GB_INSUFF_INFO_AWE') then (l_insuff_info_man_flag='Y') if (row_altcd='ORA_HRX_GB_MULTI_ASSIGNMENT') then (multi_assign_man_flag='Y') if (row_altcd='ORA_HRX_GB_LINKED_TO_SDM') then (sdm_man_flag='Y') if (row_altcd='ORA_HRX_GB_PAYROLL_CHANGED') then (paychg_man_flag='Y') if (row_altcd='ORX_HRX_GB_OFFPAYROLL_WORKER') then (deemed_worker_man_flag='Y') ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CERT_CHECK certcount='|| to_char(blocked_index)) l_deemed_worker='N' CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker=PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker='Y' THEN ( if (deemed_worker_man_flag='N') then (deemed_worker_cert_flag='Y') ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = TRUNC(IV_START_DATE), END_DATE = TRUNC(IV_END_DATE)) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( if (multi_assign_man_flag='N') then (multi_assign_cert_flag='Y') ) ) USE_ALT_SCHEDULE='N' CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( ALT_SCHEDULE_CAT_NAME=ANC_ABS_PLN_WS_CATEGORY_CD E_LOG=ESS_LOG_WRITE('UK:SSP:MAIN:SCHED:ALT_SCHEDULE_CAT_NAME=' ||ALT_SCHEDULE_CAT_NAME) ) IF ALT_SCHEDULE_CAT_NAME ='SSP' THEN ( USE_ALT_SCHEDULE='Y' ) E_LOG=ESS_LOG_WRITE('UK:SSP:MAIN:SCHED:USE_ALT_SCHEDULE=' ||USE_ALT_SCHEDULE) type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:PARTIAL_DAY_OVERNIGHT') CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( if (partial_start_man_flag='N') then (l_start_date=add_days(l_start_date,1)) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( if (partial_end_man_flag='N') then (l_end_date=add_days(l_end_date,-1)) ) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:FIRST_IS_PARTIAL:'|| FIRST_IS_PARTIAL) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:LAST_IS_PARTIAL:'|| LAST_IS_PARTIAL) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:FIRST_DAY_DATE:'|| to_char(FIRST_DAY_DATE)) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:LAST_DAY_DATE:'|| to_char(LAST_DAY_DATE)) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 e_log=ESS_LOG_WRITE('UK:SSP:MAIN:CAL_DAY_DURATION:'|| to_char(l_cal_day_duration)) if (l_cal_day_duration < 4) then( if (piw_man_flag='N') then (piw_cert_flag='Y') ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:after hist call l_total_ssp_weeks:'|| to_char(l_total_ssp_weeks)) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('UK:SSP:MAIN:SDM linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( if (sdm_man_flag='N') then (sdm_cert_flag='Y') ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('UK:SSP:MAIN:LTR link_letter_cert_flag: '|| link_letter_cert_flag) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:AWE1 man_flags='||l_insuff_info_man_flag||lel_man_flag||paychg_man_flag) if (l_insuff_info_man_flag='Y') then ( do_lel_check=0 ) if (lel_man_flag='Y') then ( do_lel_check=0 ) if (paychg_man_flag='Y') then ( do_lel_check=0 ) e_log=ESS_LOG_WRITE('UK:SSP:MAIN:AWE2 man_flags='||l_insuff_info_man_flag||lel_man_flag||paychg_man_flag||to_char(do_lel_check)) lel_cert_flag='N' l_insuff_info_cert_flag='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP__x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "INDUSTRIAL INJURY TEACHERS OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE2 is 'X' DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE2 is '0001/01/01' (date) INPUTS ARE IV_START_DATE l_start_dt='0001/01/01 00:00:00' (date) BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 180 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 185 l_debug = ess_log_write('100 % pay for :'+to_char(BAND1ENTITLEMENT)+' days' ) l_debug = ess_log_write('0 % pay for :'+to_char(BAND2ENTITLEMENT)+' days' ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Bradgate Park OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of Bradgate Park OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_bu = PER_ASG_BUSINESS_UNIT_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) x = ESS_LOG_WRITE('Business Unit: '||l_bu) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.49) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 365 ) IF ((Year_of_service>0.49) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 340 ) IF Year_of_service>1 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 49 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 21 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 290 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 98 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 181 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG Adoption Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_NOTIFICATION_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION, IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE, IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE, IV_NOTIFICATION_DATE,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'ADO_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_absence_type = 'ORA_HRX_GB_SA' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_matching_date = IV_MATCHING_DATE l_matching_week = l_matching_date l_awe_eff_date = l_matching_week CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_day_of_week = GET_DATE_DAY_OF_WEEK(l_matching_date) IF(l_day_of_week = 'SUN') THEN ( l_mws = l_matching_date) ELSE IF(l_day_of_week = 'MON') THEN (l_mws = ADD_DAYS(l_matching_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_mws = ADD_DAYS(l_matching_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_mws = ADD_DAYS(l_matching_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_mws = ADD_DAYS(l_matching_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_mws = ADD_DAYS(l_matching_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_mws = ADD_DAYS(l_matching_date,-6)) l_matching_week = add_days(l_mws,6) ) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_PLACEMENT_DATE',l_placement_date ) SET_INPUT ('IV_ABS_MATCHING_DATE',l_matching_date ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_matching_week)) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_matching_week = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_start_date)) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN ( l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN ( l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ess_log_write( 'ADO_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'Average Weekly Earnings may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y' ) ) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( l_awe_eff_date = l_matching_week CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_next_month_start =ADD_MONTHS(ORA_HRX_GB_PAY_PERIOD_START,1) l_pay_date = ADD_DAYS(l_next_month_start,-1) IF l_awe_eff_date = l_pay_date THEN ( l_relevant_period_end_date = l_awe_eff_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS(ORA_HRX_GB_PAY_PERIOD_START,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'ADO_Entitlement >> l_regprocdate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'ADO_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'ADO_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'ADO_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_no_of_days=days_between(l_matching_week,l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_no_of_days < 176) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 if (l_days_bew > 273) then ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bew,7) if (l_days_after >= 1) then ( l_create = 'N' l_cert_start_date = TRUNC(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_cert_index] = 'The absence has multiple assignments associated with it and cannot be processed.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_band1end_date =add_days(l_start_date,band1entitlement-1) l_band2end_date =add_days(l_band1end_date,band2entitlement-1) l_entl_info = to_char(band1entitlement)||':'|| to_char(band1payfactor)||':'||to_char(l_band1end_date,'YYYY/MM/DD')||'#'|| to_char(band2entitlement) ||':'|| to_char(band2payfactor) ||':'||to_char(l_band2end_date,'YYYY/MM/DD') LOC_STRING_ARRAY['ENTITLEMENT_INFO']=l_entl_info LOC_NUMBER_ARRAY['AWE_CALCULATED']=l_calculated_awe l_dummy = ess_log_write( 'ADO_Entitlement >> LOC_STRING_ARRAY[ENTITLEMENT_INFO] is = '|| LOC_STRING_ARRAY['ENTITLEMENT_INFO'] ) l_dummy = ess_log_write( 'ADO_Entitlement >> LOC_NUMBER_ARRAY[AWE_CALCULATED] is = '|| to_char(LOC_NUMBER_ARRAY['AWE_CALCULATED']) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG Paternity Entitlement Formula",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION ,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE ,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE ,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4 , IV_MATCHING_DATE,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE ,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'PAT_Entitlement >> Start of Formula') l_cert_index = 1 band1name = 'Band1Pay' band1payfactor = 100 band1entitlement = 14 band2name = 'Band2Pay' band2payfactor = 0 band2entitlement = 9999999 l_early_birth_indicator = 'N' l_cert_id_being_changed = ' ' l_cert_id_being_changed = IV_UI_ABS_CERT_ID l_cert_status = IV_UI_CERT_STATUS CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE l_altcd_of_changed_cert = 'XYZ' IF l_cert_id_being_changed != ' ' THEN ( l_altcd_of_changed_cert = GET_VALUE_SET('ORA_HRX_GB_CERT_ALTCD' ,'|=CURRENT_CERT_ID='||l_cert_id_being_changed ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE ) l_pay_stop_date = l_end_date l_rate_def_name = ' ' l_early_birth_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_absence_type = 'ORA_HRX_GB_SPB' l_perform_awe_check = 'Y' l_awe=0 l_calculated_awe = 0 LOC_API_SKIP = 'N' IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) if(l_event_type = 'CHB') then ( l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_absence_type = 'ORA_HRX_GB_SPB' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_ewc_param_for_override_formula = l_ewc l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_ewc (date)) THEN ( l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_awe_eff_date = l_ewc ) else if(l_event_type = 'PLC') then ( l_absence_type = 'ORA_HRX_GB_SPA' if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_mws = trunc( IV_MATCHING_DATE, 'DAY') l_matching_week = add_days(l_mws,6) l_no_of_days=days_between(l_matching_week,l_seniority_date) l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_awe_eff_date = l_matching_week ) ) l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_rel_asg_date_start = PER_ASG_REL_DATE_START l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPB') THEN ( SET_INPUT ('IV_ABS_QUAL_WEEK', l_qweek) SET_INPUT ('IV_ABS_EDC', l_ewc_param_for_override_formula) ) IF (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPA') THEN ( SET_INPUT ('IV_ABS_PLACEMENT_DATE', l_placement_date) SET_INPUT ('IV_ABS_MATCHING_DATE', IV_MATCHING_DATE) ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_next_month_start =ADD_MONTHS(ORA_HRX_GB_PAY_PERIOD_START,1) l_pay_date = ADD_DAYS(l_next_month_start,-1) IF l_awe_eff_date = l_pay_date THEN ( l_relevant_period_end_date = l_awe_eff_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS(ORA_HRX_GB_PAY_PERIOD_START,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) IF (l_early_birth_indicator = 'Y') THEN ( IF ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_awe_eff_date = l_relevant_period_end_date_mod ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) l_create = 'N' IF (l_awe_lel_chk_pass = 'N') AND (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') THEN ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_awe_lel_chk_pass = 'N') AND (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') THEN ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_length_of_service=Floor(l_no_of_days/7) if ( l_length_of_service < 25 ) then ( l_pay_stop_date = l_start_date l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = days_between(l_start_date, l_placement_date) If (l_start_date >= l_placement_date and l_no_of_days > 56) then ( l_pay_stop_date = l_start_date l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_EXCEEDED_56_DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Payable After 56th Day')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Payable After 56th Day' CERT_COMMENTS[l_cert_index] = 'Statutory Paternity pay is not payable after the 56th day' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) else ( l_no_of_days = days_between(l_end_date, l_placement_date) If (l_end_date >= l_placement_date and l_no_of_days > 56) then ( l_pay_stop_date = add_days(l_placement_date,55) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_EXCEEDED_56_DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Payable After 56th Day')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Payable After 56th Day' CERT_COMMENTS[l_cert_index] = 'Statutory Paternity pay is not payable after the 56th day' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) if (l_days_bew >= 14) then ( l_pay_stop_date = add_days(l_start_date,13) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'The payments completed for the maximum number of weeks payable.' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bew,7) if (l_days_after >= 1) then ( l_pay_stop_date = TRUNC(add_days(l_end_date,l_days_after*-1)) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days.' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_cert_index] = 'The absence has multiple assignments associated with it and cannot be processed.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_band1end_date =add_days(l_start_date,band1entitlement-1) l_band2end_date =add_days(l_band1end_date,band2entitlement-1) l_entl_info = to_char(band1entitlement)||':'|| to_char(band1payfactor)||':'||to_char(l_band1end_date,'YYYY/MM/DD')||'#'|| to_char(band2entitlement) ||':'|| to_char(band2payfactor) ||':'||to_char(l_band2end_date,'YYYY/MM/DD') LOC_STRING_ARRAY['ENTITLEMENT_INFO']=l_entl_info LOC_NUMBER_ARRAY['AWE_CALCULATED']=l_calculated_awe l_dummy = ess_log_write( 'PAT_Entitlement >> LOC_STRING_ARRAY[ENTITLEMENT_INFO] is = '|| LOC_STRING_ARRAY['ENTITLEMENT_INFO'] ) l_dummy = ess_log_write( 'PAT_Entitlement >> LOC_NUMBER_ARRAY[AWE_CALCULATED] is = '|| to_char(LOC_NUMBER_ARRAY['AWE_CALCULATED']) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Fire Support OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01' (date) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of Fire Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) x = ESS_LOG_WRITE('OSP Plan Type: '||PER_ASG_PEOPLE_GROUP_SEGMENT7) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_PER_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PER_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 339 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 287 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 261 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 157 ) IF Year_of_service>3 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 105 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 53 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OAP Support Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of L Support OAP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('*** Start of L Support OAP Entitlement Formula Log ***') l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if length_of_service < 63 then ( BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 365 ) if length_of_service >=63 then ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 if ANC_ABS_ENTRS_ATTRIBUTE1 = 'Yes' then ( BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 231 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND2PAYFACTOR=18.1818 BAND2ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND2PAYFACTOR=30 BAND2ENTITLEMENT = 140 ) else ( BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 239 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT,BAND4ENTITLEMENT,BAND4PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OAP Support Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of L Support OAP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('*** Start of L Support OAP Entitlement Formula Log ***') l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if length_of_service < 63 then ( BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 365 ) if length_of_service >=63 then ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 if ANC_ABS_ENTRS_ATTRIBUTE1 = 'Yes' then ( BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE3 = 'Yes' then ( BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 365 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND2PAYFACTOR=18.1818 BAND2ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND2PAYFACTOR=30 BAND2ENTITLEMENT = 140 ) else ( BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 239 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT,BAND4ENTITLEMENT,BAND4PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Notice Period Absence OSP Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01' (date) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of Notice Period OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) x = ESS_LOG_WRITE('OSP Plan Type: '||PER_ASG_PEOPLE_GROUP_SEGMENT7) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) if PER_PER_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PER_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 84 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 281 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "OAP TRCH Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE4 is 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 is 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of OMP Teachers Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('*** end of OMP Teachers Entitlement Formula Log ***') x = ESS_LOG_WRITE('Half Pay Flag: ' + (ANC_ABS_ENTRS_ATTRIBUTE4)) l_start_dt='0001/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) length_of_service=Service_days/7 if length_of_service >=26 then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 if ANC_ABS_ENTRS_ATTRIBUTE3 = 'Yes' then ( BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 231 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE4 = '33 Weeks' then ( BAND3PAYFACTOR=18.1818 BAND3ENTITLEMENT = 231 ) else if ANC_ABS_ENTRS_ATTRIBUTE4 = '20 Weeks' then ( BAND3PAYFACTOR=30 BAND3ENTITLEMENT = 140 ) else ( BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 ) ) BAND4PAYFACTOR=0 BAND4ENTITLEMENT = 239 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT ,BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG Maternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_qweek) is = '|| to_char(trunc(l_qweek))) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_complete_qweek) is = '|| to_char(trunc(l_complete_qweek))) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_complete_qweek),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_rel_period_end_for_awe_calc)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_rel_period_end_for_awe_calc,1) l_awe_eff_date = l_relevant_period_end_date_mod ) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_rel_period_end_for_awe_calc) is = '|| to_char(trunc(l_rel_period_end_for_awe_calc))) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0 ) l_dummy = ess_log_write( 'MAT_Entitlement >> get context payroll is l_payroll_id = '|| to_char(l_payroll_id)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'MAT_Entitlement >> l_regprocdate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'MAT_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'MAT_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_dummy = ess_log_write( 'MAT_Entitlement >>l_ret_bal = 0') ) ELSE ( IF (l_seniority_date > l_rel_period_start_for_awe_calc) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 2 = ' ||l_insuff_info_cert) ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) ) ) ) ) l_calculated_awe = l_awe l_dummy = ess_log_write( 'MAT_Entitlement >> l_calculated_awe = ' ||to_char(l_calculated_awe)) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_no_of_days < 176) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_ce_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "LBN TEACHERS II ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN LG Teacher II Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 312 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 312 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN LG OFFICERS II ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 312 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN OSHPP",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_NUMBER1, IV_ATTRIBUTE_NUMBER2 BAND1ENTITLEMENT = 0 BAND2ENTITLEMENT = 0 BAND1PAYFACTOR=100 BAND1ENTITLEMENT = IV_ATTRIBUTE_NUMBER1 BAND2PAYFACTOR= 0 BAND2ENTITLEMENT = IV_ATTRIBUTE_NUMBER2 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN LG Maternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1 = 'X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 168 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LBN LG Maternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1 = 'X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF PER_ASG_PRIMARY_FLAG = 'Y' AND (IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) IF PER_ASG_PRIMARY_FLAG = 'Y' THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LBN Teachers Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (Year_of_service<=0.25) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF ((Year_of_service>0.25) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF (Year_of_service>3) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN LG Adoption Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1='X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN LG Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (Year_of_service<=0.25) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF ((Year_of_service>0.25) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN ACTIVE NEWHAM SICKNESS ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF ((Year_of_service>=0.5) AND (Year_of_service<1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 6 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 6 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>=1) AND (Year_of_service<2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 26 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>=2) AND (Year_of_service<3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>=3) AND (Year_of_service<4)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 78 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 78 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF (Year_of_service>=4 AND Year_of_service<5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF (Year_of_service>=5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN UK Statutory Sick Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='Y' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='Y' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id, PAYROLL_ASSIGNMENT_ID=l_payroll_assignment_id )( set_input('IV_L_START_DATE',l_start_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='Y' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 if (continue_to_count='Y') then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DATE=l_start_date, END_DATE=l_end_date, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( p_ssp_weeks_linked=l_total_ssp_weeks p_waiting_days_to_serve=band1entitlement if (FLEX_CONSUMED_SSP_WEEKS > 0 and 0 = p_ssp_weeks_linked) then ( p_ssp_weeks_linked = FLEX_CONSUMED_SSP_WEEKS ) ssp_weeks_to_go = statutory_week_limit - p_ssp_weeks_linked waiting_days_processed_count=0 entitlement_days=0 l_running_week_start_date='4712-12-31T00:00:00.000Z' (DATE) day_scheduled_value=0 l_continue_flag=1 /* continue _x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Teachers Adoption Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1='X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) If(IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 0 ) ) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT,BAND3PAYFACTOR,BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN LG Paternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN UK Adoption Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_NOTIFICATION_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION, IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE, IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE, IV_NOTIFICATION_DATE,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'ADO_Entitlement >> Start of Formula') IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_absence_type = 'ORA_HRX_GB_SA' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_deemed_worker = 'N' IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_matching_date = IV_MATCHING_DATE l_matching_week = l_matching_date l_awe_eff_date = l_matching_week l_rel_asg_date_start = PER_ASG_REL_DATE_START if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_day_of_week = GET_DATE_DAY_OF_WEEK(l_matching_date) IF(l_day_of_week = 'SUN') THEN ( l_mws = l_matching_date) ELSE IF(l_day_of_week = 'MON') THEN (l_mws = ADD_DAYS(l_matching_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_mws = ADD_DAYS(l_matching_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_mws = ADD_DAYS(l_matching_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_mws = ADD_DAYS(l_matching_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_mws = ADD_DAYS(l_matching_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_mws = ADD_DAYS(l_matching_date,-6)) l_matching_week = add_days(l_mws,6) ) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_PLACEMENT_DATE',l_placement_date ) SET_INPUT ('IV_ABS_MATCHING_DATE',l_matching_date ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_matching_week) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_matching_week = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ess_log_write( 'ADO_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'Average Weekly Earnings may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y' ) ) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( l_awe_eff_date = l_matching_week CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_next_month_start =ADD_MONTHS(ORA_HRX_GB_PAY_PERIOD_START,1) l_pay_date = ADD_DAYS(l_next_month_start,-1) IF l_awe_eff_date = l_pay_date THEN ( l_relevant_period_end_date = l_awe_eff_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS(ORA_HRX_GB_PAY_PERIOD_START,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_no_of_days=days_between(l_matching_week,l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) if ( l_length_of_service < 25 ) then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 if (l_days_bew > 273) then ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bew,7) if (l_days_after >= 1) then ( l_create = 'N' l_cert_start_date = TRUNC(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_cert_index] = 'The absence has multiple assignments associated with it and cannot be processed.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_band1end_date =add_days(l_start_date,band1entitlement-1) l_band2end_date =add_days(l_band1end_date,band2entitlement-1) l_entl_info = to_char(band1entitlement)||':'|| to_char(band1payfactor)||':'||to_char(l_band1end_date,'YYYY/MM/DD')||'#'|| to_char(band2entitlement) ||':'|| to_char(band2payfactor) ||':'||to_char(l_band2end_date,'YYYY/MM/DD') LOC_STRING_ARRAY['ENTITLEMENT_INFO']=l_entl_info LOC_NUMBER_ARRAY['AWE_CALCULATED']=l_calculated_awe l_dummy = ess_log_write( 'ADO_Entitlement >> LOC_STRING_ARRAY[ENTITLEMENT_INFO] is = '|| LOC_STRING_ARRAY['ENTITLEMENT_INFO'] ) l_dummy = ess_log_write( 'ADO_Entitlement >> LOC_NUMBER_ARRAY[AWE_CALCULATED] is = '|| to_char(LOC_NUMBER_ARRAY['AWE_CALCULATED']) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN UK Maternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_deemed_worker = 'N' IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc l_rel_asg_date_start = PER_ASG_REL_DATE_START l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_awe_eff_date = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_complete_qweek) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_56_days_prior_date) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) l_awe_eff_date = l_relevant_period_end_date_mod ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_length_of_service < 25 ) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_ind",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN NHS Adoption Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1='X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) If (IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 8 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 8 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 18 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN NHS Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF ((Year_of_service>0) AND (Year_of_service<1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>=1) AND (Year_of_service<2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>=2) AND (Year_of_service<3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>=3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Teachers Paternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN NHS Maternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1='X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) If (IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 126 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN UK Paternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION ,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE ,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE ,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4 , IV_MATCHING_DATE,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE ,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'PAT_Entitlement >> Start of Formula') l_cert_index = 1 band1name = 'Band1Pay' band1payfactor = 100 band1entitlement = 14 band2name = 'Band2Pay' band2payfactor = 0 band2entitlement = 9999999 l_early_birth_indicator = 'N' l_cert_id_being_changed = ' ' l_cert_id_being_changed = IV_UI_ABS_CERT_ID l_cert_status = IV_UI_CERT_STATUS CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE l_altcd_of_changed_cert = 'XYZ' l_chk_payroll_tfr = 'Y' l_skip_payroll_trf_dbi = 'N' l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' l_create_diff_payrolls_cert = 'N' IF l_cert_id_being_changed != ' ' THEN ( l_altcd_of_changed_cert = GET_VALUE_SET('ORA_HRX_GB_CERT_ALTCD' ,'|=CURRENT_CERT_ID='||l_cert_id_being_changed ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE ) l_pay_stop_date = l_end_date l_rate_def_name = ' ' l_early_birth_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_absence_type = 'ORA_HRX_GB_SPB' l_perform_awe_check = 'Y' l_awe=0 l_calculated_awe = 0 LOC_API_SKIP = 'N' l_deemed_worker = 'N' IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) if(l_event_type = 'CHB') then ( l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_absence_type = 'ORA_HRX_GB_SPB' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_ewc_param_for_override_formula = l_ewc l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_awe_eff_date = l_ewc ) else if(l_event_type = 'PLC') then ( l_absence_type = 'ORA_HRX_GB_SPA' if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_mws = trunc( IV_MATCHING_DATE, 'DAY') l_matching_week = add_days(l_mws,6) l_no_of_days=days_between(l_matching_week,l_seniority_date) l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_awe_eff_date = l_matching_week ) ) l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_rel_asg_date_start = PER_ASG_REL_DATE_START l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPB') THEN ( SET_INPUT ('IV_ABS_QUAL_WEEK', l_qweek) SET_INPUT ('IV_ABS_EDC', l_ewc_param_for_override_formula) ) IF (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPA') THEN ( SET_INPUT ('IV_ABS_PLACEMENT_DATE', l_placement_date) SET_INPUT ('IV_ABS_MATCHING_DATE', IV_MATCHING_DATE) ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_next_month_start =ADD_MONTHS(ORA_HRX_GB_PAY_PERIOD_START,1) l_pay_date = ADD_DAYS(l_next_month_start,-1) IF l_awe_eff_date = l_pay_date THEN ( l_relevant_period_end_date = l_awe_eff_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS(ORA_HRX_GB_PAY_PERIOD_START,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) IF (l_early_birth_indicator = 'Y') THEN ( IF ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_awe_eff_date = l_relevant_period_end_date_mod ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( IF l_event_type = 'CHB' THEN ( IF (l_early_birth_indicator = 'Y') THEN ( l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_complete_qweek) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_56_days_prior_date) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) ) IF l_event_type = 'PLC' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_matching_week) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_matching_week = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ess_log_write( 'PAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'Average Weekly Earnings may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) l_create = 'N' IF (l_awe_lel_chk_pass = 'N') AND (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') THEN ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_awe_lel_chk_pass = 'N') AND (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') THEN ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_length_of_service=Floor(l_no_of_days/7) if ( l_length_of_service < 25 ) then ( l_pay_stop_date = l_start_date l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = days_between(l_start_date, l_placement_date) If (l_start_date >= l_placement_date and l_no_of_days > 56) then ( l_pay_stop_date = l_start_date l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_EXCEEDED_56_DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Payable After 56th Day')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Payable After 56th Day' CERT_COMMENTS[l_cert_index] = 'Statutory Paternity pay is not payable after the 56th day' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) else ( l_no_of_days = days_between(l_end_date, l_placement_date) If (l_end_date >= l_placement_date and l_no_of_days > 56) then ( l_pay_stop_date = add_days(l_placement_date,55) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_EXCEEDED_56_DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Payable After 56th Day')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Payable After 56th Day' CERT_COMMENTS[l_cert_index] = 'Statutory Paternity pay is not payable after the 56th day' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) if (l_days_bew >= 14) then ( l_pay_stop_date = add_days(l_start_date,13) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'The payments completed for the maximum number of weeks payable.' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bew,7) if (l_days_after >= 1) then ( l_pay_stop_date = TRUNC(add_days(l_end_date,l_days_after*-1)) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days.' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_ce",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Active Newham Adoption Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1='X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 12 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 12 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 18 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Teachers Maternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1='X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) If(IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 0 ) ) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT,BAND3PAYFACTOR,BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Active Newham Maternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1='X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (IV_ATTRIBUTE_1 = 'NO') OR (IV_ATTRIBUTE_1 = 'No') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 12 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 12 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 18 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "EMG_SSP_AWE",
        "answer": "DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT for PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE (DATE),IV_END_DATE (DATE),IV_L_START_DATE (DATE) end_of_time='4712/12/31 00:00:00' (DATE) l_start_date=IV_L_START_DATE lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' configure_check_payroll_transfer='Y' l_altawe_cert='N' l_awe=0 l_lel=0 l_override_awe=0 l_relevant_period_end_date = end_of_time l_relevant_period_start_date = end_of_time l_absence_type = 'ORA_HRX_GB_SS' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_rel_date_start=PER_REL_DATE_START IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = '4712/12/31 00:00:00' (date) ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_pay_rel_date_start = GET_PLSD_FSED l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel=GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF (l_license <> 'PAY') THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_license = 'PAY') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_start_date)) ( l_date1 = ORA_HRX_GB_PAY_PERIOD_START l_reference_date = ADD_DAYS(l_date1,-1) ) l_relevant_period_end_date = l_reference_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date)) ( l_paydate = ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE l_end_date = ORA_HRX_GB_PAY_PERIOD_END l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_paydate for end of relevant period is = '|| to_char(l_paydate )) l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_end_date for end of relevant period is = '|| to_char(l_end_date )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_end_date)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'SSP_SUB_AWE_Entitlement >> l_no_of_payroll_runs new is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_start_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) ) IF (l_ret_bal = 0) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' l_insuff_info_cert = 'N' ) ELSE ( l_insuff_info_cert = 'Y' ) ) ) ELSE ( IF l_seniority_date < l_rel_date_start THEN ( l_rel_date_start = l_seniority_date ) IF l_rel_date_start > l_relevant_period_end_date THEN ( l_insuff_info_cert = 'Y' ) ELSE IF (l_rel_date_start > l_relevant_period_start_date) THEN ( IF l_pay_rel_date_start < l_rel_date_start THEN ( l_insuff_info_cert = 'Y' ) ELSE ( l_service_days = DAYS_BETWEEN(l_relevant_period_end_date,l_rel_date_start)+1 l_service_weeks = l_service_days/7 l_service_weeks_floor = FLOOR(l_service_weeks) IF l_service_weeks = 0 THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_service_weeks_floor = l_service_weeks) THEN ( l_awe = l_ret_bal/l_service_weeks ) ELSE ( l_awe = (l_ret_bal/l_service_days)*7 ) ) ) ) ELSE ( if (l_src_periodicity = 'YEAR') then( l_awe_factor = 1/52 ) else if (l_src_periodicity = 'SEMI-YEAR') then( l_awe_factor = 2/52 ) else if (l_src_periodicity = 'QUARTER') then( l_awe_factor = 4/52 ) else if (l_src_periodicity = 'WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'BI-WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'LUNAR MONTH') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'CALENDAR MONTH') then( l_awe_factor = 6/52 ) else if (l_src_periodicity = 'BI-MONTH') then( l_awe_factor = 6/52 ) l_awe = (l_ret_bal * l_awe_factor) ) ) ) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') then( lel_cert_flag='Y' ) if (l_insuff_info_cert='Y') then (lel_cert_flag='N') l_payroll_name_a='X' l_payroll_name_b='X' IF ((configure_check_payroll_transfer='Y') AND (l_license = 'PAY') ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date)( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) l_rel_period_end_for_awe_calc=l_relevant_period_end_date If ( l_rel_date_start > l_rel_period_end_for_awe_calc ) THEN ( configure_check_payroll_transfer='N' xlog=ESS_LOG_WRITE ( 'SSP_Entitlement: Skip chkpaytfr as reldatestart after relevant period end') ) ELSE IF ( l_rel_date_start > l_rel_period_start_for_awe_calc ) then ( l_rel_period_start_for_awe_calc=l_rel_date_start xlog=ESS_LOG_WRITE ( 'SSP_Entitlement: chkpaytfr as reldatestart between relevant period start and end') ) xlog=ESS_LOG_WRITE ( 'SSP_Entitlement:Payroll Name Check Dates are: ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF ( configure_check_payroll_transfer='Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc)( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) then ( l_payroll_name_b=PAY_PRIMARY_PAYROLL_NAME_NF xlog=ESS_LOG_WRITE ( 'SSP_Entitlement:l_payroll_name_b: ' || l_payroll_name_b) ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc)( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) then ( l_payroll_name_a=PAY_PRIMARY_PAYROLL_NAME_NF xlog=ESS_LOG_WRITE ('SSP_Entitlement:l_payroll_name_a: ' || l_payroll_name_a) ) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( paychg_cert_flag='Y' xlog=ESS_LOG_WRITE ('SSP_Entitlement:Create Different Payrolls certificate is Y') ) if (paychg_cert_flag='Y') then (l_insuff_info_cert='N') if (paychg_cert_flag='Y') then (lel_cert_flag='N') ) ) return lel_cert_flag,l_insuff_info_cert,paychg_cert_flag,l_awe",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ADMIN_ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE14 is ' ' INPUTS ARE IV_START_DATE Service_days=0 Contract = 'X' Contract = PER_ASG_ATTRIBUTE14 l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) l_person_id=GET_CONTEXT(PERSON_ID,0) adj_service_start_date = to_date(GET_VALUE_SET('NCC_ADJ_SERVICE_START_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) if(adj_service_start_date < '4712/12/31 00:00:00' (date)) then ( l_start_dt = adj_service_start_date ) else ( l_start_dt = Hire_date ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 employee = GET_TABLE_VALUE('PQP_EMPLOYEE_TYPE','EMPLOYEE_TYPE',contract,l_eff_date) if (employee = 'FIRE') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) if (employee = 'ACTIVE ADMIN') then ( IF ((Year_of_service>0) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 26 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF (Year_of_service>2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 78 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) ) if (employee <> 'FIRE' and employee <> 'ACTIVE ADMIN') then ( IF (Year_of_service<0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 999 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF Year_of_service>3 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) ) L_CUSTOM_MESSAGE = 'X' L_CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('adj_service_start_date = ' || TO_CHAR(adj_service_start_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Hire_date = ' || TO_CHAR(Hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('of service of the Employee = ' || TO_CHAR(Service_days)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Year_of_service = ' || TO_CHAR(Year_of_service)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ADMIN_ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE14 is ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 Contract = 'X' Contract = PER_ASG_ATTRIBUTE14 l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) l_person_id=GET_CONTEXT(PERSON_ID,0) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_start_dt = Hire_date ) ELSE ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 employee = GET_TABLE_VALUE('PQP_EMPLOYEE_TYPE','EMPLOYEE_TYPE',contract,l_eff_date) l_debug = ess_log_write('employee type: ' + employee) l_debug = ess_log_write('Year_of_service: ' + to_char(Year_of_service)) if (employee = 'FIRE') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) if (employee = 'ACTIVE ADMIN') then ( IF ((Year_of_service>0) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 26 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF (Year_of_service>2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 78 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) ) if (employee <> 'FIRE' and employee <> 'ACTIVE ADMIN') then ( IF (Year_of_service<0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 999 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF Year_of_service>3 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) ) L_CUSTOM_MESSAGE = 'X' L_CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('adj_service_start_date = ' || TO_CHAR(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Hire_date = ' || TO_CHAR(Hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('of service of the Employee = ' || TO_CHAR(Service_days)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Year_of_service = ' || TO_CHAR(Year_of_service)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "OAP ADMIN ENTITLEMENT FORMULA",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS 'x' DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK is 'Y' INPUTS ARE IV_START_DATE,IV_EXPECTEDCHILDBIRTHDATE x = ESS_LOG_WRITE('*** Start of OAP Admin Entitlement Formula Log ***') Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) BAND1ENTITLEMENT = 0 BAND1PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND3PAYFACTOR = 0 l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) l_person_id=GET_CONTEXT(PERSON_ID,0) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_start_dt = Hire_date ) ELSE ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE(' l_start_dt: ' + to_char(l_start_dt)) x = ESS_LOG_WRITE('Stat Absences Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) x = ESS_LOG_WRITE('IV_EXPECTEDCHILDBIRTHDATE: ' + to_char(IV_EXPECTEDCHILDBIRTHDATE )) x = ESS_LOG_WRITE('ANC_ABS_MTRNT_INTEND_TO_WORK: ' + (ANC_ABS_MTRNT_INTEND_TO_WORK)) x = ESS_LOG_WRITE('ANC_ABS_ENTRS_ATTRIBUTE1: ' + (ANC_ABS_ENTRS_ATTRIBUTE1)) l_day_of_week = ' ' l_ewc = '0001/01/01 00:00:00' (date) l_expected_child_birth=IV_EXPECTEDCHILDBIRTHDATE l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-77) Week_of_Service=(DAYS_BETWEEN(l_qweek,l_start_dt))/7 x = ESS_LOG_WRITE('Week_of_Service: ' + to_char(Week_of_Service )) if Week_of_Service >= 52 then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 if(ANC_ABS_MTRNT_INTEND_TO_WORK = 'N') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE1 = '33 Weeks' then ( BAND2PAYFACTOR = 18.1818 BAND2ENTITLEMENT = 231 x = ESS_LOG_WRITE('Half Pay Weeks If: ' + ANC_ABS_ENTRS_ATTRIBUTE1) ) else ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) ) BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 239 ) else ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ) x = ESS_LOG_WRITE('BAND1ENTITLEMENT: ' + to_char(BAND1ENTITLEMENT)) x = ESS_LOG_WRITE('BAND2ENTITLEMENT: ' + to_char(BAND2ENTITLEMENT)) x = ESS_LOG_WRITE('BAND3ENTITLEMENT: ' + to_char(BAND3ENTITLEMENT)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ORA_HRX_GB_MAT_ENTITLEMENTV2",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_qweek) is = '|| to_char(trunc(l_qweek))) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_complete_qweek) is = '|| to_char(trunc(l_complete_qweek))) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_awe_eff_date = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_start_date)) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_56_days_prior_date)) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_rel_period_end_for_awe_calc)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_rel_period_end_for_awe_calc,1) l_awe_eff_date = l_relevant_period_end_date_mod ) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_rel_period_end_for_awe_calc) is = '|| to_char(trunc(l_rel_period_end_for_awe_calc))) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0 ) l_dummy = ess_log_write( 'MAT_Entitlement >> get context payroll is l_payroll_id = '|| to_char(l_payroll_id)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'MAT_Entitlement >> l_regprocdate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'MAT_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'MAT_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_dummy = ess_log_write( 'MAT_Entitlement >>l_ret_bal = 0') ) ELSE ( IF (l_seniority_date > l_rel_period_start_for_awe_calc) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 2 = ' ||l_insuff_info_cert) ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) ) ) ) ) l_calculated_awe = l_awe l_dummy = ess_log_write( 'MAT_Entitlement >> l_calculated_awe = ' ||to_char(l_calculated_awe)) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_no_of_days < 176) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) ) /*l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(AN_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ORA_HRX_GB_MAT_ENTITLEMENT",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_ewc (date)) THEN ( l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc l_rel_asg_date_start = PER_ASG_REL_DATE_START l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_next_month_start =ADD_MONTHS(ORA_HRX_GB_PAY_PERIOD_START,1) l_pay_date = ADD_DAYS(l_next_month_start,-1) IF l_awe_eff_date = l_pay_date THEN ( l_relevant_period_end_date = l_awe_eff_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS(ORA_HRX_GB_PAY_PERIOD_START,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN l_awe_eff_date = l_relevant_period_end_date_mod CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_length_of_service < 25 ) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_TEACHER_ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = '0001/01/01 00:00:00' (date) Hire_date = '0001/01/01 00:00:00' (date) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) H_ST = 0 H_ST = Months_between (IV_START_DATE,Hire_date) If(H_ST > 4) then ( Made_up_hire_date = TO_DATE('01/04/'||to_char(Hire_date,'YYYY'),'DD/MM/YYYY') ) else ( Made_up_hire_date = Hire_date ) agg_service_start_date = '0001/01/01 00:00:00' (date) agg_service_start_date = to_date(GET_VALUE_SET('NCC_AGG_SERVICE_START_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) A_ST = 0 A_ST = Months_between (IV_START_DATE,agg_service_start_date) If(A_ST > 4) then ( Made_up_Agg_hire_date = TO_DATE('01/04/'||to_char(agg_service_start_date,'YYYY'),'DD/MM/YYYY') ) else ( Made_up_Agg_hire_date = agg_service_start_date ) if (agg_service_start_date <> '4712/12/31 00:00:00' (date) )then ( l_start_dt = Made_up_Agg_hire_date ) else ( l_start_dt = Made_up_hire_date ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 340 ) IF ((Year_of_service>0.32) AND (Year_of_service<1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 290 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 265 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 215 ) IF Year_of_service>3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Hire_date = ' || to_char(Hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('H_ST = ' || TO_CHAR(H_ST)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Made_up_hire_date = ' || TO_CHAR(Made_up_hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('agg_service_start_date = ' || TO_CHAR(agg_service_start_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('A_ST = ' || TO_CHAR(A_ST)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Made_up_Agg_hire_date = ' || TO_CHAR(Made_up_Agg_hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('l_start_dt = ' || TO_CHAR(l_start_dt)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Service_days = ' || TO_CHAR(Service_days)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Year_of_service = ' || TO_CHAR(Year_of_service)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_TEACHER_ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = '0001/01/01 00:00:00' (date) Hire_date = '0001/01/01 00:00:00' (date) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) H_ST = 0 H_ST = Months_between (IV_START_DATE,Hire_date) If(H_ST > 4) then ( Made_up_hire_date = TO_DATE('01/04/'||to_char(Hire_date,'YYYY'),'DD/MM/YYYY') ) else ( Made_up_hire_date = Hire_date ) l_debug = ESS_LOG_WRITE('H_ST = ' || to_char(H_ST)) agg_service_start_date = PER_ASG_REL_ATTRIBUTE_DATE1 A_ST = 0 A_ST = Months_between (IV_START_DATE,agg_service_start_date) l_debug = ESS_LOG_WRITE('A_ST = ' || to_char(A_ST)) If(A_ST > 4) then ( Made_up_Agg_hire_date = TO_DATE('01/04/'||to_char(agg_service_start_date,'YYYY'),'DD/MM/YYYY') ) else ( Made_up_Agg_hire_date = agg_service_start_date ) if PER_ASG_REL_ATTRIBUTE_DATE1 was not defaulted then ( l_start_dt = Made_up_Agg_hire_date ) else ( l_start_dt = Made_up_hire_date ) l_year = to_char(l_start_dt,'YYYY') l_debug = ESS_LOG_WRITE('l_year ' || l_year) l_debug = ESS_LOG_WRITE('l_start_dt ' || to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 340 ) IF ((Year_of_service>0.32) AND (Year_of_service<1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 290 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 265 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 215 ) IF Year_of_service>3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 999 ) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Hire_date = ' || to_char(Hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('H_ST = ' || TO_CHAR(H_ST)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('PER_ASG_REL_ATTRIBUTE_DATE1 = ' || TO_CHAR(PER_ASG_REL_ATTRIBUTE_DATE1)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Made_up_hire_date = ' || TO_CHAR(Made_up_hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('agg_service_start_date = ' || TO_CHAR(agg_service_start_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('A_ST = ' || TO_CHAR(A_ST)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Made_up_Agg_hire_date = ' || TO_CHAR(Made_up_Agg_hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('l_start_dt = ' || TO_CHAR(l_start_dt)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Service_days = ' || TO_CHAR(Service_days)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Year_of_service = ' || TO_CHAR(Year_of_service)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC UK Statutory Sick Pay Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_DOR_DOCUMENT_CODE is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_CODE is 'X' DEFAULT FOR PER_PER_DOR_DOCUMENT_TYPE_ID is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_ID is 0 DEFAULT FOR PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is 'X' DEFAULT FOR PER_PER_DOR_DATE_FROM is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_FROM is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PER_DOR_DATE_TO is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_TO is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) lel_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) lel_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='N' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' link_letter_cert_begin_date = '4712-12-31T00:00:00.000Z' (DATE) link_letter_cert_end_date = '4712-12-31T00:00:00.000Z' (DATE) link_letter_state=0 if l_linked_absences_exist=0 then ( ni=PER_PER_DOR_DOCUMENT_CODE.FIRST(-1) if PER_PER_DOR_DOCUMENT_CODE.exists(ni) then ( link_letter_state=90 l_found=0 while (PER_PER_DOR_DOCUMENT_CODE.exists(ni) and l_found=0) loop ( l_dor_document_code=PER_PER_DOR_DOCUMENT_CODE[ni] l_dor_document_type_id=PER_PER_DOR_DOCUMENT_TYPE_ID[ni] l_dor_system_doc_type=PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME[ni] l_dor_date_from=PER_PER_DOR_DATE_FROM[ni] l_dor_date_to=PER_PER_DOR_DATE_TO[ni] if 'ORA_HRX_GB_JC_LINK_LETTER'=l_dor_system_doc_type then ( link_letter_state=91 if l_start_date >= l_dor_date_from and l_start_date <= l_dor_date_to then ( link_letter_state=92 l_found=1 link_letter_cert_flag = 'Y' link_letter_cert_begin_date = l_start_date link_letter_cert_end_date = l_end_date ) else ( link_letter_state=91 ) ) ni=PER_PER_DOR_DOCUMENT_CODE.NEXT(ni,-1) ) ) else ( link_letter_state=0 ) ) else ( link_letter_state=99 ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' l_altawe_cert='N' l_awe=0 l_lel=0 l_absence_type = 'ORA_HRX_GB_SS' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_rel_asg_date_start=PER_ASG_REL_DATE_START l_rel_date_start=PER_REL_DATE_START IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = '4712/12/31 00:00:00' (date) ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_pay_rel_date_start = GET_PLSD_FSED if (do_lel_check=1) then ( l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel=GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF (l_license <> 'PAY') THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_license = 'PAY') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_start_date)) ( l_date1 = ORA_HRX_GB_PAY_PERIOD_START l_reference_date = ADD_DAYS(l_date1,-1) ) l_relevant_period_end_date = l_reference_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) l_relevant_period_end_date_mod = add_days(l_relevant_period_end_date,1) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_end_date_mod) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) IF (l_ret_bal = 0) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ELSE ( l_insuff_info_cert = 'Y' ) ) ) ELSE ( IF l_seniority_date < l_rel_date_start THEN ( l_rel_date_start = l_seniority_date ) IF l_rel_date_start > l_relevant_period_end_date THEN ( l_insuff_info_cert = 'Y' ) ELSE IF (l_rel_date_start > l_relevant_period_start_date) THEN ( IF l_pay_rel_date_start < l_rel_date_start THEN ( l_insuff_info_cert = 'Y' ) ELSE ( l_service_days = DAYS_BETWEEN(l_relevant_period_end_date,l_rel_date_start)+1 l_service_weeks = l_service_days/7 l_service_weeks_floor = FLOOR(l_service_weeks) IF l_service_weeks = 0 THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_service_weeks_floor = l_service_weeks) THEN ( l_awe = l_ret_bal/l_service_weeks ) ELSE ( l_awe = (l_ret_bal/l_service_days)*7 ) ) ) ) ELSE ( if (l_src_periodicity = 'YEAR') then( l_awe_factor = 1/52 ) else if (l_src_periodicity = 'SEMI-YEAR') then( l_awe_factor = 2/52 ) else if (l_src_periodicity = 'QUARTER') then( l_awe_factor = 4/52 ) else if (l_src_periodicity = 'WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'BI-WEEK') then( l_awe_factor = 1/4 ) else if (l_src_periodicity = 'LUNAR MONTH') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'CALENDAR MONTH') then( l_awe_factor = 6/52 ) else if (l_src_periodicity = 'BI-MONTH') then( l_awe_factor = 6/52 ) l_awe = (l_ret_bal * l_awe_factor) ) ) ) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') then( lel_cert_flag='Y' lel_cert_begin_date=l_start_date lel_cert_end_date=l_end_date ) if (l_insuff_info_cert='Y') then (lel_cert_flag='N') ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) row_dbg=to_char(row_rev_start_dt)||' / '||to_char(row_rev_end_dt) row_dbg=row_dbg||' / '||row_altcd row_dbg=row_dbg||' / '||row_update_type row_dbg=row_dbg||' / '||row_cert_status row_dbg=row_dbg||' / '||row_class_cd row_dbg=row_dbg||' / '||row_per_cert_id_str if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "OMP Admin Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS 'x' DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK is 'Y' INPUTS ARE IV_START_DATE,IV_EXPECTEDCHILDBIRTHDATE x = ESS_LOG_WRITE('*** Start of OAP Admin Entitlement Formula Log ***') Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) l_person_id=GET_CONTEXT(PERSON_ID,0) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_start_dt = Hire_date ) ELSE ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE(' l_start_dt: ' + to_char(l_start_dt)) x = ESS_LOG_WRITE('Stat Absences Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) x = ESS_LOG_WRITE('IV_EXPECTEDCHILDBIRTHDATE: ' + to_char(IV_EXPECTEDCHILDBIRTHDATE )) x = ESS_LOG_WRITE('Half Pay Weeks: ' + ANC_ABS_ENTRS_ATTRIBUTE1) l_day_of_week = ' ' l_ewc = '0001/01/01 00:00:00' (date) l_expected_child_birth=IV_EXPECTEDCHILDBIRTHDATE l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-77) Week_of_Service=(DAYS_BETWEEN(l_qweek,l_start_dt))/7 x = ESS_LOG_WRITE('l_qweek: ' + to_char(l_qweek )) x = ESS_LOG_WRITE('Week_of_Service: ' + to_char(Week_of_Service )) if Week_of_Service >= 52 then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 if ANC_ABS_ENTRS_ATTRIBUTE1 = '33 Weeks' then ( BAND2PAYFACTOR = 18.1818 BAND2ENTITLEMENT = 231 x = ESS_LOG_WRITE('Half Pay Weeks If: ' + ANC_ABS_ENTRS_ATTRIBUTE1) ) else ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 239 ) else ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "OMP Teachers Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS 'x' DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK is 'Y' INPUTS ARE IV_START_DATE,IV_EXPECTEDCHILDBIRTHDATE x = ESS_LOG_WRITE('*** Start of OAP Teachers Entitlement Formula Log ***') Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) l_person_id=GET_CONTEXT(PERSON_ID,0) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_start_dt = Hire_date ) ELSE ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE(' l_start_dt: ' + to_char(l_start_dt)) x = ESS_LOG_WRITE('Stat Absences Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) x = ESS_LOG_WRITE('IV_EXPECTEDCHILDBIRTHDATE: ' + to_char(IV_EXPECTEDCHILDBIRTHDATE )) l_day_of_week = ' ' l_ewc = '0001/01/01 00:00:00' (date) l_expected_child_birth=IV_EXPECTEDCHILDBIRTHDATE l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-77) Week_of_Service=(DAYS_BETWEEN(l_qweek,l_start_dt))/7 if Week_of_Service >= 52 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 if ANC_ABS_MTRNT_INTEND_TO_WORK = 'N' then ( BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE1 = '33 Weeks' then ( BAND3PAYFACTOR = 18.1818 BAND3ENTITLEMENT = 231 x = ESS_LOG_WRITE('Half Pay Weeks If: ' + ANC_ABS_ENTRS_ATTRIBUTE1) ) else ( BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 ) ) BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 239 ) else ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 365 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT ,BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "KIT ENTITLEMENT FORMULA",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_START_DATE, IV_END_DATE BAND1PAYFACTOR=100 BAND1ENTITLEMENT=10 BAND2PAYFACTOR=0 BAND2ENTITLEMENT=355 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "SPLIT ENTITLEMENT FORMULA",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_START_DATE, IV_END_DATE BAND1PAYFACTOR=100 BAND1ENTITLEMENT=20 BAND2PAYFACTOR=0 BAND2ENTITLEMENT=345 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "OAP TEACHERS ENTITLEMENT FORMULA",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS 'x' DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK is 'Y' INPUTS ARE IV_START_DATE,IV_EXPECTEDCHILDBIRTHDATE x = ESS_LOG_WRITE('*** Start of OAP Teachers Entitlement Formula Log ***') Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) l_person_id=GET_CONTEXT(PERSON_ID,0) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_start_dt = Hire_date ) ELSE ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE(' l_start_dt: ' + to_char(l_start_dt)) x = ESS_LOG_WRITE('Stat Absences Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) x = ESS_LOG_WRITE('IV_EXPECTEDCHILDBIRTHDATE: ' + to_char(IV_EXPECTEDCHILDBIRTHDATE )) l_day_of_week = ' ' l_ewc = '0001/01/01 00:00:00' (date) l_expected_child_birth=IV_EXPECTEDCHILDBIRTHDATE l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-77) Week_of_Service=(DAYS_BETWEEN(l_qweek,l_start_dt))/7 if Week_of_Service >= 52 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 if ANC_ABS_MTRNT_INTEND_TO_WORK = 'N' then ( BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 ) else ( if ANC_ABS_ENTRS_ATTRIBUTE1 = '33 Weeks' then ( BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 18.1818 BAND3ENTITLEMENT = 231 x = ESS_LOG_WRITE('Half Pay Weeks If: ' + ANC_ABS_ENTRS_ATTRIBUTE1) ) else ( BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 ) ) BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 239 ) else ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 365 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT ,BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "SC OPP Birth Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC OPP Birth Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 l_debug = ' ' x = ESS_LOG_WRITE('IV_START_DATE:' + to_char(IV_START_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('ACP_HIRE_DATE:' + to_char(ACP_HIRE_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('Service_days:' + to_char(Service_days)) x = ESS_LOG_WRITE('Year_of_service:' + to_char(Year_of_service)) l_debug = ess_log_write('IV_START_DATE'+ to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE'+ to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ACP_HIRE_DATE'+ to_char(ACP_HIRE_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Service_days'+ to_char(Service_days)) l_debug = ess_log_write('Year_of_service'+ to_char(Year_of_service)) x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 365 ) else ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 351 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "KIT DAYS ENTITLEMENT FORMULA",
        "answer": "BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 10 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 355 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Officers OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 l_debug = ' ' x = ESS_LOG_WRITE('IV_START_DATE:' + to_char(IV_START_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('ACP_HIRE_DATE:' + to_char(ACP_HIRE_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('Service_days:' + to_char(Service_days)) x = ESS_LOG_WRITE('Year_of_service:' + to_char(Year_of_service)) l_debug = ess_log_write('IV_START_DATE'+ to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE'+ to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ACP_HIRE_DATE'+ to_char(ACP_HIRE_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Service_days'+ to_char(Service_days)) l_debug = ess_log_write('Year_of_service'+ to_char(Year_of_service)) x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF (Year_of_service>0.5 and (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 35 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 63 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 63 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 126 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 154 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 154 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Officers OSP Entitlement Formula",
        "answer": "ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_sc_get_en_ff = 'SC_GET_ENTITLEMENT_FF' l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=round(Service_days/365,2) weeks_of_service = Service_days/7 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) ctxAbsTypeId = GET_CONTEXT (ABSENCE_TYPE_ID, 0) x = ESS_LOG_WRITE(' ctxAbsTypeId ' + to_char(ctxAbsTypeId)) IF (weeks_of_service<26) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF (weeks_of_service>=26 and (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 35 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 63 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 63 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 126 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 154 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 154 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) l_iv_start_date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 0), HIRE_DATE) l_iv_temp_start_date = l_iv_start_date l_iv_end_date = ADD_DAYS(IV_START_DATE,-1) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', l_iv_start_date) SET_INPUT ('IV_END_DATE', l_iv_end_date) SET_INPUT ('check_sdm',1) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) l_Band0 = l_BandEQ0 c = 0 WHILE l_BandEQ0 > 0 LOOP ( ld_date1 = ADD_DAYS(l_iv_temp_start_date, -1 * l_BandEQ0) ld_date2 = ADD_DAYS(l_iv_temp_start_date, -1) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', ld_date1) SET_INPUT ('IV_END_DATE', ld_date2) SET_INPUT ('check_sdm',1) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(l_BandEQ0)) l_iv_temp_start_date = ADD_DAYS(l_iv_start_date, -1 * l_Band0) l_Band0 = l_Band0 + l_BandEQ0 rLog = ESS_LOG_WRITE('l_BandEQ0 - ' + TO_CHAR(l_BandEQ0) + ', l_iv_start_date - ' + TO_CHAR(l_iv_start_date) + ', l_Band0 - ' + TO_CHAR(l_Band0)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) l_iv_start_date = l_iv_temp_start_date rLog = ESS_LOG_WRITE('l_Band0 - ' + TO_CHAR(l_Band0)) rLog = ESS_LOG_WRITE('l_iv_start_date - ' + TO_CHAR(l_iv_start_date)) rLog = ESS_LOG_WRITE('l_iv_end_date - ' + TO_CHAR(l_iv_end_date)) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', l_iv_start_date) SET_INPUT ('IV_END_DATE', l_iv_end_date) SET_INPUT ('check_sdm',1) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) IF l_BandGT0 > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + l_BandGT0, 365) IF l_BandGT0 >= BAND1ENTITLEMENT THEN ( l_BandGT0 = l_BandGT0 - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - l_BandGT0 l_BandGT0 = 0 ) IF l_BandGT0 >= BAND2ENTITLEMENT THEN ( l_BandGT0 = l_BandGT0 - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - l_BandGT0 l_BandGT0 = 0 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Teachers OSP Entitlement Formula",
        "answer": "ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_sc_get_en_ff = 'SC_GET_ENTITLEMENT_FF' l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=round(Service_days/365,2) weeks_of_service = Service_days/7 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) ctxAbsTypeId = GET_CONTEXT (ABSENCE_TYPE_ID, 0) x = ESS_LOG_WRITE(' ctxAbsTypeId ' + to_char(ctxAbsTypeId)) IF (weeks_of_service < 18) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF (weeks_of_service >= 18 and (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 31 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) l_iv_start_date = GREATEST(ADD_YEARS(IV_START_DATE, -1), HIRE_DATE) l_iv_temp_start_date = l_iv_start_date l_iv_end_date = ADD_DAYS(IV_START_DATE,-1) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', l_iv_start_date) SET_INPUT ('IV_END_DATE', l_iv_end_date) SET_INPUT ('check_sdm',1) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) l_Band0 = l_BandEQ0 c = 0 WHILE l_BandEQ0 > 0 LOOP ( ld_date1 = ADD_DAYS(l_iv_temp_start_date, -1 * l_BandEQ0) ld_date2 = ADD_DAYS(l_iv_temp_start_date, -1) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', ld_date1) SET_INPUT ('IV_END_DATE', ld_date2) SET_INPUT ('check_sdm',1) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(l_BandEQ0)) l_iv_temp_start_date = ADD_DAYS(l_iv_start_date, -1 * l_Band0) l_Band0 = l_Band0 + l_BandEQ0 rLog = ESS_LOG_WRITE('l_BandEQ0 - ' + TO_CHAR(l_BandEQ0) + ', l_iv_start_date - ' + TO_CHAR(l_iv_start_date) + ', l_Band0 - ' + TO_CHAR(l_Band0)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) l_iv_start_date = l_iv_temp_start_date rLog = ESS_LOG_WRITE('l_Band0 - ' + TO_CHAR(l_Band0)) rLog = ESS_LOG_WRITE('l_iv_start_date - ' + TO_CHAR(l_iv_start_date)) rLog = ESS_LOG_WRITE('l_iv_end_date - ' + TO_CHAR(l_iv_end_date)) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', l_iv_start_date) SET_INPUT ('IV_END_DATE', l_iv_end_date) SET_INPUT ('check_sdm',1) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) IF l_BandGT0 > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + l_BandGT0, 365) IF l_BandGT0 >= BAND1ENTITLEMENT THEN ( l_BandGT0 = l_BandGT0 - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - l_BandGT0 l_BandGT0 = 0 ) IF l_BandGT0 >= BAND2ENTITLEMENT THEN ( l_BandGT0 = l_BandGT0 - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - l_BandGT0 l_BandGT0 = 0 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Teachers OSP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log cc ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=round(Service_days/365,2) x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.35) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF (Year_of_service>0.35 and (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 31 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Officers OMP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'Y' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC Officers OMP Entitlement Formula Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) RETURN_TO_WORK = 'Y' l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) if RETURN_TO_WORK = 'Y' then ( IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) else ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) ) else if RETURN_TO_WORK = 'N' Then ( IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) else ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Officers OMP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'Y' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC Officers OMP Entitlement Formula Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) if RETURN_TO_WORK = 'Y' then ( IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) else ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) ) else if RETURN_TO_WORK = 'N' Then ( IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) else ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 99999 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Teachers OMP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC Teachers OMP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 99999 ) else ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 91 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 99999 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Officers OAP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'Y' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC Officers OAP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('ANC_ABS_MTRNT_INTEND_TO_WORK $$$$$: '||ANC_ABS_MTRNT_INTEND_TO_WORK) x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) RETURN_TO_WORK = 'Y' l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) if RETURN_TO_WORK = 'Y' then ( IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 365 ) else ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 239 ) ) else ( IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 365 ) else ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 323 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Officers OAP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'Y' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC Officers OAP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('ANC_ABS_MTRNT_INTEND_TO_WORK $$$$$: '||ANC_ABS_MTRNT_INTEND_TO_WORK) x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) if RETURN_TO_WORK = 'Y' then ( IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 365 ) else ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 239 ) ) else ( IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 365 ) else ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 323 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Teachers OIIP Entitlement Formula",
        "answer": "ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_sc_get_en_ff = 'SC_GET_ENTITLEMENT_FF' l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=round(Service_days/365,2) weeks_of_service = Service_days/7 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) ctxAbsTypeId = GET_CONTEXT (ABSENCE_TYPE_ID, 0) x = ESS_LOG_WRITE(' ctxAbsTypeId ' + to_char(ctxAbsTypeId)) IF (weeks_of_service < 18) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF (weeks_of_service >= 18 and (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 31 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) l_iv_start_date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 0), HIRE_DATE) l_iv_temp_start_date = l_iv_start_date l_iv_end_date = ADD_DAYS(IV_START_DATE,-1) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', l_iv_start_date) SET_INPUT ('IV_END_DATE', l_iv_end_date) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) l_Band0 = l_BandEQ0 c = 0 WHILE l_BandEQ0 > 0 LOOP ( ld_date1 = ADD_DAYS(l_iv_temp_start_date, -1 * l_BandEQ0) ld_date2 = ADD_DAYS(l_iv_temp_start_date, -1) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', ld_date1) SET_INPUT ('IV_END_DATE', ld_date2) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(l_BandEQ0)) l_iv_temp_start_date = ADD_DAYS(l_iv_start_date, -1 * l_Band0) l_Band0 = l_Band0 + l_BandEQ0 rLog = ESS_LOG_WRITE('l_BandEQ0 - ' + TO_CHAR(l_BandEQ0) + ', l_iv_start_date - ' + TO_CHAR(l_iv_start_date) + ', l_Band0 - ' + TO_CHAR(l_Band0)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) l_iv_start_date = l_iv_temp_start_date rLog = ESS_LOG_WRITE('l_Band0 - ' + TO_CHAR(l_Band0)) rLog = ESS_LOG_WRITE('l_iv_start_date - ' + TO_CHAR(l_iv_start_date)) rLog = ESS_LOG_WRITE('l_iv_end_date - ' + TO_CHAR(l_iv_end_date)) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', l_iv_start_date) SET_INPUT ('IV_END_DATE', l_iv_end_date) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) IF l_BandGT0 > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + l_BandGT0, 365) IF l_BandGT0 >= BAND1ENTITLEMENT THEN ( l_BandGT0 = l_BandGT0 - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - l_BandGT0 l_BandGT0 = 0 ) IF l_BandGT0 >= BAND2ENTITLEMENT THEN ( l_BandGT0 = l_BandGT0 - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - l_BandGT0 l_BandGT0 = 0 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Teachers OIIP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=round(Service_days/365,2) x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.35) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 365 ) IF (Year_of_service>0.35 and (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 31 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 302 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 243 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 121 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 61 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Teachers OAP Entitlement Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC Teachers OAP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 365 ) else ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 91 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 274 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC OPP Adoption Entitlement formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC OPP Birth Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 l_debug = ' ' x = ESS_LOG_WRITE('IV_START_DATE:' + to_char(IV_START_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('ACP_HIRE_DATE:' + to_char(ACP_HIRE_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('Service_days:' + to_char(Service_days)) x = ESS_LOG_WRITE('Year_of_service:' + to_char(Year_of_service)) l_debug = ess_log_write('IV_START_DATE'+ to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE'+ to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ACP_HIRE_DATE'+ to_char(ACP_HIRE_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Service_days'+ to_char(Service_days)) l_debug = ess_log_write('Year_of_service'+ to_char(Year_of_service)) x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 365 ) else ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 351 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC_GET_ENTITLEMENT_FF",
        "answer": "ALIAS ANC_ABS_ENTRS_END_DATE AS ABS_END_DATE ALIAS ANC_ABS_ENTRS_START_DATE AS ABS_START_DATE ALIAS ANC_ABS_ENTRS_ABSENCE_TYPE_ID AS ABS_TYPE_ID ALIAS ANC_ABS_ENTRS_ABSENCE_STATUS_CD AS ABS_STATUS ALIAS ANC_ABS_ENTRS_APPROVAL_STATUS_CD AS ABS_APRVL_STATUS ALIAS ANC_ABS_ENTRS_ASSIGNMENT_ID AS ABS_ASG_ID ALIAS ANC_ABS_TYP_BASE_NAME AS ABS_TYP_NAME ALIAS ANC_ABS_PLN_LEG_GROUPING_CD AS ABS_PLN_GRP ALIAS ANC_ABS_TYP_LEG_GROUPING_CD AS ABS_TYP_GRP ALIAS ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR AS ABS_ENTRY_ID ALIAS ABS_PLN_ENT_CURR_PER_ABSENCE_ENTRY_ID AS ENTL_ABS_ENTRY_ID ALIAS ABS_PLN_ENT_CURR_START_DATE AS ENTL_ABS_START_DATE ALIAS ABS_PLN_ENT_CURR_ABS_UNITS AS ENTL_ABS_UNITS ALIAS ABS_PLN_ENT_CURR_ASSIGNMENT_ID AS ENTL_ASG_ID ALIAS ABS_PLN_ENT_CURR_ABSENCE_PAY_FACTOR AS ENTL_PAY_FACTOR ALIAS ABS_PLN_ENT_CURR_ABSENCE_PLAN_ID AS ENTL_ABS_PLAN_ID DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT_DATA_VALUE FOR ABS_PLN_ENT_CURR_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT_DATA_VALUE FOR ABS_PLN_ENT_CURR_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR ABS_PLN_ENT_CURR_ABS_UNITS IS 0 DEFAULT_DATA_VALUE FOR ABS_PLN_ENT_CURR_ASSIGNMENT_ID IS 0 DEFAULT_DATA_VALUE FOR ABS_PLN_ENT_CURR_ABSENCE_PAY_FACTOR IS 0 DEFAULT_DATA_VALUE FOR ABS_PLN_ENT_CURR_ABSENCE_PLAN_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'SUBMITTED' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_ASSIGNMENT_ID IS 0 DEFAULT FOR ANC_ABS_TYP_BASE_NAME IS 'NULL' DEFAULT FOR ANC_ABS_PLN_LEG_GROUPING_CD IS 'NULL' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS 'NULL' DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR check_sdm is 0 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE(DATE), check_sdm(NUMBER) NullDate = '0001/01/01 00:00:00' (DATE) ldTempDate = NullDate ctxEntryId = GET_CONTEXT (ABSENCE_ENTRY_ID, 0) ctxAbsTypeId = GET_CONTEXT (ABSENCE_TYPE_ID, 0) ctxAbsPlanId = GET_CONTEXT (ACCRUAL_PLAN_ID, 0) ctxAsgId = GET_CONTEXT (HR_ASSIGNMENT_ID,0) ctxPayrollAsgId = GET_CONTEXT (PAYROLL_ASSIGNMENT_ID,0) BandGT0 = 0 BandEQ0 = 0 x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('ctxAsgId: ' + to_char(ctxAsgId)+ ' ctxPayrollAsgId: '+ to_char(ctxPayrollAsgId)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) x = ESS_LOG_WRITE('check_sdm: ' + to_char(check_sdm)) l_iv_start_date = IV_START_DATE l_iv_end_date = IV_END_DATE CHANGE_CONTEXTS(START_DATE = add_years(l_iv_start_date,-3), END_DATE = l_iv_end_date) ( i = ABS_ENTRY_ID.LAST(-1234) WHILE ABS_ENTRY_ID.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ABS_ENTRY_ID[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ABS_TYPE_ID) ( rLog = ESS_LOG_WRITE('First Abs Details - Index ' + TO_CHAR(i) + ' - '+ ABS_TYP_NAME + ' from ' + TO_CHAR(ABS_START_DATE) + ' to ' + TO_CHAR(ABS_END_DATE) + ' l_iv_start_date ' + TO_CHAR(l_iv_start_date)+ ' IV_END_DATE '+TO_CHAR(IV_END_DATE) + ' ANC_ABS_ENTRS_ABSENCE_TYPE_ID '+TO_CHAR(ANC_ABS_ENTRS_ABSENCE_TYPE_ID) + ' ctxAbsTypeId ' + TO_CHAR(ctxAbsTypeId)) IF ABS_END_DATE < l_iv_start_date AND ABS_STATUS = 'SUBMITTED' THEN ( rLog = ESS_LOG_WRITE('Exiting - Index ' + TO_CHAR(i) + ' - '+ ABS_TYP_NAME + ' from ' + TO_CHAR(ABS_START_DATE) + ' to ' + TO_CHAR(ABS_END_DATE) + 'date start '+ TO_CHAR(l_iv_start_date)) EXIT ) ELSE IF ((ABS_TYP_NAME = 'INDUSTRIAL INJURY LEAVE_GB' OR ABS_TYP_NAME = 'SICK LEAVE_GB' OR ABS_TYP_NAME = 'ADOPTION LEAVE_GB' OR ABS_TYP_NAME = 'MATERNITY LEAVE_GB' OR ABS_TYP_NAME = 'PATERNITY LEAVE - BIRTH_GB' OR ABS_TYP_NAME = 'PATERNITY LEAVE - ADOPTION_GB' OR ABS_TYP_NAME = 'SPECIAL LEAVE - TEACHERS - UNPAID_GB' OR ABS_TYP_NAME = 'SPECIAL LEAVE \u2013 LOCAL GOVERNMENT - UNPAID_GB' OR ABS_TYP_NAME = 'SICKNESS DURING MATERNITY LEAVE_GB' )) THEN ( rLog = ESS_LOG_WRITE('ELSE IF Abs Details - Index ' + TO_CHAR(i) + ' - '+ ABS_TYP_NAME + ' from ' + TO_CHAR(ABS_START_DATE) + ' to ' + TO_CHAR(ABS_END_DATE)) IF ( IS_DATE_BETWEEN (ABS_START_DATE, l_iv_start_date, IV_END_DATE) = 1 OR IS_DATE_BETWEEN (ABS_END_DATE, l_iv_start_date, IV_END_DATE) = 1 OR IS_DATE_BETWEEN (l_iv_start_date, ABS_START_DATE, ABS_END_DATE) = 1 OR IS_DATE_BETWEEN (IV_END_DATE, ABS_START_DATE, ABS_END_DATE) = 1) AND ( ABS_STATUS = 'SUBMITTED' AND ABS_APRVL_STATUS != 'DENIED') THEN ( ldDate1 = GREATEST (ABS_START_DATE, l_iv_start_date) ldDate2 = LEAST (ABS_END_DATE, IV_END_DATE) rLog = ESS_LOG_WRITE('ldDate1 ' + TO_CHAR(ldDate1) + ' ldDate2 '+ TO_CHAR(ldDate2) + ' l_iv_start_date ' + TO_CHAR(l_iv_start_date) + ' IV_END_DATE ' + TO_CHAR(IV_END_DATE)) WHILE ldDate1 <= ldDate2 LOOP ( ldTempDate = NullDate ldTempFactor = -999 CHANGE_CONTEXTS(EFFECTIVE_DATE = ldDate1) ( k = ENTL_ABS_UNITS.FIRST(-1234) WHILE ENTL_ABS_UNITS.EXISTS(k) LOOP ( CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = ENTL_ABS_PLAN_ID[k]) ( IF ABS_PLN_GRP WAS DEFAULTED AND ENTL_ABS_ENTRY_ID[k] = ABS_ENTRY_ID[i] THEN ( rLog = ESS_LOG_WRITE('Abs Details - Index ' + TO_CHAR(ldDate1) + ' - '+ TO_CHAR(ENTL_ABS_PLAN_ID[k]) + ' from ' + TO_CHAR(ENTL_ABS_START_DATE[k]) + ' to ' + TO_CHAR(ENTL_PAY_FACTOR[k])) x = ESS_LOG_WRITE('check_sdm: ' + to_char(check_sdm) + ' ' + ABS_TYP_NAME) IF (ldTempDate = ENTL_ABS_START_DATE[k] AND ENTL_PAY_FACTOR[k] > 0 and (ANC_ABS_ENTRS_ABSENCE_TYPE_ID = ctxAbsTypeId OR (check_sdm=1 and (ABS_TYP_NAME = 'SICK LEAVE_GB' OR ABS_TYP_NAME = 'SICKNESS DURING MATERNITY LEAVE_GB'))) AND ldTempFactor = 0) THEN ( BandGT0 = BandGT0 + ENTL_ABS_UNITS[k] BandEQ0 = BandEQ0 - ENTL_ABS_UNITS[k] ldTempFactor = 1 ) ELSE IF ldTempDate <> ENTL_ABS_START_DATE[k] THEN ( IF (ENTL_PAY_FACTOR[k] > 0 and (ANC_ABS_ENTRS_ABSENCE_TYPE_ID = ctxAbsTypeId OR (check_sdm=1 and (ABS_TYP_NAME = 'SICK LEAVE_GB' OR ABS_TYP_NAME = 'SICKNESS DURING MATERNITY LEAVE_GB')))) THEN ( BandGT0 = BandGT0 + ENTL_ABS_UNITS[k] ldTempFactor = 1 rLog = ESS_LOG_WRITE('IF Entl Details: BandGT0 - ' + TO_CHAR(BandGT0) + ', BandEQ0 ' + TO_CHAR(BandEQ0)) ) ELSE IF(ENTL_PAY_FACTOR[k] = 0) THEN ( BandEQ0 = BandEQ0 + 1 ldTempFactor = 0 rLog = ESS_LOG_WRITE('Else Entl Details: BandGT0 - ' + TO_CHAR(BandGT0) + ', BandEQ0 ' + TO_CHAR(BandEQ0)) ) ) ldTempDate = ENTL_ABS_START_DATE[k] rLog = ESS_LOG_WRITE('Abs Details - ' + TO_CHAR(ldTempFactor) + ' - '+ TO_CHAR(BandGT0) + ' from ' + TO_CHAR(BandEQ0)) ) ) k = ENTL_ABS_UNITS.NEXT(k, -1234) ) ) ldDate1 = ADD_DAYS(ldDate1, 1) ) rLog = ESS_LOG_WRITE('Entl Details: BandGT0 - ' + TO_CHAR(BandGT0) + ', BandEQ0 ' + TO_CHAR(BandEQ0)) ) ) ) ) i = ABS_ENTRY_ID.PRIOR(i, -1234) ) ) RETURN BandGT0, BandEQ0",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SPLIT DAYS ENTITLEMENT FORMULA",
        "answer": "BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 20 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 355 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC ZERO ENTITLEMENT FORMULA",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'Y' INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of SC Officers OMP Entitlement Formula Formula Log ***') BAND1PAYFACTOR=99999 BAND1ENTITLEMENT = 0 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC OFFICERS OIIP ENTITLEMENT FORMULA",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=round(Service_days/365,2) x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) IF (Year_of_service<=0.5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 365 ) IF (Year_of_service>0.5 and (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 35 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 295 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 63 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 63 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 239 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 126 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 113 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 154 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 154 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 57 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC OFFICERS OIIP ENTITLEMENT FORMULA",
        "answer": "ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE x = ESS_LOG_WRITE('*** Start of L Support OSP Entitlement Formula Log ***') l_legal_employer = PER_ASG_ORG_LEGAL_EMPLOYER_NAME x = ESS_LOG_WRITE('Legal Employer: '||l_legal_employer) Service_days=0 x = ESS_LOG_WRITE(' HIre Date: ' + to_char(ACP_HIRE_DATE)) x = ESS_LOG_WRITE('Reckonable Service Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) x = ESS_LOG_WRITE('Cont Service Date: ' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) x = ESS_LOG_WRITE('STat Date: ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_sc_get_en_ff = 'SC_GET_ENTITLEMENT_FF' l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=round(Service_days/365,2) weeks_of_service = Service_days/7 x = ESS_LOG_WRITE('Entitlement Date:' + to_char(l_start_dt,'DD-Mon-YYYY')) ctxAbsTypeId = GET_CONTEXT (ABSENCE_TYPE_ID, 0) x = ESS_LOG_WRITE(' ctxAbsTypeId ' + to_char(ctxAbsTypeId)) IF (weeks_of_service < 26) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF (weeks_of_service >= 26 and (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 35 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 63 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 63 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 126 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 154 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 154 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 9999 ) l_iv_start_date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 0), HIRE_DATE) l_iv_temp_start_date = l_iv_start_date l_iv_end_date = ADD_DAYS(IV_START_DATE,-1) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', l_iv_start_date) SET_INPUT ('IV_END_DATE', l_iv_end_date) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) l_Band0 = l_BandEQ0 c = 0 WHILE l_BandEQ0 > 0 LOOP ( ld_date1 = ADD_DAYS(l_iv_temp_start_date, -1 * l_BandEQ0) ld_date2 = ADD_DAYS(l_iv_temp_start_date, -1) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', ld_date1) SET_INPUT ('IV_END_DATE', ld_date2) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(l_BandEQ0)) l_iv_temp_start_date = ADD_DAYS(l_iv_start_date, -1 * l_Band0) l_Band0 = l_Band0 + l_BandEQ0 rLog = ESS_LOG_WRITE('l_BandEQ0 - ' + TO_CHAR(l_BandEQ0) + ', l_iv_start_date - ' + TO_CHAR(l_iv_start_date) + ', l_Band0 - ' + TO_CHAR(l_Band0)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) l_iv_start_date = l_iv_temp_start_date rLog = ESS_LOG_WRITE('l_Band0 - ' + TO_CHAR(l_Band0)) rLog = ESS_LOG_WRITE('l_iv_start_date - ' + TO_CHAR(l_iv_start_date)) rLog = ESS_LOG_WRITE('l_iv_end_date - ' + TO_CHAR(l_iv_end_date)) IF IS_EXECUTABLE(l_sc_get_en_ff) THEN ( SET_INPUT ('IV_START_DATE', l_iv_start_date) SET_INPUT ('IV_END_DATE', l_iv_end_date) EXECUTE(l_sc_get_en_ff) l_BandEQ0 = GET_OUTPUT('BandEQ0', 0) l_BandGT0 = GET_OUTPUT('BandGT0', 0) ) IF l_BandGT0 > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + l_BandGT0, 365) IF l_BandGT0 >= BAND1ENTITLEMENT THEN ( l_BandGT0 = l_BandGT0 - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - l_BandGT0 l_BandGT0 = 0 ) IF l_BandGT0 >= BAND2ENTITLEMENT THEN ( l_BandGT0 = l_BandGT0 - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - l_BandGT0 l_BandGT0 = 0 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS DCL1",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - DCL1 Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service<0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (0.5<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT=3 BAND2PAYFACTOR=100 BAND2ENTITLEMENT=14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=348 ) else if (1<=Year_of_service and Year_of_service<1.5) then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT=3 BAND2PAYFACTOR=100 BAND2ENTITLEMENT=28 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=334 ) else if (1.5<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT=3 BAND2PAYFACTOR=100 BAND2ENTITLEMENT=42 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=320 ) else if (Year_of_service=>2) then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT=3 BAND2PAYFACTOR=100 BAND2ENTITLEMENT=91 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=271 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4ENTITLEMENT, BAND4PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS DCL2",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - DCL2 Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service<0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (0.5<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=14 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=351 ) else if (1<=Year_of_service and Year_of_service<1.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=28 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=337 ) else if (1.5<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=323 ) else if (Year_of_service=>2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=91 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=274 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Sickness NHSSTDSICK",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - NHSSTDSICK Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=274 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=243 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=121 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=121 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=123 ) else if (3<=Year_of_service and Year_of_service<5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=152 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=61 ) else if (Year_of_service=>5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=5 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS EQUASICK",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - EQUASICK Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT= 49 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=316 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=98 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=267 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=147 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=218 ) else if (Year_of_service=>3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=196 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=169 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS EQUASICK",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - EQUASICK Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<0.30) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=335 ) else if (0.30<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=274 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=243 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=121 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=121 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=123 ) else if (3<=Year_of_service and Year_of_service<5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=152 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=61 ) else if (Year_of_service=>5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS NSTDSICKCE",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - NSTDSICKCE Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<0.30) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=335 ) else if (0.30<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=274 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=243 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=120 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=121 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=124 ) else if (Year_of_service=>3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=151 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=151 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=63 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS STDSICK",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - STDSICK Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<0.30) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=335 ) else if (0.30<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=274 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=243 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=121 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=121 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=123 ) else if (3<=Year_of_service and Year_of_service<5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=152 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=61 ) else if (Year_of_service=>5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS WILCOLSCKO",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - WILCOLSCKO Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0.23<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=60 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=275 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=60 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=60 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=245 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=90 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=90 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=185 ) else if (3<=Year_of_service and Year_of_service<4) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=120 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=120 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=125 ) else if (4<=Year_of_service and Year_of_service<5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=150 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=150 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=65 ) else if (Year_of_service=>5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=180 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=180 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=5 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "STANDARD INDUSTRIAL INJURY STDII",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - Standard Industrial Injury - STDIIFormula') if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PER_BASIC_ATTRIBUTE_DATE1) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) ld_continuous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<0.307) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=00 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=335 ) else if (0.307<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=274 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=61 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=61 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=243 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=121 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=121 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=123 ) else if (3<=Year_of_service and Year_of_service<5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=152 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=152 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=61 ) else if (Year_of_service=>5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=183 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=182 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "STANDARD INDUSTRIAL INJURY TEACHII",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Standard Industrial Injury - TEACHII Formula') if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PER_BASIC_ATTRIBUTE_DATE1) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) ld_continuous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<0.307) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=00 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=340 ) else if (0.307<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=290 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=265 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=215 ) else if (Year_of_service=>3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=165 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL MATERNITY TEACHMAT AND TCHMATNRTW",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Maternity - TEACHMAT (RTW/NORTW) Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) l_return_to_work ='Y' If (RETURN_TO_WORK='Y') then ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=239 ) ) Else if (RETURN_TO_WORK='N') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=323 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL ADOPTION",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'N' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS NOT_RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Adoption- RTWADPT Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (NOT_RETURN_TO_WORK = 'Y') then ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=42 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=239 ) ) Else if (NOT_RETURN_TO_WORK = 'N') then ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=42 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=323 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SHARED PARENTAL LEAVE PICKSHP",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Shared Parental Leave - PICKSHP Formula') if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PER_BASIC_ATTRIBUTE_DATE1) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) ld_continuous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service=>1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=239 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL PATERNITY BIRTH PICKPAT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Paternity Birth - PICKPAT Formula') if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PER_BASIC_ATTRIBUTE_DATE1) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) ld_continuous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service<0.46) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (Year_of_service=>0.46) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=14 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=351 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL MATERNITY MAGTMA AND MAGTMATRTW",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Maternity - MAGTMA and MAGTMATRTW Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) l_return_to_work = 'Y' If (RETURN_TO_WORK='Y') then ( If (Year_of_service<0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=42 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=239 ) ) Else if (RETURN_TO_WORK='N') then ( If (Year_of_service<0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=42 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=323 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL MATERNITY BRUMAT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Maternity - BRUMAT Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) l_return_to_work = 'Y' If (RETURN_TO_WORK='Y') then ( If (Year_of_service<0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=182 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=182 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=1 ) ) Else if (RETURN_TO_WORK='N') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL MATERNITY PICKMAT AND PICKMATRTW",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Maternity - PICKMAT and PICKMATRTW Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) l_return_to_work = 'Y' If (RETURN_TO_WORK='Y') then ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=239 ) ) Else if (RETURN_TO_WORK='N') then ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=323 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL PATERNITY BIRTH STDPAT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Paternity Birth - STDPAT Formula') if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PER_BASIC_ATTRIBUTE_DATE1) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) ld_continuous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service<0.48) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (Year_of_service=>0.48) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=7 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=358 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL MATERNITY MAGSMA AND MAGSMATRTW",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Maternity - MAGSMA and MAGSMATRTW Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) l_return_to_work = 'Y' If (RETURN_TO_WORK='Y') then ( If (Year_of_service<0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=42 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=239 ) ) Else if (RETURN_TO_WORK='N') then ( If (Year_of_service<0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=42 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=323 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL MATERNITY STDMAT AND RTWMAT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Maternity - STDMAT and RTWMAT Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) l_return_to_work = 'Y' If (RETURN_TO_WORK='Y') then ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=42 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=239 ) ) Else ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=42 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=323 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Sickness TEACHSICK",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - TEACHSICK Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<0.30) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=340 ) else if (0.30<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=290 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=265 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=215 ) else if (Year_of_service=>3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=165 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL ADOPTION RTWADPT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS 'X' ALIAS ANC_ABS_ENTRS_ATTRIBUTE1 AS NOT_RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Adoption- RTWADPT Formula') if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PER_BASIC_ATTRIBUTE_DATE1) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PER_BASIC_ATTRIBUTE_DATE1)) ld_continuous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (NOT_RETURN_TO_WORK='N') then ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=42 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=239 ) ) Else if (NOT_RETURN_TO_WORK='Y') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=42 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=323 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL MATERNITY NHSRTWMAT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Maternity - NHSRTWMAT Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (RETURN_TO_WORK='Y') then ( If (Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) else if (Year_of_service>=1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=56 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=126 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=183 ) ) Else if (RETURN_TO_WORK='N') then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=90 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=50 BAND3ENTITLEMENT=0 BAND4PAYFACTOR=0 BAND4ENTITLEMENT=365 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS WILCOLSCKN",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - WILCOLSCKN Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service<0.25) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) Else If (0.25<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=30 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=305 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=60 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=30 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=275 ) else if (3<=Year_of_service and Year_of_service<4) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=90 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=60 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=215 ) else if (Year_of_service=>4) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=90 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=90 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=185 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "OCCUPATIONAL SICKNESS COLPARTSCK",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Sickness - COLPARTSCK Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service<0.5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=0 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (0.5<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=30 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=30 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=305 ) else if (1<=Year_of_service and Year_of_service<2) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=60 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=60 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=245 ) else if (2<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=90 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=90 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=185 ) else if (3<=Year_of_service and Year_of_service<4) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=120 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=120 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=125 ) else if (4<=Year_of_service and Year_of_service<5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=150 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=150 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=65 ) else if (Year_of_service=>5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=180 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=180 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=5 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LBH OSHPP",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_NUMBER1, IV_ATTRIBUTE_NUMBER2 BAND1ENTITLEMENT = 0 BAND2ENTITLEMENT = 0 BAND1PAYFACTOR=100 BAND1ENTITLEMENT = IV_ATTRIBUTE_NUMBER1 BAND2PAYFACTOR= 0 BAND2ENTITLEMENT = IV_ATTRIBUTE_NUMBER2 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH NHS Adoption Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1 = 'X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 126 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH NHS Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (Year_of_service<=0.25) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 ) IF ((Year_of_service>0.25) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH LG Adoption Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1 = 'X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH UK Maternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_deemed_worker = 'N' IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc l_rel_asg_date_start = PER_ASG_REL_DATE_START l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_awe_eff_date = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_complete_qweek) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_56_days_prior_date) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) l_awe_eff_date = l_relevant_period_end_date_mod ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_length_of_service < 25 ) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_ind",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Teachers Adoption Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1 = 'X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT,BAND3PAYFACTOR,BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Teachers Paternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 3 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH NHS Maternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS ' ' INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IV_ATTRIBUTE_1 = 'X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) If(IV_ATTRIBUTE_1 = 'NO') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT3<> 'Casual Payment (Spinal Scale)' THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 126 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH UK Paternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION ,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE ,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE ,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4 , IV_MATCHING_DATE,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE ,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'PAT_Entitlement >> Start of Formula') l_cert_index = 1 band1name = 'Band1Pay' band1payfactor = 100 band1entitlement = 14 band2name = 'Band2Pay' band2payfactor = 0 band2entitlement = 9999999 l_early_birth_indicator = 'N' l_cert_id_being_changed = ' ' l_cert_id_being_changed = IV_UI_ABS_CERT_ID l_cert_status = IV_UI_CERT_STATUS CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE l_altcd_of_changed_cert = 'XYZ' l_chk_payroll_tfr = 'Y' l_skip_payroll_trf_dbi = 'N' l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' l_create_diff_payrolls_cert = 'N' IF l_cert_id_being_changed != ' ' THEN ( l_altcd_of_changed_cert = GET_VALUE_SET('ORA_HRX_GB_CERT_ALTCD' ,'|=CURRENT_CERT_ID='||l_cert_id_being_changed ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE ) l_pay_stop_date = l_end_date l_rate_def_name = ' ' l_early_birth_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_absence_type = 'ORA_HRX_GB_SPB' l_perform_awe_check = 'Y' l_awe=0 l_calculated_awe = 0 LOC_API_SKIP = 'N' l_deemed_worker = 'N' IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) if(l_event_type = 'CHB') then ( l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_absence_type = 'ORA_HRX_GB_SPB' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_ewc_param_for_override_formula = l_ewc l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_awe_eff_date = l_ewc ) else if(l_event_type = 'PLC') then ( l_absence_type = 'ORA_HRX_GB_SPA' if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_mws = trunc( IV_MATCHING_DATE, 'DAY') l_matching_week = add_days(l_mws,6) l_no_of_days=days_between(l_matching_week,l_seniority_date) l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_awe_eff_date = l_matching_week ) ) l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_rel_asg_date_start = PER_ASG_REL_DATE_START l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPB') THEN ( SET_INPUT ('IV_ABS_QUAL_WEEK', l_qweek) SET_INPUT ('IV_ABS_EDC', l_ewc_param_for_override_formula) ) IF (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPA') THEN ( SET_INPUT ('IV_ABS_PLACEMENT_DATE', l_placement_date) SET_INPUT ('IV_ABS_MATCHING_DATE', IV_MATCHING_DATE) ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_next_month_start =ADD_MONTHS(ORA_HRX_GB_PAY_PERIOD_START,1) l_pay_date = ADD_DAYS(l_next_month_start,-1) IF l_awe_eff_date = l_pay_date THEN ( l_relevant_period_end_date = l_awe_eff_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS(ORA_HRX_GB_PAY_PERIOD_START,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) IF (l_early_birth_indicator = 'Y') THEN ( IF ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_awe_eff_date = l_relevant_period_end_date_mod ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( IF l_event_type = 'CHB' THEN ( IF (l_early_birth_indicator = 'Y') THEN ( l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_complete_qweek) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_56_days_prior_date) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) ) IF l_event_type = 'PLC' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_matching_week) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_matching_week = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ess_log_write( 'PAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'PAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'Average Weekly Earnings may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) l_create = 'N' IF (l_awe_lel_chk_pass = 'N') AND (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') THEN ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_awe_lel_chk_pass = 'N') AND (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') THEN ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_length_of_service=Floor(l_no_of_days/7) if ( l_length_of_service < 25 ) then ( l_pay_stop_date = l_start_date l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = days_between(l_start_date, l_placement_date) If (l_start_date >= l_placement_date and l_no_of_days > 56) then ( l_pay_stop_date = l_start_date l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_EXCEEDED_56_DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Payable After 56th Day')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Payable After 56th Day' CERT_COMMENTS[l_cert_index] = 'Statutory Paternity pay is not payable after the 56th day' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) else ( l_no_of_days = days_between(l_end_date, l_placement_date) If (l_end_date >= l_placement_date and l_no_of_days > 56) then ( l_pay_stop_date = add_days(l_placement_date,55) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_EXCEEDED_56_DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Payable After 56th Day')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Payable After 56th Day' CERT_COMMENTS[l_cert_index] = 'Statutory Paternity pay is not payable after the 56th day' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) if (l_days_bew >= 14) then ( l_pay_stop_date = add_days(l_start_date,13) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'The payments completed for the maximum number of weeks payable.' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bew,7) if (l_days_after >= 1) then ( l_pay_stop_date = TRUNC(add_days(l_end_date,l_days_after*-1)) l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(add_days(l_pay_stop_date,1)) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days.' CERT_START_DATES[l_cert_index] = add_days(l_pay_stop_date,1) CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_ce",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH UK Adoption Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_NOTIFICATION_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION, IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE, IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE, IV_NOTIFICATION_DATE,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'ADO_Entitlement >> Start of Formula') IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_absence_type = 'ORA_HRX_GB_SA' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_deemed_worker = 'N' IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_matching_date = IV_MATCHING_DATE l_matching_week = l_matching_date l_awe_eff_date = l_matching_week l_rel_asg_date_start = PER_ASG_REL_DATE_START if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_day_of_week = GET_DATE_DAY_OF_WEEK(l_matching_date) IF(l_day_of_week = 'SUN') THEN ( l_mws = l_matching_date) ELSE IF(l_day_of_week = 'MON') THEN (l_mws = ADD_DAYS(l_matching_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_mws = ADD_DAYS(l_matching_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_mws = ADD_DAYS(l_matching_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_mws = ADD_DAYS(l_matching_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_mws = ADD_DAYS(l_matching_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_mws = ADD_DAYS(l_matching_date,-6)) l_matching_week = add_days(l_mws,6) ) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_PLACEMENT_DATE',l_placement_date ) SET_INPUT ('IV_ABS_MATCHING_DATE',l_matching_date ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_matching_week) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_matching_week = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ess_log_write( 'ADO_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'ADO_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'Average Weekly Earnings may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y' ) ) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( l_awe_eff_date = l_matching_week CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_next_month_start =ADD_MONTHS(ORA_HRX_GB_PAY_PERIOD_START,1) l_pay_date = ADD_DAYS(l_next_month_start,-1) IF l_awe_eff_date = l_pay_date THEN ( l_relevant_period_end_date = l_awe_eff_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS(ORA_HRX_GB_PAY_PERIOD_START,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_no_of_days=days_between(l_matching_week,l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) if ( l_length_of_service < 25 ) then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 if (l_days_bew > 273) then ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bew = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bew,7) if (l_days_after >= 1) then ( l_create = 'N' l_cert_start_date = TRUNC(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_cert_index] = 'The absence has multiple assignments associated with it and cannot be processed.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_band1end_date =add_days(l_start_date,band1entitlement-1) l_band2end_date =add_days(l_band1end_date,band2entitlement-1) l_entl_info = to_char(band1entitlement)||':'|| to_char(band1payfactor)||':'||to_char(l_band1end_date,'YYYY/MM/DD')||'#'|| to_char(band2entitlement) ||':'|| to_char(band2payfactor) ||':'||to_char(l_band2end_date,'YYYY/MM/DD') LOC_STRING_ARRAY['ENTITLEMENT_INFO']=l_entl_info LOC_NUMBER_ARRAY['AWE_CALCULATED']=l_calculated_awe l_dummy = ess_log_write( 'ADO_Entitlement >> LOC_STRING_ARRAY[ENTITLEMENT_INFO] is = '|| LOC_STRING_ARRAY['ENTITLEMENT_INFO'] ) l_dummy = ess_log_write( 'ADO_Entitlement >> LOC_NUMBER_ARRAY[AWE_CALCULATED] is = '|| to_char(LOC_NUMBER_ARRAY['AWE_CALCULATED']) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH LG Maternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS ' ' DEFAULT FOR PER_PER_PERSON_NUMBER IS ' ' DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text), IV_EXPECTEDCHILDBIRTHDATE(date) , IV_PLANNEDSTARTDATE , IV_PLANNEDENDDATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE l_Flag = 'Y' IV_ATTRIBUTE_1 = 'X' IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 If(IV_ATTRIBUTE_1 = 'NO') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 0 ) ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT3 <> 'Casual Payment (Spinal Scale)' THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH LG Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (Year_of_service<=0.25) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF ((Year_of_service>0.25) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>3) AND (Year_of_service<=5)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF (Year_of_service>5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH LG Paternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Teachers Maternity Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS ' ' INPUTS ARE IV_START_DATE, IV_ATTRIBUTE_1(text) Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' IV_ATTRIBUTE_1 = 'X' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) If(IV_ATTRIBUTE_1 = 'NO') THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 0 ) ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT3 <> 'Casual Payment (Spinal Scale)' THEN ( IF (Year_of_service<=1) THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF Year_of_service>1 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 ) ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT,BAND3PAYFACTOR,BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH UK Statutory Sick Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='Y' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='Y' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id, PAYROLL_ASSIGNMENT_ID=l_payroll_assignment_id )( set_input('IV_L_START_DATE',l_start_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='Y' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 if (continue_to_count='Y') then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DATE=l_start_date, END_DATE=l_end_date, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( p_ssp_weeks_linked=l_total_ssp_weeks p_waiting_days_to_serve=band1entitlement if (FLEX_CONSUMED_SSP_WEEKS > 0 and 0 = p_ssp_weeks_linked) then ( p_ssp_weeks_linked = FLEX_CONSUMED_SSP_WEEKS ) ssp_weeks_to_go = statutory_week_limit - p_ssp_weeks_linked waiting_days_processed_count=0 entitlement_days=0 l_running_week_start_date='4712-12-31T00:00:00.000Z' (DATE) day_scheduled_value=0 l_continue_flag=1 /* continue pro",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Teachers Sickness Entitlement",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) mesg = 'XX' Hire_date= ACP_HIRE_DATE IF PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS DEFAULTED THEN ( l_seniority_date = Hire_date ) ELSE ( l_seniority_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_start_dt = l_seniority_date l_debug = ess_log_write('l_start_dt2= '+ to_char(l_start_dt)) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=roundup(Service_days/365,2) IF (Year_of_service<=0.25) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 0 ) IF ((Year_of_service>0.25) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>1) AND (Year_of_service<=2)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF ((Year_of_service>2) AND (Year_of_service<=3)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) IF (Year_of_service>3) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT , BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBL Sickness Teacher Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_ASG_CONTRACT_ATTRIBUTE_DATE1 WAS DEFAULTED THEN ( l_start_dt= ACP_HIRE_DATE ) ELSE ( l_start_dt=PER_ASG_CONTRACT_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 339 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>3 AND Year_of_service<=8 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>8 AND Year_of_service<=13 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 111 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 111 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>13 AND Year_of_service<=19 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>19 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 133 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 133 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Sickness Officers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_ASG_CONTRACT_ATTRIBUTE_DATE1 WAS DEFAULTED THEN ( l_start_dt= ACP_HIRE_DATE ) ELSE ( l_start_dt=PER_ASG_CONTRACT_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 339 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 314 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 314 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 314 ) IF Year_of_service>3 AND Year_of_service<=4 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 314 ) IF Year_of_service>4 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 314 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Sickness Officers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_ASG_CONTRACT_ATTRIBUTE_DATE1 WAS DEFAULTED THEN ( l_start_dt= ACP_HIRE_DATE ) ELSE ( l_start_dt=PER_ASG_CONTRACT_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 339 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 314 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 314 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 261 ) IF Year_of_service>3 AND Year_of_service<=5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 261 ) IF Year_of_service>5 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 209 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Maternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'Rate Definition for AWE- Birth' IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) if (l_eff_date >= TO_DATE('2017/04/06','YYYY/MM/DD')) THEN ( l_lel = 113 ) if (l_eff_date <= TO_DATE('2017/04/05','YYYY/MM/DD')) AND (l_eff_date >= TO_DATE('2015/04/06','YYYY/MM/DD')) THEN ( l_lel = 112 ) if (l_eff_date <= TO_DATE('2015/04/05','YYYY/MM/DD')) AND (l_eff_date >= TO_DATE('2014/04/06','YYYY/MM/DD')) THEN ( l_lel = 111 ) if (l_eff_date <= TO_DATE('2014/04/05','YYYY/MM/DD')) AND (l_eff_date >= TO_DATE('2013/04/06','YYYY/MM/DD')) THEN ( l_lel = 109 ) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_next_month_start =ADD_MONTHS(ORA_HRX_GB_PAY_PERIOD_START,1) l_pay_date = ADD_DAYS(l_next_month_start,-1) IF l_awe_eff_date = l_pay_date THEN ( l_relevant_period_end_date = l_awe_eff_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS(ORA_HRX_GB_PAY_PERIOD_START,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_rel_asg_date_start > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if((ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= l_start_date and (ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index] = l_end_date) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if((ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= l_start_date and (ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index] = l_end_date) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),PER_ASG_REL_DATE_START) l_length_of_service=Floor(l_no_of_days/7) IF ( l_length_of_service < 26 ) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if((ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= l_cert_start_date and (ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index] = l_cert_end_date) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if((ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= l_cert_start_date and (ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index] = l_cert_end_date) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if((ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= l_cert_start_date and (ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index] = l_cert_end_date) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = add_days(l_end_date, (l_days_after*-1) + 1) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if((ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= l_cert_start_date and (ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index] = l_cert_end_date) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Statutory Sick Pay Entitlement",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_DOR_DOCUMENT_CODE is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_CODE is 'X' DEFAULT FOR PER_PER_DOR_DOCUMENT_TYPE_ID is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_ID is 0 DEFAULT FOR PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is 'X' DEFAULT FOR PER_PER_DOR_DATE_FROM is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_FROM is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PER_DOR_DATE_TO is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_TO is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR is 0 DEFAULT FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT FOR ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is 0 DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_CERT_STATUS_CD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CERT_STATUS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER2 is 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER4 is 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_DATE1 is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_DURATION_UOM_CD is ' ' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER),IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number),IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_REMAINING=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) l_debug_level=2 l_coded_state=100 false=0 true=1 configure_lel=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 debug_msg_linkage='/' prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) lel_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) lel_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) CHANGE_CONTEXTS( START_DATE=IV_START_DATE, END_DATE=IV_END_DATE ) ( ni4=ANC_AVAILABILITY_OBJ_CATEGORY_ARR.FIRST(-1) type_of_shift=' ' if(ni4>-1) then ( type_of_shift=ANC_AVAILABILITY_OBJ_CATEGORY_ARR[ni4] ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE have_just_1_partial_day=false if ((FIRST_IS_PARTIAL='Y' or LAST_IS_PARTIAL='Y') and (FIRST_DAY_DATE = LAST_DAY_DATE)) then have_just_1_partial_day=true have_just_2_partial_days=false if (FIRST_IS_PARTIAL='Y' and LAST_IS_PARTIAL='Y') and (days_between(LAST_DAY_DATE,FIRST_DAY_DATE)=1) then have_just_2_partial_days=true if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]='Day Not Eligible For SSP' CERT_START_DATES[l_cert_index]=FIRST_DAY_DATE CERT_END_DATES[l_cert_index]=FIRST_DAY_DATE CERT_COMMENTS[l_cert_index]='absence starts with a partial day' CERT_COMMENTS[l_cert_index]=' ' if (have_just_1_partial_day=true) then ( CERT_COMMENTS[l_cert_index]='absence is a single partial day' return band1payfactor,band1entitlement,band2payfactor,band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS ) ) if ( LAST_IS_PARTIAL='Y' ) then ( l_end_date=add_days(l_end_date,-1) l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]='Day Not Eligible For SSP' CERT_START_DATES[l_cert_index]=LAST_DAY_DATE CERT_END_DATES[l_cert_index]=LAST_DAY_DATE CERT_COMMENTS[l_cert_index]='absence ends with a partial day' CERT_COMMENTS[l_cert_index]=' ' if (have_just_2_partial_days=true) then ( CERT_COMMENTS[l_cert_index]='absence has two partial days and no other days' return band1payfactor,band1entitlement,band2payfactor,band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS ) ) l_cal_day_duration=days_between(l_end_date,l_start_date)+1 if (l_cal_day_duration < 4) then( band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]='Absence Less Than 4 Days' CERT_COMMENTS[l_cert_index]=' ' CERT_START_DATES[l_cert_index]=l_start_date CERT_END_DATES[l_cert_index]=l_end_date return band1payfactor,band1entitlement,band2payfactor,band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS ) l_absentry_qualified_days=0 l_absentry_ssp_weeks=0 l_total_ssp_weeks=0 l_total_qualified_days=0 l_debug_accumulated_qd_str='Qualified days from links:' l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=0 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 l_first_absence_start_date = IV_LNKG_LNKD_ABS_START[ni] while (IV_LNKG_LNKD_ABS_ID.exists(ni)) loop ( l_iv_lnkd_abs_id=IV_LNKG_LNKD_ABS_ID[ni] l_iv_lnkg_lnkd_abs_start_date = IV_LNKG_LNKD_ABS_START[ni] l_iv_lnkg_lnkd_abs_end_date = IV_LNKG_LNKD_ABS_END[ni] l_iv_lnkg_chain_id=IV_LNKG_CHAIN_ID[ni] l_abs_entry_start_date=l_iv_lnkg_lnkd_abs_start_date l_abs_entry_end_date=l_iv_lnkg_lnkd_abs_end_date l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_iv_lnkd_abs_id, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( l_scheduled_units_arr=EMPTY_NUMBER_TEXT l_absent_units_arr=EMPTY_NUMBER_TEXT week_start_of_first_week=NEXT_DAY(add_days(l_abs_entry_start_date,-7),'SUNDAY') week_start_of_last_week=NEXT_DAY(add_days(l_abs_entry_end_date,-7),'SUNDAY') l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) dc_absentry_ssp_weeks=0 dc_absentry_qualified_days=0 if(type_of_shift='TIME') then ( week_end_of_last_week=add_days(week_start_of_last_week,6) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date )( set_input('IV_START_DATE',week_start_of_first_week) set_input('IV_END_DATE',week_end_of_last_week) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) execute(details_formula_name) HIST_DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) ni4=ANC_ABS_PLN_ENTR_START_DATE_ARR.FIRST(-1) while (ANC_ABS_PLN_ENTR_START_DATE_ARR.exists(ni4)) loop ( l_current_date=ANC_ABS_PLN_ENTR_START_DATE_ARR[ni4] SUNDAY_DATE=to_char(NEXT_DAY(add_days(ANC_ABS_PLN_ENTR_START_DATE_ARR[ni4],-7),'SUNDAY'),'YYYY-MM-DD') if not l_absent_units_arr.exists(SUNDAY_DATE) then ( l_scheduled_units_arr[SUNDAY_DATE]=0 l_absent_units_arr[SUNDAY_DATE]=0 ) l_scheduled_units_arr[SUNDAY_DATE]=l_scheduled_units_arr[SUNDAY_DATE]+ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR[ni4] l_absent_units_today=((ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[ni4]*ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR[ni4])/100.0) l_absent_units_arr[SUNDAY_DATE]=l_absent_units_arr[SUNDAY_DATE]+l_absent_units_today dc_absentry_qualified_days = dc_absentry_qualified_days + ANC_ABS_PLN_ENTR_SCHEDULED_UNITS_ARR[ni4] ni4=ANC_ABS_PLN_ENTR_START_DATE_ARR.NEXT(ni4,-1) ) SUNDAY_DATE=l_absent_units_arr.FIRST('x') while (l_absent_units_arr.exists(SUNDAY_DATE)) loop ( l_week_start_date=to_date(SUNDAY_DATE,'YYYY-MM-DD') l_next_week_start_date=add_days(l_week_start_date,7) if(type_of_shift='TIME') then ( l_scheduled_units=0 current_day = l_week_start_date while(current_day <= l_next_week_start_date) loop( trunc_current_day = to_char(trunc(current_day)) if(HIST_DAY_STATUS_LIST.exists(trunc_current_day)) then ( l_scheduled_units = l_scheduled_units+1 ) current_day=add_days(current_day,1) ) ) else ( l_scheduled_units=GET_PAY_AVAILABILITY('ASSIGN',l_week_start_date,l_next_week_start_date,'Y','Y','Y','Y','D' ,'N','N',8,'N','N','Y','SSP') ) if (l_scheduled_units > 0) then( l_week_value = round((l_absent_units_arr[SUNDAY_DATE] / l_scheduled_units),1) dc_absentry_ssp_weeks = dc_absentry_ssp_weeks + l_week_value ) SUNDAY_DATE=l_absent_units_arr.NEXT(SUNDAY_DATE,'x') ) cert_comments_collection=' ' if (disqualification_seen='N') then ( ni4=ANC_ABS_ENTR_CERTS_STATUS_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_STATUS_ARR.exists(ni4)) loop ( if (ANC_ABS_ENTR_CERTS_STATUS_ARR[ni4]='C') then ( if (ANC_ABS_CERTS_INFORMATION1_ARR[ni4]='Y') then ( if not cert_comments_collection=' ' then cert_comments_collection=cert_comments_collection+', ' text=ANC_ABS_CERTS_NAME_ARR[ni4]+'/'+to_char(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni4],'YYYY-MM-DD')+'/'+to_char(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni4],'YYYY-MM-DD') cert_comments_collection=cert_comments_collection+text disqualification_seen='Y' ) ) ni4=ANC_ABS_ENTR_CERTS_STATUS_ARR.NEXT(ni4,-1) ) ) if ( IV_LNKG_LNKD_ABS_START[ni] = l_first_absence_start_date ) then ( if (ANC_ABS_ENTRS_INFORMATION_NUMBER2 > 0 ) then ( dc_absentry_ssp_weeks = dc_absentry_ssp_weeks + ANC_ABS_ENTRS_INFORMATION_NUMBER2 ) ) if (ANC_ABS_ENTRS_INFORMATION_DATE1 < end_of_time) then ( l_max_years_exceed_date_hist = add_years(ANC_ABS_ENTRS_INFORMATION_DATE1,statutory_year_limit) l_max_years_exceed_date_hist = add_days(l_max_years_exceed_date_hist,-1) ) migration_waiting_days = ANC_ABS_ENTRS_INFORMATION_NUMBER4 ) l_absentry_qualified_days=dc_absentry_qualified_days l_absentry_ssp_weeks=dc_absentry_ssp_weeks l_total_qualified_days=l_total_qualified_days+l_absentry_qualified_days l_total_ssp_weeks=l_total_ssp_weeks+l_absentry_ssp_weeks ni=IV_LNKG_LNKD_ABS_ID.NEXT(ni,-1) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' link_letter_cert_begin_date = '4712-12-31T00:00:00.000Z' (DATE) link_letter_cert_end_date = '4712-12-31T00:00:00.000Z' (DATE) link_letter_state=0 if l_linked_absences_exist=0 then ( ni=PER_PER_DOR_DOCUMENT_CODE.FIRST(-1) if PER_PER_DOR_DOCUMENT_CODE.exists(ni) then ( link_letter_state=90 l_found=0 while (PER_PER_DOR_DOCUMENT_CODE.exists(ni) and l_found=0) loop ( l_dor_document_code=PER_PER_DOR_DOCUMENT_CODE[ni] l_dor_document_type_id=PER_PER_DOR_DOCUMENT_TYPE_ID[ni] l_dor_system_doc_type=PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME[ni] l_dor_date_from=PER_PER_DOR_DATE_FROM[ni] l_dor_date_to=PER_PER_DOR_DATE_TO[ni] if 'ORA_HRX_GB_JC_LINK_LETTER'=l_dor_system_doc_type then ( link_letter_state=91 if l_start_date >= l_dor_date_from and l_start_date <= l_dor_date_to then ( link_letter_state=92 l_found=1 link_letter_cert_flag = 'Y' link_letter_cert_begin_date = l_start_date link_letter_cert_end_date = l_end_date ) else ( link_letter_state=91 ) ) ni=PER_PER_DOR_DOCUMENT_CODE.NEXT(ni,-1) ) ) else ( link_letter_state=0 ) ) else ( link_letter_state=99 ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) /*------ SSP Settings for",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Occp Maternity Entitlement",
        "answer": "DEFAULT FOR PER_PER_ATTRIBUTE_TEXT7 IS ' ' DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING IS ' ' l_contract_type=PER_TRM_CONTRACT_TYPE_MEANING l_person_id=GET_CONTEXT(PERSON_ID,0) l_Benefit=GET_VALUE_SET('GET_PERSON_DFF','|=P_PERSON_ID=' || to_char(l_person_id)) IF (l_contract_type = 'Standard - 30 hrs x 52.14 wks' OR l_contract_type = 'Standard - 32.5 hrs x 52.14 wks' OR l_contract_type = 'Standard - 35 hrs x 52.14 wks' OR l_contract_type = 'Standard - 36 hrs x 52.14 wks' OR l_contract_type = 'Standard - 37 hrs x 52.14 wks' OR l_contract_type = 'Standard - 37.5 hrs x 52.14 wks' OR l_contract_type = 'Standard - 39 hrs x 52.14 wks' OR l_contract_type = 'Standard - 40 hrs x 52.14 wks') AND (l_Benefit='Standard') THEN ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT =250 ) ELSE IF (l_contract_type = 'Teachers 27.5 hrs x 52.14 wks' OR l_contract_type = 'Teachers 32.5 hrs x 52.14 wks' OR l_contract_type = 'Term Time 35 hrs x 52.14 wks') AND (l_Benefit='Standard') THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT = 250 ) ELSE ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=100 BAND2ENTITLEMENT = 70 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 70 BAND4PAYFACTOR=40 BAND4ENTITLEMENT = 91 BAND5PAYFACTOR=30 BAND5ENTITLEMENT =7 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT,BAND4PAYFACTOR,BAND4ENTITLEMENT ,BAND5PAYFACTOR,BAND5ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "UK Statutory Sick Pay Entitlement Custom",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_DOR_DOCUMENT_CODE is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_CODE is 'X' DEFAULT FOR PER_PER_DOR_DOCUMENT_TYPE_ID is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_ID is 0 DEFAULT FOR PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is 'X' DEFAULT FOR PER_PER_DOR_DATE_FROM is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_FROM is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PER_DOR_DATE_TO is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_TO is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) lel_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) lel_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='N' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' link_letter_cert_begin_date = '4712-12-31T00:00:00.000Z' (DATE) link_letter_cert_end_date = '4712-12-31T00:00:00.000Z' (DATE) link_letter_state=0 if l_linked_absences_exist=0 then ( ni=PER_PER_DOR_DOCUMENT_CODE.FIRST(-1) if PER_PER_DOR_DOCUMENT_CODE.exists(ni) then ( link_letter_state=90 l_found=0 while (PER_PER_DOR_DOCUMENT_CODE.exists(ni) and l_found=0) loop ( l_dor_document_code=PER_PER_DOR_DOCUMENT_CODE[ni] l_dor_document_type_id=PER_PER_DOR_DOCUMENT_TYPE_ID[ni] l_dor_system_doc_type=PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME[ni] l_dor_date_from=PER_PER_DOR_DATE_FROM[ni] l_dor_date_to=PER_PER_DOR_DATE_TO[ni] if 'ORA_HRX_GB_JC_LINK_LETTER'=l_dor_system_doc_type then ( link_letter_state=91 if l_start_date >= l_dor_date_from and l_start_date <= l_dor_date_to then ( link_letter_state=92 l_found=1 link_letter_cert_flag = 'Y' link_letter_cert_begin_date = l_start_date link_letter_cert_end_date = l_end_date ) else ( link_letter_state=91 ) ) ni=PER_PER_DOR_DOCUMENT_CODE.NEXT(ni,-1) ) ) else ( link_letter_state=0 ) ) else ( link_letter_state=99 ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' l_altawe_cert='N' l_awe=0 l_lel=0 l_absence_type = 'ORA_HRX_GB_SS' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_rel_asg_date_start=PER_ASG_REL_DATE_START l_rel_date_start=PER_REL_DATE_START IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = '4712/12/31 00:00:00' (date) ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_pay_rel_date_start = GET_PLSD_FSED if (do_lel_check=1) then ( l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel=GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF (l_license <> 'PAY') THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_license = 'PAY') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_start_date)) ( l_date1 = ORA_HRX_GB_PAY_PERIOD_START l_reference_date = ADD_DAYS(l_date1,-1) ) l_relevant_period_end_date = l_reference_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) l_relevant_period_end_date_mod = add_days(l_relevant_period_end_date,1) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_end_date_mod) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) IF (l_ret_bal = 0) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ELSE ( l_insuff_info_cert = 'Y' ) ) ) ELSE ( IF l_seniority_date < l_rel_date_start THEN ( l_rel_date_start = l_seniority_date ) IF l_rel_date_start > l_relevant_period_end_date THEN ( l_insuff_info_cert = 'Y' ) ELSE IF (l_rel_date_start > l_relevant_period_start_date) THEN ( IF l_pay_rel_date_start < l_rel_date_start THEN ( l_insuff_info_cert = 'Y' ) ELSE ( l_service_days = DAYS_BETWEEN(l_relevant_period_end_date,l_rel_date_start)+1 l_service_weeks = l_service_days/7 l_service_weeks_floor = FLOOR(l_service_weeks) IF l_service_weeks = 0 THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_service_weeks_floor = l_service_weeks) THEN ( l_awe = l_ret_bal/l_service_weeks ) ELSE ( l_awe = (l_ret_bal/l_service_days)*7 ) ) ) ) ELSE ( if (l_src_periodicity = 'YEAR') then( l_awe_factor = 1/52 ) else if (l_src_periodicity = 'SEMI-YEAR') then( l_awe_factor = 2/52 ) else if (l_src_periodicity = 'QUARTER') then( l_awe_factor = 4/52 ) else if (l_src_periodicity = 'WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'BI-WEEK') then( l_awe_factor = 1/4 ) else if (l_src_periodicity = 'LUNAR MONTH') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'CALENDAR MONTH') then( l_awe_factor = 6/52 ) else if (l_src_periodicity = 'BI-MONTH') then( l_awe_factor = 6/52 ) l_awe = (l_ret_bal * l_awe_factor) ) ) ) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') then( lel_cert_flag='Y' lel_cert_begin_date=l_start_date lel_cert_end_date=l_end_date ) if (l_insuff_info_cert='Y') then (lel_cert_flag='N') ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) row_dbg=to_char(row_rev_start_dt)||' / '||to_char(row_rev_end_dt) row_dbg=row_dbg||' / '||row_altcd row_dbg=row_dbg||' / '||row_update_type row_dbg=row_dbg||' / '||row_cert_status row_dbg=row_dbg||' / '||row_class_cd row_dbg=row_dbg||' / '||row_per_cert_id_str if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_lim",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "OPP Entitlement",
        "answer": "DEFAULT for ACP_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION ,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE ,IV_EXPECTEDCHILDBIRTHDATE,IV_MATCHING_DATE l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_absence_type = 'ORA_HRX_GB_SPB' BAND1PAYFACTOR=100 BAND1ENTITLEMENT =0 l_seniority_date = ACP_HIRE_DATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) l_debug = ess_log_write('l_expected_child_birth= '+ to_char(l_expected_child_birth)) l_debug = ess_log_write('l_event_type= '+ (l_event_type)) if(l_event_type = 'CHB') then ( l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_absence_type = 'ORA_HRX_GB_SPB' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_ewc_param_for_override_formula = l_ewc l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_debug = ess_log_write('l_no_of_days CHB= '+ to_char(l_no_of_days)) ) else if(l_event_type = 'PLC') then ( l_absence_type = 'ORA_HRX_GB_SPA' if(IV_MATCHING_DATE WAS NOT DEFAULTED) then ( l_mws = trunc( IV_MATCHING_DATE, 'DAY') l_matching_week = add_days(l_mws,6) l_no_of_days=days_between(l_matching_week,l_seniority_date) l_debug = ess_log_write('l_no_of_days PLC= '+ to_char(l_no_of_days)) ) ) l_debug = ess_log_write('l_no_of_days= '+ to_char(l_no_of_days)) IF ( l_no_of_days > 176) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT =14 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Industry Injury Teachers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_ASG_CONTRACT_ATTRIBUTE_DATE1 WAS DEFAULTED THEN ( l_start_dt= ACP_HIRE_DATE ) ELSE ( l_start_dt=PER_ASG_CONTRACT_ATTRIBUTE_DATE1 ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 IF (Year_of_service<=0.32) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 205 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 339 ) IF ((Year_of_service>0.32) AND (Year_of_service<=1)) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 205 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>1 AND Year_of_service<=2 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 230 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>2 AND Year_of_service<=3 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 255 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>3 AND Year_of_service<=8 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 280 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>8 AND Year_of_service<=13 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 291 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 111 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>13 AND Year_of_service<=19 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 302 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) IF Year_of_service>19 THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 313 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 133 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 245 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Occupational Maternity Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE,IV_EXPECTEDCHILDBIRTHDATE (DATE) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE (DATE) l_ewc = trunc( l_expected_child_birth, 'DAY') l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),PER_ASG_REL_DATE_START) l_length_of_service=Floor(l_no_of_days/7) IF (l_length_of_service< 26) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 380 ) Else ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=100 BAND2ENTITLEMENT = 70 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 70 BAND4PAYFACTOR=40 BAND4ENTITLEMENT = 91 BAND5PAYFACTOR=30 BAND5ENTITLEMENT = 7 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT,BAND4PAYFACTOR,BAND4ENTITLEMENT,BAND5PAYFACTOR,BAND5ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Occupational Maternity Teachers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE,IV_EXPECTEDCHILDBIRTHDATE (DATE) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE (DATE) l_ewc = trunc( l_expected_child_birth, 'DAY') l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),PER_ASG_REL_DATE_START) l_length_of_service=Floor(l_no_of_days/7) IF (l_length_of_service< 26) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 380 ) Else ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR=90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR=50 BAND3ENTITLEMENT = 84 BAND4PAYFACTOR=0 BAND4ENTITLEMENT = 200 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT , BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Occupational Maternity Officers Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE,IV_EXPECTEDCHILDBIRTHDATE (DATE) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE (DATE) l_ewc = trunc( l_expected_child_birth, 'DAY') l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),PER_ASG_REL_DATE_START) l_length_of_service=Floor(l_no_of_days/7) IF (l_length_of_service< 26) THEN ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT = 380 ) Else ( BAND1PAYFACTOR=90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT = 300 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "DHB HCM Occupational Paternity Adoption",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In DHB HCM Occupational Paternity Adoption') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service>1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=14 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=351 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "DDL HCM Occupational Sickness",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_ATTRIBUTE2 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) l_plan_name = '5' leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 l_debug=ess_log_write('DDL HCM Occupational Sickness - Formula') SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', IV_START_DATE) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT4') EXECUTE('XX_GET_HR_DATA') l_plan_name = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_name) if ((l_plan_name <> '5')) then ( l_plan_name = l_plan_name ) else ( l_plan_name = '5' ) l_debug = ess_log_write('Sickness Plan = '||l_plan_name) Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT=365 BAND2PAYFACTOR=0 BAND2ENTITLEMENT=365 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (1<=Year_of_service and Year_of_service<3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=4*to_number(l_plan_name) BAND2PAYFACTOR=0 BAND2ENTITLEMENT=335 ) else if (Year_of_service=>3) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=8*to_number(l_plan_name) BAND2PAYFACTOR=0 BAND2ENTITLEMENT=309 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "DHB HCM Occupational Adoption",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS 'X' ALIAS ANC_ABS_ENTRS_ATTRIBUTE1 AS NOT_RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Adoption- RTWADPT Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service>1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=239 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "DHB HCM Occupational Sickness",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_ATTRIBUTE2 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) l_plan_name = '5' leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 l_debug=ess_log_write('DHB HCM Occupational Sickness - Formula') SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', IV_START_DATE) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT4') EXECUTE('XX_GET_HR_DATA') l_plan_name = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_name) if ((l_plan_name <> '5')) then ( l_plan_name = l_plan_name ) else ( l_plan_name = '5' ) l_debug = ess_log_write('Sickness Plan = '||l_plan_name) Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<0.50) then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT=365 BAND2PAYFACTOR=0 BAND2ENTITLEMENT=365 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (0.50<=Year_of_service and Year_of_service<5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=21*to_number(l_plan_name) BAND2PAYFACTOR=50 BAND2ENTITLEMENT=9*to_number(l_plan_name) BAND3PAYFACTOR=0 BAND3ENTITLEMENT=155 ) else if (Year_of_service=>5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=21*to_number(l_plan_name) BAND2PAYFACTOR=50 BAND2ENTITLEMENT=21*to_number(l_plan_name) BAND3PAYFACTOR=0 BAND3ENTITLEMENT=183 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "DHB HCM Occupational Paternity Birth",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In DHB HCM Occupational Paternity Birth') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service>1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=14 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=351 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "PODCL HCM Occupational Sickness",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_ATTRIBUTE2 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS ' ' DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) L_PER_ASG_STANDARD_WORKING_HOURS = 5 leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 l_debug=ess_log_write('PODCL HCM Occupational Sickness - Formula') SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', IV_START_DATE) SET_INPUT ('mode', 'PER_ASG_STANDARD_WORKING_HOURS') EXECUTE('XX_GET_HR_DATA') L_PER_ASG_STANDARD_WORKING_HOURS = GET_OUTPUT('X_OUTPUT_NUMBER', PER_ASG_STANDARD_WORKING_HOURS) l_debug = ess_log_write('L_PER_ASG_WORKING_HOURS = '|| TO_CHAR(L_PER_ASG_STANDARD_WORKING_HOURS)) if ((L_PER_ASG_STANDARD_WORKING_HOURS <> 5)) then ( L_PER_ASG_STANDARD_WORKING_HOURS = L_PER_ASG_STANDARD_WORKING_HOURS ) else ( L_PER_ASG_STANDARD_WORKING_HOURS = 5 ) Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE )) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (0<=Year_of_service and Year_of_service<1) then ( BAND1PAYFACTOR=0 BAND1ENTITLEMENT=365 BAND2PAYFACTOR=0 BAND2ENTITLEMENT=365 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=365 ) else if (1<=Year_of_service and Year_of_service<5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=2*(L_PER_ASG_STANDARD_WORKING_HOURS) BAND2PAYFACTOR=0 BAND2ENTITLEMENT=351 ) else if (Year_of_service=>5) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=4*(L_PER_ASG_STANDARD_WORKING_HOURS) BAND2PAYFACTOR=0 BAND2ENTITLEMENT=361 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "DHB HCM Occupational Maternity",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_MTRNT_INTEND_TO_WORK IS 'X' ALIAS ANC_ABS_MTRNT_INTEND_TO_WORK AS RETURN_TO_WORK INPUTS ARE IV_START_DATE Service_days=0 ld_continuous_date='0001/01/01 00:00:00' (date) l_debug=ess_log_write('In Occupational Maternity - STDMAT and RTWMAT Formula') if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted THEN ( l_debug=ess_log_write('No Continuous service date for this employee') Service_days = days_between(IV_START_DATE, ACP_HIRE_DATE) ) else ( l_debug=ess_log_write(' Continuous service date exists') Service_days = days_between(IV_START_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Year_of_service=Service_days/365 l_debug = ess_log_write('Hire Date'+ To_char(ACP_HIRE_DATE)) l_debug=ess_log_write('Continuous Service Date ' + to_char(ld_continuous_date)) l_debug = ess_log_write('Year of Service'+ To_char(Year_of_service)) l_debug = ess_log_write('Absence Date'+ To_char(IV_START_DATE)) If (Year_of_service>1) then ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT=42 BAND2PAYFACTOR=50 BAND2ENTITLEMENT=84 BAND3PAYFACTOR=0 BAND3ENTITLEMENT=239 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SAC UK Sickness During Maternity Pay Period Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT FOR ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR is 0 DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT is 1 DEFAULT FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER11 IS 0 DEFAULT FOR ORA_HRX_GB_ABS_MAT_TYPE_PLAN_ID IS -1 DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR l_dummy = ess_log_write( 'SDM_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) band1name = 'Band1Pay' band2name = 'Band2Pay' band1payfactor = 100 band2payfactor = 100 band1entitlement = 0 band2entitlement = 0 l_related_smp_calculated_awe = 0 l_related_smp_override_awe = 0 l_related_smp_abs_type_id = 0 l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Start' ) l_tot_sdm_and_smp_used_entl = 0 CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER LOC_API_SKIP = 'N' l_iv_start_date = IV_START_DATE If ( IV_END_DATE was NOT DEFAULTED ) THEN ( l_iv_end_date = IV_END_DATE ) ELSE ( end_date_0000='4712/12/31 00:00:00' (DATE) end_date_0000=trunc(end_date_0000) l_iv_end_date = end_date_0000 ) l_sdm_band1_end_date='0001/01/01 00:00:00' (DATE) l_sdm_band2_end_date='0001/01/01 00:00:00' (DATE) l_mat_band2_end_date='0001/01/01 00:00:00' (DATE) l_temp_date='0001/01/01 00:00:00' (DATE) l_sdm_being_entered_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,-1) MATERNITY_ABSENCE_ENTRY_ID = 0 l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : CURRENT Absence Entry ID is : '|| to_char(l_sdm_being_entered_entry_id) ) search_start_date=add_days(l_iv_start_date,-272) search_end_date=l_iv_start_date i=1 CURRENT_ABS_IN_MAT39WEEKS = 'N' CURTAILMENT_PRESENT='N' FOUND_PREVIOUS_SDM = 'N' l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : CURRENT Absence = From '|| to_char(IV_START_DATE) ||' to '|| to_char( l_iv_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Search Range = From '|| to_char(search_start_date) ||' to '|| to_char( search_end_date ) ) l_end_date_to_consider = '0001/01/01 00:00:00' (date) l_max_start_date = l_end_date_to_consider l_max_end_date = l_end_date_to_consider l_latest_smp_actual_start_date = l_end_date_to_consider l_latest_smp_actual_end_date = l_end_date_to_consider l_latest_smp_planned_start_date = l_end_date_to_consider l_latest_smp_planned_end_date = l_end_date_to_consider l_no_of_weeks_smp_entl_used=0 CHANGE_CONTEXTS(START_DATE= trunc(search_start_date), END_DATE= search_end_date) ( l_tot = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.COUNT l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Array Size is = '|| to_char(l_tot)) while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] :=======================================================================================') l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] :================================== No ' || to_char(i) || '=============================') iter_absentry = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry) ( mat_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID l_leg_grp_code = 'XYZ' CHANGE_CONTEXTS(ABSENCE_TYPE_ID=mat_absence_type_id) ( map_event_type=ANC_ABS_TYP_MAP_EVENT_TYPE_CODE l_leg_grp_code = ANC_ABS_TYP_LEG_GROUPING_CD ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : mat_absence_type_id : '|| to_char(mat_absence_type_id)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : map_event_type : '|| map_event_type) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : : ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR [' ||to_char(i) ||'] = '|| to_char(ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] )) mat_absence_pattern=ANC_ABS_ENTRS_ABSENCE_PATTERN_CD abs_entry_status_cd='XYZ' abs_entry_status_cd=ANC_ABS_ENTRS_ABSENCE_STATUS_CD l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : abs_entry_status_cd : '|| abs_entry_status_cd) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : mat_absence_pattern : '|| mat_absence_pattern) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_leg_grp_code : '|| l_leg_grp_code) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_start_date : '|| to_char( l_max_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_end_date : '|| to_char( l_max_end_date ) ) IF ( l_leg_grp_code = 'ORA_HRX_GB_MAT' AND mat_absence_pattern = 'MAP' and map_event_type = 'CHB' and abs_entry_status_cd='SUBMITTED' ) Then ( IF (ANC_ABS_MTRNT_ACTUAL_START_DATE was not DEFAULTED) then ( l_smp_actual_start_date = ANC_ABS_MTRNT_ACTUAL_START_DATE ) else ( l_smp_actual_start_date = '0001/01/01 00:00:00' (date) ) IF ( ANC_ABS_MTRNT_ACTUAL_RETURN_DATE was not DEFAULTED) then ( l_smp_actual_end_date = ANC_ABS_MTRNT_ACTUAL_RETURN_DATE ) else ( l_smp_actual_end_date = l_iv_end_date (date) ) IF ( ANC_ABS_MTRNT_PLANNED_START_DATE was not DEFAULTED) then ( l_smp_planned_start_date = ANC_ABS_MTRNT_PLANNED_START_DATE ) else ( l_smp_planned_start_date = '0001/01/01 00:00:00' (date) ) IF ( ANC_ABS_MTRNT_PLANNED_RETURN_DATE was not DEFAULTED) then ( l_smp_planned_end_date = ANC_ABS_MTRNT_PLANNED_RETURN_DATE ) else ( l_smp_planned_end_date = '0001/01/01 00:00:00' (date) l_smp_planned_end_date = l_iv_end_date (date) ) IF ( ANC_ABS_MTRNT_ACTUAL_START_DATE was not DEFAULTED) then ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : CONSIDERING ACTUAL DATES IF CRITERIA IS MET ') if ( l_max_end_date <= l_smp_actual_end_date) then ( l_max_end_date = l_smp_actual_end_date l_max_start_date = l_smp_actual_start_date MATERNITY_ABSENCE_ENTRY_ID = iter_absentry l_related_smp_abs_type_id=mat_absence_type_id l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : ACTUAL DATES CONSIDERED from Entry ID ' || to_char(MATERNITY_ABSENCE_ENTRY_ID)) ) ) ELSE ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : CONSIDERING PLANNED DATES IF CRITERIA IS MET ') if ( l_max_end_date <= l_smp_planned_end_date) then ( l_max_end_date = l_smp_planned_end_date l_max_start_date = l_smp_planned_start_date l_related_smp_abs_type_id=mat_absence_type_id MATERNITY_ABSENCE_ENTRY_ID = iter_absentry l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : PLANNED DATES CONSIDERED from Entry ID ' || to_char(MATERNITY_ABSENCE_ENTRY_ID)) ) ) CURRENT_ABS_IN_MAT39WEEKS = 'Y' l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : ****************** CURRENT_ABS_IN_MAT39WEEKS : '|| CURRENT_ABS_IN_MAT39WEEKS ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : ****************** ****************** ' ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_smp_planned_start_date : '|| to_char( l_smp_planned_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_smp_planned_end_date : '|| to_char( l_smp_planned_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_smp_actual_start_date : '|| to_char( l_smp_actual_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_smp_actual_end_date : '|| to_char( l_smp_actual_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_start_date : '|| to_char( l_max_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_end_date : '|| to_char( l_max_end_date ) ) ) i=i+1 ) ) ) l_mat_band2_end_date=add_days(l_max_start_date,272) l_diff_mat_vs_sdm_day=0 l_create_block_a_cert = 'N' l_create_block_b_cert = 'N' l_days_of_block_b = 0 l_cert_a_days=0 l_mat_weekdayno=to_number(to_char(l_max_start_date(date),'D') ) l_dummy = ess_log_write( 'l_mat_weekdayno is ' || to_char(l_mat_weekdayno)) l_sdm_weekdayno=to_number(to_char(l_iv_start_date(date),'D')) l_dummy = ess_log_write( ' l_sdm_weekdayno is ' || to_char(l_sdm_weekdayno)) l_diff_mat_vs_sdm_day=l_sdm_weekdayno - l_mat_weekdayno if ( l_diff_mat_vs_sdm_day> 0 ) then ( l_mat_week_matched_start_date = ADD_DAYS( l_iv_start_date , (l_diff_mat_vs_sdm_day*-1) + 7 ) l_dummy = ess_log_write ( 'l_mat_week_matched_start_date from if clause is ' || to_char(l_mat_week_matched_start_date)) ) else ( l_mat_week_matched_start_date = ADD_DAYS ( l_iv_start_date , l_diff_mat_vs_sdm_day*-1) l_dummy = ess_log_write ( 'l_mat_week_matched_start_date from ELSE clause is ' || to_char(l_mat_week_matched_start_date)) ) if ( l_iv_start_date < l_mat_week_matched_start_date ) then ( l_create_block_a_cert = 'Y' l_block_a_cert_start_date = trunc(l_iv_start_date) l_block_a_cert_end_date = trunc(LEAST ( l_iv_end_date, ADD_DAYS(l_mat_week_matched_start_date, -1) )) l_cert_a_days = days_between(l_block_a_cert_end_date,l_block_a_cert_start_date) + 1 ) l_sdm_ends_before_mat_week_date = 'N' if ( l_mat_week_matched_start_date > l_iv_end_date ) then ( l_create_block_b_cert = 'N' l_end_before_week_matched_date = 'Y' ) else ( l_end_before_week_matched_date = 'N' l_days_of_block_b = MOD( DAYS_BETWEEN(trunc(l_iv_end_date) , trunc(l_mat_week_matched_start_date)) + 1 , 7) if (l_days_of_block_b > 0 ) then ( l_create_block_b_cert = 'Y' l_block_b_cert_start_date = trunc(ADD_DAYS (l_iv_end_date , (-1*l_days_of_block_b) + 1) ) l_block_b_cert_end_date = trunc(l_iv_end_date) ) ) l_dummy = ess_log_write('l_create_block_a_cert is ' || l_create_block_a_cert) if (l_create_block_a_cert = 'Y') then l_dummy = ess_log_write('CERT A betweeen ' || to_char(l_block_a_cert_start_date) ||' and '|| to_char(l_block_a_cert_end_date)) l_dummy = ess_log_write('l_create_block_b_cert is ' || l_create_block_b_cert) if (l_create_block_b_cert = 'Y') then l_dummy = ess_log_write('CERT B betweeen ' || to_char(l_block_b_cert_start_date) ||' and '|| to_char(l_block_b_cert_end_date)) IF ( CURRENT_ABS_IN_MAT39WEEKS = 'Y') then ( l_all_days_smp_entl_used = days_between( l_max_end_date, l_max_start_date) + 1 l_no_of_weeks_smp_entl_used = trunc(l_all_days_smp_entl_used / 7) l_smp_entl_used = l_no_of_weeks_smp_entl_used * 7 ) search_start_date=add_days(l_max_end_date,1) search_end_date= trunc(l_iv_start_date) i=1 l_old_sdm_entl_total = 0 l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : -------------------------------------------------------') l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : -------- Starting Search of SDM records : ' || to_char(search_start_date ) ||' to '|| to_char(search_end_date) ||' -----') l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : -------------------------------------------------------') CHANGE_CONTEXTS(START_DATE= trunc(search_start_date), END_DATE= search_end_date) ( l_tot = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.COUNT l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : In SDM Search Loop') while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( iter_absentry = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry) ( mat_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID l_leg_grp_code = 'XYZ' CHANGE_CONTEXTS(ABSENCE_TYPE_ID=mat_absence_type_id, EFFECTIVE_DATE=l_trunc_eff_date ) ( l_leg_grp_code = ANC_ABS_TYP_LEG_GROUPING_CD ) l_absence_pattern=ANC_ABS_ENTRS_ABSENCE_PATTERN_CD abs_entry_status_cd='XYZ' abs_entry_status_cd=ANC_ABS_ENTRS_ABSENCE_STATUS_CD l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : abs_entry_status_cd : '|| abs_entry_status_cd) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_absence_pattern : '|| l_absence_pattern) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_leg_grp_code : '|| l_leg_grp_code) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_start_date : '|| to_char( l_max_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : l_max_end_date : '|| to_char( l_max_end_date ) ) IF ( l_leg_grp_code = 'ORA_HRX_GB_SDM' AND l_absence_pattern = 'II' and abs_entry_status_cd='SUBMITTED' AND l_sdm_being_entered_entry_id <> iter_absentry ) Then ( l_sdm_start_date = ANC_ABS_ENTRS_START_DATE If ( ANC_ABS_ENTRS_END_DATE was NOT DEFAULTED ) THEN ( l_sdm_end_date = ANC_ABS_ENTRS_END_DATE ) ELSE ( end_date_0000='4712/12/31 00:00:00' (DATE) end_date_0000=trunc(end_date_0000) l_sdm_end_date = end_date_0000 ) FOUND_PREVIOUS_SDM = 'Y' l_old_sdm_duration = days_between(l_sdm_end_date, l_sdm_start_date) + 1 l_old_sdm_weekdayno = to_number(to_char( l_sdm_start_date , 'd' )) l_diff_for_old_sdm = 0 l_diff_for_old_sdm = l_old_sdm_weekdayno - l_mat_weekdayno if ( l_diff_for_old_sdm > 0 ) then ( l_old_sdm_mat_week_matched_start_date = ADD_DAYS ( l_sdm_start_date , l_diff_for_old_sdm + 7) ) else ( l_old_sdm_mat_week_matched_start_date = ADD_DAYS(l_sdm_start_date, -1 * l_diff_for_old_sdm ) ) if ( l_sdm_end_date > l_old_sdm_mat_week_matched_start_date ) then ( l_old_sdm_duration_weeks = trunc( (DAYS_BETWEEN( l_sdm_end_date , l_old_sdm_mat_week_matched_start_date) + 1) / 7) ) else ( l_old_sdm_duration_weeks = 0 ) l_old_sdm_entl = l_old_sdm_duration_weeks * 7 l_old_sdm_entl_total = l_old_sdm_entl_total + l_old_sdm_entl l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Found previous sdm from : '|| to_char(l_sdm_start_date) ||' to ' || to_char(l_sdm_end_date)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Days_between Function for : '|| to_char(l_sdm_start_date) ||' to ' || to_char(l_sdm_end_date) ||' Returns ' || to_char(l_old_sdm_duration)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Current sdm entitlement used is : '|| to_char(l_old_sdm_entl)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Cumulative of all sdm entitlements used is : '|| to_char(l_old_sdm_entl_total)) ) i=i+1 ) ) ) l_tot_sdm_and_smp_used_entl = l_smp_entl_used + l_old_sdm_entl_total l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Sum of all SMP and SDM entitlements used is : '|| to_char(l_tot_sdm_and_smp_used_entl)) l_cert_status = IV_UI_CERT_STATUS l_cert_id_being_changed=IV_UI_ABS_CERT_ID l_altcd_of_changed_cert='XYZ' l_cert_index = 1 IF l_cert_id_being_changed != ' ' THEN ( l_altcd_of_changed_cert = GET_VALUE_SET('ORA_HRX_GB_CERT_ALTCD' ,'|=CURRENT_CERT_ID='||l_cert_id_being_changed ) ) l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = IV_START_DATE l_cert_end_date = IV_END_DATE IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) if ( l_create_block_a_cert = 'Y') then ( l_create = 'N' l_cert_start_date = l_block_a_cert_start_date l_cert_end_date = l_block_a_cert_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) if ( l_create_block_b_cert = 'Y') then ( l_create = 'N' l_cert_start_date = l_block_b_cert_start_date l_cert_end_date = l_block_b_cert_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Before Checking for Payable day in SMP Eff date = '|| to_char(l_context_effective_Date) ||' person_id is '|| to_char(l_context_person_id)) l_related_smp_plan_id = 0 CHANGE_CONTEXTS( EFFECTIVE_DATE=l_max_start_date, ABSENCE_TYPE_ID=l_related_smp_abs_type_id) ( l_related_smp_plan_id = ORA_HRX_GB_ABS_MAT_TYPE_PLAN_ID l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Related SMP Plan ID from DBI is '|| to_char(l_related_smp_plan_id)) ) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE= l_max_start_date, ABSENCE_TYPE_ID= l_related_smp_abs_type_id, ABSENCE_ENTRY_ID= MATERNITY_ABSENCE_ENTRY_ID, HR_ASSIGNMENT_ID=l_context_assignment_id, ACCRUAL_PLAN_ID=l_related_smp_plan_id) ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : In Context scope Checking for Payable day in SMP ') l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : In Context scope Checking for Payable day in ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.count : '|| to_char(ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.count)) l_current_factor=0 l_current_unit=0 l_smp_is_paid='N' ni4=ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.FIRST(-1) while (ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.exists(ni4) and l_smp_is_paid = 'N') loop ( l_current_factor=ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR[ni4] l_current_unit = ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[ni4] l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Looping through Pay Factors -- Current Factor = '|| to_char(l_current_factor)|| ' Current Unit = ' || to_char(l_current_unit)) if ( l_current_factor > 0 and l_current_unit > 0) Then ( l_smp_is_paid = 'Y' l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Found a PAYABLE day in SMP , l_smp is paid = Y' ) ) ni4=ANC_ABS_PLN_ENTR_ABSENCE_PAY_FACTOR_ARR.NEXT(ni4,-1) ) ) l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Before IF clause of certificate Not payabe SDM ') if ( l_smp_is_paid = 'N') Then ( l_dummy = ESS_LOG_WRITE( '[SDM Entitlement Formula] : Inside IF clause of Disqualification certificate ') l_create = 'N' l_cert_start_date = l_iv_start_date l_cert_end_date = l_iv_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NON_PAYABLE_LINKED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Related maternity absence is unpaid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Adoption Entitlement Non Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE2 AS APPRENTICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS PER_ASG_PRIMARY_FLAG AS PRIMARY_FLAG DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE2 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 IS 'N' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'N' INPUTS ARE IV_EXPECTEDCHILDBIRTHDATE , IV_ATTRIBUTE_1 NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE lv_day_of_week = GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Asg Primary flag - ' + PRIMARY_FLAG) IF PRIMARY_FLAG = 'Y' THEN ( IF APPRENTICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = APPRENTICE_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) IF lv_day_of_week = 'SUN' THEN ( ld_ewc = IV_EXPECTEDCHILDBIRTHDATE ) ELSE IF lv_day_of_week = 'MON' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -1) ) ELSE IF lv_day_of_week = 'TUE' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -2) ) ELSE IF lv_day_of_week = 'WED' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -3) ) ELSE IF lv_day_of_week = 'THU' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -4) ) ELSE IF lv_day_of_week = 'FRI' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -5) ) ELSE IF lv_day_of_week = 'SAT' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -6) ) ld_qweek = ADD_DAYS(ld_ewc,-105) ln_los_in_weeks =(DAYS_BETWEEN(ld_qweek, ld_Hire_Date))/7 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('Expected Child Birth - ' + TO_CHAR(IV_EXPECTEDCHILDBIRTHDATE)) rLog = ESS_LOG_WRITE('Qualifying Week - ' + TO_CHAR(ld_qweek)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) IF ln_los_in_weeks > 26 AND IV_ATTRIBUTE_1 = 'Y' then ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 239 ) ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Adoption Entitlement Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE1 AS PROBABTION_DATE ALIAS PER_REL_ATTRIBUTE_DATE3 AS DATE_FIRST_HIRED ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS PER_ASG_PRIMARY_FLAG AS PRIMARY_FLAG DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE3 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'N' INPUTS ARE IV_EXPECTEDCHILDBIRTHDATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE lv_day_of_week = GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Asg Primary flag - ' + PRIMARY_FLAG) IF PRIMARY_FLAG = 'Y' THEN ( IF PROBABTION_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = PROBABTION_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ELSE IF DATE_FIRST_HIRED WAS NOT DEFAULTED THEN ( ld_Hire_Date = DATE_FIRST_HIRED ) IF lv_day_of_week = 'SUN' THEN ( ld_ewc = IV_EXPECTEDCHILDBIRTHDATE ) ELSE IF lv_day_of_week = 'MON' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -1) ) ELSE IF lv_day_of_week = 'TUE' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -2) ) ELSE IF lv_day_of_week = 'WED' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -3) ) ELSE IF lv_day_of_week = 'THU' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -4) ) ELSE IF lv_day_of_week = 'FRI' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -5) ) ELSE IF lv_day_of_week = 'SAT' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -6) ) ld_qweek = ADD_DAYS(ld_ewc,-105) ln_los_in_weeks =(DAYS_BETWEEN(ld_qweek, ld_Hire_Date))/7 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('Expected Child Birth - ' + TO_CHAR(IV_EXPECTEDCHILDBIRTHDATE)) rLog = ESS_LOG_WRITE('Qualifying Week - ' + TO_CHAR(ld_qweek)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) IF ln_los_in_weeks > 26 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 91 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 274 ) ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Maternity Entitlement Non Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE2 AS APPRENTICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS PER_ASG_PRIMARY_FLAG AS PRIMARY_FLAG DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE2 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 IS 'N' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'N' INPUTS ARE IV_EXPECTEDCHILDBIRTHDATE , IV_ATTRIBUTE_1 NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE lv_day_of_week = GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Asg Primary flag - ' + PRIMARY_FLAG) IF PRIMARY_FLAG = 'Y' THEN ( IF APPRENTICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = APPRENTICE_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) IF lv_day_of_week = 'SUN' THEN ( ld_ewc = IV_EXPECTEDCHILDBIRTHDATE ) ELSE IF lv_day_of_week = 'MON' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -1) ) ELSE IF lv_day_of_week = 'TUE' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -2) ) ELSE IF lv_day_of_week = 'WED' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -3) ) ELSE IF lv_day_of_week = 'THU' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -4) ) ELSE IF lv_day_of_week = 'FRI' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -5) ) ELSE IF lv_day_of_week = 'SAT' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -6) ) ld_qweek = ADD_DAYS(ld_ewc,-105) ln_los_in_weeks =(DAYS_BETWEEN(ld_qweek, ld_Hire_Date))/7 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('Expected Child Birth - ' + TO_CHAR(IV_EXPECTEDCHILDBIRTHDATE)) rLog = ESS_LOG_WRITE('Qualifying Week - ' + TO_CHAR(ld_qweek)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) IF ln_los_in_weeks > 26 AND IV_ATTRIBUTE_1 = 'Y' then ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 239 ) ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Maternity Entitlement Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE1 AS PROBABTION_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS PER_ASG_PRIMARY_FLAG AS PRIMARY_FLAG DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'N' INPUTS ARE IV_EXPECTEDCHILDBIRTHDATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE lv_day_of_week = GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Asg Primary flag - ' + PRIMARY_FLAG) IF PRIMARY_FLAG = 'Y' THEN ( IF PROBABTION_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = PROBABTION_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) IF lv_day_of_week = 'SUN' THEN ( ld_ewc = IV_EXPECTEDCHILDBIRTHDATE ) ELSE IF lv_day_of_week = 'MON' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -1) ) ELSE IF lv_day_of_week = 'TUE' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -2) ) ELSE IF lv_day_of_week = 'WED' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -3) ) ELSE IF lv_day_of_week = 'THU' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -4) ) ELSE IF lv_day_of_week = 'FRI' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -5) ) ELSE IF lv_day_of_week = 'SAT' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -6) ) ld_qweek = ADD_DAYS(ld_ewc,-105) ln_los_in_weeks =(DAYS_BETWEEN(ld_qweek, ld_Hire_Date))/7 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('Expected Child Birth - ' + TO_CHAR(IV_EXPECTEDCHILDBIRTHDATE)) rLog = ESS_LOG_WRITE('Qualifying Week - ' + TO_CHAR(ld_qweek)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) IF ln_los_in_weeks > 26 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 91 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 274 ) ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Paternity Birth Entitlement Non Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE2 AS APPRENTICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS PER_ASG_PRIMARY_FLAG AS PRIMARY_FLAG DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE2 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'N' INPUTS ARE IV_EXPECTEDCHILDBIRTHDATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE lv_day_of_week = GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 14 rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Asg Primary flag - ' + PRIMARY_FLAG) IF PRIMARY_FLAG = 'Y' THEN ( IF APPRENTICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = APPRENTICE_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) IF lv_day_of_week = 'SUN' THEN ( ld_ewc = IV_EXPECTEDCHILDBIRTHDATE ) ELSE IF lv_day_of_week = 'MON' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -1) ) ELSE IF lv_day_of_week = 'TUE' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -2) ) ELSE IF lv_day_of_week = 'WED' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -3) ) ELSE IF lv_day_of_week = 'THU' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -4) ) ELSE IF lv_day_of_week = 'FRI' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -5) ) ELSE IF lv_day_of_week = 'SAT' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -6) ) ld_qweek = ADD_DAYS(ld_ewc,-105) ln_los_in_weeks =(DAYS_BETWEEN(ld_qweek, ld_Hire_Date))/7 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('Expected Child Birth - ' + TO_CHAR(IV_EXPECTEDCHILDBIRTHDATE)) rLog = ESS_LOG_WRITE('Qualifying Week - ' + TO_CHAR(ld_qweek)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) IF ln_los_in_weeks > 26 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 7 ) ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Paternity Birth Entitlement Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE1 AS PROBABTION_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS PER_ASG_PRIMARY_FLAG AS PRIMARY_FLAG DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'N' INPUTS ARE IV_EXPECTEDCHILDBIRTHDATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE lv_day_of_week = GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 14 rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Asg Primary flag - ' + PRIMARY_FLAG) IF PRIMARY_FLAG = 'Y' THEN ( IF PROBABTION_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = PROBABTION_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) IF lv_day_of_week = 'SUN' THEN ( ld_ewc = IV_EXPECTEDCHILDBIRTHDATE ) ELSE IF lv_day_of_week = 'MON' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -1) ) ELSE IF lv_day_of_week = 'TUE' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -2) ) ELSE IF lv_day_of_week = 'WED' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -3) ) ELSE IF lv_day_of_week = 'THU' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -4) ) ELSE IF lv_day_of_week = 'FRI' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -5) ) ELSE IF lv_day_of_week = 'SAT' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -6) ) ld_qweek = ADD_DAYS(ld_ewc,-105) ln_los_in_weeks =(DAYS_BETWEEN(ld_qweek, ld_Hire_Date))/7 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('Expected Child Birth - ' + TO_CHAR(IV_EXPECTEDCHILDBIRTHDATE)) rLog = ESS_LOG_WRITE('Qualifying Week - ' + TO_CHAR(ld_qweek)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) IF ln_los_in_weeks > 26 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 7 ) ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Paternity Adoption Entitlement Non Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE2 AS APPRENTICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS PER_ASG_PRIMARY_FLAG AS PRIMARY_FLAG DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE2 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'N' INPUTS ARE IV_EXPECTEDCHILDBIRTHDATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE lv_day_of_week = GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 14 rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Asg Primary flag - ' + PRIMARY_FLAG) IF PRIMARY_FLAG = 'Y' THEN ( IF APPRENTICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = APPRENTICE_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) IF lv_day_of_week = 'SUN' THEN ( ld_ewc = IV_EXPECTEDCHILDBIRTHDATE ) ELSE IF lv_day_of_week = 'MON' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -1) ) ELSE IF lv_day_of_week = 'TUE' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -2) ) ELSE IF lv_day_of_week = 'WED' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -3) ) ELSE IF lv_day_of_week = 'THU' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -4) ) ELSE IF lv_day_of_week = 'FRI' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -5) ) ELSE IF lv_day_of_week = 'SAT' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -6) ) ld_qweek = ADD_DAYS(ld_ewc,-105) ln_los_in_weeks =(DAYS_BETWEEN(ld_qweek, ld_Hire_Date))/7 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('Expected Child Birth - ' + TO_CHAR(IV_EXPECTEDCHILDBIRTHDATE)) rLog = ESS_LOG_WRITE('Qualifying Week - ' + TO_CHAR(ld_qweek)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) IF ln_los_in_weeks > 26 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 7 ) ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Paternity Adoption Entitlement Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE1 AS PROBABTION_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS PER_ASG_PRIMARY_FLAG AS PRIMARY_FLAG DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'N' INPUTS ARE IV_EXPECTEDCHILDBIRTHDATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE lv_day_of_week = GET_DATE_DAY_OF_WEEK(IV_EXPECTEDCHILDBIRTHDATE) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 14 rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Asg Primary flag - ' + PRIMARY_FLAG) IF PRIMARY_FLAG = 'Y' THEN ( IF PROBABTION_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = PROBABTION_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) IF lv_day_of_week = 'SUN' THEN ( ld_ewc = IV_EXPECTEDCHILDBIRTHDATE ) ELSE IF lv_day_of_week = 'MON' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -1) ) ELSE IF lv_day_of_week = 'TUE' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -2) ) ELSE IF lv_day_of_week = 'WED' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -3) ) ELSE IF lv_day_of_week = 'THU' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -4) ) ELSE IF lv_day_of_week = 'FRI' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -5) ) ELSE IF lv_day_of_week = 'SAT' THEN ( ld_ewc = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE, -6) ) ld_qweek = ADD_DAYS(ld_ewc,-105) ln_los_in_weeks =(DAYS_BETWEEN(ld_qweek, ld_Hire_Date))/7 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('Expected Child Birth - ' + TO_CHAR(IV_EXPECTEDCHILDBIRTHDATE)) rLog = ESS_LOG_WRITE('Qualifying Week - ' + TO_CHAR(ld_qweek)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) IF ln_los_in_weeks > 26 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 7 ) ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Sick Entitlement Non Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE2 AS APPRENTICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS ANC_ABS_PLN_NAME AS PLAN_NAME ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY AS INFO_CATG ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 AS H_ABS_TYPE_ID ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 AS BAND1_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 AS BAND2_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 AS BAND3_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 AS ABS_H_START_DATE ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 AS ABS_H_END_DATE DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE2 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_NAME IS 'NULL' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE ctxAbsTypeId = GET_CONTEXT(ABSENCE_TYPE_ID, 0) certIndex = 1 CERT_NAMES = EMPTY_TEXT_NUMBER CERT_START_DATES = EMPTY_DATE_NUMBER CERT_END_DATES = EMPTY_DATE_NUMBER CERT_COMMENTS = EMPTY_TEXT_NUMBER BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ldMigrationDate = TO_DATE(GET_TABLE_VALUE('SAC_PAYROLL_INFO', 'SICKNESS', 'FIRST PERIOD', '0001-01-01'), 'YYYY-MM-DD') rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Absence Date - ' + TO_CHAR(IV_START_DATE) + ' - ' + TO_CHAR(IV_END_DATE)) rLog = ESS_LOG_WRITE('ctxAbsTypeId - ' + TO_CHAR(ctxAbsTypeId)) IF IV_START_DATE < ldMigrationDate THEN ( rLog = ESS_LOG_WRITE('Historic Records found - ' + TO_CHAR(H_ABS_TYPE_ID.COUNT)) i = H_ABS_TYPE_ID.FIRST(-1234) WHILE H_ABS_TYPE_ID.EXISTS(i) LOOP ( IF INFO_CATG[i] = 'SAC_HISTORIC_SICK_DETAILS' AND H_ABS_TYPE_ID[i] = ctxAbsTypeId AND ABS_H_START_DATE[i] = TRUNC(IV_START_DATE) THEN ( IF ABS_H_END_DATE[i] = TRUNC(IV_END_DATE) THEN ( rLog = ESS_LOG_WRITE('--Inside the Sickness History Details--') BAND1ENTITLEMENT = BAND1_DAYS[i] BAND2ENTITLEMENT = BAND2_DAYS[i] BAND3ENTITLEMENT = BAND3_DAYS[i] rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Entitlement Details found in the Historic Sickness Extra Info area.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS ) ELSE ( rLog = ESS_LOG_WRITE('History record matches with the absence start date but not with the absence end dates. Hence, it will follow the normal rules.') ) ) i = H_ABS_TYPE_ID.NEXT(i, -1234) ) ) IF APPRENTICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = APPRENTICE_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ln_los_in_weeks = DAYS_BETWEEN(IV_START_DATE, ld_Hire_Date)/7 ln_los_in_years = MONTHS_BETWEEN(IV_START_DATE, ld_Hire_Date)/12 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) rLog = ESS_LOG_WRITE('LOS in Years - ' + TO_CHAR(ln_los_in_years)) IF ln_los_in_weeks >= 26 AND ln_los_in_years < 1 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 35 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 295 ) ELSE IF ln_los_in_years >= 1 AND ln_los_in_years < 2 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 63 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 63 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 239 ) ELSE IF ln_los_in_years >= 2 AND ln_los_in_years < 3 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 126 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 113 ) ELSE IF ln_los_in_years >= 3 AND ln_los_in_years < 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 154 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 154 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 57 ) ELSE IF ln_los_in_years >= 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) IF ln_los_in_weeks >= 26 THEN ( rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_B - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_B - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_B - ' + TO_CHAR(BAND3ENTITLEMENT)) ld_Start_Date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 1), HIRE_DATE) ld_End_Date = ADD_DAYS(IV_START_DATE, -1) ld_temp_Start_Date = ld_Start_Date IF ANC_ABS_ENTRS_START_DATE WAS NOT DEFAULTED AND IV_START_DATE > ANC_ABS_ENTRS_START_DATE THEN ( ld_End_Date = ADD_DAYS(ANC_ABS_ENTRS_START_DATE, -1) rLog = ESS_LOG_WRITE('Absence start date has been moved to a later date. Hence, system will do the entitlement check for the period ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + ' - ' + TO_CHAR(ld_End_Date, 'DD-MM-YYYY')) ) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_Start_Date, ld_End_Date) ln_unpaid_days = ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days)) c = 0 WHILE ln_temp_unpaid_days > 0 LOOP ( ld_date1 = ADD_DAYS(ld_temp_Start_Date, -1 * ln_temp_unpaid_days) ld_date2 = ADD_DAYS(ld_temp_Start_Date, -1) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_date1, ld_date2) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(ln_temp_unpaid_days)) ld_temp_Start_Date = ADD_DAYS(ld_Start_Date, -1 * ln_unpaid_days) ln_unpaid_days = ln_unpaid_days + ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_temp_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days) + ', ld_temp_Start_Date - ' + TO_CHAR(ld_temp_Start_Date) + ', ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) ld_Start_Date = ld_temp_Start_Date rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) rLog = ESS_LOG_WRITE('ld_Start_Date - ' + TO_CHAR(ld_Start_Date)) rLog = ESS_LOG_WRITE('ld_End_Date - ' + TO_CHAR(ld_End_Date)) ln_full_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 100, ld_Start_Date, ld_End_Date) ln_half_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 50, ld_Start_Date, ld_End_Date) ln_total_days_used = ln_full_pay_days + ln_half_pay_days ln_cert_days_used = ln_total_days_used rLog = ESS_LOG_WRITE('ln_total_days_used - ' + TO_CHAR(ln_total_days_used)) IF ln_total_days_used > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + ln_total_days_used, 365) IF ln_total_days_used >= BAND1ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) IF ln_total_days_used >= BAND2ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) ) rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_A - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_A - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_A - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + CHR(13) + 'No. of Unpaid Days = ' + TO_CHAR(ln_unpaid_days) + CHR(13) + 'Total Entitlement Consumed within Plan Term = ' + TO_CHAR(ln_cert_days_used) CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) ELSE ( CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ADD_YEARS(IV_START_DATE, -1), 'DD-MM-YYYY') + CHR(13) + 'Employee not entitled for Occupational plan.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Sick Entitlement Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE1 AS PROBATION_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS ANC_ABS_PLN_NAME AS PLAN_NAME ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY AS INFO_CATG ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 AS H_ABS_TYPE_ID ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 AS BAND1_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 AS BAND2_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 AS BAND3_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 AS ABS_H_START_DATE ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 AS ABS_H_END_DATE DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_NAME IS 'NULL' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE ctxAbsTypeId = GET_CONTEXT(ABSENCE_TYPE_ID, 0) certIndex = 1 CERT_NAMES = EMPTY_TEXT_NUMBER CERT_START_DATES = EMPTY_DATE_NUMBER CERT_END_DATES = EMPTY_DATE_NUMBER CERT_COMMENTS = EMPTY_TEXT_NUMBER BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ldMigrationDate = TO_DATE(GET_TABLE_VALUE('SAC_PAYROLL_INFO', 'SICKNESS', 'FIRST PERIOD', '0001-01-01'), 'YYYY-MM-DD') rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Absence Date - ' + TO_CHAR(IV_START_DATE) + ' - ' + TO_CHAR(IV_END_DATE)) rLog = ESS_LOG_WRITE('ctxAbsTypeId - ' + TO_CHAR(ctxAbsTypeId)) IF IV_START_DATE < ldMigrationDate THEN ( rLog = ESS_LOG_WRITE('Historic Records found - ' + TO_CHAR(H_ABS_TYPE_ID.COUNT)) i = H_ABS_TYPE_ID.FIRST(-1234) WHILE H_ABS_TYPE_ID.EXISTS(i) LOOP ( IF INFO_CATG[i] = 'SAC_HISTORIC_SICK_DETAILS' AND H_ABS_TYPE_ID[i] = ctxAbsTypeId AND ABS_H_START_DATE[i] = TRUNC(IV_START_DATE) THEN ( IF ABS_H_END_DATE[i] = TRUNC(IV_END_DATE) THEN ( rLog = ESS_LOG_WRITE('--Inside the Sickness History Details--') BAND1ENTITLEMENT = BAND1_DAYS[i] BAND2ENTITLEMENT = BAND2_DAYS[i] BAND3ENTITLEMENT = BAND3_DAYS[i] rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Entitlement Details found in the Historic Sickness Extra Info area.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS ) ELSE ( rLog = ESS_LOG_WRITE('History record matches with the absence start date but not with the absence end dates. Hence, it will follow the normal rules.') ) ) i = H_ABS_TYPE_ID.NEXT(i, -1234) ) ) IF PROBATION_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = PROBATION_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ln_los_in_weeks = DAYS_BETWEEN(IV_START_DATE, ld_Hire_Date)/7 ln_los_in_years = MONTHS_BETWEEN(IV_START_DATE, ld_Hire_Date)/12 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) rLog = ESS_LOG_WRITE('LOS in Years - ' + TO_CHAR(ln_los_in_years)) IF ln_los_in_weeks >= 18 AND ln_los_in_years < 1 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 31 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 303 ) ELSE IF ln_los_in_years >= 1 AND ln_los_in_years < 2 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 243 ) ELSE IF ln_los_in_years >= 2 AND ln_los_in_years < 3 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 121 ) ELSE IF ln_los_in_years >= 3 AND ln_los_in_years < 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 61 ) ELSE IF ln_los_in_years >= 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) IF ln_los_in_weeks >= 18 THEN ( rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_B - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_B - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_B - ' + TO_CHAR(BAND3ENTITLEMENT)) ld_Start_Date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 1), HIRE_DATE) ld_End_Date = ADD_DAYS(IV_START_DATE, -1) ld_temp_Start_Date = ld_Start_Date IF ANC_ABS_ENTRS_START_DATE WAS NOT DEFAULTED AND IV_START_DATE > ANC_ABS_ENTRS_START_DATE THEN ( ld_End_Date = ADD_DAYS(ANC_ABS_ENTRS_START_DATE, -1) rLog = ESS_LOG_WRITE('Absence start date has been moved to a later date. Hence, system will do the entitlement check for the period ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + ' - ' + TO_CHAR(ld_End_Date, 'DD-MM-YYYY')) ) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_Start_Date, ld_End_Date) ln_unpaid_days = ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days)) c = 0 WHILE ln_temp_unpaid_days > 0 LOOP ( ld_date1 = ADD_DAYS(ld_temp_Start_Date, -1 * ln_temp_unpaid_days) ld_date2 = ADD_DAYS(ld_temp_Start_Date, -1) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_date1, ld_date2) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(ln_temp_unpaid_days)) ld_temp_Start_Date = ADD_DAYS(ld_Start_Date, -1 * ln_unpaid_days) ln_unpaid_days = ln_unpaid_days + ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_temp_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days) + ', ld_temp_Start_Date - ' + TO_CHAR(ld_temp_Start_Date) + ', ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) ld_Start_Date = ld_temp_Start_Date rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) rLog = ESS_LOG_WRITE('ld_Start_Date - ' + TO_CHAR(ld_Start_Date)) rLog = ESS_LOG_WRITE('ld_End_Date - ' + TO_CHAR(ld_End_Date)) ln_full_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 100, ld_Start_Date, ld_End_Date) ln_half_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 50, ld_Start_Date, ld_End_Date) ln_total_days_used = ln_full_pay_days + ln_half_pay_days ln_cert_days_used = ln_total_days_used rLog = ESS_LOG_WRITE('ln_total_days_used - ' + TO_CHAR(ln_total_days_used)) IF ln_total_days_used > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + ln_total_days_used, 365) IF ln_total_days_used >= BAND1ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) IF ln_total_days_used >= BAND2ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) ) rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_A - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_A - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_A - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + CHR(13) + 'No. of Unpaid Days = ' + TO_CHAR(ln_unpaid_days) + CHR(13) + 'Total Entitlement Consumed within Plan Term = ' + TO_CHAR(ln_cert_days_used) CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) ELSE ( CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ADD_YEARS(IV_START_DATE, -1), 'DD-MM-YYYY') + CHR(13) + 'Employee not entitled for Occupational plan.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Industrial Injury Entitlement Non Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE2 AS APPRENTICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS ANC_ABS_PLN_NAME AS PLAN_NAME ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY AS INFO_CATG ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 AS H_ABS_TYPE_ID ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 AS BAND1_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 AS BAND2_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 AS BAND3_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 AS ABS_H_START_DATE ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 AS ABS_H_END_DATE DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE2 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_NAME IS 'NULL' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE ctxAbsTypeId = GET_CONTEXT(ABSENCE_TYPE_ID, 0) certIndex = 1 CERT_NAMES = EMPTY_TEXT_NUMBER CERT_START_DATES = EMPTY_DATE_NUMBER CERT_END_DATES = EMPTY_DATE_NUMBER CERT_COMMENTS = EMPTY_TEXT_NUMBER BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ldMigrationDate = TO_DATE(GET_TABLE_VALUE('SAC_PAYROLL_INFO', 'SICKNESS', 'FIRST PERIOD', '0001-01-01'), 'YYYY-MM-DD') rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Absence Date - ' + TO_CHAR(IV_START_DATE) + ' - ' + TO_CHAR(IV_END_DATE)) rLog = ESS_LOG_WRITE('ctxAbsTypeId - ' + TO_CHAR(ctxAbsTypeId)) IF IV_START_DATE < ldMigrationDate THEN ( rLog = ESS_LOG_WRITE('Historic Records found - ' + TO_CHAR(H_ABS_TYPE_ID.COUNT)) i = H_ABS_TYPE_ID.FIRST(-1234) WHILE H_ABS_TYPE_ID.EXISTS(i) LOOP ( IF INFO_CATG[i] = 'SAC_HISTORIC_SICK_DETAILS' AND H_ABS_TYPE_ID[i] = ctxAbsTypeId AND ABS_H_START_DATE[i] = TRUNC(IV_START_DATE) THEN ( IF ABS_H_END_DATE[i] = TRUNC(IV_END_DATE) THEN ( rLog = ESS_LOG_WRITE('--Inside the Sickness History Details--') BAND1ENTITLEMENT = BAND1_DAYS[i] BAND2ENTITLEMENT = BAND2_DAYS[i] BAND3ENTITLEMENT = BAND3_DAYS[i] rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Entitlement Details found in the Historic Sickness Extra Info area.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS ) ELSE ( rLog = ESS_LOG_WRITE('History record matches with the absence start date but not with the absence end dates. Hence, it will follow the normal rules.') ) ) i = H_ABS_TYPE_ID.NEXT(i, -1234) ) ) IF APPRENTICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = APPRENTICE_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ln_los_in_weeks = DAYS_BETWEEN(IV_START_DATE, ld_Hire_Date)/7 ln_los_in_years = MONTHS_BETWEEN(IV_START_DATE, ld_Hire_Date)/12 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) rLog = ESS_LOG_WRITE('LOS in Years - ' + TO_CHAR(ln_los_in_years)) IF ln_los_in_weeks >= 26 AND ln_los_in_years < 1 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 35 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 295 ) ELSE IF ln_los_in_years >= 1 AND ln_los_in_years < 2 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 63 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 63 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 239 ) ELSE IF ln_los_in_years >= 2 AND ln_los_in_years < 3 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 126 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 113 ) ELSE IF ln_los_in_years >= 3 AND ln_los_in_years < 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 154 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 154 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 57 ) ELSE IF ln_los_in_years >= 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) IF ln_los_in_weeks >= 26 THEN ( rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_B - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_B - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_B - ' + TO_CHAR(BAND3ENTITLEMENT)) ld_Start_Date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 1), HIRE_DATE) ld_End_Date = ADD_DAYS(IV_START_DATE, -1) ld_temp_Start_Date = ld_Start_Date IF ANC_ABS_ENTRS_START_DATE WAS NOT DEFAULTED AND IV_START_DATE > ANC_ABS_ENTRS_START_DATE THEN ( ld_End_Date = ADD_DAYS(ANC_ABS_ENTRS_START_DATE, -1) rLog = ESS_LOG_WRITE('Absence start date has been moved to a later date. Hence, system will do the entitlement check for the period ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + ' - ' + TO_CHAR(ld_End_Date, 'DD-MM-YYYY')) ) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_Start_Date, ld_End_Date) ln_unpaid_days = ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days)) c = 0 WHILE ln_temp_unpaid_days > 0 LOOP ( ld_date1 = ADD_DAYS(ld_temp_Start_Date, -1 * ln_temp_unpaid_days) ld_date2 = ADD_DAYS(ld_temp_Start_Date, -1) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_date1, ld_date2) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(ln_temp_unpaid_days)) ld_temp_Start_Date = ADD_DAYS(ld_Start_Date, -1 * ln_unpaid_days) ln_unpaid_days = ln_unpaid_days + ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_temp_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days) + ', ld_temp_Start_Date - ' + TO_CHAR(ld_temp_Start_Date) + ', ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) ld_Start_Date = ld_temp_Start_Date rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) rLog = ESS_LOG_WRITE('ld_Start_Date - ' + TO_CHAR(ld_Start_Date)) rLog = ESS_LOG_WRITE('ld_End_Date - ' + TO_CHAR(ld_End_Date)) ln_full_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 100, ld_Start_Date, ld_End_Date) ln_half_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 50, ld_Start_Date, ld_End_Date) ln_total_days_used = ln_full_pay_days + ln_half_pay_days ln_cert_days_used = ln_total_days_used rLog = ESS_LOG_WRITE('ln_total_days_used - ' + TO_CHAR(ln_total_days_used)) IF ln_total_days_used > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + ln_total_days_used, 365) IF ln_total_days_used >= BAND1ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) IF ln_total_days_used >= BAND2ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) ) rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_A - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_A - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_A - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + CHR(13) + 'No. of Unpaid Days = ' + TO_CHAR(ln_unpaid_days) + CHR(13) + 'Total Entitlement Consumed within Plan Term = ' + TO_CHAR(ln_cert_days_used) CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) ELSE ( CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ADD_YEARS(IV_START_DATE, -1), 'DD-MM-YYYY') + CHR(13) + 'Employee not entitled for Occupational plan.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Third Party Injury Entitlement Non Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE2 AS APPRENTICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS ANC_ABS_PLN_NAME AS PLAN_NAME ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY AS INFO_CATG ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 AS H_ABS_TYPE_ID ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 AS BAND1_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 AS BAND2_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 AS BAND3_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 AS ABS_H_START_DATE ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 AS ABS_H_END_DATE DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE2 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_NAME IS 'NULL' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE ctxAbsTypeId = GET_CONTEXT(ABSENCE_TYPE_ID, 0) certIndex = 1 CERT_NAMES = EMPTY_TEXT_NUMBER CERT_START_DATES = EMPTY_DATE_NUMBER CERT_END_DATES = EMPTY_DATE_NUMBER CERT_COMMENTS = EMPTY_TEXT_NUMBER BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ldMigrationDate = TO_DATE(GET_TABLE_VALUE('SAC_PAYROLL_INFO', 'SICKNESS', 'FIRST PERIOD', '0001-01-01'), 'YYYY-MM-DD') rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Absence Date - ' + TO_CHAR(IV_START_DATE) + ' - ' + TO_CHAR(IV_END_DATE)) rLog = ESS_LOG_WRITE('ctxAbsTypeId - ' + TO_CHAR(ctxAbsTypeId)) IF IV_START_DATE < ldMigrationDate THEN ( rLog = ESS_LOG_WRITE('Historic Records found - ' + TO_CHAR(H_ABS_TYPE_ID.COUNT)) i = H_ABS_TYPE_ID.FIRST(-1234) WHILE H_ABS_TYPE_ID.EXISTS(i) LOOP ( IF INFO_CATG[i] = 'SAC_HISTORIC_SICK_DETAILS' AND H_ABS_TYPE_ID[i] = ctxAbsTypeId AND ABS_H_START_DATE[i] = TRUNC(IV_START_DATE) THEN ( IF ABS_H_END_DATE[i] = TRUNC(IV_END_DATE) THEN ( rLog = ESS_LOG_WRITE('--Inside the Sickness History Details--') BAND1ENTITLEMENT = BAND1_DAYS[i] BAND2ENTITLEMENT = BAND2_DAYS[i] BAND3ENTITLEMENT = BAND3_DAYS[i] rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Entitlement Details found in the Historic Sickness Extra Info area.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS ) ELSE ( rLog = ESS_LOG_WRITE('History record matches with the absence start date but not with the absence end dates. Hence, it will follow the normal rules.') ) ) i = H_ABS_TYPE_ID.NEXT(i, -1234) ) ) IF APPRENTICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = APPRENTICE_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ln_los_in_weeks = DAYS_BETWEEN(IV_START_DATE, ld_Hire_Date)/7 ln_los_in_years = MONTHS_BETWEEN(IV_START_DATE, ld_Hire_Date)/12 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) rLog = ESS_LOG_WRITE('LOS in Years - ' + TO_CHAR(ln_los_in_years)) IF ln_los_in_weeks >= 26 AND ln_los_in_years < 1 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 35 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 295 ) ELSE IF ln_los_in_years >= 1 AND ln_los_in_years < 2 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 63 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 63 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 239 ) ELSE IF ln_los_in_years >= 2 AND ln_los_in_years < 3 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 126 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 113 ) ELSE IF ln_los_in_years >= 3 AND ln_los_in_years < 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 154 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 154 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 57 ) ELSE IF ln_los_in_years >= 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) IF ln_los_in_weeks >= 26 THEN ( rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_B - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_B - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_B - ' + TO_CHAR(BAND3ENTITLEMENT)) ld_Start_Date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 1), HIRE_DATE) ld_End_Date = ADD_DAYS(IV_START_DATE, -1) ld_temp_Start_Date = ld_Start_Date IF ANC_ABS_ENTRS_START_DATE WAS NOT DEFAULTED AND IV_START_DATE > ANC_ABS_ENTRS_START_DATE THEN ( ld_End_Date = ADD_DAYS(ANC_ABS_ENTRS_START_DATE, -1) rLog = ESS_LOG_WRITE('Absence start date has been moved to a later date. Hence, system will do the entitlement check for the period ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + ' - ' + TO_CHAR(ld_End_Date, 'DD-MM-YYYY')) ) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_Start_Date, ld_End_Date) ln_unpaid_days = ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days)) c = 0 WHILE ln_temp_unpaid_days > 0 LOOP ( ld_date1 = ADD_DAYS(ld_temp_Start_Date, -1 * ln_temp_unpaid_days) ld_date2 = ADD_DAYS(ld_temp_Start_Date, -1) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_date1, ld_date2) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(ln_temp_unpaid_days)) ld_temp_Start_Date = ADD_DAYS(ld_Start_Date, -1 * ln_unpaid_days) ln_unpaid_days = ln_unpaid_days + ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_temp_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days) + ', ld_temp_Start_Date - ' + TO_CHAR(ld_temp_Start_Date) + ', ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) ld_Start_Date = ld_temp_Start_Date rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) rLog = ESS_LOG_WRITE('ld_Start_Date - ' + TO_CHAR(ld_Start_Date)) rLog = ESS_LOG_WRITE('ld_End_Date - ' + TO_CHAR(ld_End_Date)) ln_full_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 100, ld_Start_Date, ld_End_Date) ln_half_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 50, ld_Start_Date, ld_End_Date) ln_total_days_used = ln_full_pay_days + ln_half_pay_days ln_cert_days_used = ln_total_days_used rLog = ESS_LOG_WRITE('ln_total_days_used - ' + TO_CHAR(ln_total_days_used)) IF ln_total_days_used > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + ln_total_days_used, 365) IF ln_total_days_used >= BAND1ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) IF ln_total_days_used >= BAND2ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) ) rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_A - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_A - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_A - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + CHR(13) + 'No. of Unpaid Days = ' + TO_CHAR(ln_unpaid_days) + CHR(13) + 'Total Entitlement Consumed within Plan Term = ' + TO_CHAR(ln_cert_days_used) CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) ELSE ( CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ADD_YEARS(IV_START_DATE, -1), 'DD-MM-YYYY') + CHR(13) + 'Employee not entitled for Occupational plan.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Third Party Injury Entitlement Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE1 AS PROBATION_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS ANC_ABS_PLN_NAME AS PLAN_NAME ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY AS INFO_CATG ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 AS H_ABS_TYPE_ID ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 AS BAND1_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 AS BAND2_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 AS BAND3_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 AS ABS_H_START_DATE ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 AS ABS_H_END_DATE DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_NAME IS 'NULL' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE ctxAbsTypeId = GET_CONTEXT(ABSENCE_TYPE_ID, 0) certIndex = 1 CERT_NAMES = EMPTY_TEXT_NUMBER CERT_START_DATES = EMPTY_DATE_NUMBER CERT_END_DATES = EMPTY_DATE_NUMBER CERT_COMMENTS = EMPTY_TEXT_NUMBER BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ldMigrationDate = TO_DATE(GET_TABLE_VALUE('SAC_PAYROLL_INFO', 'SICKNESS', 'FIRST PERIOD', '0001-01-01'), 'YYYY-MM-DD') rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Absence Date - ' + TO_CHAR(IV_START_DATE) + ' - ' + TO_CHAR(IV_END_DATE)) rLog = ESS_LOG_WRITE('ctxAbsTypeId - ' + TO_CHAR(ctxAbsTypeId)) IF IV_START_DATE < ldMigrationDate THEN ( rLog = ESS_LOG_WRITE('Historic Records found - ' + TO_CHAR(H_ABS_TYPE_ID.COUNT)) i = H_ABS_TYPE_ID.FIRST(-1234) WHILE H_ABS_TYPE_ID.EXISTS(i) LOOP ( IF INFO_CATG[i] = 'SAC_HISTORIC_SICK_DETAILS' AND H_ABS_TYPE_ID[i] = ctxAbsTypeId AND ABS_H_START_DATE[i] = TRUNC(IV_START_DATE) THEN ( IF ABS_H_END_DATE[i] = TRUNC(IV_END_DATE) THEN ( rLog = ESS_LOG_WRITE('--Inside the Sickness History Details--') BAND1ENTITLEMENT = BAND1_DAYS[i] BAND2ENTITLEMENT = BAND2_DAYS[i] BAND3ENTITLEMENT = BAND3_DAYS[i] rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Entitlement Details found in the Historic Sickness Extra Info area.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS ) ELSE ( rLog = ESS_LOG_WRITE('History record matches with the absence start date but not with the absence end dates. Hence, it will follow the normal rules.') ) ) i = H_ABS_TYPE_ID.NEXT(i, -1234) ) ) IF PROBATION_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = PROBATION_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ln_los_in_weeks = DAYS_BETWEEN(IV_START_DATE, ld_Hire_Date)/7 ln_los_in_years = MONTHS_BETWEEN(IV_START_DATE, ld_Hire_Date)/12 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) rLog = ESS_LOG_WRITE('LOS in Years - ' + TO_CHAR(ln_los_in_years)) IF ln_los_in_weeks >= 18 AND ln_los_in_years < 1 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 31 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 303 ) ELSE IF ln_los_in_years >= 1 AND ln_los_in_years < 2 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 243 ) ELSE IF ln_los_in_years >= 2 AND ln_los_in_years < 3 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 121 ) ELSE IF ln_los_in_years >= 3 AND ln_los_in_years < 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 61 ) ELSE IF ln_los_in_years >= 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) IF ln_los_in_weeks >= 18 THEN ( rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_B - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_B - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_B - ' + TO_CHAR(BAND3ENTITLEMENT)) ld_Start_Date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 1), HIRE_DATE) ld_End_Date = ADD_DAYS(IV_START_DATE, -1) ld_temp_Start_Date = ld_Start_Date IF ANC_ABS_ENTRS_START_DATE WAS NOT DEFAULTED AND IV_START_DATE > ANC_ABS_ENTRS_START_DATE THEN ( ld_End_Date = ADD_DAYS(ANC_ABS_ENTRS_START_DATE, -1) rLog = ESS_LOG_WRITE('Absence start date has been moved to a later date. Hence, system will do the entitlement check for the period ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + ' - ' + TO_CHAR(ld_End_Date, 'DD-MM-YYYY')) ) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_Start_Date, ld_End_Date) ln_unpaid_days = ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days)) c = 0 WHILE ln_temp_unpaid_days > 0 LOOP ( ld_date1 = ADD_DAYS(ld_temp_Start_Date, -1 * ln_temp_unpaid_days) ld_date2 = ADD_DAYS(ld_temp_Start_Date, -1) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_date1, ld_date2) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(ln_temp_unpaid_days)) ld_temp_Start_Date = ADD_DAYS(ld_Start_Date, -1 * ln_unpaid_days) ln_unpaid_days = ln_unpaid_days + ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_temp_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days) + ', ld_temp_Start_Date - ' + TO_CHAR(ld_temp_Start_Date) + ', ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) ld_Start_Date = ld_temp_Start_Date rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) rLog = ESS_LOG_WRITE('ld_Start_Date - ' + TO_CHAR(ld_Start_Date)) rLog = ESS_LOG_WRITE('ld_End_Date - ' + TO_CHAR(ld_End_Date)) ln_full_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 100, ld_Start_Date, ld_End_Date) ln_half_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 50, ld_Start_Date, ld_End_Date) ln_total_days_used = ln_full_pay_days + ln_half_pay_days ln_cert_days_used = ln_total_days_used rLog = ESS_LOG_WRITE('ln_total_days_used - ' + TO_CHAR(ln_total_days_used)) IF ln_total_days_used > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + ln_total_days_used, 365) IF ln_total_days_used >= BAND1ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) IF ln_total_days_used >= BAND2ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) ) rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_A - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_A - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_A - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + CHR(13) + 'No. of Unpaid Days = ' + TO_CHAR(ln_unpaid_days) + CHR(13) + 'Total Entitlement Consumed within Plan Term = ' + TO_CHAR(ln_cert_days_used) CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) ELSE ( CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ADD_YEARS(IV_START_DATE, -1), 'DD-MM-YYYY') + CHR(13) + 'Employee not entitled for Occupational plan.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Victims of Crime Violence Entitlement Non Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE2 AS APPRENTICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS ANC_ABS_PLN_NAME AS PLAN_NAME ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY AS INFO_CATG ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 AS H_ABS_TYPE_ID ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 AS BAND1_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 AS BAND2_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 AS BAND3_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 AS ABS_H_START_DATE ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 AS ABS_H_END_DATE DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE2 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_NAME IS 'NULL' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE ctxAbsTypeId = GET_CONTEXT(ABSENCE_TYPE_ID, 0) certIndex = 1 CERT_NAMES = EMPTY_TEXT_NUMBER CERT_START_DATES = EMPTY_DATE_NUMBER CERT_END_DATES = EMPTY_DATE_NUMBER CERT_COMMENTS = EMPTY_TEXT_NUMBER BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ldMigrationDate = TO_DATE(GET_TABLE_VALUE('SAC_PAYROLL_INFO', 'SICKNESS', 'FIRST PERIOD', '0001-01-01'), 'YYYY-MM-DD') rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Absence Date - ' + TO_CHAR(IV_START_DATE) + ' - ' + TO_CHAR(IV_END_DATE)) rLog = ESS_LOG_WRITE('ctxAbsTypeId - ' + TO_CHAR(ctxAbsTypeId)) IF IV_START_DATE < ldMigrationDate THEN ( rLog = ESS_LOG_WRITE('Historic Records found - ' + TO_CHAR(H_ABS_TYPE_ID.COUNT)) i = H_ABS_TYPE_ID.FIRST(-1234) WHILE H_ABS_TYPE_ID.EXISTS(i) LOOP ( IF INFO_CATG[i] = 'SAC_HISTORIC_SICK_DETAILS' AND H_ABS_TYPE_ID[i] = ctxAbsTypeId AND ABS_H_START_DATE[i] = TRUNC(IV_START_DATE) THEN ( IF ABS_H_END_DATE[i] = TRUNC(IV_END_DATE) THEN ( rLog = ESS_LOG_WRITE('--Inside the Sickness History Details--') BAND1ENTITLEMENT = BAND1_DAYS[i] BAND2ENTITLEMENT = BAND2_DAYS[i] BAND3ENTITLEMENT = BAND3_DAYS[i] rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Entitlement Details found in the Historic Sickness Extra Info area.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS ) ELSE ( rLog = ESS_LOG_WRITE('History record matches with the absence start date but not with the absence end dates. Hence, it will follow the normal rules.') ) ) i = H_ABS_TYPE_ID.NEXT(i, -1234) ) ) IF APPRENTICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = APPRENTICE_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ln_los_in_weeks = DAYS_BETWEEN(IV_START_DATE, ld_Hire_Date)/7 ln_los_in_years = MONTHS_BETWEEN(IV_START_DATE, ld_Hire_Date)/12 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) rLog = ESS_LOG_WRITE('LOS in Years - ' + TO_CHAR(ln_los_in_years)) IF ln_los_in_weeks >= 26 AND ln_los_in_years < 1 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 35 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 35 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 295 ) ELSE IF ln_los_in_years >= 1 AND ln_los_in_years < 2 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 63 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 63 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 239 ) ELSE IF ln_los_in_years >= 2 AND ln_los_in_years < 3 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 126 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 113 ) ELSE IF ln_los_in_years >= 3 AND ln_los_in_years < 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 154 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 154 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 57 ) ELSE IF ln_los_in_years >= 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) IF ln_los_in_weeks >= 26 THEN ( rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_B - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_B - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_B - ' + TO_CHAR(BAND3ENTITLEMENT)) ld_Start_Date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 1), HIRE_DATE) ld_End_Date = ADD_DAYS(IV_START_DATE, -1) ld_temp_Start_Date = ld_Start_Date IF ANC_ABS_ENTRS_START_DATE WAS NOT DEFAULTED AND IV_START_DATE > ANC_ABS_ENTRS_START_DATE THEN ( ld_End_Date = ADD_DAYS(ANC_ABS_ENTRS_START_DATE, -1) rLog = ESS_LOG_WRITE('Absence start date has been moved to a later date. Hence, system will do the entitlement check for the period ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + ' - ' + TO_CHAR(ld_End_Date, 'DD-MM-YYYY')) ) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_Start_Date, ld_End_Date) ln_unpaid_days = ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days)) c = 0 WHILE ln_temp_unpaid_days > 0 LOOP ( ld_date1 = ADD_DAYS(ld_temp_Start_Date, -1 * ln_temp_unpaid_days) ld_date2 = ADD_DAYS(ld_temp_Start_Date, -1) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_date1, ld_date2) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(ln_temp_unpaid_days)) ld_temp_Start_Date = ADD_DAYS(ld_Start_Date, -1 * ln_unpaid_days) ln_unpaid_days = ln_unpaid_days + ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_temp_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days) + ', ld_temp_Start_Date - ' + TO_CHAR(ld_temp_Start_Date) + ', ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) ld_Start_Date = ld_temp_Start_Date rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) rLog = ESS_LOG_WRITE('ld_Start_Date - ' + TO_CHAR(ld_Start_Date)) rLog = ESS_LOG_WRITE('ld_End_Date - ' + TO_CHAR(ld_End_Date)) ln_full_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 100, ld_Start_Date, ld_End_Date) ln_half_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 50, ld_Start_Date, ld_End_Date) ln_total_days_used = ln_full_pay_days + ln_half_pay_days ln_cert_days_used = ln_total_days_used rLog = ESS_LOG_WRITE('ln_total_days_used - ' + TO_CHAR(ln_total_days_used)) IF ln_total_days_used > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + ln_total_days_used, 365) IF ln_total_days_used >= BAND1ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) IF ln_total_days_used >= BAND2ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) ) rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_A - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_A - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_A - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + CHR(13) + 'No. of Unpaid Days = ' + TO_CHAR(ln_unpaid_days) + CHR(13) + 'Total Entitlement Consumed within Plan Term = ' + TO_CHAR(ln_cert_days_used) CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) ELSE ( CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ADD_YEARS(IV_START_DATE, -1), 'DD-MM-YYYY') + CHR(13) + 'Employee not entitled for Occupational plan.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Victims of Crime Violence Entitlement Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE1 AS PROBATION_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS ANC_ABS_PLN_NAME AS PLAN_NAME ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY AS INFO_CATG ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 AS H_ABS_TYPE_ID ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 AS BAND1_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 AS BAND2_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 AS BAND3_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 AS ABS_H_START_DATE ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 AS ABS_H_END_DATE DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_NAME IS 'NULL' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE ctxAbsTypeId = GET_CONTEXT(ABSENCE_TYPE_ID, 0) certIndex = 1 CERT_NAMES = EMPTY_TEXT_NUMBER CERT_START_DATES = EMPTY_DATE_NUMBER CERT_END_DATES = EMPTY_DATE_NUMBER CERT_COMMENTS = EMPTY_TEXT_NUMBER BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ldMigrationDate = TO_DATE(GET_TABLE_VALUE('SAC_PAYROLL_INFO', 'SICKNESS', 'FIRST PERIOD', '0001-01-01'), 'YYYY-MM-DD') rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Absence Date - ' + TO_CHAR(IV_START_DATE) + ' - ' + TO_CHAR(IV_END_DATE)) rLog = ESS_LOG_WRITE('ctxAbsTypeId - ' + TO_CHAR(ctxAbsTypeId)) IF IV_START_DATE < ldMigrationDate THEN ( rLog = ESS_LOG_WRITE('Historic Records found - ' + TO_CHAR(H_ABS_TYPE_ID.COUNT)) i = H_ABS_TYPE_ID.FIRST(-1234) WHILE H_ABS_TYPE_ID.EXISTS(i) LOOP ( IF INFO_CATG[i] = 'SAC_HISTORIC_SICK_DETAILS' AND H_ABS_TYPE_ID[i] = ctxAbsTypeId AND ABS_H_START_DATE[i] = TRUNC(IV_START_DATE) THEN ( IF ABS_H_END_DATE[i] = TRUNC(IV_END_DATE) THEN ( rLog = ESS_LOG_WRITE('--Inside the Sickness History Details--') BAND1ENTITLEMENT = BAND1_DAYS[i] BAND2ENTITLEMENT = BAND2_DAYS[i] BAND3ENTITLEMENT = BAND3_DAYS[i] rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Entitlement Details found in the Historic Sickness Extra Info area.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS ) ELSE ( rLog = ESS_LOG_WRITE('History record matches with the absence start date but not with the absence end dates. Hence, it will follow the normal rules.') ) ) i = H_ABS_TYPE_ID.NEXT(i, -1234) ) ) IF PROBATION_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = PROBATION_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ln_los_in_weeks = DAYS_BETWEEN(IV_START_DATE, ld_Hire_Date)/7 ln_los_in_years = MONTHS_BETWEEN(IV_START_DATE, ld_Hire_Date)/12 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) rLog = ESS_LOG_WRITE('LOS in Years - ' + TO_CHAR(ln_los_in_years)) IF ln_los_in_weeks >= 18 AND ln_los_in_years < 1 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 31 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 303 ) ELSE IF ln_los_in_years >= 1 AND ln_los_in_years < 2 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 243 ) ELSE IF ln_los_in_years >= 2 AND ln_los_in_years < 3 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 121 ) ELSE IF ln_los_in_years >= 3 AND ln_los_in_years < 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 61 ) ELSE IF ln_los_in_years >= 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) IF ln_los_in_weeks >= 18 THEN ( rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_B - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_B - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_B - ' + TO_CHAR(BAND3ENTITLEMENT)) ld_Start_Date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 1), HIRE_DATE) ld_End_Date = ADD_DAYS(IV_START_DATE, -1) ld_temp_Start_Date = ld_Start_Date IF ANC_ABS_ENTRS_START_DATE WAS NOT DEFAULTED AND IV_START_DATE > ANC_ABS_ENTRS_START_DATE THEN ( ld_End_Date = ADD_DAYS(ANC_ABS_ENTRS_START_DATE, -1) rLog = ESS_LOG_WRITE('Absence start date has been moved to a later date. Hence, system will do the entitlement check for the period ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + ' - ' + TO_CHAR(ld_End_Date, 'DD-MM-YYYY')) ) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_Start_Date, ld_End_Date) ln_unpaid_days = ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days)) c = 0 WHILE ln_temp_unpaid_days > 0 LOOP ( ld_date1 = ADD_DAYS(ld_temp_Start_Date, -1 * ln_temp_unpaid_days) ld_date2 = ADD_DAYS(ld_temp_Start_Date, -1) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_date1, ld_date2) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(ln_temp_unpaid_days)) ld_temp_Start_Date = ADD_DAYS(ld_Start_Date, -1 * ln_unpaid_days) ln_unpaid_days = ln_unpaid_days + ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_temp_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days) + ', ld_temp_Start_Date - ' + TO_CHAR(ld_temp_Start_Date) + ', ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) ld_Start_Date = ld_temp_Start_Date rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) rLog = ESS_LOG_WRITE('ld_Start_Date - ' + TO_CHAR(ld_Start_Date)) rLog = ESS_LOG_WRITE('ld_End_Date - ' + TO_CHAR(ld_End_Date)) ln_full_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 100, ld_Start_Date, ld_End_Date) ln_half_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 50, ld_Start_Date, ld_End_Date) ln_total_days_used = ln_full_pay_days + ln_half_pay_days ln_cert_days_used = ln_total_days_used rLog = ESS_LOG_WRITE('ln_total_days_used - ' + TO_CHAR(ln_total_days_used)) IF ln_total_days_used > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + ln_total_days_used, 365) IF ln_total_days_used >= BAND1ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) IF ln_total_days_used >= BAND2ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) ) rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_A - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_A - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_A - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + CHR(13) + 'No. of Unpaid Days = ' + TO_CHAR(ln_unpaid_days) + CHR(13) + 'Total Entitlement Consumed within Plan Term = ' + TO_CHAR(ln_cert_days_used) CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) ELSE ( CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ADD_YEARS(IV_START_DATE, -1), 'DD-MM-YYYY') + CHR(13) + 'Employee not entitled for Occupational plan.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "Occupational Industrial Injury Entitlement Teachers",
        "answer": "ALIAS PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE AS STAT_ABS_SERVICE_DATE ALIAS PER_REL_ATTRIBUTE_DATE1 AS PROBATION_DATE ALIAS PER_REL_ATTRIBUTE_DATE4 AS ADJ_SRVC_DATE ALIAS PER_ASG_REL_DATE_START AS HIRE_DATE ALIAS PER_ASG_ASSIGNMENT_NUMBER AS ASG_NUMBER ALIAS ANC_ABS_PLN_NAME AS PLAN_NAME ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY AS INFO_CATG ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 AS H_ABS_TYPE_ID ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 AS BAND1_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 AS BAND2_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 AS BAND3_DAYS ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 AS ABS_H_START_DATE ALIAS PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 AS ABS_H_END_DATE DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_NAME IS 'NULL' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER1 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER2 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER3 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_NUMBER4 IS 0 DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_DATE2 IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE, IV_END_DATE NullDate = '0001/01/01 00:00:00' (date) ld_Hire_Date = HIRE_DATE ctxAbsTypeId = GET_CONTEXT(ABSENCE_TYPE_ID, 0) certIndex = 1 CERT_NAMES = EMPTY_TEXT_NUMBER CERT_START_DATES = EMPTY_DATE_NUMBER CERT_END_DATES = EMPTY_DATE_NUMBER CERT_COMMENTS = EMPTY_TEXT_NUMBER BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 365 ldMigrationDate = TO_DATE(GET_TABLE_VALUE('SAC_PAYROLL_INFO', 'SICKNESS', 'FIRST PERIOD', '0001-01-01'), 'YYYY-MM-DD') rLog = ESS_LOG_WRITE('Assignment Number - ' + ASG_NUMBER) rLog = ESS_LOG_WRITE('Absence Date - ' + TO_CHAR(IV_START_DATE) + ' - ' + TO_CHAR(IV_END_DATE)) rLog = ESS_LOG_WRITE('ctxAbsTypeId - ' + TO_CHAR(ctxAbsTypeId)) IF IV_START_DATE < ldMigrationDate THEN ( rLog = ESS_LOG_WRITE('Historic Records found - ' + TO_CHAR(H_ABS_TYPE_ID.COUNT)) i = H_ABS_TYPE_ID.FIRST(-1234) WHILE H_ABS_TYPE_ID.EXISTS(i) LOOP ( IF INFO_CATG[i] = 'SAC_HISTORIC_SICK_DETAILS' AND H_ABS_TYPE_ID[i] = ctxAbsTypeId AND ABS_H_START_DATE[i] = TRUNC(IV_START_DATE) THEN ( IF ABS_H_END_DATE[i] = TRUNC(IV_END_DATE) THEN ( rLog = ESS_LOG_WRITE('--Inside the Sickness History Details--') BAND1ENTITLEMENT = BAND1_DAYS[i] BAND2ENTITLEMENT = BAND2_DAYS[i] BAND3ENTITLEMENT = BAND3_DAYS[i] rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Entitlement Details found in the Historic Sickness Extra Info area.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS ) ELSE ( rLog = ESS_LOG_WRITE('History record matches with the absence start date but not with the absence end dates. Hence, it will follow the normal rules.') ) ) i = H_ABS_TYPE_ID.NEXT(i, -1234) ) ) IF PROBATION_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = PROBATION_DATE ) ELSE IF ADJ_SRVC_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = ADJ_SRVC_DATE ) ELSE IF STAT_ABS_SERVICE_DATE WAS NOT DEFAULTED THEN ( ld_Hire_Date = STAT_ABS_SERVICE_DATE ) ln_los_in_weeks = DAYS_BETWEEN(IV_START_DATE, ld_Hire_Date)/7 ln_los_in_years = MONTHS_BETWEEN(IV_START_DATE, ld_Hire_Date)/12 rLog = ESS_LOG_WRITE('Hire Date used - ' + TO_CHAR(ld_Hire_Date)) rLog = ESS_LOG_WRITE('LOS in Weeks - ' + TO_CHAR(ln_los_in_weeks)) rLog = ESS_LOG_WRITE('LOS in Years - ' + TO_CHAR(ln_los_in_years)) IF ln_los_in_weeks >= 18 AND ln_los_in_years < 1 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 31 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 303 ) ELSE IF ln_los_in_years >= 1 AND ln_los_in_years < 2 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 243 ) ELSE IF ln_los_in_years >= 2 AND ln_los_in_years < 3 then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 121 ) ELSE IF ln_los_in_years >= 3 AND ln_los_in_years < 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 61 ) ELSE IF ln_los_in_years >= 5 then ( BAND1PAYFACTOR =100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) IF ln_los_in_weeks >= 18 THEN ( rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_B - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_B - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_B - ' + TO_CHAR(BAND3ENTITLEMENT)) ld_Start_Date = GREATEST(ADD_DAYS(ADD_YEARS(IV_START_DATE, -1), 1), HIRE_DATE) ld_End_Date = ADD_DAYS(IV_START_DATE, -1) ld_temp_Start_Date = ld_Start_Date IF ANC_ABS_ENTRS_START_DATE WAS NOT DEFAULTED AND IV_START_DATE > ANC_ABS_ENTRS_START_DATE THEN ( ld_End_Date = ADD_DAYS(ANC_ABS_ENTRS_START_DATE, -1) rLog = ESS_LOG_WRITE('Absence start date has been moved to a later date. Hence, system will do the entitlement check for the period ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + ' - ' + TO_CHAR(ld_End_Date, 'DD-MM-YYYY')) ) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_Start_Date, ld_End_Date) ln_unpaid_days = ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days)) c = 0 WHILE ln_temp_unpaid_days > 0 LOOP ( ld_date1 = ADD_DAYS(ld_temp_Start_Date, -1 * ln_temp_unpaid_days) ld_date2 = ADD_DAYS(ld_temp_Start_Date, -1) ln_temp_unpaid_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 0, ld_date1, ld_date2) rLog = ESS_LOG_WRITE('Search Start Date - ' + TO_CHAR(ld_date1) + ', Search End Date - ' + TO_CHAR(ld_date2) + ', Unpaid Days - ' + TO_CHAR(ln_temp_unpaid_days)) ld_temp_Start_Date = ADD_DAYS(ld_Start_Date, -1 * ln_unpaid_days) ln_unpaid_days = ln_unpaid_days + ln_temp_unpaid_days rLog = ESS_LOG_WRITE('ln_temp_unpaid_days - ' + TO_CHAR(ln_temp_unpaid_days) + ', ld_temp_Start_Date - ' + TO_CHAR(ld_temp_Start_Date) + ', ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) c = c + 1 IF c > 100 THEN ( rLog = ESS_LOG_WRITE('Loop exceeds more than 100. Hence, existing the loop.') EXIT ) ) ld_Start_Date = ld_temp_Start_Date rLog = ESS_LOG_WRITE('ln_unpaid_days - ' + TO_CHAR(ln_unpaid_days)) rLog = ESS_LOG_WRITE('ld_Start_Date - ' + TO_CHAR(ld_Start_Date)) rLog = ESS_LOG_WRITE('ld_End_Date - ' + TO_CHAR(ld_End_Date)) ln_full_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 100, ld_Start_Date, ld_End_Date) ln_half_pay_days = GET_ENTITLEMENTS(PLAN_NAME, ' ', 50, ld_Start_Date, ld_End_Date) ln_total_days_used = ln_full_pay_days + ln_half_pay_days ln_cert_days_used = ln_total_days_used rLog = ESS_LOG_WRITE('ln_total_days_used - ' + TO_CHAR(ln_total_days_used)) IF ln_total_days_used > 0 THEN ( BAND3ENTITLEMENT = LEAST (BAND3ENTITLEMENT + ln_total_days_used, 365) IF ln_total_days_used >= BAND1ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND1ENTITLEMENT BAND1ENTITLEMENT = 0 ) ELSE ( BAND1ENTITLEMENT = BAND1ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) IF ln_total_days_used >= BAND2ENTITLEMENT THEN ( ln_total_days_used = ln_total_days_used - BAND2ENTITLEMENT BAND2ENTITLEMENT = 0 ) ELSE ( BAND2ENTITLEMENT = BAND2ENTITLEMENT - ln_total_days_used ln_total_days_used = 0 ) ) rLog = ESS_LOG_WRITE('BAND1ENTITLEMENT_A - ' + TO_CHAR(BAND1ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND2ENTITLEMENT_A - ' + TO_CHAR(BAND2ENTITLEMENT)) rLog = ESS_LOG_WRITE('BAND3ENTITLEMENT_A - ' + TO_CHAR(BAND3ENTITLEMENT)) CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ld_Start_Date, 'DD-MM-YYYY') + CHR(13) + 'No. of Unpaid Days = ' + TO_CHAR(ln_unpaid_days) + CHR(13) + 'Total Entitlement Consumed within Plan Term = ' + TO_CHAR(ln_cert_days_used) CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) ELSE ( CERT_NAMES[certIndex] = 'Rolling Backward Plan Term' CERT_COMMENTS[certIndex] = 'Plan Term Start = ' + TO_CHAR(ADD_YEARS(IV_START_DATE, -1), 'DD-MM-YYYY') + CHR(13) + 'Employee not entitled for Occupational plan.' CERT_START_DATES[certIndex] = IV_START_DATE CERT_END_DATES[certIndex] = IV_END_DATE ) RETURN BAND1PAYFACTOR , BAND1ENTITLEMENT , BAND2PAYFACTOR , BAND2ENTITLEMENT , BAND3PAYFACTOR , BAND3ENTITLEMENT , CERT_NAMES , CERT_START_DATES , CERT_END_DATES , CERT_COMMENTS",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "SAC UK Maternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_qweek) is = '|| to_char(trunc(l_qweek))) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_complete_qweek) is = '|| to_char(trunc(l_complete_qweek))) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_awe_eff_date = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_start_date)) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_56_days_prior_date)) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_rel_period_end_for_awe_calc)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_rel_period_end_for_awe_calc,1) l_awe_eff_date = l_relevant_period_end_date_mod ) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_rel_period_end_for_awe_calc) is = '|| to_char(trunc(l_rel_period_end_for_awe_calc))) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0 ) l_dummy = ess_log_write( 'MAT_Entitlement >> get context payroll is l_payroll_id = '|| to_char(l_payroll_id)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'MAT_Entitlement >> l_regprocdate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'MAT_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'MAT_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 1 = ' ||l_insuff_info_cert) ) ELSE ( IF (l_seniority_date > l_rel_period_start_for_awe_calc) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 2 = ' ||l_insuff_info_cert) ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) ) ) ) ) l_calculated_awe = l_awe l_dummy = ess_log_write( 'MAT_Entitlement >> l_calculated_awe = ' ||to_char(l_calculated_awe)) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_no_of_days < 176) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop (",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "UK Maternity Custom",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc l_rel_asg_date_start = PER_ASG_REL_DATE_START l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_awe_eff_date = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_complete_qweek) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_56_days_prior_date) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) l_awe_eff_date = l_relevant_period_end_date_mod ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_length_of_service < 25 ) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_cert_index] = 'The absence has multiple assignments associated with it and cannot be processed.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_band1end_date =add_days(l_start_date,272) l_band2end_date =add_days(l_band1end_date,91) l_entl_info = to_char(band1entitlement)||':'|| to_char(band1payfactor)||':'||to_char(l_band1end_date,'YYYY/MM/DD')||'#'|| to_char(band2entitlement) ||':'|| to_char(band2payfactor) ||':'||to_char(l_band2end_date,'YYYY/MM/DD') LOC_STRING_ARRAY['ENTITLEMENT_INFO']=l_entl_info LOC_NUMBER_ARRAY['AWE_CALCULATED']=l_calculated_awe l_dummy = ess_log_write( 'MAT_Entitlement >> LOC_STRING_ARRAY[ENTITLEMENT_INFO] is = '|| LOC_STRING_ARRAY['ENTITLEMENT_INFO'] ) l_dummy = ess_log_write( 'MAT_Entitlement >> LOC_NUMBER_ARRAY[AWE_CALCULATED] is = '|| to_char(LOC_NUMBER_ARRAY['AWE_CALCULATED']) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UK Maternity Custom",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF IS 'DEFAULTPAYROLL' INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc l_rel_asg_date_start = PER_ASG_REL_DATE_START l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_awe_eff_date = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_start_date) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=l_complete_qweek) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_56_days_prior_date) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_end_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_rel_period_start_for_awe_calc) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) l_awe_eff_date = l_relevant_period_end_date_mod ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_awe_eff_date) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/4) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) ) ) ) ) l_calculated_awe = l_awe IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_length_of_service < 25 ) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Leave Block Less Than 7 Days')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Leave Block Less Than 7 Days' CERT_COMMENTS[l_cert_index] = 'The block of leave is for less than seven days' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_asg_count = 1 if ( l_asg_count > 1 ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MULTI_ASSIGNMENT' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Absence has multiple assignments')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Absence has multiple assignments' CERT_COMMENTS[l_cert_index] = 'The absence has multiple assignments associated with it and cannot be processed.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_band1end_date =add_days(l_start_date,272) l_band2end_date =add_days(l_band1end_date,91) l_entl_info = to_char(band1entitlement)||':'|| to_char(band1payfactor)||':'||to_char(l_band1end_date,'YYYY/MM/DD')||'#'|| to_char(band2entitlement) ||':'|| to_char(band2payfactor) ||':'||to_char(l_band2end_date,'YYYY/MM/DD') LOC_STRING_ARRAY['ENTITLEMENT_INFO']=l_entl_info LOC_NUMBER_ARRAY['AWE_CALCULATED']=l_calculated_awe l_dummy = ess_log_write( 'MAT_Entitlement >> LOC_STRING_ARRAY[ENTITLEMENT_INFO] is = '|| LOC_STRING_ARRAY['ENTITLEMENT_INFO'] ) l_dummy = ess_log_write( 'MAT_Entitlement >> LOC_NUMBER_ARRAY[AWE_CALCULATED] is = '|| to_char(LOC_NUMBER_ARRAY['AWE_CALCULATED']) ) RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UK SSP CUSTOM",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_DOR_DOCUMENT_CODE is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_CODE is 'X' DEFAULT FOR PER_PER_DOR_DOCUMENT_TYPE_ID is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_ID is 0 DEFAULT FOR PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME is 'X' DEFAULT FOR PER_PER_DOR_DATE_FROM is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_FROM is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PER_DOR_DATE_TO is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for PER_PER_DOR_DATE_TO is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) lel_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) lel_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='N' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' link_letter_cert_begin_date = '4712-12-31T00:00:00.000Z' (DATE) link_letter_cert_end_date = '4712-12-31T00:00:00.000Z' (DATE) link_letter_state=0 if l_linked_absences_exist=0 then ( ni=PER_PER_DOR_DOCUMENT_CODE.FIRST(-1) if PER_PER_DOR_DOCUMENT_CODE.exists(ni) then ( link_letter_state=90 l_found=0 while (PER_PER_DOR_DOCUMENT_CODE.exists(ni) and l_found=0) loop ( l_dor_document_code=PER_PER_DOR_DOCUMENT_CODE[ni] l_dor_document_type_id=PER_PER_DOR_DOCUMENT_TYPE_ID[ni] l_dor_system_doc_type=PER_PER_DOR_SYSTEM_DOCUMENT_TYPE_NAME[ni] l_dor_date_from=PER_PER_DOR_DATE_FROM[ni] l_dor_date_to=PER_PER_DOR_DATE_TO[ni] if 'ORA_HRX_GB_JC_LINK_LETTER'=l_dor_system_doc_type then ( link_letter_state=91 if l_start_date >= l_dor_date_from and l_start_date <= l_dor_date_to then ( link_letter_state=92 l_found=1 link_letter_cert_flag = 'Y' link_letter_cert_begin_date = l_start_date link_letter_cert_end_date = l_end_date ) else ( link_letter_state=91 ) ) ni=PER_PER_DOR_DOCUMENT_CODE.NEXT(ni,-1) ) ) else ( link_letter_state=0 ) ) else ( link_letter_state=99 ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' l_altawe_cert='N' l_awe=0 l_lel=0 l_absence_type = 'ORA_HRX_GB_SS' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_rel_asg_date_start=PER_ASG_REL_DATE_START l_rel_date_start=PER_REL_DATE_START IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = '4712/12/31 00:00:00' (date) ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_pay_rel_date_start = GET_PLSD_FSED if (do_lel_check=1) then ( l_lel = 0 l_ret_bal = 0 l_awe = 0 l_bal_periodicity = 'UNK' l_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_char_lel='0' l_char_lel=GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF (l_license <> 'PAY') THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF (l_license = 'PAY') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_start_date)) ( l_date1 = ORA_HRX_GB_PAY_PERIOD_START l_reference_date = ADD_DAYS(l_date1,-1) ) l_relevant_period_end_date = l_reference_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) l_relevant_period_end_date_mod = add_days(l_relevant_period_end_date,1) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_relevant_period_end_date_mod) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) ) IF (l_ret_bal = 0) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', IV_START_DATE) SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) if (IV_END_DATE was not defaulted) THEN ( SET_INPUT ('IV_ABS_END_DATE', IV_END_DATE) ) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) l_altawe_cert = 'Y' ) ELSE ( l_insuff_info_cert = 'Y' ) ) ) ELSE ( IF l_seniority_date < l_rel_date_start THEN ( l_rel_date_start = l_seniority_date ) IF l_rel_date_start > l_relevant_period_end_date THEN ( l_insuff_info_cert = 'Y' ) ELSE IF (l_rel_date_start > l_relevant_period_start_date) THEN ( IF l_pay_rel_date_start < l_rel_date_start THEN ( l_insuff_info_cert = 'Y' ) ELSE ( l_service_days = DAYS_BETWEEN(l_relevant_period_end_date,l_rel_date_start)+1 l_service_weeks = l_service_days/7 l_service_weeks_floor = FLOOR(l_service_weeks) IF l_service_weeks = 0 THEN ( l_insuff_info_cert = 'Y' ) ELSE ( IF (l_service_weeks_floor = l_service_weeks) THEN ( l_awe = l_ret_bal/l_service_weeks ) ELSE ( l_awe = (l_ret_bal/l_service_days)*7 ) ) ) ) ELSE ( if (l_src_periodicity = 'YEAR') then( l_awe_factor = 1/52 ) else if (l_src_periodicity = 'SEMI-YEAR') then( l_awe_factor = 2/52 ) else if (l_src_periodicity = 'QUARTER') then( l_awe_factor = 4/52 ) else if (l_src_periodicity = 'WEEK') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'BI-WEEK') then( l_awe_factor = 1/4 ) else if (l_src_periodicity = 'LUNAR MONTH') then( l_awe_factor = 1/8 ) else if (l_src_periodicity = 'CALENDAR MONTH') then( l_awe_factor = 6/52 ) else if (l_src_periodicity = 'BI-MONTH') then( l_awe_factor = 6/52 ) l_awe = (l_ret_bal * l_awe_factor) ) ) ) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) IF (l_awe >= l_lel) THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') then( lel_cert_flag='Y' lel_cert_begin_date=l_start_date lel_cert_end_date=l_end_date ) if (l_insuff_info_cert='Y') then (lel_cert_flag='N') ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) row_dbg=to_char(row_rev_start_dt)||' / '||to_char(row_rev_end_dt) row_dbg=row_dbg||' / '||row_altcd row_dbg=row_dbg||' / '||row_update_type row_dbg=row_dbg||' / '||row_cert_status row_dbg=row_dbg||' / '||row_class_cd row_dbg=row_dbg||' / '||row_per_cert_id_str if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_lim",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Maternity Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_ATTRIBUTE2 is 'X' DEFAULT for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' INPUTS ARE IV_START_DATE, IV_EXPECTEDCHILDBIRTHDATE CUSTOM_MESSAGE = ESS_LOG_WRITE('**********************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* OCCUPATIONAL MATERNITY ENTITLEMENT *') CUSTOM_MESSAGE = ESS_LOG_WRITE('**********************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') SERVICE_DAYS=0 YEAR_OF_SERVICE = 0 CUSTOM_MESSAGE = 'X' SCHEME_TYPE = 'X' RETURN_TO_WORK_FLAG = 'X' OMP_WEEKS = 'X' START_DATE ='0001/01/01 00:00:00' (DATE) EFF_DATE = '0001/01/01 00:00:00' (DATE) CONTINOUS_START_DATE = '0001/01/01 00:00:00' (DATE) HR_ASG_ID = ASG_HR_ASG_ID START_DATE = ACP_HIRE_DATE CONTRACT_TYPE = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME HIRE_DATE = PER_REL_ORIGINAL_DATE_OF_HIRE CONTINOUS_START_DATE = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE OMP_WEEKS = ANC_ABS_ENTRS_ATTRIBUTE1 EXPECTED_CHILD_BIRTH_DATE = IV_EXPECTEDCHILDBIRTHDATE EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) IF (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( START_DATE = CONTINOUS_START_DATE ) ELSE ( START_DATE = ACP_HIRE_DATE ) RETURN_TO_WORK_FLAG = GET_VALUE_SET('SCC_WILL_NOT_RETURN_TO_WORK','|=P_ASSIGNMENT_ID=' || TO_CHAR(HR_ASG_ID)) CUSTOM_MESSAGE = ESS_LOG_WRITE('RETURN TO WORK FLAG BEFORE CHANGING THE FLAG VALUE = ' || (RETURN_TO_WORK_FLAG)) IF(RETURN_TO_WORK_FLAG = 'Y') THEN ( RETURN_TO_WORK_FLAG = 'N' ) ELSE ( RETURN_TO_WORK_FLAG = 'Y' ) CUSTOM_MESSAGE = ESS_LOG_WRITE('RETURN TO WORK FLAG AFTER CHANGING THE FLAG VALUE = ' || (RETURN_TO_WORK_FLAG)) IF((CONTRACT_TYPE = 'Teachers') OR (CONTRACT_TYPE = 'Teachers: EOTAS') OR (CONTRACT_TYPE = 'NHS')) THEN ( IV_START_DATE = ADD_DAYS(EXPECTED_CHILD_BIRTH_DATE, -77) ) SCHEME_TYPE = GET_TABLE_VALUE('SCC_MATERNITY_SCHEME_TYPE','PENSION_SCHEME',CONTRACT_TYPE,EFF_DATE) SERVICE_DAYS = DAYS_BETWEEN(IV_START_DATE,START_DATE) YEAR_OF_SERVICE = SERVICE_DAYS/365 BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 IF (SCHEME_TYPE = 'Coroners Staff') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 0.76 AND YEAR_OF_SERVICE < 1.18) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) else IF (YEAR_OF_SERVICE >= 1.18) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 0.76) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) ) ) else IF (SCHEME_TYPE = 'LG Standard') then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OMP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OMP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) else IF (SCHEME_TYPE = 'LG Standard ESC') then ( IF (YEAR_OF_SERVICE >= 0.98) then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OMP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OMP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) ) else IF (SCHEME_TYPE = 'Teachers') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 ) ) ) else IF (SCHEME_TYPE = 'NHS') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 ) ) ) else IF (SCHEME_TYPE = 'BMSDC General') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OMP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OMP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) ) ) else IF (SCHEME_TYPE = 'Unison') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OMP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 18.18 BAND2ENTITLEMENT = 231 ) ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) ) ) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTRACT TYPE = ' || (CONTRACT_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SCHEME TYPE = ' || (SCHEME_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('OMP WEEKS = ' || (OMP_WEEKS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('START DATE = ' || TO_CHAR(START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('IV START DATE = ' || TO_CHAR(IV_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTINUOUS SERVICE DATE = ' || TO_CHAR(CONTINOUS_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SERVICE DAYS = ' || TO_CHAR(SERVICE_DAYS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('YEARS OF SERVICE = ' || TO_CHAR(YEAR_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('EXPECTED CHILD BIRTH DATE = ' || TO_CHAR(EXPECTED_CHILD_BIRTH_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Maternity Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_ATTRIBUTE2 is 'X' DEFAULT for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' DEFAULT for ANC_ABS_MTRNT_INTEND_TO_WORK is 'X' INPUTS ARE IV_START_DATE, IV_EXPECTEDCHILDBIRTHDATE CUSTOM_MESSAGE = ESS_LOG_WRITE('**********************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* OCCUPATIONAL MATERNITY ENTITLEMENT *') CUSTOM_MESSAGE = ESS_LOG_WRITE('**********************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') SERVICE_DAYS=0 YEAR_OF_SERVICE = 0 CUSTOM_MESSAGE = 'X' SCHEME_TYPE = 'X' RETURN_TO_WORK_FLAG = 'X' OMP_WEEKS = 'X' START_DATE ='0001/01/01 00:00:00' (DATE) EFF_DATE = '0001/01/01 00:00:00' (DATE) CONTINOUS_START_DATE = '0001/01/01 00:00:00' (DATE) HR_ASG_ID = ASG_HR_ASG_ID START_DATE = ACP_HIRE_DATE CONTRACT_TYPE = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME HIRE_DATE = PER_REL_ORIGINAL_DATE_OF_HIRE CONTINOUS_START_DATE = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE OMP_WEEKS = ANC_ABS_ENTRS_ATTRIBUTE1 EXPECTED_CHILD_BIRTH_DATE = IV_EXPECTEDCHILDBIRTHDATE EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) IF (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( START_DATE = CONTINOUS_START_DATE ) ELSE ( START_DATE = ACP_HIRE_DATE ) RETURN_TO_WORK_FLAG = GET_VALUE_SET('SCC_WILL_NOT_RETURN_TO_WORK','|=P_ASSIGNMENT_ID=' || TO_CHAR(HR_ASG_ID)) RETURN_TO_WORK_FLAG = ANC_ABS_MTRNT_INTEND_TO_WORK l_debug = ess_log_write('[OCCUPATIONAL_MATERNITY_ENTITLEMENT ]= RETURN_TO_WORK_FLAG : '+ (RETURN_TO_WORK_FLAG)) CUSTOM_MESSAGE = ESS_LOG_WRITE('RETURN TO WORK FLAG BEFORE CHANGING THE FLAG VALUE = ' || (RETURN_TO_WORK_FLAG)) CUSTOM_MESSAGE = ESS_LOG_WRITE('RETURN TO WORK FLAG AFTER CHANGING THE FLAG VALUE = ' || (RETURN_TO_WORK_FLAG)) IF((CONTRACT_TYPE = 'Teachers') OR (CONTRACT_TYPE = 'Teachers: EOTAS') OR (CONTRACT_TYPE = 'NHS')) THEN ( IV_START_DATE = ADD_DAYS(EXPECTED_CHILD_BIRTH_DATE, -77) ) SCHEME_TYPE = GET_TABLE_VALUE('SCC_MATERNITY_SCHEME_TYPE','PENSION_SCHEME',CONTRACT_TYPE,EFF_DATE) SERVICE_DAYS = DAYS_BETWEEN(IV_START_DATE,START_DATE) YEAR_OF_SERVICE = SERVICE_DAYS/365 BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 IF (SCHEME_TYPE = 'Coroners Staff') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 0.76 AND YEAR_OF_SERVICE < 1.18) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) else IF (YEAR_OF_SERVICE >= 1.18) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 0.76) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) ) ) else IF (SCHEME_TYPE = 'LG Standard') then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OMP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OMP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) else IF (SCHEME_TYPE = 'LG Standard ESC') then ( IF (YEAR_OF_SERVICE >= 0.98) then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OMP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OMP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) ) else IF (SCHEME_TYPE = 'Teachers') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 ) ) ) else IF (SCHEME_TYPE = 'NHS') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 ) ) ) else IF (SCHEME_TYPE = 'BMSDC General') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OMP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OMP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) ) ) else IF (SCHEME_TYPE = 'Unison') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OMP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 18.18 BAND2ENTITLEMENT = 231 ) ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) ) ) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTRACT TYPE = ' || (CONTRACT_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SCHEME TYPE = ' || (SCHEME_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('OMP WEEKS = ' || (OMP_WEEKS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('START DATE = ' || TO_CHAR(START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('IV START DATE = ' || TO_CHAR(IV_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTINUOUS SERVICE DATE = ' || TO_CHAR(CONTINOUS_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SERVICE DAYS = ' || TO_CHAR(SERVICE_DAYS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('YEARS OF SERVICE = ' || TO_CHAR(YEAR_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('EXPECTED CHILD BIRTH DATE = ' || TO_CHAR(EXPECTED_CHILD_BIRTH_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Adoption Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_ATTRIBUTE2 is 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' DEFAULT for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' INPUTS ARE IV_START_DATE, IV_EXPECTEDCHILDBIRTHDATE CUSTOM_MESSAGE = ESS_LOG_WRITE('**********************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* OCCUPATIONAL ADOPTION ENTITLEMENT *') CUSTOM_MESSAGE = ESS_LOG_WRITE('**********************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') SERVICE_DAYS=0 YEAR_OF_SERVICE = 0 CUSTOM_MESSAGE = 'X' SCHEME_TYPE = 'X' RETURN_TO_WORK_FLAG = 'X' OAP_WEEKS = 'X' START_DATE ='0001/01/01 00:00:00' (DATE) EFF_DATE = '0001/01/01 00:00:00' (DATE) CONTINOUS_START_DATE = '0001/01/01 00:00:00' (DATE) HR_ASG_ID = ASG_HR_ASG_ID START_DATE = ACP_HIRE_DATE CONTRACT_TYPE = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME HIRE_DATE = PER_REL_ORIGINAL_DATE_OF_HIRE CONTINOUS_START_DATE = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE EXPECTED_CHILD_BIRTH_DATE = IV_EXPECTEDCHILDBIRTHDATE EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) IF (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( START_DATE = CONTINOUS_START_DATE ) ELSE ( START_DATE = ACP_HIRE_DATE ) RETURN_TO_WORK_FLAG = GET_VALUE_SET('SCC_WILL_NOT_RETURN_TO_WORK','|=P_ASSIGNMENT_ID=' || TO_CHAR(HR_ASG_ID)) OAP_WEEKS = GET_VALUE_SET('SCC_OAP_WEEKS','|=P_ASSIGNMENT_ID=' || to_char(HR_ASG_ID)) CUSTOM_MESSAGE = ESS_LOG_WRITE('OAP WEEKS = ' || (OAP_WEEKS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('RETURN TO WORK FLAG BEFORE CHANGING THE FLAG VALUE = ' || (RETURN_TO_WORK_FLAG)) IF(RETURN_TO_WORK_FLAG = 'Y') THEN ( RETURN_TO_WORK_FLAG = 'N' ) ELSE ( RETURN_TO_WORK_FLAG = 'Y' ) CUSTOM_MESSAGE = ESS_LOG_WRITE('RETURN TO WORK FLAG AFTER CHANGING THE FLAG VALUE = ' || (RETURN_TO_WORK_FLAG)) IF((CONTRACT_TYPE = 'Teachers') OR (CONTRACT_TYPE = 'Teachers: EOTAS') OR (CONTRACT_TYPE = 'NHS')) THEN ( IV_START_DATE = ADD_DAYS(EXPECTED_CHILD_BIRTH_DATE, -77) ) SCHEME_TYPE = GET_TABLE_VALUE('SCC_ADOPTION_SCHEME_TYPE','PENSION_SCHEME',CONTRACT_TYPE,EFF_DATE) SERVICE_DAYS = DAYS_BETWEEN(IV_START_DATE,START_DATE) YEAR_OF_SERVICE = SERVICE_DAYS/365 BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 IF (SCHEME_TYPE = 'Coroners Staff') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 0.76 AND YEAR_OF_SERVICE < 1.18) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) else IF (YEAR_OF_SERVICE >= 1.18) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 0.76) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) ) ) else IF (SCHEME_TYPE = 'LG Standard') then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OAP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OAP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) else IF (SCHEME_TYPE = 'LG Standard ESC') then ( IF (YEAR_OF_SERVICE >= 0.98) then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OAP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OAP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) ) else IF (SCHEME_TYPE = 'Teachers') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 ) ) ) else IF (SCHEME_TYPE = 'NHS') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 ) ) ) else IF (SCHEME_TYPE = 'BMSDC General') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 28 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 63 ) ) ) else IF (SCHEME_TYPE = 'Unison') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 0.98) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 28 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 63 ) ) ) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTRACT TYPE = ' || (CONTRACT_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SCHEME TYPE = ' || (SCHEME_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('OAP WEEKS = ' || (OAP_WEEKS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('START DATE = ' || TO_CHAR(START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('IV START DATE = ' || TO_CHAR(IV_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTINUOUS SERVICE DATE = ' || TO_CHAR(CONTINOUS_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SERVICE DAYS = ' || TO_CHAR(SERVICE_DAYS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('YEARS OF SERVICE = ' || TO_CHAR(YEAR_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('EXPECTED CHILD BIRTH DATE = ' || TO_CHAR(EXPECTED_CHILD_BIRTH_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Adoption Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_ATTRIBUTE2 is 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE1 is 'X' DEFAULT for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' DEFAULT for ANC_ABS_MTRNT_INTEND_TO_WORK is 'X' INPUTS ARE IV_START_DATE, IV_EXPECTEDCHILDBIRTHDATE CUSTOM_MESSAGE = ESS_LOG_WRITE('**********************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* OCCUPATIONAL ADOPTION ENTITLEMENT *') CUSTOM_MESSAGE = ESS_LOG_WRITE('**********************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') SERVICE_DAYS=0 YEAR_OF_SERVICE = 0 CUSTOM_MESSAGE = 'X' SCHEME_TYPE = 'X' RETURN_TO_WORK_FLAG = 'X' OAP_WEEKS = 'X' START_DATE ='0001/01/01 00:00:00' (DATE) EFF_DATE = '0001/01/01 00:00:00' (DATE) CONTINOUS_START_DATE = '0001/01/01 00:00:00' (DATE) HR_ASG_ID = ASG_HR_ASG_ID START_DATE = ACP_HIRE_DATE CONTRACT_TYPE = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME HIRE_DATE = PER_REL_ORIGINAL_DATE_OF_HIRE CONTINOUS_START_DATE = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE EXPECTED_CHILD_BIRTH_DATE = IV_EXPECTEDCHILDBIRTHDATE EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) IF (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( START_DATE = CONTINOUS_START_DATE ) ELSE ( START_DATE = ACP_HIRE_DATE ) RETURN_TO_WORK_FLAG = GET_VALUE_SET('SCC_WILL_NOT_RETURN_TO_WORK','|=P_ASSIGNMENT_ID=' || TO_CHAR(HR_ASG_ID)) RETURN_TO_WORK_FLAG = ANC_ABS_MTRNT_INTEND_TO_WORK l_debug = ess_log_write('[OCCUPATIONAL_ADOPTION_ENTITLEMENT ]= RETURN_TO_WORK_FLAG : '+ (RETURN_TO_WORK_FLAG)) OAP_WEEKS = GET_VALUE_SET('SCC_OAP_WEEKS','|=P_ASSIGNMENT_ID=' || to_char(HR_ASG_ID)) CUSTOM_MESSAGE = ESS_LOG_WRITE('OAP WEEKS = ' || (OAP_WEEKS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('RETURN TO WORK FLAG BEFORE CHANGING THE FLAG VALUE = ' || (RETURN_TO_WORK_FLAG)) CUSTOM_MESSAGE = ESS_LOG_WRITE('RETURN TO WORK FLAG AFTER CHANGING THE FLAG VALUE = ' || (RETURN_TO_WORK_FLAG)) IF((CONTRACT_TYPE = 'Teachers') OR (CONTRACT_TYPE = 'Teachers: EOTAS') OR (CONTRACT_TYPE = 'NHS')) THEN ( IV_START_DATE = ADD_DAYS(EXPECTED_CHILD_BIRTH_DATE, -77) ) SCHEME_TYPE = GET_TABLE_VALUE('SCC_ADOPTION_SCHEME_TYPE','PENSION_SCHEME',CONTRACT_TYPE,EFF_DATE) SERVICE_DAYS = DAYS_BETWEEN(IV_START_DATE,START_DATE) YEAR_OF_SERVICE = SERVICE_DAYS/365 BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 IF (SCHEME_TYPE = 'Coroners Staff') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 0.76 AND YEAR_OF_SERVICE < 1.18) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) else IF (YEAR_OF_SERVICE >= 1.18) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 0.76) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 ) ) ) else IF (SCHEME_TYPE = 'LG Standard') then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OAP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OAP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) else IF (SCHEME_TYPE = 'LG Standard ESC') then ( IF (YEAR_OF_SERVICE >= 0.98) then ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 IF (OAP_WEEKS = '12') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 ) else IF (OAP_WEEKS = '33') THEN ( BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 231 ) ) ) else IF (SCHEME_TYPE = 'Teachers') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 ) ) ) else IF (SCHEME_TYPE = 'NHS') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 ) ) ) else IF (SCHEME_TYPE = 'BMSDC General') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 28 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 63 ) ) ) else IF (SCHEME_TYPE = 'Unison') THEN ( IF (RETURN_TO_WORK_FLAG = 'N') THEN ( IF (YEAR_OF_SERVICE >= 0.98) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 28 ) ) ELSE ( IF (YEAR_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 63 ) ) ) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTRACT TYPE = ' || (CONTRACT_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SCHEME TYPE = ' || (SCHEME_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('OAP WEEKS = ' || (OAP_WEEKS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('START DATE = ' || TO_CHAR(START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('IV START DATE = ' || TO_CHAR(IV_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTINUOUS SERVICE DATE = ' || TO_CHAR(CONTINOUS_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SERVICE DAYS = ' || TO_CHAR(SERVICE_DAYS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('YEARS OF SERVICE = ' || TO_CHAR(YEAR_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('EXPECTED CHILD BIRTH DATE = ' || TO_CHAR(EXPECTED_CHILD_BIRTH_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Paternity Birth",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_ATTRIBUTE2 is 'X' DEFAULT for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' INPUTS ARE IV_START_DATE CUSTOM_MESSAGE = ESS_LOG_WRITE('****************************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* OCCUPATIONAL PATERNITY-BIRTH ENTITLEMENT *') CUSTOM_MESSAGE = ESS_LOG_WRITE('****************************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') SERVICE_DAYS = 0 START_DATE='0001/01/01 00:00:00' (date) EFF_DATE = '0001/01/01 00:00:00' (date) Continous_Start_Date = '0001/01/01 00:00:00' (date) l_hr_asg_id = ASG_HR_ASG_ID START_DATE= ACP_HIRE_DATE CONTRACT_TYPE = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME CONTINUOUS_START_DATE = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(DATE)) IF (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( START_DATE = CONTINUOUS_START_DATE ) ELSE ( START_DATE = ACP_HIRE_DATE ) SERVICE_DAYS = DAYS_BETWEEN(IV_START_DATE,START_DATE) YEARS_OF_SERVICE = SERVICE_DAYS / 365 WEEKS_OF_SERVICE = SERVICE_DAYS / 7 SCHEME_TYPE = GET_TABLE_VALUE('SCC_PATERNITY_BIRTH_SCHEME_TYPE', 'SCHEME', CONTRACT_TYPE, EFF_DATE) BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 if (SCHEME_TYPE = 'LG Standard' OR SCHEME_TYPE = 'Fire Standard') then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 7 ) else if (SCHEME_TYPE = 'LG Standard ESC') then ( IF (YEARS_OF_SERVICE >= 0.5) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 ) ) else IF (SCHEME_TYPE = 'NHS') THEN ( IF (YEARS_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 14 ) ) else IF (SCHEME_TYPE = 'BMSDC General') THEN ( IF (WEEKS_OF_SERVICE >= 27) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 ) ) else IF (SCHEME_TYPE = 'Unison') THEN ( IF (YEARS_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 ) ) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTRACT TYPE = ' || (CONTRACT_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('START DATE = ' || TO_CHAR(START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTINUOUS SERVICE DATE = ' || TO_CHAR(CONTINUOUS_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SERVICE DAYS = ' || TO_CHAR(SERVICE_DAYS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('YEARS OF SERVICE = ' || TO_CHAR(YEARS_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('WEEKS OF SERVICE = ' || TO_CHAR(WEEKS_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Paternity Birth",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_ATTRIBUTE2 is 'X' DEFAULT for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' INPUTS ARE IV_START_DATE CUSTOM_MESSAGE = ESS_LOG_WRITE('****************************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* OCCUPATIONAL PATERNITY-BIRTH ENTITLEMENT *') CUSTOM_MESSAGE = ESS_LOG_WRITE('****************************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') SERVICE_DAYS = 0 START_DATE='0001/01/01 00:00:00' (date) EFF_DATE = '0001/01/01 00:00:00' (date) Continous_Start_Date = '0001/01/01 00:00:00' (date) l_hr_asg_id = ASG_HR_ASG_ID START_DATE= ACP_HIRE_DATE CONTRACT_TYPE = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME CONTINUOUS_START_DATE = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(DATE)) IF (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( START_DATE = CONTINUOUS_START_DATE ) ELSE ( START_DATE = ACP_HIRE_DATE ) SERVICE_DAYS = DAYS_BETWEEN(IV_START_DATE,START_DATE) YEARS_OF_SERVICE = SERVICE_DAYS / 365 WEEKS_OF_SERVICE = SERVICE_DAYS / 7 SCHEME_TYPE = GET_TABLE_VALUE('SCC_PATERNITY_BIRTH_SCHEME_TYPE', 'SCHEME', CONTRACT_TYPE, EFF_DATE) BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 if (SCHEME_TYPE = 'LG Standard' OR SCHEME_TYPE = 'Fire Standard') then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 7 ) else if (SCHEME_TYPE = 'LG Standard ESC') then ( IF (YEARS_OF_SERVICE >= 0.5) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 IF (IV_START_DATE >=TO_DATE('01/08/2024','DD/MM/YYYY')) THEN ( BAND1ENTITLEMENT = 14 ) ) ) else IF (SCHEME_TYPE = 'NHS') THEN ( IF (YEARS_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 14 ) ) else IF (SCHEME_TYPE = 'BMSDC General') THEN ( IF (WEEKS_OF_SERVICE >= 27) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 ) ) else IF (SCHEME_TYPE = 'Unison') THEN ( IF (YEARS_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 ) ) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTRACT TYPE = ' || (CONTRACT_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('START DATE = ' || TO_CHAR(START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTINUOUS SERVICE DATE = ' || TO_CHAR(CONTINUOUS_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SERVICE DAYS = ' || TO_CHAR(SERVICE_DAYS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('YEARS OF SERVICE = ' || TO_CHAR(YEARS_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('WEEKS OF SERVICE = ' || TO_CHAR(WEEKS_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Occupational Paternity Adoption Entitlement",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_ATTRIBUTE2 is 'X' DEFAULT for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' INPUTS ARE IV_START_DATE CUSTOM_MESSAGE = ESS_LOG_WRITE('****************************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* OCCUPATIONAL PATERNITY-ADOPTION ENTITLEMENT *') CUSTOM_MESSAGE = ESS_LOG_WRITE('****************************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') SERVICE_DAYS = 0 START_DATE='0001/01/01 00:00:00' (date) EFF_DATE = '0001/01/01 00:00:00' (date) Continous_Start_Date = '0001/01/01 00:00:00' (date) START_DATE= ACP_HIRE_DATE CONTRACT_TYPE = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME CONTINUOUS_START_DATE = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(DATE)) IF (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( START_DATE = CONTINUOUS_START_DATE ) ELSE ( START_DATE = ACP_HIRE_DATE ) SERVICE_DAYS = DAYS_BETWEEN(IV_START_DATE,START_DATE) YEARS_OF_SERVICE = SERVICE_DAYS / 365 WEEKS_OF_SERVICE = SERVICE_DAYS / 7 SCHEME_TYPE = GET_TABLE_VALUE('SCC_PATERNITY_ADOPTION_SCHEME_TYPE', 'SCHEME', CONTRACT_TYPE, EFF_DATE) BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 if (SCHEME_TYPE = 'LG Standard') then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 7 ) else IF (SCHEME_TYPE = 'NHS') THEN ( IF (YEARS_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 14 ) ) else IF (SCHEME_TYPE = 'BMSDC General') THEN ( IF (WEEKS_OF_SERVICE >= 27) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 ) ) else IF (SCHEME_TYPE = 'Unison') THEN ( IF (YEARS_OF_SERVICE >= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 ) ) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTRACT TYPE = ' || (CONTRACT_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('START DATE = ' || TO_CHAR(START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTINUOUS SERVICE DATE = ' || TO_CHAR(CONTINUOUS_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SERVICE DAYS = ' || TO_CHAR(SERVICE_DAYS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('YEARS OF SERVICE = ' || TO_CHAR(YEARS_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('WEEKS OF SERVICE = ' || TO_CHAR(WEEKS_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SICKNESS_ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'X' INPUTS ARE IV_START_DATE Service_days = 0 Contract = 'X' SCHEME_TYPE = 'X' Continuous_service_date = '0001/01/01 00:00:00' (date) l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) Contract = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME Continuous_service_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_person_id = GET_CONTEXT(PERSON_ID,0) adj_service_start_date = Continuous_service_date Hire_date = ACP_HIRE_DATE l_start_dt = Hire_date if (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days = DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service = Service_days/365 SCHEME_TYPE = GET_TABLE_VALUE('SICKNESS_SCHEME_TYPE', 'SICKNESS_SCHEME', contract, l_eff_date) if (SCHEME_TYPE = 'LG Standard') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'LG Standard ESC') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Teachers') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 99 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Coroners Staff') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 30 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 30 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 153 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 153 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 183 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Fire Standard') then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else if (SCHEME_TYPE = 'NHS') then ( IF (Year_of_service <= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 183 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Freeport East') then ( IF Year_of_service < 0.5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service >= 0.5 AND Year_of_service <= 1 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'East Suffolk Services Ltd') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF (Year_of_service > 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 26 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'ESSL Legacy Norse') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF (Year_of_service > 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 26 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('adj_service_start_date = ' || TO_CHAR(adj_service_start_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Hire_date = ' || TO_CHAR(Hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Service_days of the Employee = ' || TO_CHAR(Service_days)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Year_of_service = ' || TO_CHAR(Year_of_service)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('SCHEME_TYPE = ' || (SCHEME_TYPE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Continuous_service_date = ' || TO_CHAR(Continuous_service_date)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SICKNESS_ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'X' INPUTS ARE IV_START_DATE Service_days = 0 Contract = 'X' SCHEME_TYPE = 'X' Continuous_service_date= '0001/01/01 00:00:00' (date) l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) Contract = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME Continuous_service_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_person_id = GET_CONTEXT(PERSON_ID,0) adj_service_start_date = Continuous_service_date Hire_date = ACP_HIRE_DATE l_start_dt = Hire_date if (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days = DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service = Service_days/365 SCHEME_TYPE = GET_TABLE_VALUE('SICKNESS_SCHEME_TYPE', 'SICKNESS_SCHEME', contract, l_eff_date) if (SCHEME_TYPE = 'LG Standard') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'LG Standard ESC') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Teachers') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 99 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Coroners Staff') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 30 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 30 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 153 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 153 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 183 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Fire Standard') then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else if (SCHEME_TYPE = 'NHS') then ( IF (Year_of_service <= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 183 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('adj_service_start_date = ' || TO_CHAR(adj_service_start_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Hire_date = ' || TO_CHAR(Hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Service_days of the Employee = ' || TO_CHAR(Service_days)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Year_of_service = ' || TO_CHAR(Year_of_service)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('SCHEME_TYPE = ' || (SCHEME_TYPE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Continuous_service_date = ' || TO_CHAR(Continuous_service_date)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SICKNESS_ENTITLEMENT",
        "answer": "DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE is '0001/01/01 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'X' INPUTS ARE IV_START_DATE Service_days = 0 Contract = 'X' SCHEME_TYPE = 'X' Continuous_service_date= '0001/01/01 00:00:00' (date) l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) Contract = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME Continuous_service_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_person_id = GET_CONTEXT(PERSON_ID,0) adj_service_start_date = Continuous_service_date Hire_date = ACP_HIRE_DATE l_start_dt = Hire_date if (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days = DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service = Service_days/365 SCHEME_TYPE = GET_TABLE_VALUE('SICKNESS_SCHEME_TYPE', 'SICKNESS_SCHEME', contract, l_eff_date) if (SCHEME_TYPE = 'LG Standard') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'LG Standard ESC') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Teachers') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 50 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 75 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 99 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 100 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Coroners Staff') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 30 BAND2PAYFACTOR=0 BAND2ENTITLEMENT = 999 ) IF ((Year_of_service > 0.32) AND (Year_of_service <= 1)) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 30 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 153 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 153 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 183 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Fire Standard') then ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 182 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else if (SCHEME_TYPE = 'NHS') then ( IF (Year_of_service <= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 31 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 1 AND Year_of_service <= 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 61 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 61 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 2 AND Year_of_service <= 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 122 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 122 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 3 AND Year_of_service <= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 152 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 152 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF Year_of_service > 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 183 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 183 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'Freeport East') then ( IF Year_of_service < 0.5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service >= 0.5 AND Year_of_service < 1 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service >= 1 AND Year_of_service < 2 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 52 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 52 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service >= 2 AND Year_of_service < 3 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 104 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 104 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service >= 3 AND Year_of_service < 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) else IF Year_of_service >= 5 THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 156 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 156 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'East Suffolk Services Ltd') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF (Year_of_service > 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 26 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) else if (SCHEME_TYPE = 'ESSL Legacy Norse') then ( IF (Year_of_service <= 0.32) THEN ( BAND1PAYFACTOR = 0 BAND1ENTITLEMENT = 999 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) IF (Year_of_service > 0.32) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 26 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 26 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('adj_service_start_date = ' || TO_CHAR(adj_service_start_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Hire_date = ' || TO_CHAR(Hire_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Service_days of the Employee = ' || TO_CHAR(Service_days)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Year_of_service = ' || TO_CHAR(Year_of_service)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('SCHEME_TYPE = ' || (SCHEME_TYPE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('Continuous_service_date = ' || TO_CHAR(Continuous_service_date)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "PATERNITY_LEAVE_ADDITIONAL_OCCUPATIONAL_ENTITLEMENT",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for PER_ASG_ATTRIBUTE2 is 'X' DEFAULT for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' INPUTS ARE IV_START_DATE CUSTOM_MESSAGE = ESS_LOG_WRITE('********************************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* PATERNITY_LEAVE_ADDITIONAL_OCCUPATIONAL_ENTITLEMENT *') CUSTOM_MESSAGE = ESS_LOG_WRITE('********************************************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') SERVICE_DAYS = 0 START_DATE='0001/01/01 00:00:00' (date) EFF_DATE = '0001/01/01 00:00:00' (date) Continous_Start_Date = '0001/01/01 00:00:00' (date) l_hr_asg_id = ASG_HR_ASG_ID START_DATE= ACP_HIRE_DATE CONTRACT_TYPE = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME CONTINUOUS_START_DATE = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(DATE)) IF (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( START_DATE = CONTINUOUS_START_DATE ) ELSE ( START_DATE = ACP_HIRE_DATE ) SERVICE_DAYS = DAYS_BETWEEN(IV_START_DATE,START_DATE) YEARS_OF_SERVICE = SERVICE_DAYS/365 SCHEME_TYPE = GET_TABLE_VALUE('SICKNESS_SCHEME_TYPE','SICKNESS_SCHEME',CONTRACT_TYPE,EFF_DATE) if (SCHEME_TYPE = 'LG Standard' OR SCHEME_TYPE = 'Fire Standard') then ( IF(YEARS_OF_SERVICE < 99) THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 999 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 999 ) ) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTRACT TYPE = ' || (CONTRACT_TYPE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('START DATE = ' || TO_CHAR(START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('CONTINUOUS SERVICE DATE = ' || TO_CHAR(CONTINUOUS_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('SERVICE DAYS = ' || TO_CHAR(SERVICE_DAYS)) CUSTOM_MESSAGE = ESS_LOG_WRITE('YEARS OF SERVICE = ' || TO_CHAR(YEARS_OF_SERVICE)) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Entitlement",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    }
]