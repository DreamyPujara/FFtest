[
    {
        "FORMULA_NAME": "FR Maternity Paternity Adoption Validation",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_1 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_2 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_3 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_4 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_5 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_6 IS 'UNKNOWN' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS 'UNKNOWN' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_1,IV_INFORMATION_2,IV_INFORMATION_3,IV_INFORMATION_4,IV_INFORMATION_5 ret = ess_log_write ( '-- Start of Entry validation------') lc_variable_to_be_logged = 'ANC_ABS_TYP_LEG_GROUPING_CD : '|| ANC_ABS_TYP_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) VALID = 'Y' IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_MATERNITY' ) THEN ( ret = ess_log_write ( '-- Start of Maternity------') l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_birth_date = IV_EXPECTEDCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE l_actual_start_date = IV_ACTUALSTARTDATE l_planned_start_date = IV_PLANNEDSTARTDATE l_day_additional = 0 IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE < IV_PLANNEDSTARTDATE ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_GEN' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE < IV_ACTUALSTARTDATE ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_GEN' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_birth_date = IV_EXPECTEDCHILDBIRTHDATE l_start_date = IV_PLANNEDSTARTDATE l_end_date =IV_PLANNEDENDDATE lc_variable_to_be_logged = 'PREMATURE : '|| IV_INFORMATION_3 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'premature days : '|| TO_CHAR(DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_ACTUALCHILDBIRTHDATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_INFORMATION_3 ='Y') THEN ( lc_variable_to_be_logged = 'l_day_additonal : '|| TO_CHAR(DAYS_BETWEEN(IV_PLANNEDSTARTDATE,IV_ACTUALCHILDBIRTHDATE )) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( IF DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_ACTUALCHILDBIRTHDATE ) > 0 THEN ( IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01' AND IV_INFORMATION_2 = 'Y') THEN l_min_duration = (16*7) ELSE IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01' AND IV_INFORMATION_2 = 'N') THEN l_min_duration = (26*7) ELSE IF (IV_INFORMATION_1 = 'ORA_HRX_FR_03') THEN l_min_duration = (34*7) ELSE l_min_duration = (46*7) IF (IV_INFORMATION_4 = 'Y') THEN l_min_duration = l_min_duration + (2*7) IF (IV_INFORMATION_5 = 'Y') THEN l_min_duration = l_min_duration + (4*7) l_actual_duration = DAYS_BETWEEN(IV_ACTUALENDDATE,IV_ACTUALSTARTDATE) + 1 lc_variable_to_be_logged = 'l_min_additonal : '|| TO_CHAR(l_min_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'current duration : '|| TO_CHAR(l_actual_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_ACTUALCHILDBIRTHDATE ) > 42 THEN ( l_day_additional = DAYS_BETWEEN(IV_PLANNEDSTARTDATE,IV_ACTUALCHILDBIRTHDATE ) l_min_duration = l_min_duration + l_day_additional IF( l_actual_duration < l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE2' lc_variable_to_be_logged = 'In case of high premature (actual birth date more than 6 weeks before the expected birth data), min duration is ' || TO_CHAR(l_min_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF( l_actual_duration > l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' lc_variable_to_be_logged = 'The total leave duration exceeds the entitlement ' || TO_CHAR(l_min_duration/7) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF( l_actual_duration < l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE5' lc_variable_to_be_logged = 'The delivery date is earlier than expected childbirth. the total duration must remains the same duration is ' || TO_CHAR(l_actual_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF( l_actual_duration > l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' lc_variable_to_be_logged = 'The delivery date is earlier than expected childbirth. the total duration must remains the same duration is ' || TO_CHAR(l_actual_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( IF DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_ACTUALCHILDBIRTHDATE ) < 0 THEN ( IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01' AND IV_INFORMATION_2 = 'Y') THEN l_min_duration = (16*7) ELSE IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01' AND IV_INFORMATION_2 = 'N') THEN l_min_duration = (26*7) ELSE IF (IV_INFORMATION_1 = 'ORA_HRX_FR_03') THEN l_min_duration = (34*7) ELSE l_min_duration = (46*7) IF (IV_INFORMATION_4 = 'Y') THEN l_min_duration = l_min_duration + (2*7) IF (IV_INFORMATION_5 = 'Y') THEN l_min_duration = l_min_duration + (4*7) l_day_additional = DAYS_BETWEEN(IV_ACTUALCHILDBIRTHDATE,IV_EXPECTEDCHILDBIRTHDATE ) l_min_duration = l_min_duration + l_day_additional l_actual_duration = DAYS_BETWEEN(IV_ACTUALENDDATE,IV_ACTUALSTARTDATE) + 1 lc_variable_to_be_logged = 'l_min_additonal : '|| TO_CHAR(l_min_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'current duration : '|| TO_CHAR(l_actual_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF( l_actual_duration < l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE6' lc_variable_to_be_logged = 'Delivery date is later than expected birth. The maternity leave increases by number of days between actual and expected birth date, min duration is ' || TO_CHAR(l_min_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF( l_actual_duration > l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' lc_variable_to_be_logged = 'The total leave duration exceeds the entitlement ' || TO_CHAR(l_min_duration/7) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_birth_date = IV_ACTUALCHILDBIRTHDATE l_start_date = IV_ACTUALSTARTDATE l_end_date =IV_ACTUALENDDATE ) l_start_date_min = ADD_DAYS(l_birth_date,-14) l_end_date_min = ADD_DAYS(l_birth_date,41) IF(l_end_date < l_end_date_min ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE3' lc_variable_to_be_logged = 'The end date cannot be less than 6 weeks after the birth date, end date mini = ' || TO_CHAR(l_end_date_min) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) IF(l_start_date > l_start_date_min AND IV_INFORMATION_3 ='N') THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE1' lc_variable_to_be_logged = 'The start date must be at least 2 weeks before the birth date , start date mini ' || TO_CHAR(l_start_date_min) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) IF (IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED) THEN (l_weeks= DAYS_BETWEEN(IV_ACTUALCHILDBIRTHDATE ,IV_ACTUALSTARTDATE)) ELSE (l_weeks = DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_PLANNEDSTARTDATE)) l_ant_natal = (l_weeks/7) l_post_natal = IV_TOTALDURATION - l_ant_natal IF (IV_INFORMATION_4 = 'Y') THEN ( IF (l_ant_natal >= 2 ) THEN (l_ant_natal = l_ant_natal - 2 l_ant_patho = 2) ELSE (VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' ret = ess_log_write ( 'Since there is complication but antenatal is less than 2 weeks, The total leave duration is less than the entitlement') RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE (l_ant_patho = 0) IF (IV_INFORMATION_5 = 'Y') THEN ( IF (l_post_natal >= 4) THEN (l_post_natal = l_post_natal - 4 l_post_patho = 4) ELSE (VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' ret = ess_log_write ( 'Since there is complication but post natal is less than 4 weeks, The total leave duration is less than the entitlement') RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE (l_post_patho = 0) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(l_ant_natal) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(l_post_natal) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' Less than 2 children : '|| IV_INFORMATION_2 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' MUltiple Bith : '|| IV_INFORMATION_1 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' an te natal leave: '|| TO_CHAR(l_ant_natal) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' post natal leave: '|| TO_CHAR(l_post_natal) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' ant patho leave: '|| TO_CHAR(l_ant_patho) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' post patho leave: '|| TO_CHAR(l_post_patho) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) if (IV_INFORMATION_3 ='N') THEN (IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01') THEN ( IF (IV_INFORMATION_2 = 'Y') THEN ( IF (l_ant_natal < 6 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_4' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_ant_natal > 6 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_3' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (l_post_natal < 10 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_6' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_post_natal > 10)THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_5' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF (l_ant_natal < 8 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_4' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF ((l_ant_natal > 8) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_3' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF ( l_post_natal < 18 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_6' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_post_natal > 18 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_5' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ELSE ( IF (IV_INFORMATION_1 = 'ORA_HRX_FR_03') THEN ( IF (l_ant_natal < 12 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_4' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_ant_natal > 12 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_3' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (l_post_natal < 22 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_6' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_post_natal > 22 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_5' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF (l_ant_natal < 24 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_4' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_ant_natal > 24 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_3' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (l_post_natal < 22 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_6' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF ((l_post_natal > 22) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_5' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ) ELSE ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADOPT' ) THEN ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE < add_days(IV_EXPECTEDCHILDBIRTHDATE,-7) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE9' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE < ADD_DAYS(IV_ACTUALCHILDBIRTHDATE,-7) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE9' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) lc_variable_to_be_logged = ' Less than 2 children : '|| IV_INFORMATION_2 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' MUltiple Bith : '|| IV_INFORMATION_1 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'The total leave duration ' || TO_CHAR( IV_TOTALDURATION) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_INFORMATION_1 = 'N') THEN ( IF (IV_INFORMATION_2 = 'Y') THEN ( IF ( IV_TOTALDURATION < 16 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_TOTALDURATION > 16 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF (IV_TOTALDURATION < 18 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF ((IV_TOTALDURATION > 18) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ELSE ( IF (IV_INFORMATION_1 = 'Y') THEN ( IF (IV_TOTALDURATION < 22 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_TOTALDURATION > 22 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ELSE ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_PATERNITY' ) THEN ( IF (IV_TOTALDURATION < 4) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_7' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_INFORMATION_1 = 'ORA_HRX_FR_03' OR IV_INFORMATION_1 = 'ORA_HRX_FR_02') THEN ( IF (IV_TOTALDURATION < 32 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_TOTALDURATION > 32 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF (IV_TOTALDURATION < 25 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_TOTALDURATION > 25 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ELSE ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ANT_PAT' ) THEN ( IF (IV_TOTALDURATION > 14 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE7' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_POST_PAT' ) THEN ( IF (IV_TOTALDURATION > 28 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE8' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ) IF (PER_ASG_DATE_PROBATION_END was NOT DEFAULTED ) THEN ( ret = ess_log_write ( '-- Start of CHECK PROBATION PERIOD------') lc_variable_to_be_logged = 'probation end date : '|| TO_CHAR(trunc(PER_ASG_DATE_PROBATION_END)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'start date absence: '|| TO_CHAR(trunc(IV_START_DATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'probation end date : '|| TO_CHAR(trunc(IV_END_DATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_END_DATE was NOT DEFAULTED) THEN ( IF( IV_START_DATE was NOT DEFAULTED) THEN ( IF ( trunc(IV_END_DATE) <= trunc(PER_ASG_DATE_PROBATION_END) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_PROB_PER' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF ( trunc(IV_START_DATE) <= trunc(PER_ASG_DATE_PROBATION_END) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_PROB_PER' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) return VALID",
        "question": "The formula calculates the entitlement for UK Statutory Sick Pay (SSP) based on several factors. Here's the detailed calculation logic:  Partial Days and Shift Type: The formula first determines if the absence includes partial days and identifies the type of shift (regular or alternate). write a  helps in accurately calculating the duration of the absence.  Short Sickness Check: If the absence is shorter than 4 calendar days, it does not qualify for SSP. write a  is because SSP is only payable for absences that are at least 4 days long.  Linked Absences Evaluation: The formula evaluates previous linked absences to count the total qualified days (waiting days) and SSP weeks. It checks if there are any disqualifying certificates in the history that would affect the current absence.  Sickness During Maternity Check: If the current sickness is linked to a preceding sickness during maternity within 56 days, the current sickness is considered linked and unpaid.  Earnings Check: For the first absence in a chain, the formula checks if the person had earnings above the Lower Earnings Limit (LEL). If the earnings are below the LEL, the absence does not qualify for SSP.  Entitlement Calculation:  Waiting Days: The formula calculates the number of waiting days to serve based on the accumulated qualified days from previous absences. The statutory waiting days are 3. If the employee has already served some waiting days in previous absences, the remaining waiting days are calculated. Paid Days: The formula calculates the number of paid days until the limit of 28 weeks or 3 years is reached. The SSP weeks to go are determined by subtracting the total SSP weeks from the statutory week limit. Return Values: The formula returns the pay factors and entitlements for the waiting days and paid days based on these calculations. If the absence is not eligible for SSP, it returns 0 for the entitlement.  In summary, the formula ensures that the SSP entitlement is calculated accurately based on the employee's absence history, earnings, and other relevant factors. If any conditions are not met, such as the absence being too short or earnings being below the LEL, the absence does not qualify for SSP.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Sickness Absence Validation",
        "answer": "DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR IV_START_TIME IS '01:23' DEFAULT FOR IV_END_TIME IS '23:23' DEFAULT FOR IV_START_DURATION is 0 DEFAULT FOR IV_END_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_START_TIME is '00:00' DEFAULT FOR ANC_ABS_ENTRS_END_TIME is '00:00' DEFAULT FOR ANC_ABS_TYP_INFORMATION3 IS ' ' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' DEFAULT FOR ORA_HRX_GB_ABS_MASG_SICK_TRANSITION_DATE IS '0001-01-01T00:00:00.000Z' (DATE) INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION configure_adj_before='N' configure_adj_after='N' configure_mat_ssp_check='Y' configure_ssp_during_mat_check='Y' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_trunced_context_effective_date=trunc(l_context_effective_date) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( adjacent_check_type_flag=ANC_ABS_TYP_INFORMATION3 ) if adjacent_check_type_flag='Y' then ( configure_adj_before='Y' configure_adj_after='Y' ) else if adjacent_check_type_flag='N' then ( configure_adj_before='N' configure_adj_after='N' ) ERROR_MESSAGE='HRX:::HRX_GB_ABS_MAT_PAY_SSP' ERROR_CODE='W' VALID='Y' v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE search_start_date='1900-01-01T00:00:00.000Z' (DATE) search_end_date='4712-12-31T00:00:00.000Z' (DATE) i=1 CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunced_context_effective_date) ( l_masg_sick_transition_date = ORA_HRX_GB_ABS_MASG_SICK_TRANSITION_DATE if TRUNC(l_masg_sick_transition_date) > TRUNC(v_IV_START_DATE) then ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',IV_START_DURATION) set_input('IV_END_DURATION',IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST=wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST=wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST=wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL=PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL=PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE=PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE=PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_mainabs_first_day=FIRST_DAY_DATE l_mainabs_first_day_trunced=trunc(FIRST_DAY_DATE) l_mainabs_last_day=LAST_DAY_DATE l_mainabs_last_day_trunced=trunc(LAST_DAY_DATE) if (configure_adj_before='Y' and VALID='Y') then ( search_start_date1='1900-01-01T00:00:00.000Z' (DATE) search_end_date1=l_mainabs_first_day adjacent_found_at_start='N' CHANGE_CONTEXTS( START_DATE= search_start_date1, END_DATE= search_end_date1 )( i=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.first(-1) while ((ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i)) and (VALID='Y')) loop ( iter_absentry=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry, EFFECTIVE_DATE = l_trunced_context_effective_date)( if ((ANC_ABS_ENTRS_ABSENCE_TYPE_ID=l_context_absence_type_id) and (iter_absentry<>l_context_absence_entry_id) and (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED') and (ANC_ABS_ENTRS_APPROVAL_STATUS_CD='APPROVED') ) then ( d1=trunc(ANC_ABS_ENTRS_END_DATE) d2=add_days(d1,1) if ((l_mainabs_first_day_trunced=d1) or (l_mainabs_first_day_trunced=d2)) then ( prev_abs_start_time=ANC_ABS_ENTRS_START_TIME prev_abs_end_time=ANC_ABS_ENTRS_END_TIME prev_abs_start=ANC_ABS_ENTRS_START_DATE prev_abs_end=ANC_ABS_ENTRS_END_DATE prev_abs_start_dttm_str=to_char(prev_abs_start,'YYYY-MM-DD,')+prev_abs_start_time prev_abs_start_dttm=to_date(prev_abs_start_dttm_str,'YYYY-MM-DD,HH24:MI') prev_abs_end_dttm_str=to_char(prev_abs_end,'YYYY-MM-DD,')+prev_abs_end_time prev_abs_end_dttm=to_date(prev_abs_end_dttm_str,'YYYY-MM-DD,HH24:MI') prev_abs_start_duration=ANC_ABS_ENTRS_START_DATE_DURATION prev_abs_end_duration=ANC_ABS_ENTRS_END_DATE_DURATION CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=prev_abs_start_dttm, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=iter_absentry )( set_input('IV_START_DATE',prev_abs_start_dttm) set_input('IV_END_DATE',prev_abs_end_dttm) set_input('IV_START_DURATION',prev_abs_start_duration) set_input('IV_END_DURATION',prev_abs_end_duration) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) prev_DAY_STATUS_LIST=wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) prev_PARTIAL_DAY_DATES_LIST=wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) prev_PARTIAL_DAY_STATUS_LIST=wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) prev_FIRST_IS_PARTIAL=prev_PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] prev_LAST_IS_PARTIAL=prev_PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] prev_FIRST_DAY_DATE=prev_PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] prev_LAST_DAY_DATE=prev_PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) if trunc(l_mainabs_first_day)=add_days(trunc(prev_LAST_DAY_DATE),1) then ( ERROR_MESSAGE='HRX:::HRX_GB_ABS_SSP_ADJ_REC' ERROR_CODE='E' TOKEN_NAME[1]='ABS_DATE' TOKEN_VALUE[1]=TO_CHAR(trunc(prev_abs_start),'DD-MON-YYYY') if ( prev_LAST_IS_PARTIAL='Y' or FIRST_IS_PARTIAL='Y') then ( if ( prev_LAST_IS_PARTIAL='Y' ) then ( VALID='Y' ) if (FIRST_IS_PARTIAL='Y') then ( VALID='Y' ) ) else ( adjacent_found_at_start='Y' VALID='N' ) ) ) ) ) i=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.next(i,-1) ) ) if (VALID='N') then return VALID,ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) if (configure_adj_after='Y' and VALID='Y') then ( search_start_date1=l_mainabs_last_day search_end_date1=add_days(search_start_date1,3) adjacent_found_at_end='N' CHANGE_CONTEXTS( START_DATE= search_start_date1, END_DATE= search_end_date1 )( i=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.first(-1) while ((ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i)) and (VALID='Y')) loop ( iter_absentry=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry, EFFECTIVE_DATE = l_trunced_context_effective_date)( if ((ANC_ABS_ENTRS_ABSENCE_TYPE_ID=l_context_absence_type_id) and (iter_absentry<>l_context_absence_entry_id) and (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED') and (ANC_ABS_ENTRS_APPROVAL_STATUS_CD='APPROVED') ) then ( d1=trunc(ANC_ABS_ENTRS_START_DATE) d2=add_days(d1,-1) if ((l_mainabs_last_day_trunced=d1) or (l_mainabs_last_day_trunced=d2)) then ( other_abs_start_time=ANC_ABS_ENTRS_START_TIME other_abs_end_time=ANC_ABS_ENTRS_END_TIME other_abs_start=ANC_ABS_ENTRS_START_DATE other_abs_end=ANC_ABS_ENTRS_END_DATE other_abs_start_dttm_str=to_char(other_abs_start,'YYYY-MM-DD,')+other_abs_start_time other_abs_start_dttm=to_date(other_abs_start_dttm_str,'YYYY-MM-DD,HH24:MI') other_abs_end_dttm_str=to_char(other_abs_end,'YYYY-MM-DD,')+other_abs_end_time other_abs_end_dttm=to_date(other_abs_end_dttm_str,'YYYY-MM-DD,HH24:MI') other_abs_start_duration=ANC_ABS_ENTRS_START_DATE_DURATION other_abs_end_duration=ANC_ABS_ENTRS_END_DATE_DURATION CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=other_abs_start_dttm, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=iter_absentry )( set_input('IV_START_DATE',other_abs_start_dttm) set_input('IV_END_DATE',other_abs_end_dttm) set_input('IV_START_DURATION',other_abs_start_duration) set_input('IV_END_DURATION',other_abs_end_duration) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) other_DAY_STATUS_LIST=wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) other_PARTIAL_DAY_DATES_LIST=wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) other_PARTIAL_DAY_STATUS_LIST=wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) other_FIRST_IS_PARTIAL=other_PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] other_LAST_IS_PARTIAL=other_PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] other_FIRST_DAY_DATE=other_PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] other_LAST_DAY_DATE=other_PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) if (add_days(l_mainabs_last_day_trunced,1)=trunc(other_FIRST_DAY_DATE)) then ( ERROR_MESSAGE='HRX:::HRX_GB_ABS_SSP_ADJ_REC' ERROR_CODE='E' TOKEN_NAME[1]='ABS_DATE' TOKEN_VALUE[1]=TO_CHAR(trunc(other_abs_start),'DD-MON-YYYY') if ( other_FIRST_IS_PARTIAL='Y' or LAST_IS_PARTIAL='Y') then ( if ( other_FIRST_IS_PARTIAL='Y' ) then ( VALID='Y' ) if (LAST_IS_PARTIAL='Y') then ( VALID='Y' ) ) else ( adjacent_found_at_end='Y' VALID='N' ) ) ) ) ) i=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.next(i,-1) ) ) if (VALID='N') then return VALID,ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) if (configure_mat_ssp_check='Y' and VALID='Y') then ( ERROR_MESSAGE='HRX:::HRX_GB_ABS_MAT_PAY_SSP' ERROR_CODE='W' mat_search_start_date=add_days(v_iv_start_date,-84) mat_search_end_date=v_iv_end_date CHANGE_CONTEXTS(START_DATE= mat_search_start_date, END_DATE= mat_search_end_date)( while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( iter_absentry=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry, EFFECTIVE_DATE = l_trunced_context_effective_date)( mat_absence_pattern=ANC_ABS_ENTRS_ABSENCE_PATTERN_CD mat_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID abs_entry_status_cd='/' abs_leg_grp_cd=' ' abs_entry_approval_status_cd = ' ' CHANGE_CONTEXTS(ABSENCE_TYPE_ID=mat_absence_type_id,EFFECTIVE_DATE = ANC_ABS_ENTRS_START_DATE)( map_event_type=ANC_ABS_TYP_MAP_EVENT_TYPE_CODE abs_entry_status_cd=ANC_ABS_ENTRS_ABSENCE_STATUS_CD abs_leg_grp_cd=ANC_ABS_TYP_LEG_GROUPING_CD abs_entry_approval_status_cd=ANC_ABS_ENTRS_APPROVAL_STATUS_CD ) if ( mat_absence_pattern='MAP' and map_event_type='CHB' and abs_entry_status_cd='SUBMITTED' and abs_entry_approval_status_cd='APPROVED' and abs_leg_grp_cd='ORA_HRX_GB_MAT' ) then ( expected_cbd=ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH EWC0= trunc(expected_cbd,'D') EWC4= add_days(EWC0,-28) if v_IV_END_DATE >= EWC4 and v_IV_START_DATE =< expected_cbd then ( VALID='N' i=-2 ) ELSE ( VALID='Y' ) ) ) i=i+1 ) ) if (VALID='N') then return VALID,ERROR_MESSAGE,ERROR_CODE ) if (configure_ssp_during_mat_check='Y') then ( l_iv_start_date=trunc(IV_START_DATE) If ( IV_END_DATE was NOT DEFAULTED ) THEN ( l_iv_end_date=IV_END_DATE ) ELSE ( end_date_0000='4712/12/31 00:00:00' (DATE) end_date_0000=trunc(end_date_0000) l_iv_end_date=end_date_0000 ) l_sdm_being_entered_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) e_log=('SSP_VAL: CURRENT Absence Entry ID is : '|| to_char(l_sdm_being_entered_entry_id) ) MATERNITY_ABSENCE_ENTRY_ID=0 search_start_date=add_days(l_iv_start_date,-272) search_end_date=l_iv_start_date i=1 CURRENT_ABS_IN_MAT39WEEKS='N' CURTAILMENT_PRESENT='N' e_log=('SSP_VAL: CURRENT Absence =From '|| to_char(IV_START_DATE) ||' to '|| to_char( l_iv_end_date ) ) e_log=('SSP_VAL: Search Range=From '|| to_char(search_start_date) ||' to '|| to_char( search_end_date ) ) l_end_date_to_consider ='0001/01/01 00:00:00' (date) l_max_start_date=l_end_date_to_consider l_max_end_date =l_end_date_to_consider l_latest_smp_actual_start_date =l_end_date_to_consider l_latest_smp_actual_end_date =l_end_date_to_consider l_latest_smp_planned_start_date =l_end_date_to_consider l_latest_smp_planned_end_date =l_end_date_to_consider CHANGE_CONTEXTS(START_DATE= search_start_date, END_DATE= search_end_date) ( l_tot=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.COUNT e_log=('SSP_VAL: Array Size is ='|| to_char(l_tot)) while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( e_log=('SSP_VAL: =================================================================') e_log=('SSP_VAL: =========================== No ' || to_char(i) || '======================') iter_absentry=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry, EFFECTIVE_DATE = l_trunced_context_effective_date) ( mat_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID l_leg_grp_code='XYZ' CHANGE_CONTEXTS(ABSENCE_TYPE_ID=mat_absence_type_id,EFFECTIVE_DATE = ANC_ABS_ENTRS_START_DATE) ( map_event_type=ANC_ABS_TYP_MAP_EVENT_TYPE_CODE l_leg_grp_code=ANC_ABS_TYP_LEG_GROUPING_CD ) e_log=('SSP_VAL: mat_absence_type_id : '|| to_char(mat_absence_type_id)) e_log=('SSP_VAL: map_event_type : '|| map_event_type) e_log=('SSP_VAL: : ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR [' ||to_char(i) ||']='|| to_char(ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] )) mat_absence_pattern=ANC_ABS_ENTRS_ABSENCE_PATTERN_CD abs_entry_status_cd='XYZ' abs_entry_status_cd=ANC_ABS_ENTRS_ABSENCE_STATUS_CD abs_entry_approval_status_cd='XYZ' abs_entry_approval_status_cd=ANC_ABS_ENTRS_APPROVAL_STATUS_CD e_log=('SSP_VAL: abs_entry_status_cd : '|| abs_entry_status_cd) e_log=('SSP_VAL: mat_absence_pattern : '|| mat_absence_pattern) e_log=('SSP_VAL: l_leg_grp_code : '|| l_leg_grp_code) e_log=('SSP_VAL: l_max_start_date : '|| to_char( l_max_start_date ) ) e_log=('SSP_VAL: l_max_end_date : '|| to_char( l_max_end_date ) ) IF ( l_leg_grp_code='ORA_HRX_GB_MAT' AND mat_absence_pattern='MAP' and map_event_type='CHB' and abs_entry_status_cd='SUBMITTED' AND abs_entry_approval_status_cd='APPROVED') Then ( IF (ANC_ABS_MTRNT_ACTUAL_START_DATE was not DEFAULTED) then ( l_smp_actual_start_date=ANC_ABS_MTRNT_ACTUAL_START_DATE ) else ( l_smp_actual_start_date='0001/01/01 00:00:00' (date) ) IF ( ANC_ABS_MTRNT_ACTUAL_RETURN_DATE was not DEFAULTED) then ( l_smp_actual_end_date=ANC_ABS_MTRNT_ACTUAL_RETURN_DATE ) else ( l_smp_actual_end_date=l_iv_end_date (date) ) IF ( ANC_ABS_MTRNT_PLANNED_START_DATE was not DEFAULTED) then ( l_smp_planned_start_date=ANC_ABS_MTRNT_PLANNED_START_DATE ) else ( l_smp_planned_start_date='0001/01/01 00:00:00' (date) ) IF ( ANC_ABS_MTRNT_PLANNED_RETURN_DATE was not DEFAULTED) then ( l_smp_planned_end_date=ANC_ABS_MTRNT_PLANNED_RETURN_DATE ) else ( l_smp_planned_end_date='0001/01/01 00:00:00' (date) l_smp_planned_end_date=l_iv_end_date (date) ) IF ( ANC_ABS_MTRNT_ACTUAL_START_DATE was not DEFAULTED) then ( e_log=('SSP_VAL: CONSIDERING ACTUAL DATES IF CRITERIA IS MET ') if ( l_max_end_date <= l_smp_actual_end_date) then ( l_max_end_date= l_smp_actual_end_date l_max_start_date= l_smp_actual_start_date MATERNITY_ABSENCE_ENTRY_ID=iter_absentry e_log=('SSP_VAL: ACTUAL DATES CONSIDERED from Entry ID ' || to_char(MATERNITY_ABSENCE_ENTRY_ID)) ) ) ELSE ( e_log=('SSP_VAL: CONSIDERING PLANNED DATES IF CRITERIA IS MET ') if ( l_max_end_date <= l_smp_planned_end_date) then ( l_max_end_date= l_smp_planned_end_date l_max_start_date= l_smp_planned_start_date MATERNITY_ABSENCE_ENTRY_ID=iter_absentry e_log=('SSP_VAL: PLANNED DATES CONSIDERED from Entry ID ' || to_char(MATERNITY_ABSENCE_ENTRY_ID)) ) ) CURRENT_ABS_IN_MAT39WEEKS='Y' e_log=('SSP_VAL: ****************** CURRENT_ABS_IN_MAT39WEEKS : '|| CURRENT_ABS_IN_MAT39WEEKS ) e_log=('SSP_VAL: ****************** ****************** ' ) e_log=('SSP_VAL: l_smp_planned_start_date : '|| to_char( l_smp_planned_start_date ) ) e_log=('SSP_VAL: l_smp_planned_end_date : '|| to_char( l_smp_planned_end_date ) ) e_log=('SSP_VAL: l_smp_actual_start_date : '|| to_char( l_smp_actual_start_date ) ) e_log=('SSP_VAL: l_smp_actual_end_date : '|| to_char( l_smp_actual_end_date ) ) e_log=('SSP_VAL: l_max_start_date : '|| to_char( l_max_start_date ) ) e_log=('SSP_VAL: l_max_end_date : '|| to_char( l_max_end_date ) ) ) i=i+1 ) ) ) e_log=('SSP_VAL:IDENTIFY_CURTAILMENT_AND_DATE l_max_start_date : '|| to_char( l_max_start_date ) ) e_log=('SSP_VAL:IDENTIFY_CURTAILMENT_AND_DATE l_max_end_date : '|| to_char( l_max_end_date ) ) e_log=('SSP_VAL:IDENTIFY_CURTAILMENT_AND_DATE CURRENT_ABS_IN_MAT39WEEKS : '|| CURRENT_ABS_IN_MAT39WEEKS ) IF( CURRENT_ABS_IN_MAT39WEEKS='Y' ) THEN ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=MATERNITY_ABSENCE_ENTRY_ID, EFFECTIVE_DATE = l_trunced_context_effective_date) ( e_log=('SSP_VAL: ENTERing loop to find Curtailment Certificate') ni5=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR.exists(ni5) AND CURTAILMENT_PRESENT='N' ) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni5] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni5] e_log=('SSP_VAL: Current Certificate row_altcd: '|| row_altcd ) if (row_cert_status='C' and 'ORA_HRX_GB_CURTAILMENT'=row_altcd) then ( CURTAILMENT_PRESENT='Y' ni5= -1 e_log=('SSP_VAL: Found Curtailment Certificate') ) ni5=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR.NEXT(ni5,-1) ) ) ) if ( CURRENT_ABS_IN_MAT39WEEKS='Y') then ( if (trunc(l_iv_start_date) <= trunc(l_max_end_date)) then ( VALID='N' ERROR_MESSAGE='HRX:::HRX_GB_ABS_SDM_OVERLAPS_S_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Sickness During Maternity Pay Period Validation",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3 ERROR_MESSAGE = 'Success' ERROR_CODE = 'W' VALID='Y' l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : Start') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_iv_start_date = IV_START_DATE If ( IV_END_DATE was NOT DEFAULTED ) THEN ( l_iv_end_date = IV_END_DATE ) ELSE ( end_date_0000='4712/12/31 00:00:00' (DATE) end_date_0000=trunc(end_date_0000) l_iv_end_date = end_date_0000 ) l_sdm_being_entered_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,-1) MATERNITY_ABSENCE_ENTRY_ID = 0 l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : CURRENT Absence Entry ID is : '|| to_char(l_sdm_being_entered_entry_id) ) search_start_date=add_days(l_iv_start_date,-272) search_end_date=l_iv_start_date i=1 CURRENT_ABS_IN_MAT39WEEKS = 'N' CURTAILMENT_PRESENT='N' l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : CURRENT Absence = From '|| to_char(IV_START_DATE) ||' to '|| to_char( l_iv_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : Search Range = From '|| to_char(search_start_date) ||' to '|| to_char( search_end_date ) ) l_end_date_to_consider = '0001/01/01 00:00:00' (date) l_max_start_date = l_end_date_to_consider l_max_end_date = l_end_date_to_consider l_latest_smp_actual_start_date = l_end_date_to_consider l_latest_smp_actual_end_date = l_end_date_to_consider l_latest_smp_planned_start_date = l_end_date_to_consider l_latest_smp_planned_end_date = l_end_date_to_consider CHANGE_CONTEXTS(START_DATE= trunc(search_start_date), END_DATE= search_end_date) ( l_tot = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.COUNT l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : Array Size is = '|| to_char(l_tot)) while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : =================================================================') l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : =========================== No ' || to_char(i) || '======================') iter_absentry = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=iter_absentry) ( mat_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID l_leg_grp_code = 'XYZ' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=mat_absence_type_id) ( map_event_type=ANC_ABS_TYP_MAP_EVENT_TYPE_CODE l_leg_grp_code = ANC_ABS_TYP_LEG_GROUPING_CD ) ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : mat_absence_type_id : '|| to_char(mat_absence_type_id)) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : map_event_type : '|| map_event_type) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : : ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR [' ||to_char(i) ||'] = '|| to_char(ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] )) mat_absence_pattern=ANC_ABS_ENTRS_ABSENCE_PATTERN_CD abs_entry_status_cd='XYZ' abs_entry_status_cd=ANC_ABS_ENTRS_ABSENCE_STATUS_CD abs_entry_approval_status_cd='XYZ' abs_entry_approval_status_cd=ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : abs_entry_status_cd : '|| abs_entry_status_cd) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : mat_absence_pattern : '|| mat_absence_pattern) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_leg_grp_code : '|| l_leg_grp_code) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_max_start_date : '|| to_char( l_max_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_max_end_date : '|| to_char( l_max_end_date ) ) IF ( l_leg_grp_code = 'ORA_HRX_GB_MAT' AND mat_absence_pattern = 'MAP' and map_event_type = 'CHB' and abs_entry_status_cd='SUBMITTED' AND abs_entry_approval_status_cd='APPROVED' ) Then ( IF (ANC_ABS_MTRNT_ACTUAL_START_DATE was not DEFAULTED) then ( l_smp_actual_start_date = ANC_ABS_MTRNT_ACTUAL_START_DATE ) else ( l_smp_actual_start_date = '0001/01/01 00:00:00' (date) ) IF ( ANC_ABS_MTRNT_ACTUAL_RETURN_DATE was not DEFAULTED) then ( l_smp_actual_end_date = ANC_ABS_MTRNT_ACTUAL_RETURN_DATE ) else ( l_smp_actual_end_date = l_iv_end_date (date) ) IF ( ANC_ABS_MTRNT_PLANNED_START_DATE was not DEFAULTED) then ( l_smp_planned_start_date = ANC_ABS_MTRNT_PLANNED_START_DATE ) else ( l_smp_planned_start_date = '0001/01/01 00:00:00' (date) ) IF ( ANC_ABS_MTRNT_PLANNED_RETURN_DATE was not DEFAULTED) then ( l_smp_planned_end_date = ANC_ABS_MTRNT_PLANNED_RETURN_DATE ) else ( l_smp_planned_end_date = '0001/01/01 00:00:00' (date) l_smp_planned_end_date = l_iv_end_date (date) ) IF ( ANC_ABS_MTRNT_ACTUAL_START_DATE was not DEFAULTED) then ( l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : CONSIDERING ACTUAL DATES IF CRITERIA IS MET ') if ( l_max_end_date <= l_smp_actual_end_date) then ( l_max_end_date = l_smp_actual_end_date l_max_start_date = l_smp_actual_start_date MATERNITY_ABSENCE_ENTRY_ID = iter_absentry l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : ACTUAL DATES CONSIDERED from Entry ID ' || to_char(MATERNITY_ABSENCE_ENTRY_ID)) ) ) ELSE ( l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : CONSIDERING PLANNED DATES IF CRITERIA IS MET ') if ( l_max_end_date <= l_smp_planned_end_date) then ( l_max_end_date = l_smp_planned_end_date l_max_start_date = l_smp_planned_start_date MATERNITY_ABSENCE_ENTRY_ID = iter_absentry l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : PLANNED DATES CONSIDERED from Entry ID ' || to_char(MATERNITY_ABSENCE_ENTRY_ID)) ) ) CURRENT_ABS_IN_MAT39WEEKS = 'Y' l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : ****************** CURRENT_ABS_IN_MAT39WEEKS : '|| CURRENT_ABS_IN_MAT39WEEKS ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : ****************** ****************** ' ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_smp_planned_start_date : '|| to_char( l_smp_planned_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_smp_planned_end_date : '|| to_char( l_smp_planned_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_smp_actual_start_date : '|| to_char( l_smp_actual_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_smp_actual_end_date : '|| to_char( l_smp_actual_end_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_max_start_date : '|| to_char( l_max_start_date ) ) l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : l_max_end_date : '|| to_char( l_max_end_date ) ) ) i=i+1 ) ) ) IF( CURRENT_ABS_IN_MAT39WEEKS = 'Y' ) THEN ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=MATERNITY_ABSENCE_ENTRY_ID) ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=MATERNITY_ABSENCE_ENTRY_ID) ( l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : ENTERing loop to find Curtailment Certificate') ni5=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR.exists(ni5) AND CURTAILMENT_PRESENT='N' ) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni5] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni5] l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : Current Certificate row_altcd: '|| row_altcd ) if (row_cert_status='C' and 'ORA_HRX_GB_CURTAILMENT'=row_altcd) then ( CURTAILMENT_PRESENT='Y' ni5= -1 l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : Found Curtailment Certificate') ) ni5=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR.NEXT(ni5,-1) ) ) ) ) if ( CURRENT_ABS_IN_MAT39WEEKS = 'N') then ( VALID = 'N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_SDM_NO_SMP_FOUND' ERROR_CODE = 'E' RETURN VALID,ERROR_MESSAGE,ERROR_CODE ) else ( l_end_before_date = add_days(l_max_start_date , 272) if trunc(l_iv_end_date) > trunc(l_end_before_date) then ( VALID = 'N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_SDM_BEYOND_MPP' TOKEN_NAME[1] = 'MPP_END_DATE' TOKEN_VALUE[1] = TO_CHAR(trunc(l_end_before_date),'DD-MON-YYYY') ERROR_CODE = 'E' RETURN VALID,ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) if ( trunc(IV_START_DATE) <= trunc(l_max_end_date) ) then ( VALID = 'N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_SDM_OVERLAPS_SMP' TOKEN_NAME[1] = 'SMP_END_DATE' TOKEN_VALUE[1] = TO_CHAR(trunc(l_max_end_date),'DD-MON-YYYY') ERROR_CODE = 'E' RETURN VALID,ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) if (CURTAILMENT_PRESENT='Y') then ( VALID='N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_SDM_SMP_CURTAILED' ERROR_CODE = 'E' RETURN VALID,ERROR_MESSAGE,ERROR_CODE ) ) VALID = 'Y' l_dummy = ESS_LOG_WRITE( '[SDM Validation Formula] : RETURN Valid = Y') return VALID",
        "question": "The formula calculates the duration of half-day absences for employees in Thailand based on their work schedules and rosters. It determines the duration by comparing the entered absence hours to the total assigned shift hours, counting half-day absences as 0.5 days if the duration is less than half the shift hours or spans midnight, and full days if it matches or exceeds shift hours. The formula returns the calculated duration.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Adoption Absence Validation",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE VALID='Y' ERROR_MESSAGE = 'Success' l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( l_check_date = add_days(IV_EXPECTEDCHILDBIRTHDATE,1) IF( IV_PLANNEDSTARTDATE > l_check_date ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_ADO_PDATE_EXPECTED' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( l_check_date = add_days(IV_ACTUALCHILDBIRTHDATE,1) IF( IV_ACTUALSTARTDATE > l_check_date) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_ADO_PDATE_ACTUAL' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_INFORMATION_DATE1 WAS NOT DEFAULTED) THEN ( l_child_birth_date = IV_INFORMATION_DATE1 l_child_major_date = add_years(l_child_birth_date, 18) if (l_start_date >= l_child_major_date) then ( VALID='N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_OVER18' ERROR_CODE = 'E' return VALID,ERROR_MESSAGE,ERROR_CODE )else if (l_end_date >= l_child_major_date) then ( VALID='N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_REACH18' ERROR_CODE = 'E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) l_no_of_days = days_between(l_placement_date,l_start_date) If((l_start_date <= l_placement_date and l_no_of_days > 14) or l_start_date > add_days(l_placement_date,1)) then ( VALID='N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_EXP_PLA_DAT' ERROR_CODE = 'W' return VALID, ERROR_MESSAGE, ERROR_CODE ) return VALID",
        "question": "The formula validates national service committee leave applications in Singapore. It ensures the application does not occur before September 23, 2019, and the manager is active. The formula returns a validity status along with an error message if the application is invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Maternity Absence Validation",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3 VALID = 'Y' l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_birth_date = IV_EXPECTEDCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE l_actual_start_date = IV_ACTUALSTARTDATE l_planned_start_date = IV_PLANNEDSTARTDATE l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE > ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,1)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_BDATE_EXPECTED' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE > ADD_DAYS(IV_ACTUALCHILDBIRTHDATE,1)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_BDATE_ACTUAL' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-6)) if ( IV_ACTUALSTARTDATE WAS not DEFAULTED ) then ( if ( DAYS_BETWEEN(l_ewc,l_actual_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) else ( if( DAYS_BETWEEN(l_ewc , l_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) return VALID",
        "question": "The formula validates hospitalization leave applications in Singapore. It ensures sufficient balance exists in the hospitalization leave plan, the leave does not overlap calendar years, and the manager is active. The formula returns a validity status along with an error message if the application is invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK Paternity Absence Validation",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS 'UNKNOWN' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT for IV_INFORMATION_NUMBER5 IS 0 DEFAULT for ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH is '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_MTRNT_ACTUAL_CHILD_BIRTH_DATE is '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE,IV_INFORMATION_NUMBER1,IV_INFORMATION_NUMBER5 VALID='Y' ERROR_MESSAGE = 'Success' l_statutory_date_2024 = '4712/12/31 00:00:00' (date) l_start_date = '0001/01/01 00:00:00' (date) l_placement_date = '0001/01/01 00:00:00' (date) l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE ) if ((ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT' ) OR (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO' )) THEN ( if (l_event_type = 'CHB')then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_placement_date = IV_ACTUALCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE ) l_start_date = IV_START_DATE l_end_date = IV_END_DATE dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_start_date '||to_char(l_start_date)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_end_date '||to_char(l_end_date)) if (l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) if(l_start_date < l_placement_date) then ( if (l_event_type = 'CHB') then ( VALID='N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) else if (l_event_type = 'PLC') then ( VALID='N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) ) ) if ((ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_EXTN' ) OR (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO_EXTN' )) THEN ( IF IV_INFORMATION_NUMBER5 WAS NOT DEFAULTED THEN ( l_expected_child_birth = '0001/01/01 00:00:00' (date) l_actual_birth_date = '0001/01/01 00:00:00' (date) l_main_return_date = '4712/12/31 00:00:00' (date) l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=IV_INFORMATION_NUMBER5) ( l_expected_child_birth = ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH l_main_return_date = ANC_ABS_ENTRS_END_DATE l_actual_birth_date = ANC_ABS_MTRNT_ACTUAL_CHILD_BIRTH_DATE dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_expected_child_birth '||to_char(l_expected_child_birth)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_main_return_date '||to_char(l_main_return_date)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_actual_birth_date '||to_char(l_actual_birth_date)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_start_date '||to_char(l_start_date)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_end_date '||to_char(l_end_date)) ) IF (l_start_date (date) < l_main_return_date (date)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_NO_LNK_FUTURE' return VALID, ERROR_MESSAGE, ERROR_CODE ) if (l_event_type = 'CHB') then ( l_statutory_date_2024 = '2024/04/07 00:00:00' (date) l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) IF (l_ewc (date) < l_statutory_date_2024 (date)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_EXT_INVALID' return VALID, ERROR_MESSAGE, ERROR_CODE ) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_ewc '||to_char(l_ewc)) ) ELSE IF (l_event_type = 'PLC') then ( l_statutory_date_2024 = '2024/04/06 00:00:00' (date) reference_birth_date = '0001/01/01 00:00:00' (date) IF ('0001/01/01 00:00:00' (date) < l_actual_birth_date (date)) THEN ( reference_birth_date = l_actual_birth_date ) else ( reference_birth_date = l_expected_child_birth ) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> reference_birth_date '||to_char(reference_birth_date)) IF (reference_birth_date (date) < l_statutory_date_2024 (date)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_ADOP_EXT_INV' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) return VALID",
        "question": "Validates sports leave applications in Malaysia. Ensures the duration does not exceed 3 days, prohibits leave during probation, prevents overlap between calendar years, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF Carers Leave Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 40 DEFAULT for IV_TOTALDURATION IS 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_NUMBER1(number), IV_START_TIME, IV_END_TIME ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' l_approved_abs_hours =0 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_effective_date = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_eff_end_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') ln_default_duration=0 ln_half_duration = 0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'00:01','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=ADD_DAYS(IV_START_DATE,-1)) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( l_abs_typ_name ='Carers Leave' AND l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING') ) then ( l_approved_abs_hours = l_approved_abs_hours + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Carers Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = PER_ASG_NORMAL_HOURS L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION,2) IF L_TOTAL_ABSENCE > L_VALID_ABSENCE THEN ( TOKEN = 'You have applied '|| to_char(L_TOTAL_ABSENCE)|| ' hours of total allocated absence hours. You can not apply this leave for more than '|| to_char(L_VALID_ABSENCE) ||' hours in a year. Please reduce the absence hours.' VALID = 'N' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ln_default_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_duration = round(ln_default_duration/2,2) IF(round(IV_TOTALDURATION,2)<>round(ln_default_duration,2) AND round(IV_TOTALDURATION,2)<>ln_half_duration ) THEN ( VALID = 'N' TOKEN = 'You can only apply the Leave in Half ('|| to_char(ln_half_duration)||') or Full Day ('|| to_char(ln_default_duration)||')' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN IF L_TOTAL_ABSENCE = L_VALID_ABSENCE THEN ( Valid = 'Y' ) RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( L_TOTAL_ABSENCE = 0 l_total_full_days = 0 l_total_half_days = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = PER_ASG_NORMAL_HOURS L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION, 2) ln_default_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_duration = ROUND(ln_default_duration / 2, 2) ld_period_end_date_v2 = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_half_per_day_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date_v2, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_per_day_duration = round(ln_half_per_day_duration / 2,2) l_remainder = 0 l_remainder = round(mod(IV_TOTALDURATION , ln_half_per_day_duration),2) IF l_remainder<>0 THEN ( VALID = 'N' TOKEN = 'You can only apply Annual Leave in Half (' || TO_CHAR(ln_half_per_day_duration) || ') or Full Day (' || TO_CHAR(ln_half_per_day_duration*2) || ') per day' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) IF (L_ABS_TYPE = 'Sick Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = PER_ASG_NORMAL_HOURS / 5 L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION, 2) ln_default_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_duration = ROUND(ln_default_duration / 2, 2) ld_period_end_date_v2 = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_half_per_day_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date_v2, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_per_day_duration = round(ln_half_per_day_duration / 2,2) l_remainder = 0 l_remainder = round(mod(IV_TOTALDURATION , ln_half_per_day_duration),2) IF l_remainder<>0 THEN ( VALID = 'N' TOKEN = 'You can only apply Annual Leave in Half (' || TO_CHAR(ln_half_per_day_duration) || ') or Full Day (' || TO_CHAR(ln_half_per_day_duration*2) || ') per day' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Validates unpaid training/union (TU) leave applications in Malaysia. Ensures the duration complies with local policies, requires other leave balances (e.g., annual, sick) to be exhausted, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF MG Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'XX' INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) effdate = GET_CURRENT_DATE() CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Maternity Leave') THEN ( L_DATE = ADD_DAYS(iv_start_date,-365) L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,L_DATE,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF (IV_TOTALDURATION > 784) THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 98 days in a rolling year.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Paternity Leave') THEN ( L_DATE = ADD_DAYS(iv_start_date,-365) L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,L_DATE,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF (IV_TOTALDURATION > 40) THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 5 days in a rolling year.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Exceptional Permission') THEN ( L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,L_DATE,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF (IV_TOTALDURATION > 80) THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 10 days in a rolling year.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( L_SERVICE = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) L_EMP_HR = 'X' L_EMP_HR =GET_VALUE_SET('AKF_MG_Annual_Leave_Override_HR_VS') IF (ISNULL(L_EMP_HR) = 'N') THEN (L_EMP_HR = 'XX') IF ( L_EMP_HR = 'XX') THEN ( IF L_SERVICE < .5 then ( TOKEN = 'You can avail of Annual Leaves only after 6 months of service.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Unpaid Leave') THEN ( L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,L_DATE,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF (IV_TOTALDURATION > 240) THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 30 days in a rolling year.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Validates marriage leave applications in the UK. Ensures the duration does not exceed a specified limit (e.g., 3\u20135 days), the leave is applied within a certain period after the marriage date, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "MG Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF MZ Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_PER_SEX IS 'XX' DEFAULT FOR PER_PER_DATE_OF_BIRTH IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') IF L_ABS_TYPE = 'Parental Leave' THEN ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Birthday Leave' THEN ( L_BD = PER_PER_DATE_OF_BIRTH IF TO_CHAR(L_BD,'DDMM') != TO_CHAR(iv_start_date,'DDMM') THEN ( TOKEN = 'Please select the correct date of birth.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION L_SEX = PER_PER_SEX L_LIMIT = 4 IF L_SEX = 'F' THEN (L_LIMIT = 60) IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than '|| TO_CHAR(L_LIMIT) ||' days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Calculates prorated brought forward leave accrual for employees in Malaysia with 6-month expiry. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and tracks balance within the 6-month expiry period. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "MZ Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_US_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_TOTALDURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_current_yr=TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) l_effective_date = TO_DATE(TO_CHAR(l_current_yr)+'/01/01 00:00:00') l_yr_end_date = TO_DATE(TO_CHAR(l_current_yr)+'/12/31 00:00:00') l_abs_typ_name = 'X' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_approved_Bereavement_Leave= 0 l_approved_Family_and_Medical_Leave = 0 l_approved_Paid_Parental_Leave = 0 l_approved_Short_term_and_Long_term_Disability = 0 L_ABS_ENTRY_ID = GET_CONTEXT(ABSENCE_ENTRY_ID,0) CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( L_ABS_ENTRY_ID_N = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I] CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( (l_abs_typ_name ='Bereavement Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING') AND(L_ABS_ENTRY_ID != L_ABS_ENTRY_ID_N)) then ( l_approved_Bereavement_Leave = l_approved_Bereavement_Leave + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Family and Medical Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_Family_and_Medical_Leave = l_approved_Family_and_Medical_Leave + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Short term and Long term Disability')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_Short_term_and_Long_term_Disability = l_approved_Short_term_and_Long_term_Disability + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Paid Parental Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_Paid_Parental_Leave = l_approved_Paid_Parental_Leave + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Bereavement Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = l_approved_Bereavement_Leave + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 40 THEN ( TOKEN = 'You can not apply this leave for more than 5 days in a year.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Family and Medical Leave') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_SERVICE_PERIOD = L_SERVICE_PERIOD * 365 IF L_SERVICE_PERIOD < 365 THEN ( TOKEN = 'You can not apply this leave before completing 1 year of service.' VALID = 'N' ) ) IF VALID !='N' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-730) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = l_approved_Family_and_Medical_Leave + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 640 THEN ( TOKEN = 'You can not apply this leave for more than 16 weeks in a year.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE ='Paid Parental Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_SERVICE_PERIOD = L_SERVICE_PERIOD * 365 IF L_SERVICE_PERIOD < 30 THEN ( TOKEN = 'You can not apply this leave before completing 30 days of service.' VALID = 'N' ) ) IF VALID !='N' THEN ( CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = l_approved_Paid_Parental_Leave + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 640 THEN ( TOKEN = 'You can not apply this leave for more than 16 weeks in a twelve month period.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE ='Short term and Long term Disability') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = l_approved_Short_term_and_Long_term_Disability + IV_TOTALDURATION IF IV_ABSENCE_REASON = 'Short Term Disability' AND L_TOTAL_ABSENCE > 720 THEN ( TOKEN = 'You can not apply Short Term Disability Leave for more than 90 days in a year.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Validates compassionate leave applications in Malaysia (version 2). Ensures the duration does not exceed 3\u20135 days (based on grade and reason), prohibits overlap between calendar years for non-contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF KE Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1901/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_HIRE_DATE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_HIRE_DATE >1 THEN (L_HIRE_DATE =1) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Annual Leave') THEN ( IF PER_ASG_DATE_PROBATION_END > iv_start_date THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'You can not apply Annual Leave before end of probation period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Study Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Compassionate Leave' OR L_ABS_TYPE = 'Bereavement Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION L_LIMIT = 5 L_LIMIT_HRS = L_LIMIT*8 IF L_TOTAL_ABSENCE > L_LIMIT_HRS THEN ( TOKEN = 'You can not apply this leave for more than '||TO_CHAR(L_LIMIT) ||' days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 720 THEN ( TOKEN = 'You can not apply this leave for more than 90 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Pre-adoptive Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 30 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Unpaid Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF l_balance>0 then ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 240 THEN ( TOKEN = 'You can not apply this leave for more than 240 hours.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Sick Leave' THEN ( IF L_HIRE_DATE*365 < 60 then ( TOKEN = 'You can not apply Sick Leave before completing two months of service.' VALID = 'N' ) IF VALID != 'N' THEN ( IF (IV_ABSENCE_REASON = 'Sick Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 360 THEN ( TOKEN = 'You can not apply Sick Leave for more than 45 days.' VALID = 'N' ) ) ) IF (IV_ABSENCE_REASON = 'Short Sick Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply Short Sick Leave for more than 10 days.' VALID = 'N' ) ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Determines the enrollment start date for absence plans for contractors in Malaysia (version 2). Uses the contractor\u2019s start date, plan enrollment date, or a specific policy date, ensuring compliance with local regulations for contract employees. Returns the calculated enrollment start date.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "KE Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_UG_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1901/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_HIRE_DATE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_HIRE_DATE >1 THEN (L_HIRE_DATE =1) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Annual Leave') THEN ( IF PER_ASG_DATE_PROBATION_END > iv_start_date THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'You can not apply Annual Leave before end of probation period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Study Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Compassionate Leave' OR L_ABS_TYPE = 'Bereavement Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION L_LIMIT = 5 L_LIMIT_HRS = L_LIMIT*8 IF L_TOTAL_ABSENCE > L_LIMIT_HRS THEN ( TOKEN = 'You can not apply this leave for more than '||TO_CHAR(L_LIMIT) ||' days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 480 THEN ( TOKEN = 'You can not apply this leave for more than 60 working days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Pre-adoptive Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 30 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Unpaid Leave') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = iv_start_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF l_balance>0 then ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ELSE ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 240 THEN ( TOKEN = 'You can not apply this leave for more than 240 hours.' VALID = 'N' ) ) ) ) IF L_ABS_TYPE = 'Sick Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 120 THEN ( TOKEN = 'You can not apply Sick Leave for more than 15 days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Duplicate entry (assumed to be the same as above, possibly a versioning or typo). Calculates prorated brought forward leave accrual for employees in the UK with 2-year expiry. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and tracks balance within the 2-year expiry period. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "UG Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF UK Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 40 DEFAULT for IV_TOTALDURATION IS 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_NUMBER1(number), IV_START_TIME, IV_END_TIME ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' l_approved_abs_hours =0 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_effective_date = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_eff_end_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') ln_default_duration=0 ln_half_duration = 0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'00:01','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=ADD_DAYS(IV_START_DATE,-1)) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( l_abs_typ_name ='Compassionate Leave' AND l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING') ) then ( l_approved_abs_hours = l_approved_abs_hours + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Compassionate Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = PER_ASG_NORMAL_HOURS L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION,2) IF L_TOTAL_ABSENCE > L_VALID_ABSENCE THEN ( TOKEN = 'You have applied '|| to_char(L_TOTAL_ABSENCE)|| ' hours of total allocated absence hours. You can not apply this leave for more than '|| to_char(L_VALID_ABSENCE) ||' hours in a year. Please reduce the absence hours.' VALID = 'N' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ln_default_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_duration = round(ln_default_duration/2,2) IF(round(IV_TOTALDURATION,2)<>round(ln_default_duration,2) AND round(IV_TOTALDURATION,2)<>ln_half_duration ) THEN ( VALID = 'N' TOKEN = 'You can only apply the Leave in Half ('|| to_char(ln_half_duration)||') or Full Day ('|| to_char(ln_default_duration)||') Only' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN IF L_TOTAL_ABSENCE = L_VALID_ABSENCE THEN ( Valid = 'Y' ) RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) IF (L_ABS_TYPE = 'Parental Leave') THEN ( L_SELECTED_CHILD = IV_ATTRIBUTE_NUMBER1 if (L_SELECTED_CHILD = 0) THEN ( TOKEN = 'Please select the Child Name from the Child Name dropdown in Additional Information Section.' VALID = 'N' ) IF VALID != 'N' THEN ( l_start_date = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_end_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_DURATION = IV_TOTALDURATION I=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = 'Parental Leave' THEN ( L_CHILD = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IF (L_CHILD = IV_ATTRIBUTE_NUMBER1) THEN ( L_DURATION = L_DURATION + ANC_ABS_ENTRS_DURATION ) ) ) ) ) IF L_DURATION >4 THEN ( TOKEN = 'You can not apply this leave for more than 4 weeks in a year for this child.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE ='Paternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 2 THEN ( TOKEN = 'You can not apply this leave for more than 2 weeks in a year.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Validates paternity leave applications in China. Ensures the employee has worked at least 3 months, the leave start date is within a specified period after the child\u2019s birth, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF TJ Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_HIRE_DATE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Annual Leave') THEN ( IF L_HIRE_DATE < 0.5 THEN ( TOKEN = 'You can not apply this leave before six months from date of hire.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Uncertified Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF IV_TOTALDURATION > 7 THEN ( TOKEN = 'You can not apply this leave for more than 7 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Unpaid Leave') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ELSE ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 90 THEN ( TOKEN = 'You can not apply this leave for more than 90 days.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE ='Compassionate Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Study Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 30 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION L_ELIGIBILITY = 140 IF IV_ABSENCE_REASON = 'Birth of twins' THEN ( L_ELIGIBILITY = 186 ) ELSE IF IV_ABSENCE_REASON = 'Birth with complications' THEN ( L_ELIGIBILITY = 156 ) IF L_TOTAL_ABSENCE > L_ELIGIBILITY THEN ( TOKEN = 'You can not apply this leave for more than '||TO_CHAR(L_ELIGIBILITY) ||' days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Calculates prorated absence accrual for employees in China based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "TJ Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF KG Absence Entry Validation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Unpaid Leave') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Admin Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Paternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date, -365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_DATE = ADD_DAYS(iv_start_date, -365) L_TOTAL_ABSENCE = 0 CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION ) IF IV_ABSENCE_REASON = 'Birth of Single Child' THEN ( L_LIMIT = 126 ) ELSE IF IV_ABSENCE_REASON = 'Birth of 2 or more infants' OR IV_ABSENCE_REASON = 'Birth of single child - high altitude regions' THEN ( L_LIMIT = 140 ) ELSE IF IV_ABSENCE_REASON = 'Birth with complexity' THEN ( L_LIMIT = 140 ) ELSE IF IV_ABSENCE_REASON = 'Birth with complexity - high altitude regions' THEN ( L_LIMIT = 156 )ELSE IF IV_ABSENCE_REASON = 'Birth of 2 or more infants - high altitude regions' THEN ( L_LIMIT = 180 ) IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than '||TO_CHAR(L_LIMIT)||' days.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Calculates the anniversary event date for absence plans in Hong Kong to determine eligibility or adjustments (e.g., annual leave, bonuses). Uses the employee\u2019s hire date or service tenure, ensuring alignment with local policies. Returns the calculated anniversary date.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "KG Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF EG Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_HIRE_DATE = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Exam Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 7 THEN ( TOKEN = 'You can not apply this leave for more than 7 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Sick Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 190 THEN ( TOKEN = 'You can not apply this leave for more than 190 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Hajj Leave') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=iv_start_date) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_SERVICE<3 THEN ( TOKEN = 'You can not apply this leave before completion of 3 years of service.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Urgent/Compassionate Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_SERVICE = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = L_DATE) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION L_ELIGIBILITY = 10 IF L_SERVICE < 1 THEN ( L_ELIGIBILITY = L_ELIGIBILITY * L_SERVICE ) IF L_TOTAL_ABSENCE > L_ELIGIBILITY THEN ( TOKEN = 'You can not apply this leave for more than ' ||to_char(L_ELIGIBILITY)||' days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Paternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 5 THEN ( TOKEN = 'You can not apply this leave for more than 5 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 90 THEN ( TOKEN = 'You can not apply this leave for more than 90 days in a rolling year period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Leave Without Pay') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Leave without Pay only if there is no Annual Leave balance.' VALID = 'N' ) IF (VALID !='N') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 15 THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Validates sick leave applications in Cambodia. Ensures the duration does not exceed a specified limit (e.g., 10\u201330 days based on grade), requires a medical certificate for durations over 2 days, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "EG Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF SY Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_SERVICE_PERIOD = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) L_NEW_PROBATION_DATE = PER_ASG_DATE_PROBATION_END IF PER_ASG_DATE_PROBATION_END WAS DEFAULTED THEN ( L_NEW_PROBATION_DATE = iv_start_date ) IF L_NEW_PROBATION_DATE > iv_start_date THEN ( TOKEN = 'You can not apply this leave before end of probation.' VALID = 'N' ) IF VALID = 'Y' THEN ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF L_ABS_TYPE = 'Hajj Leave' THEN ( IF L_SERVICE_PERIOD<5 THEN ( TOKEN = 'You can not apply this leave before completing 5 years of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 180 THEN ( TOKEN = 'You can not apply this leave for more than 180 days in a rolling year period.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Paternity Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 30 THEN ( TOKEN = 'You can not apply this leave for more than 30 days in a rolling year period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Study Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 120 THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Bereavement Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 40 THEN ( TOKEN = 'You can not apply this leave for more than 5 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Marriage Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 56 THEN ( TOKEN = 'You can not apply this leave for more than 7 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Compassion Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Leave Without Pay') THEN ( IF IV_TOTALDURATION > 240 THEN ( TOKEN = 'You can not apply this leave for more than 30 consecutive days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Validates casual leave applications in India. Ensures the duration does not exceed a specified limit (e.g., 3\u20135 days based on grade), prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF PT Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR IV_ATTRIBUTE_NUMBER1 IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_NUMBER1(number) ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF L_ABS_TYPE = 'Marriage Leave' THEN ( effdate = GET_CURRENT_DATE() IF iv_start_date < add_days(effdate,5) THEN ( TOKEN = 'Leave start date cannot be within next 5 days.' VALID = 'N' ) L_LIMIT = 15*7.5 IF PER_ASG_NORMAL_HOURS = 35 THEN ( L_LIMIT = 15*7 ) IF IV_TOTALDURATION > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave' OR L_ABS_TYPE = 'Paternity Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) L_WORKING_DAY = 7.5 IF PER_ASG_NORMAL_HOURS = 35 THEN ( L_WORKING_DAY = 7 ) L_LIMIT = 30*9*L_WORKING_DAY CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE*L_WORKING_DAY + IV_TOTALDURATION IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than 9 months.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Family Support Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_WORKING_DAY = 7.5 L_LIMIT = 112.5 IF PER_ASG_NORMAL_HOURS = 35 THEN ( L_LIMIT = 15*7 L_WORKING_DAY = 7 ) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE*L_WORKING_DAY + IV_TOTALDURATION IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( L_SERVICE = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) IF L_SERVICE < .5 then ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'You can avail of Annual Leaves only after 6 months of service.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Compassionate Leave') THEN ( L_WORKING_DAY = 7.5 L_ECD = PER_ASG_NORMAL_HOURS IF (L_ECD = 35) THEN ( L_WORKING_DAY = 7 ) L_ELIGIBILITY = 2*L_WORKING_DAY l_duration = 0 l_sd = iv_start_date while (l_sd<iv_end_date) loop ( l_duration = l_duration + L_WORKING_DAY L_SD = add_days(l_sd,1) ) IF (IV_ABSENCE_REASON = 'Spouse (married or legal union) - 20 Calendar Days' ) THEN ( L_ELIGIBILITY = 20*L_WORKING_DAY ) IF (IV_ABSENCE_REASON = 'Son/Daughter/Step son/Step daughter/Son in law/Daughter in law - 5 Calendar Days') THEN ( L_ELIGIBILITY = 5*L_WORKING_DAY ) IF (IV_ABSENCE_REASON = 'Funeral') THEN ( L_ELIGIBILITY = 1*L_WORKING_DAY L_DURATION = IV_TOTALDURATION ) IF L_DURATION > L_ELIGIBILITY THEN ( TOKEN = 'You cannot apply this Leave for more than '||to_char(L_ELIGIBILITY)||' hours.' VALID = 'N' ) ) IF(L_ABS_TYPE = 'School Support') Then ( L_S_YEAR = TO_CHAR(iv_start_date,'YYYY') L_S_MM = TO_NUMBER(TO_CHAR(iv_start_date,'MM')) L_S_MM_C = TO_CHAR(L_S_MM) IF L_S_MM<=3 THEN ( L_S_MM_C = '01' L_E_MM_C='03' ) IF (L_S_MM>3) AND (L_S_MM <=6) THEN ( L_S_MM_C = '04' L_E_MM_C='06' ) IF (L_S_MM>6) AND (L_S_MM <=9) THEN ( L_S_MM_C = '07' L_E_MM_C='09' ) IF L_S_MM >9 THEN ( L_S_MM_C = '10' L_E_MM_C = '12' ) l_start_date = TO_DATE('01'||L_S_MM_C||L_S_YEAR,'DDMMYYYY') l_end_date = LAST_DAY(TO_DATE('01'||L_E_MM_C||L_S_YEAR,'DDMMYYYY')) if iv_end_date > l_end_date Then ( TOKEN = 'You can not apply this leave beyond one quarter.' VALID = 'N' ) L_SELECTED_CHILD = IV_ATTRIBUTE_NUMBER1 if (L_SELECTED_CHILD = 0) THEN ( TOKEN = 'Please select the Child Name from the Child Name dropdown in Additional Information Section.' VALID = 'N' ) IF (VALID !='N') THEN ( L_DURATION = IV_TOTALDURATION I=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = L_ABS_TYPE THEN ( L_CHILD = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IF (L_CHILD = IV_ATTRIBUTE_NUMBER1) THEN ( L_DURATION = L_DURATION + ANC_ABS_ENTRS_DURATION ) ) ) ) ) ) IF L_DURATION >4 THEN ( TOKEN = 'You can not apply this leave for more than 4 hours in a quarter for this child.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Unpaid Leave') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ELSE ( RETURN VALID )",
        "question": "Validates annual leave applications in China. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years, checks sufficient balance, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "PT Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF AF Absence Entry Validation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_TOTALDURATION IS 0 INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_TOTALDURATION l_current_yr=TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) l_effective_date = TO_DATE(TO_CHAR(l_current_yr)+'/01/01 00:00:00') l_yr_end_date = TO_DATE(TO_CHAR(l_current_yr)+'/12/31 00:00:00') ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' l_abs_typ_name = 'X' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_approved_emergency_days= 0 l_approved_paternity_days = 0 l_approved_sick_abs_days = 0 l_approved_academic_abs_days = 0 l_approved_unpaid_leave_abs_days = 0 l_logs = ESS_LOG_WRITE('**Emergency Leave/ paternity Leave Validation Start*') CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( (l_abs_typ_name ='Emergency Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_emergency_days = l_approved_emergency_days + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Paternity Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_paternity_days = l_approved_paternity_days + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Sick Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_sick_abs_days = l_approved_sick_abs_days + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Academic Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_academic_abs_days = l_approved_academic_abs_days + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Unpaid Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_unpaid_leave_abs_days = l_approved_unpaid_leave_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Emergency Leave') THEN ( IF l_approved_emergency_days+IV_TOTALDURATION > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Paternity Leave') THEN ( IF l_approved_paternity_days+IV_TOTALDURATION > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Sick Leave') THEN ( IF l_approved_sick_abs_days+IV_TOTALDURATION > 160 THEN ( TOKEN = 'You can not apply this leave for more than 20 days.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Academic Leave') THEN ( IF l_approved_academic_abs_days+IV_TOTALDURATION > 120 THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Unpaid Leave') THEN ( l_effective_date = TO_DATE('3112'||TO_CHAR(IV_START_DATE,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID,PERSON_ID = L_PERSON_ID,EFFECTIVE_DATE = l_effective_date,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ELSE ( IF l_approved_unpaid_leave_abs_days+IV_TOTALDURATION > 240 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Validates sick leave applications in Cambodia. Ensures the duration does not exceed a specified limit (e.g., 10\u201330 days based on grade), requires a medical certificate for durations over 2 days, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "AF Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF BD Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Paternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 1008 THEN ( TOKEN = 'You can not apply this leave for more than 126 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Unpaid Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 240 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Exam Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 16 THEN ( TOKEN = 'You can not apply this leave for more than 2 days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Calculates prorated annual leave accrual for employees under the NCC MS (National Cash & Carry Management System) in the UK. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "BD Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF IN India Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID is 0 DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE is 'NA' INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_DATE1(date) ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Bereavement Leave - AKF India') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 24 THEN ( TOKEN = 'You can not apply this leave for more than 3 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Paternity Leave - AKF India') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,add_days(iv_start_date,-1)) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave - AKF India') THEN ( L_SERVICE = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_THRESHOLD = 80/365 IF (PER_ASG_DATE_PROBATION_END > iv_start_date) AND (L_SERVICE<L_THRESHOLD) THEN ( TOKEN = 'You can not apply this leave before end of probation or completion of 80 days of service.' VALID = 'N' ) ) IF VALID != 'N' THEN ( i=1 l_count =0 WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.EXISTS(i) loop ( if ( PER_PER_CONT_REL_CONTACT_TYPE[i]='C' ) then ( l_count = l_count +1 ) i=i+1 ) l_limit = 0 if l_count <2 then (l_limit= 182) if l_count>=2 then (l_limit = 84) L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > l_limit THEN ( l_limit = l_limit/7 TOKEN = 'You can not apply this leave for more than'||to_char(l_limit) ||'weeks in a rolling year period.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE = 'Marriage Leave - AKF India') THEN ( IF IV_ATTRIBUTE_DATE1 WAS DEFAULTED THEN ( TOKEN = 'Please provide the Marriage Date in Additional Information section.' VALID = 'N' ) IF (VALID !='N') THEN ( L_CHECK_SD = IV_ATTRIBUTE_DATE1 L_CHECK_ED = IV_ATTRIBUTE_DATE1 l_index = 0 WHILE (L_INDEX <5) loop ( L_CHECK_SD = ADD_DAYS(L_CHECK_SD,-1) L_ED = ADD_DAYS(L_CHECK_SD,1) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,L_CHECK_SD ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY>0 THEN (L_INDEX =L_INDEX+1) ) l_index = 0 WHILE (L_INDEX<5) loop ( L_CHECK_ED = ADD_DAYS(L_CHECK_ED,1) L_ED = ADD_DAYS(L_CHECK_ED,1) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,L_CHECK_ED ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY>0 THEN (L_INDEX =L_INDEX+1) ) IF (iv_start_date <L_CHECK_SD) OR (iv_end_date > L_CHECK_ED) THEN ( TOKEN = 'Leaves should be within 5 days from date of marriage.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Unpaid Leave - AKF India') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave - AKF India') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ELSE ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE*8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 120 THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "write a  fast formula validates the number of days an employee can apply for leave within a year, ensuring compliance with specific rules and restrictions. The formula checks the total duration of leave taken within a five-year period and ensures it does not exceed 90 days. It also verifies that the employee does not have any remaining annual leave balance before approving unpaid leave. Additionally, the formula restricts leave applications if the employee has completed one year of service or if the leave dates fall within a specific restricted period (April to December) and the user is not authorized to make changes during write a  period. The formula returns a validation status and an error message if any of the conditions are not met.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "IN Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_IN_AKRSP_ABSENCE_VALIDATION",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID is 0 DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE is 'NA' INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_SERVICE_PERIOD = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF L_ABS_TYPE = 'Unpaid Leave - AKRSP India' THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Earned Leave - AKRSP India') + GET_PLAN_BALANCE('General Leave - AKRSP India') ) IF l_balance>0 then ( TOKEN = 'You can apply for Unpaid Leave only if there is no Earned Leave or General Leave balance.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Extra Ordinary Leave - AKRSP India' THEN ( IF L_SERVICE_PERIOD < 1 THEN ( TOKEN = 'You can not apply for '||L_ABS_TYPE||' before completing 1 year of service.' VALID = 'N' ) ) IF ((L_ABS_TYPE = 'Optional Leave - AKRSP India (Bihar)') OR (L_ABS_TYPE = 'Optional Leave - AKRSP India (Gujarat)') or L_ABS_TYPE = ('Optional Leave - AKRSP India (Madhya Pradesh)') or (L_ABS_TYPE = 'Optional Leave - AKRSP India (Maharashtra)')) THEN ( l_reason = IV_ABSENCE_REASON L_CHECK = GET_LOOKUP_MEANING ('AKF_IN_AKRSP_OPTIONAL_LEAVE',l_reason) L_VALID = 'Y' L_IP_DATE = TO_CHAR(iv_start_date,'DDMMYYYY') IF LENGTH(L_CHECK) > 8 THEN ( L_CHECK = SUBSTR(L_CHECK,0,8) ) IF L_IP_DATE != L_CHECK THEN ( L_VALID = 'N' ) IF L_VALID ='N' THEN ( TOKEN = 'Please select the correct date for '||IV_ABSENCE_REASON||'.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Study Leave - AKRSP India' THEN ( IF L_SERVICE_PERIOD < 3 THEN ( TOKEN = 'You can not apply for '||L_ABS_TYPE||' before completing 3 years of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave - AKRSP India' THEN ( L_DAYS = 365*L_SERVICE_PERIOD IF L_DAYS < 80 THEN ( TOKEN = 'You can not apply for Maternity Leave before completing 80 working days in the organization.' VALID = 'N' ) ELSE ( L_LIMIT = 180 IF IV_ABSENCE_REASON = 'Miscarriage' THEN ( L_LIMIT = 42 ) IF IV_ABSENCE_REASON = 'Adoption' THEN ( L_LIMIT = 85 )ELSE ( L_CHILD = 0 i=1 WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.EXISTS(i) loop ( if ( PER_PER_CONT_REL_CONTACT_TYPE[i]='C' ) then ( L_CHILD = L_CHILD +1 ) i=i+1 ) IF L_CHILD >2 THEN ( L_LIMIT = 85 ) ) L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than '||to_char(L_LIMIT)||' days in a rolling year period.' VALID = 'N' ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service and the accrual plan they are enrolled in. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.  The formula checks if the employee's citizenship code is not 'SA'. If the employee's grade is between 1 and 6 and their length of service is more than 2 years, or if the grade is 7 or 8 and the length of service is more than 1 year, or if the grade is 9A, 9B, 9C, 10, 11, or 12, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.  Additionally, if the employee's grade is S2, S1, I2, I1, M4, M3, M2, M1, E2, or E1, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.  The formula then counts the number of dependents (infants, children, and others) and calculates the total accrual based on the number of dependents. It also checks for any dependent ticket requests and adjusts the accrual accordingly.  The final accrual and carryover values are returned.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "IN Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF PK AKF Pak Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave - AKF Pakistan' OR L_ABS_TYPE= 'Casual Leave - AKF Pakistan' OR L_ABS_TYPE = 'Compensatory Leave - AKF Pakistan') then ( L_DATE = PER_ASG_DATE_PROBATION_END IF L_DATE > iv_start_date THEN ( TOKEN = 'You can not apply '||l_abs_type||' before completion of probation period.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Maternity Leave - AKF Pakistan' OR L_ABS_TYPE = 'Paternity Leave - AKF Pakistan') THEN ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF l_period<1 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of one year of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Paternity Leave - AKF Pakistan' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 10 days in a rolling year.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave - AKF Pakistan' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 75 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 75 days in a rolling year.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Hajj Leave - AKF Pakistan') THEN ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF l_period<1 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of one year of service.' VALID = 'N' ) ) IF (IV_ABSENCE_REASON = 'Hajj' and IV_TOTALDURATION > 30) then ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ELSE IF (IV_ABSENCE_REASON = 'Umrah' and IV_TOTALDURATION > 15) then ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "write a  fast formula calculates the proration factor for leave accrual based on the employee's hire and termination dates within the current month and year. If the employee's hire date falls within the current month and year, the formula prorates the leave based on the number of days worked in that month. Similarly, if the termination date falls within the current month and year, the formula prorates the leave based on the number of days worked up to the termination date. If neither condition is met, the proration factor is set to 1, indicating no proration. write a  ensures that the leave accrual is accurately adjusted based on the employee's hire and termination dates.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "PK Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF PK AKRSP Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Paternity Leave - AKRSP Pakistan' OR L_ABS_TYPE = 'Maternity Leave - AKRSP Pakistan' ) then ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE l_period = 365*l_period IF l_period<120 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of 4 months of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave - AKRSP Pakistan' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 84 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 84 days in a rolling year.' VALID = 'N' ) ) ) IF (L_ABS_TYPE='Unpaid Leave - AKRSP Pakistan') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 90 THEN ( TOKEN = 'You can not apply this leave for more than 90 days.' VALID = 'N' ) ) IF (VALID !='N') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave - AKRSP Pakistan') + GET_PLAN_BALANCE('Casual Leave - AKRSP Pakistan') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You still have Annual Leave or Casual Leave balance.' VALID = 'N' ERROR_CODE = 'W' ) ) ) IF (L_ABS_TYPE = 'Compassionate Leave - AKRSP Pakistan') then ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave - AKRSP Pakistan') + GET_PLAN_BALANCE('Casual Leave - AKRSP Pakistan') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Compassionate Leave only if there is no Annual Leave or Casual Leave balance.' VALID = 'N' ) IF (VALID !='N') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service, grade, and citizenship. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.  The formula checks the employee's grade and citizenship to determine the accrual rate, ceiling, and carryover. For grades 1 to 6, if the employee is a Saudi citizen with less than 5 years of service, the accrual is 28 days per year. If the service is more than 5 years, the accrual is 30 days per year. For non-Saudi citizens, the accrual is 21 days per year for less than 5 years of service and 30 days per year for more than 5 years of service. The ceiling and carryover are set to 10000 and 5000, respectively, for less than 5 years of service, and 12000 and 6000 for more than 5 years of service.  For grades 7 and 8, the accrual is 28 days per year for less than 5 years of service and 30 days per year for more than 5 years of service, with the same ceiling and carryover values as above.  For grades 9A, 9B, and 9C, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 30 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 30 days per year. The ceiling and carryover are set to 12000 and 6000, respectively.  For grades 10A, 10B, 10C, 11, and 12, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 40 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 40 days per year for grades 10A, 10B, and 10C, and 44 days per year for grades 11 and 12. The ceiling and carryover are set to 12000 and 6000, respectively.  If the employee has a specific attribute or grade 'RS', the accrual is set to 30 days per year, with a ceiling of 12000 and carryover of 6000.  The final accrual, ceiling, and carryover values are returned.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "PK Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF CA Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_AGRMNT_ENT_AGREEMENT_ALLOC_UNITS IS 0 DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Statutory Leave - Unpaid') OR (L_ABS_TYPE = 'Statutory Leave - Paid') THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'Please get in touch with your HR for applying '||L_ABS_TYPE VALID = 'N' ) ) IF (L_ABS_TYPE = 'Personal Leave') THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*7) + IV_TOTALDURATION IF (IV_TOTALDURATION>70) THEN ( TOKEN = 'Please get in touch with your HR to apply this leave.' VALID = 'N' ) ) ) ) IF L_ABS_TYPE = 'Pregnancy Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE/7) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 15 THEN ( TOKEN = 'You can not apply this leave for more than 15 weeks in a rolling year period.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Time Off for Study' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*7) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 21 THEN ( TOKEN = 'You can not apply this leave for more than 3 days in a year.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Parental Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE/7) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 63 THEN ( TOKEN = 'You can not apply this leave for more than 63 weeks in a rolling year period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Vacation Leave') THEN ( L_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00'(DATE)) L_MM = TO_NUMBER(TO_CHAR(L_EFF_DATE,'MM')) L_DATE = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_ACTUAL_BALANCE = 0 ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = GET_CONTEXT(PERSON_ID,0) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) lc_plan_name = 'Vacation Leave' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ln_hr_assignment_id ,PERSON_ID = ln_person_id ,EFFECTIVE_DATE = L_DATE ,LEGISLATIVE_DATA_GROUP_ID = ln_leg_group_id) ( L_ACTUAL_BALANCE = GET_PLAN_BALANCE(lc_plan_name) ) L_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_HRS = 7 IF L_PERIOD<=4 THEN ( L_ACCRUAL = 1.25*L_HRS ) IF L_PERIOD >4 AND L_PERIOD <= 10 THEN ( L_ACCRUAL = 1.67*L_HRS ) IF L_PERIOD >10 THEN ( L_ACCRUAL = 2.083*L_HRS ) L_REMAINING_ELIGIBILITY = L_ACCRUAL * (12-L_MM) L_ELIGIBILITY = L_ACTUAL_BALANCE + L_REMAINING_ELIGIBILITY IF IV_TOTALDURATION > L_ELIGIBILITY THEN ( TOKEN = 'You do not have sufficient leave balance to apply this leave.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "Write a global absence accrual matrix formula for that calculates sick leave accrual by dividing the total hours worked during the accrual period by 40 and rounding the result",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF TZ Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1901/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) effdate = GET_CURRENT_DATE() CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave') THEN ( L_DATE = PER_ASG_DATE_PROBATION_END IF L_DATE > iv_start_date THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'You can not apply '||l_abs_type||' before completion of probation period.' VALID = 'N' ) ) ) IF ( L_ABS_TYPE= 'Maternity' OR L_ABS_TYPE = 'Paternity' OR L_ABS_TYPE = 'Study Leave') then ( L_DATE = PER_ASG_DATE_PROBATION_END IF L_DATE > iv_start_date THEN ( TOKEN = 'You can not apply '||l_abs_type||' before completion of probation period.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Study Leave' OR L_ABS_TYPE= 'Compassionate Leave' OR L_ABS_TYPE = 'Sick Leave' or L_ABS_TYPE= 'Bereavement Leave') then ( CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( l_year = to_number(to_char(iv_start_date, 'YYYY')) l_ddmm = to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DDMM') l_ann = to_date(l_ddmm||to_char(l_year),'DDMMYYYY') if iv_start_date < l_ann then ( l_ann = to_date(l_ddmm||to_char(l_year-1),'DDMMYYYY') ) L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_ann,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_ABS_TYPE = 'Sick Leave' THEN ( IF L_TOTAL_ABSENCE > 1008 THEN ( TOKEN = 'You can not apply this leave for more than 126 days in a year.' VALID = 'N' ) ) ELSE IF (L_ABS_TYPE = 'Bereavement Leave' ) or (L_ABS_TYPE='Compassionate Leave') THEN ( IF L_TOTAL_ABSENCE > 40 THEN ( TOKEN = 'You can not apply this leave for more than 5 days in a year.' VALID = 'N' ) ) ELSE IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days in a year.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "write a  formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:  It initializes the total hours worked to zero. For each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked. After summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 40 and rounding the result to two decimal places.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "TZ Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF MZ Absence Entry Validation",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT for IV_TOTALDURATION IS 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_NUMBER1(number), IV_START_TIME, IV_END_TIME ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' l_approved_abs_hours =0 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_effective_date = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_eff_end_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') ln_default_duration=0 ln_half_duration = 0 L_CARRYOVER =0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'00:01','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = to_char(GET_CONTEXT(PERSON_ID,0)) ld_effective_date= '01-01-'||TO_CHAR(IV_START_DATE,'YYYY') L_CARRYOVER =to_number(GET_VALUE_SET('AKF_AFG_ANNUAL_LEAVE_CARRYOVER','|=P_ID='''||ln_person_id||''''||'|P_DATE='''||ld_effective_date||'''')) CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=l_eff_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( l_abs_typ_name ='Annual Leave' AND l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED') ) then ( l_approved_abs_hours = l_approved_abs_hours + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Annual Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = (176 * PER_ASG_FTE_VALUE) + L_CARRYOVER L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION,2) IF L_TOTAL_ABSENCE > L_VALID_ABSENCE THEN ( TOKEN = 'You have applied '|| to_char(L_TOTAL_ABSENCE)|| ' hours of total allocated absence hours. You can not apply this leave for more than '|| to_char(L_VALID_ABSENCE) ||' hours in a year. Please reduce the absence hours.' VALID = 'N' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ELSE ( RETURN VALID )",
        "question": "write a  formula is designed to validate the entry of voluntary leave absences for employees. It checks if the total duration of the submitted voluntary leave, combined with previously recorded voluntary leave within the current year, exceeds the allowed limit. The formula also ensures that the duration of the leave is a multiple of 4 hours. If the total exceeds the allowed limit or the duration is not a multiple of 4, the formula returns a validation error. Otherwise, it confirms the entry as valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "MZ Legislative Data Group"
    },
    {
        "FORMULA_NAME": "FR ATMP Validation",
        "answer": "DEFAULT FOR IV_INFORMATION_DATE_ARR IS EMPTY_DATE_NUMBER DEFAULT FOR IV_INFORMATION_ARR IS EMPTY_TEXT_NUMBER DEFAULT FOR IV_INFORMATION_NUMBER_ARR IS EMPTY_NUMBER_NUMBER DEFAULT FOR ANC_ABS_ENTRS_INFORMATION1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_DATE10 IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_INFORMATION3 IS ' ' INPUTS ARE IV_INFORMATION_DATE_ARR (DATE_NUMBER) ,IV_INFORMATION_ARR (TEXT_NUMBER), IV_INFORMATION_NUMBER_ARR (NUMBER_NUMBER) l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_valid = 'Y' l_new_inc_category=IV_INFORMATION_ARR[1] CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date)( if ( ANC_ABS_ENTRS_INFORMATION1 WAS NOT DEFAULTED ) then ( l_old_inc_category = ANC_ABS_ENTRS_INFORMATION1 if ( l_new_inc_category <> l_old_inc_category ) then ( l_valid = 'N' ) ) ) l_new_inc_date=IV_INFORMATION_DATE_ARR[10] CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date)( if ( ANC_ABS_ENTRS_INFORMATION_DATE10 WAS NOT DEFAULTED ) then ( l_old_inc_date = ANC_ABS_ENTRS_INFORMATION_DATE10 if ( l_new_inc_date <> l_old_inc_date ) then ( l_valid = 'N' ) ) ) l_new_emp_fault=IV_INFORMATION_ARR[3] CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date)( if ( ANC_ABS_ENTRS_INFORMATION3 WAS NOT DEFAULTED ) then ( l_old_emp_fault = ANC_ABS_ENTRS_INFORMATION3 if ( l_new_emp_fault <> l_old_emp_fault ) then ( l_valid = 'N' ) ) ) if ( l_valid = 'N' ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_INC_DATE_CHG' return VALID, ERROR_MESSAGE, ERROR_CODE ) VALID='Y' return VALID",
        "question": "Write a absence accrual formula to return the absence balance of Annual Leave for the employee",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "FR - Validation ATMP",
        "answer": "DEFAULT FOR IV_INFORMATION_DATE_ARR IS EMPTY_DATE_NUMBER DEFAULT FOR IV_INFORMATION_ARR IS EMPTY_TEXT_NUMBER DEFAULT FOR IV_INFORMATION_NUMBER_ARR IS EMPTY_NUMBER_NUMBER DEFAULT FOR ANC_ABS_ENTRS_INFORMATION1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_DATE10 IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_INFORMATION3 IS ' ' INPUTS ARE IV_INFORMATION_DATE_ARR (DATE_NUMBER) ,IV_INFORMATION_ARR (TEXT_NUMBER), IV_INFORMATION_NUMBER_ARR (NUMBER_NUMBER) l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_valid = 'Y' l_new_inc_category=IV_INFORMATION_ARR[1] CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date)( if ( ANC_ABS_ENTRS_INFORMATION1 WAS NOT DEFAULTED ) then ( l_old_inc_category = ANC_ABS_ENTRS_INFORMATION1 if ( l_new_inc_category <> l_old_inc_category ) then ( l_valid = 'N' ) ) ) l_new_inc_date=IV_INFORMATION_DATE_ARR[10] CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date)( if ( ANC_ABS_ENTRS_INFORMATION_DATE10 WAS NOT DEFAULTED ) then ( l_old_inc_date = ANC_ABS_ENTRS_INFORMATION_DATE10 if ( l_new_inc_date <> l_old_inc_date ) then ( l_valid = 'N' ) ) ) l_new_emp_fault=IV_INFORMATION_ARR[3] CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date)( if ( ANC_ABS_ENTRS_INFORMATION3 WAS NOT DEFAULTED ) then ( l_old_emp_fault = ANC_ABS_ENTRS_INFORMATION3 if ( l_new_emp_fault <> l_old_emp_fault ) then ( l_valid = 'N' ) ) ) if ( l_valid = 'N' ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_INC_DATE_CHG' return VALID, ERROR_MESSAGE, ERROR_CODE ) VALID='Y' return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK SPBL Validation",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_DATE2 IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR IV_INFORMATION_DATE_ARR IS EMPTY_DATE_NUMBER DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE IV_INFORMATION_DATE_ARR (DATE_NUMBER) VALID='Y' l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) i=2 l_ndeath_of_child = IV_INFORMATION_DATE_ARR[i] if ( ANC_ABS_ENTRS_INFORMATION_DATE2 WAS NOT DEFAULTED ) then ( if ( ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID WAS NOT DEFAULTED ) then ( l_odeath_of_child = ANC_ABS_ENTRS_INFORMATION_DATE2 if ( l_odeath_of_child = l_ndeath_of_child ) then ( VALID='Y' ) ELSE ( VALID='N' ERROR_MESSAGE='HRX:::HRX_GB_ABS_SPBL_DATE_AMEND' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) ) VALID='Y' return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "FR - Maternit\u00e9, paternit\u00e9 ou adoption - Validation du dossier",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_NUMBER1 is 0 DEFAULT for IV_INFORMATION_1 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_2 IS 'Y' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS 'UNKNOWN' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_NUMBER1,IV_INFORMATION_1,IV_INFORMATION_2 ret = ess_log_write ( '-- Start of Entry validation------') lc_variable_to_be_logged = 'ANC_ABS_TYP_LEG_GROUPING_CD : '|| ANC_ABS_TYP_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) VALID = 'Y' l_start_date = IV_START_DATE l_end_date = IV_END_DATE IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_PAT_LNK' ) THEN ( if( DAYS_BETWEEN(l_end_date , l_start_date )+1 < 5 ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_5_MORE' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_PATERNITY' ) THEN ( if( DAYS_BETWEEN(l_end_date , l_start_date )+1 < 4 ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_7' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADOPT' or ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADP_PAR' ) THEN ( IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) IF l_start_date > l_placement_date THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_PLACE_DATE' return VALID, ERROR_MESSAGE, ERROR_CODE ) if( DAYS_BETWEEN(l_placement_date ,l_start_date)+1 > 7 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE9' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADP_PAR') THEN ( IF (IV_INFORMATION_1 = 'N') THEN ( IF (IV_TOTALDURATION < 25 ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_LESS_25_32' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE ( IF (IV_TOTALDURATION < 32 ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_LESS_25_32' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_MATERNITY' ) THEN ( if ( IV_INFORMATION_1 WAS DEFAULTED) THEN ( l_current_pregnancy = 'ORA_HRX_FR_01' ) else ( l_current_pregnancy = IV_INFORMATION_1 ) l_less_than_3_dependants = IV_INFORMATION_2 l_expected_dob_specified = 'N' l_actual_dob_specified = 'N' l_planned_start_date_specified = 'N' l_min_stat_antenatal = 2 l_max_stat_antenatal = 6 l_min_stat_postnatal = 6 l_max_stat_postnatal = 10 if (IV_PLANNEDSTARTDATE WAS NOT DEFAULTED )THEN ( l_planned_start_date = IV_PLANNEDSTARTDATE l_planned_end_date = IV_PLANNEDENDDATE l_planned_start_date_specified = 'Y' ) if (IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED) THEN ( l_expected_dob = IV_EXPECTEDCHILDBIRTHDATE l_expected_dob_specified = 'Y' ) if (IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED) THEN ( l_actual_dob = IV_ACTUALCHILDBIRTHDATE l_actual_dob_specified = 'Y' ) if ( l_current_pregnancy = 'ORA_HRX_FR_01') THEN ( l_debug = 'l_current_pregnamcy : Single Birth' l_dummy = ESS_LOG_WRITE(l_debug) if (l_less_than_3_dependants = 'Y') THEN ( l_debug = 'l_less_than_3_dependants : Y' l_dummy = ESS_LOG_WRITE(l_debug) l_min_stat_antenatal = 2*7 l_max_stat_antenatal = 6*7 l_min_stat_postnatal = 6*7 l_max_stat_postnatal = 10*7 ) ELSE ( l_debug = 'l_less_than_3_dependants : N' l_dummy = ESS_LOG_WRITE(l_debug) l_min_stat_antenatal = 2*7 l_max_stat_antenatal = 8*7 l_min_stat_postnatal = 6*7 l_max_stat_postnatal = 18*7 ) ) if ( l_current_pregnancy = 'ORA_HRX_FR_03') THEN ( l_debug = 'l_current_pregnamcy : Twins' l_dummy = ESS_LOG_WRITE(l_debug) l_min_stat_antenatal = 2*7 l_max_stat_antenatal = 12*7 l_min_stat_postnatal = 6*7 l_max_stat_postnatal = 22*7 ) if ( l_current_pregnancy = 'ORA_HRX_FR_02') THEN ( l_debug = 'l_current_pregnamcy : Triplets' l_dummy = ESS_LOG_WRITE(l_debug) l_min_stat_antenatal = 2*7 l_max_stat_antenatal = 24*7 l_min_stat_postnatal = 6*7 l_max_stat_postnatal = 22*7 ) l_absence_duration = days_between ( trunc(iv_end_Date), trunc(iv_start_date)) + 1 l_debug = 'Statutory Min/Max Ante: '||to_char(l_min_stat_antenatal)||':'||to_char(l_max_stat_antenatal) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = 'Statutory Min/Max Post: '||to_char(l_min_stat_postnatal)||':'||to_char(l_max_stat_postnatal) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = 'Abs Duration:'||to_char(l_absence_duration) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = '1A - Dur vs Max Ante+Post: '||to_char(l_absence_duration) ||' Vs '|| to_char(l_max_stat_antenatal) || ' + ' || to_char(l_max_stat_postnatal) l_dummy = ESS_LOG_WRITE(l_debug) if ( l_absence_duration > (l_max_stat_antenatal + l_max_stat_postnatal)) THEN ( l_debug = 'Err1A' VALID ='N' ERROR_CODE = 'W' l_dummy = ESS_LOG_WRITE(l_debug) ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' return VALID, ERROR_MESSAGE, ERROR_CODE ) if ( l_actual_dob_specified = 'Y') THEN ( l_dob_to_use = trunc(l_actual_dob) ) ELSE ( l_dob_to_use = trunc(l_expected_dob) ) l_debug = 'Dob to Use: '||to_char(l_dob_to_use,'DD-MON-YYYY') l_dummy = ESS_LOG_WRITE(l_debug) l_start_date = trunc(iv_start_date) l_end_date = trunc(iv_end_date ) l_dummy = 'l_Start_date: '||to_char(l_start_date,'DD-MON-YYYY') l_dummy = ESS_LOG_WRITE(l_debug) l_dummy = 'l_end_date: '||to_char(l_end_date,'DD-MON-YYYY') l_dummy = ESS_LOG_WRITE(l_debug) l_ante_days_absence_taken = days_between(l_dob_to_use, l_start_date) l_debug = 'l_ante_days_absence_taken:'||to_char(l_ante_days_absence_taken) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = '1B - Ante Days Vs Min Stat Ante : '||to_char(l_ante_days_absence_taken) ||' Vs '|| to_char(l_min_stat_antenatal) l_dummy = ESS_LOG_WRITE(l_debug) if (l_ante_days_absence_taken < l_min_stat_antenatal) THEN ( l_debug = 'Err1B' l_dummy = ESS_LOG_WRITE(l_debug) VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE1' return VALID, ERROR_MESSAGE, ERROR_CODE ) l_post_days_absence_taken = days_between(l_end_date, l_dob_to_use) + 1 l_debug = 'l_post_days_absence_taken:'||to_char(l_post_days_absence_taken) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = '1C - Post Days Vs Min Stat Post : '||to_char(l_post_days_absence_taken) ||' Vs '|| to_char(l_min_stat_postnatal) l_dummy = ESS_LOG_WRITE(l_debug) if (l_post_days_absence_taken < l_min_stat_postnatal) THEN ( l_debug = 'Err1C' l_dummy = ESS_LOG_WRITE(l_debug) VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE3' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_dummy = ESS_LOG_WRITE('End Validation Formula ') return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "FR Maternity Paternity Adoption Validation for Case",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_NUMBER1 is 0 DEFAULT for IV_INFORMATION_1 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_2 IS 'Y' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS 'UNKNOWN' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_NUMBER1,IV_INFORMATION_1,IV_INFORMATION_2 ret = ess_log_write ( '-- Start of Entry validation------') lc_variable_to_be_logged = 'ANC_ABS_TYP_LEG_GROUPING_CD : '|| ANC_ABS_TYP_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) VALID = 'Y' l_start_date = IV_START_DATE l_end_date = IV_END_DATE IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_PAT_LNK' ) THEN ( if( DAYS_BETWEEN(l_end_date , l_start_date )+1 < 5 ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_5_MORE' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_PATERNITY' ) THEN ( if( DAYS_BETWEEN(l_end_date , l_start_date )+1 < 4 ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_7' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADOPT' or ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADP_PAR' ) THEN ( IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) IF l_start_date > l_placement_date THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_PLACE_DATE' return VALID, ERROR_MESSAGE, ERROR_CODE ) if( DAYS_BETWEEN(l_placement_date ,l_start_date)+1 > 7 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE9' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADP_PAR') THEN ( IF (IV_INFORMATION_1 = 'N') THEN ( IF (IV_TOTALDURATION < 25 ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_LESS_25_32' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE ( IF (IV_TOTALDURATION < 32 ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_LESS_25_32' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_MATERNITY' ) THEN ( if ( IV_INFORMATION_1 WAS DEFAULTED) THEN ( l_current_pregnancy = 'ORA_HRX_FR_01' ) else ( l_current_pregnancy = IV_INFORMATION_1 ) l_less_than_3_dependants = IV_INFORMATION_2 l_expected_dob_specified = 'N' l_actual_dob_specified = 'N' l_planned_start_date_specified = 'N' l_min_stat_antenatal = 2 l_max_stat_antenatal = 6 l_min_stat_postnatal = 6 l_max_stat_postnatal = 10 if (IV_PLANNEDSTARTDATE WAS NOT DEFAULTED )THEN ( l_planned_start_date = IV_PLANNEDSTARTDATE l_planned_end_date = IV_PLANNEDENDDATE l_planned_start_date_specified = 'Y' ) if (IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED) THEN ( l_expected_dob = IV_EXPECTEDCHILDBIRTHDATE l_expected_dob_specified = 'Y' ) if (IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED) THEN ( l_actual_dob = IV_ACTUALCHILDBIRTHDATE l_actual_dob_specified = 'Y' ) if ( l_current_pregnancy = 'ORA_HRX_FR_01') THEN ( l_debug = 'l_current_pregnamcy : Single Birth' l_dummy = ESS_LOG_WRITE(l_debug) if (l_less_than_3_dependants = 'Y') THEN ( l_debug = 'l_less_than_3_dependants : Y' l_dummy = ESS_LOG_WRITE(l_debug) l_min_stat_antenatal = 2*7 l_max_stat_antenatal = 6*7 l_min_stat_postnatal = 6*7 l_max_stat_postnatal = 10*7 ) ELSE ( l_debug = 'l_less_than_3_dependants : N' l_dummy = ESS_LOG_WRITE(l_debug) l_min_stat_antenatal = 2*7 l_max_stat_antenatal = 8*7 l_min_stat_postnatal = 6*7 l_max_stat_postnatal = 18*7 ) ) if ( l_current_pregnancy = 'ORA_HRX_FR_03') THEN ( l_debug = 'l_current_pregnamcy : Twins' l_dummy = ESS_LOG_WRITE(l_debug) l_min_stat_antenatal = 2*7 l_max_stat_antenatal = 12*7 l_min_stat_postnatal = 6*7 l_max_stat_postnatal = 22*7 ) if ( l_current_pregnancy = 'ORA_HRX_FR_02') THEN ( l_debug = 'l_current_pregnamcy : Triplets' l_dummy = ESS_LOG_WRITE(l_debug) l_min_stat_antenatal = 2*7 l_max_stat_antenatal = 24*7 l_min_stat_postnatal = 6*7 l_max_stat_postnatal = 22*7 ) l_absence_duration = days_between ( trunc(iv_end_Date), trunc(iv_start_date)) + 1 l_debug = 'Statutory Min/Max Ante: '||to_char(l_min_stat_antenatal)||':'||to_char(l_max_stat_antenatal) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = 'Statutory Min/Max Post: '||to_char(l_min_stat_postnatal)||':'||to_char(l_max_stat_postnatal) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = 'Abs Duration:'||to_char(l_absence_duration) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = '1A - Dur vs Max Ante+Post: '||to_char(l_absence_duration) ||' Vs '|| to_char(l_max_stat_antenatal) || ' + ' || to_char(l_max_stat_postnatal) l_dummy = ESS_LOG_WRITE(l_debug) if ( l_absence_duration > (l_max_stat_antenatal + l_max_stat_postnatal)) THEN ( l_debug = 'Err1A' VALID ='N' ERROR_CODE = 'W' l_dummy = ESS_LOG_WRITE(l_debug) ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' return VALID, ERROR_MESSAGE, ERROR_CODE ) if ( l_actual_dob_specified = 'Y') THEN ( l_dob_to_use = trunc(l_actual_dob) ) ELSE ( l_dob_to_use = trunc(l_expected_dob) ) l_debug = 'Dob to Use: '||to_char(l_dob_to_use,'DD-MON-YYYY') l_dummy = ESS_LOG_WRITE(l_debug) l_start_date = trunc(iv_start_date) l_end_date = trunc(iv_end_date ) l_dummy = 'l_Start_date: '||to_char(l_start_date,'DD-MON-YYYY') l_dummy = ESS_LOG_WRITE(l_debug) l_dummy = 'l_end_date: '||to_char(l_end_date,'DD-MON-YYYY') l_dummy = ESS_LOG_WRITE(l_debug) l_ante_days_absence_taken = days_between(l_dob_to_use, l_start_date) l_debug = 'l_ante_days_absence_taken:'||to_char(l_ante_days_absence_taken) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = '1B - Ante Days Vs Min Stat Ante : '||to_char(l_ante_days_absence_taken) ||' Vs '|| to_char(l_min_stat_antenatal) l_dummy = ESS_LOG_WRITE(l_debug) if (l_ante_days_absence_taken < l_min_stat_antenatal) THEN ( l_debug = 'Err1B' l_dummy = ESS_LOG_WRITE(l_debug) VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE1' return VALID, ERROR_MESSAGE, ERROR_CODE ) l_post_days_absence_taken = days_between(l_end_date, l_dob_to_use) + 1 l_debug = 'l_post_days_absence_taken:'||to_char(l_post_days_absence_taken) l_dummy = ESS_LOG_WRITE(l_debug) l_debug = '1C - Post Days Vs Min Stat Post : '||to_char(l_post_days_absence_taken) ||' Vs '|| to_char(l_min_stat_postnatal) l_dummy = ESS_LOG_WRITE(l_debug) if (l_post_days_absence_taken < l_min_stat_postnatal) THEN ( l_debug = 'Err1C' l_dummy = ESS_LOG_WRITE(l_debug) VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE3' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_dummy = ESS_LOG_WRITE('End Validation Formula ') return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "FR Sickness Validation",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_INFORMATION2 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_INFORMATION1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR IV_INFORMATION_ARR IS EMPTY_TEXT_NUMBER DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) INPUTS ARE IV_START_DATE ,IV_END_DATE, IV_INFORMATION_ARR (TEXT_NUMBER) VALID='Y' i=2 l_curr_link = IV_INFORMATION_ARR[i] if ( ANC_ABS_ENTRS_INFORMATION2 WAS NOT DEFAULTED ) then ( if ( ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID WAS NOT DEFAULTED ) then ( l_prev_link = ANC_ABS_ENTRS_INFORMATION2 if ( l_curr_link = l_prev_link ) then ( VALID='Y' ) ELSE ( VALID='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_DNL_TICK' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) ) abs_sub_type = IV_INFORMATION_ARR[1] if (ANC_ABS_ENTRS_INFORMATION1 WAS NOT DEFAULTED ) then ( l_prev_abs_sub_type = ANC_ABS_ENTRS_INFORMATION1 if( abs_sub_type = l_prev_abs_sub_type ) then ( VALID = 'Y' ) ELSE ( VALID='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_SICK_TYPE_CHNG' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) if ( abs_sub_type = 'ORA_HRX_FR_PO_NA_PA' ) then ( l_gap = DAYS_BETWEEN (IV_END_DATE,IV_START_DATE) if ( l_Gap > 28 ) then ( VALID='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_PNP_EXC_4W' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) if ( abs_sub_type = 'ORA_HRX_FR_LO_TERM' ) then ( if ( l_curr_link = 'Y' ) then ( VALID='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_NO_CREATE_NW_CS' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) VALID='Y' return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "FR - Validation pour maladie",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_INFORMATION2 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_INFORMATION1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR IV_INFORMATION_ARR IS EMPTY_TEXT_NUMBER DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) INPUTS ARE IV_START_DATE ,IV_END_DATE, IV_INFORMATION_ARR (TEXT_NUMBER) VALID='Y' i=2 l_curr_link = IV_INFORMATION_ARR[i] if ( ANC_ABS_ENTRS_INFORMATION2 WAS NOT DEFAULTED ) then ( if ( ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID WAS NOT DEFAULTED ) then ( l_prev_link = ANC_ABS_ENTRS_INFORMATION2 if ( l_curr_link = l_prev_link ) then ( VALID='Y' ) ELSE ( VALID='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_DNL_TICK' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) ) abs_sub_type = IV_INFORMATION_ARR[1] if (ANC_ABS_ENTRS_INFORMATION1 WAS NOT DEFAULTED ) then ( l_prev_abs_sub_type = ANC_ABS_ENTRS_INFORMATION1 if( abs_sub_type = l_prev_abs_sub_type ) then ( VALID = 'Y' ) ELSE ( VALID='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_SICK_TYPE_CHNG' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) if ( abs_sub_type = 'ORA_HRX_FR_PO_NA_PA' ) then ( l_gap = DAYS_BETWEEN (IV_END_DATE,IV_START_DATE) if ( l_Gap > 28 ) then ( VALID='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_PNP_EXC_4W' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) if ( abs_sub_type = 'ORA_HRX_FR_LO_TERM' ) then ( if ( l_curr_link = 'Y' ) then ( VALID='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_NO_CREATE_NW_CS' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) VALID='Y' return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "FR PBL Validation",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_INFORMATION2 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR IV_INFORMATION_DATE_ARR IS EMPTY_DATE_NUMBER DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_DATE10 IS '4712-12-31T00:00:00.000Z' (DATE) INPUTS ARE IV_INFORMATION_DATE_ARR (DATE_NUMBER),iv_start_date (date) l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_valid = 'Y' VALID='N' l_new_inc_date=IV_INFORMATION_DATE_ARR[10] CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date)( if ( ANC_ABS_ENTRS_INFORMATION_DATE10 WAS NOT DEFAULTED ) then ( l_old_inc_date = ANC_ABS_ENTRS_INFORMATION_DATE10 if ( l_new_inc_date <> l_old_inc_date ) then ( ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_DODC_DATE_CHGE' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) if ( l_new_inc_date > iv_start_date ) then ( ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_START_DATE_OF_DEATH' return VALID, ERROR_MESSAGE, ERROR_CODE ) VALID='Y' return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "FR - Validation du cong\u00e9 de deuil parental",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_INFORMATION2 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR IV_INFORMATION_DATE_ARR IS EMPTY_DATE_NUMBER DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_DATE10 IS '4712-12-31T00:00:00.000Z' (DATE) INPUTS ARE IV_INFORMATION_DATE_ARR (DATE_NUMBER),iv_start_date (date) l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_valid = 'Y' VALID='N' l_new_inc_date=IV_INFORMATION_DATE_ARR[10] CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date)( if ( ANC_ABS_ENTRS_INFORMATION_DATE10 WAS NOT DEFAULTED ) then ( l_old_inc_date = ANC_ABS_ENTRS_INFORMATION_DATE10 if ( l_new_inc_date <> l_old_inc_date ) then ( ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_DODC_DATE_CHGE' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) if ( l_new_inc_date > iv_start_date ) then ( ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_START_DATE_OF_DEATH' return VALID, ERROR_MESSAGE, ERROR_CODE ) VALID='Y' return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF PK AKF PAK ENTRY VALIDATION HOURS",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave - AKF Pakistan V1' OR L_ABS_TYPE= 'Casual Leave - AKF Pakistan V1' OR L_ABS_TYPE = 'Compensatory Leave - AKF Pakistan V1') then ( L_DATE = PER_ASG_DATE_PROBATION_END IF L_DATE > iv_start_date THEN ( TOKEN = 'You can not apply '||l_abs_type||' before completion of probation period.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Maternity Leave - AKF Pakistan V1' OR L_ABS_TYPE = 'Paternity Leave - AKF Pakistan V1') THEN ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF l_period<1 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of one year of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Paternity Leave - AKF Pakistan V1' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = (GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,add_days(iv_start_date,-1))*8) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 80 Hours in a rolling year.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave - AKF Pakistan V1' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = (GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,add_days(iv_start_date,-1))*8) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 600 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 600 Hours in a rolling year.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Hajj Leave - AKF Pakistan V1') THEN ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF l_period<1 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of one year of service.' VALID = 'N' ) ) IF (IV_ABSENCE_REASON = 'Hajj' and IV_TOTALDURATION > 240) then ( TOKEN = 'You can not apply this leave for more than 240 Hours.' VALID = 'N' ) ELSE IF (IV_ABSENCE_REASON = 'Umrah' and IV_TOTALDURATION > 120) then ( TOKEN = 'You can not apply this leave for more than 120 Hours.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "PK Legislative Data Group"
    },
    {
        "FORMULA_NAME": "FR - Maternit\u00e9, paternit\u00e9, adoption - Validation",
        "answer": "DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_1 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_2 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_3 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_4 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_5 IS 'UNKNOWN' DEFAULT for IV_INFORMATION_6 IS 'UNKNOWN' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS 'UNKNOWN' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_1,IV_INFORMATION_2,IV_INFORMATION_3,IV_INFORMATION_4,IV_INFORMATION_5 ret = ess_log_write ( '-- Start of Entry validation------') lc_variable_to_be_logged = 'ANC_ABS_TYP_LEG_GROUPING_CD : '|| ANC_ABS_TYP_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) VALID = 'Y' IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_MATERNITY' ) THEN ( ret = ess_log_write ( '-- Start of Maternity------') l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_birth_date = IV_EXPECTEDCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE l_actual_start_date = IV_ACTUALSTARTDATE l_planned_start_date = IV_PLANNEDSTARTDATE l_day_additional = 0 IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE < IV_PLANNEDSTARTDATE ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_GEN' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE < IV_ACTUALSTARTDATE ) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_GEN' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_birth_date = IV_EXPECTEDCHILDBIRTHDATE l_start_date = IV_PLANNEDSTARTDATE l_end_date =IV_PLANNEDENDDATE lc_variable_to_be_logged = 'PREMATURE : '|| IV_INFORMATION_3 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'premature days : '|| TO_CHAR(DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_ACTUALCHILDBIRTHDATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_INFORMATION_3 ='Y') THEN ( lc_variable_to_be_logged = 'l_day_additonal : '|| TO_CHAR(DAYS_BETWEEN(IV_PLANNEDSTARTDATE,IV_ACTUALCHILDBIRTHDATE )) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( IF DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_ACTUALCHILDBIRTHDATE ) > 0 THEN ( IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01' AND IV_INFORMATION_2 = 'Y') THEN l_min_duration = (16*7) ELSE IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01' AND IV_INFORMATION_2 = 'N') THEN l_min_duration = (26*7) ELSE IF (IV_INFORMATION_1 = 'ORA_HRX_FR_03') THEN l_min_duration = (34*7) ELSE l_min_duration = (46*7) IF (IV_INFORMATION_4 = 'Y') THEN l_min_duration = l_min_duration + (2*7) IF (IV_INFORMATION_5 = 'Y') THEN l_min_duration = l_min_duration + (4*7) l_actual_duration = DAYS_BETWEEN(IV_ACTUALENDDATE,IV_ACTUALSTARTDATE) + 1 lc_variable_to_be_logged = 'l_min_additonal : '|| TO_CHAR(l_min_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'current duration : '|| TO_CHAR(l_actual_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_ACTUALCHILDBIRTHDATE ) > 42 THEN ( l_day_additional = DAYS_BETWEEN(IV_PLANNEDSTARTDATE,IV_ACTUALCHILDBIRTHDATE ) l_min_duration = l_min_duration + l_day_additional IF( l_actual_duration < l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE2' lc_variable_to_be_logged = 'In case of high premature (actual birth date more than 6 weeks before the expected birth data), min duration is ' || TO_CHAR(l_min_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF( l_actual_duration > l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' lc_variable_to_be_logged = 'The total leave duration exceeds the entitlement ' || TO_CHAR(l_min_duration/7) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF( l_actual_duration < l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE5' lc_variable_to_be_logged = 'The delivery date is earlier than expected childbirth. the total duration must remains the same duration is ' || TO_CHAR(l_actual_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF( l_actual_duration > l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' lc_variable_to_be_logged = 'The delivery date is earlier than expected childbirth. the total duration must remains the same duration is ' || TO_CHAR(l_actual_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( IF DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_ACTUALCHILDBIRTHDATE ) < 0 THEN ( IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01' AND IV_INFORMATION_2 = 'Y') THEN l_min_duration = (16*7) ELSE IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01' AND IV_INFORMATION_2 = 'N') THEN l_min_duration = (26*7) ELSE IF (IV_INFORMATION_1 = 'ORA_HRX_FR_03') THEN l_min_duration = (34*7) ELSE l_min_duration = (46*7) IF (IV_INFORMATION_4 = 'Y') THEN l_min_duration = l_min_duration + (2*7) IF (IV_INFORMATION_5 = 'Y') THEN l_min_duration = l_min_duration + (4*7) l_day_additional = DAYS_BETWEEN(IV_ACTUALCHILDBIRTHDATE,IV_EXPECTEDCHILDBIRTHDATE ) l_min_duration = l_min_duration + l_day_additional l_actual_duration = DAYS_BETWEEN(IV_ACTUALENDDATE,IV_ACTUALSTARTDATE) + 1 lc_variable_to_be_logged = 'l_min_additonal : '|| TO_CHAR(l_min_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'current duration : '|| TO_CHAR(l_actual_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF( l_actual_duration < l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE6' lc_variable_to_be_logged = 'Delivery date is later than expected birth. The maternity leave increases by number of days between actual and expected birth date, min duration is ' || TO_CHAR(l_min_duration) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF( l_actual_duration > l_min_duration) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' lc_variable_to_be_logged = 'The total leave duration exceeds the entitlement ' || TO_CHAR(l_min_duration/7) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_birth_date = IV_ACTUALCHILDBIRTHDATE l_start_date = IV_ACTUALSTARTDATE l_end_date =IV_ACTUALENDDATE ) l_start_date_min = ADD_DAYS(l_birth_date,-14) l_end_date_min = ADD_DAYS(l_birth_date,41) IF(l_end_date < l_end_date_min ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE3' lc_variable_to_be_logged = 'The end date cannot be less than 6 weeks after the birth date, end date mini = ' || TO_CHAR(l_end_date_min) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) IF(l_start_date > l_start_date_min AND IV_INFORMATION_3 ='N') THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE1' lc_variable_to_be_logged = 'The start date must be at least 2 weeks before the birth date , start date mini ' || TO_CHAR(l_start_date_min) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) IF (IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED) THEN (l_weeks= DAYS_BETWEEN(IV_ACTUALCHILDBIRTHDATE ,IV_ACTUALSTARTDATE)) ELSE (l_weeks = DAYS_BETWEEN(IV_EXPECTEDCHILDBIRTHDATE ,IV_PLANNEDSTARTDATE)) l_ant_natal = (l_weeks/7) l_post_natal = IV_TOTALDURATION - l_ant_natal IF (IV_INFORMATION_4 = 'Y') THEN ( IF (l_ant_natal >= 2 ) THEN (l_ant_natal = l_ant_natal - 2 l_ant_patho = 2) ELSE (VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' ret = ess_log_write ( 'Since there is complication but antenatal is less than 2 weeks, The total leave duration is less than the entitlement') RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE (l_ant_patho = 0) IF (IV_INFORMATION_5 = 'Y') THEN ( IF (l_post_natal >= 4) THEN (l_post_natal = l_post_natal - 4 l_post_patho = 4) ELSE (VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' ret = ess_log_write ( 'Since there is complication but post natal is less than 4 weeks, The total leave duration is less than the entitlement') RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE (l_post_patho = 0) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(l_ant_natal) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'entitlement : '|| TO_CHAR(l_post_natal) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' Less than 2 children : '|| IV_INFORMATION_2 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' MUltiple Bith : '|| IV_INFORMATION_1 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' an te natal leave: '|| TO_CHAR(l_ant_natal) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' post natal leave: '|| TO_CHAR(l_post_natal) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' ant patho leave: '|| TO_CHAR(l_ant_patho) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' post patho leave: '|| TO_CHAR(l_post_patho) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) if (IV_INFORMATION_3 ='N') THEN (IF (IV_INFORMATION_1 = 'ORA_HRX_FR_01') THEN ( IF (IV_INFORMATION_2 = 'Y') THEN ( IF (l_ant_natal < 6 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_4' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_ant_natal > 6 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_3' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (l_post_natal < 10 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_6' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_post_natal > 10)THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_5' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF (l_ant_natal < 8 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_4' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF ((l_ant_natal > 8) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_3' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF ( l_post_natal < 18 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_6' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_post_natal > 18 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_5' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ELSE ( IF (IV_INFORMATION_1 = 'ORA_HRX_FR_03') THEN ( IF (l_ant_natal < 12 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_4' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_ant_natal > 12 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_3' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (l_post_natal < 22 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_6' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_post_natal > 22 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_5' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF (l_ant_natal < 24 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_4' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (l_ant_natal > 24 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_3' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF (l_post_natal < 22 )THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_6' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF ((l_post_natal > 22) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_5' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ) ELSE ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ADOPT' ) THEN ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE < add_days(IV_EXPECTEDCHILDBIRTHDATE,-7) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE9' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE < ADD_DAYS(IV_ACTUALCHILDBIRTHDATE,-7) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE9' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) lc_variable_to_be_logged = ' Less than 2 children : '|| IV_INFORMATION_2 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' MUltiple Bith : '|| IV_INFORMATION_1 lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'The total leave duration ' || TO_CHAR( IV_TOTALDURATION) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_INFORMATION_1 = 'N') THEN ( IF (IV_INFORMATION_2 = 'Y') THEN ( IF ( IV_TOTALDURATION < 16 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_TOTALDURATION > 16 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF (IV_TOTALDURATION < 18 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF ((IV_TOTALDURATION > 18) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ELSE ( IF (IV_INFORMATION_1 = 'Y') THEN ( IF (IV_TOTALDURATION < 22 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_TOTALDURATION > 22 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ELSE ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_PATERNITY' ) THEN ( IF (IV_TOTALDURATION < 4) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_7' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_INFORMATION_1 = 'ORA_HRX_FR_03' OR IV_INFORMATION_1 = 'ORA_HRX_FR_02') THEN ( IF (IV_TOTALDURATION < 32 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_TOTALDURATION > 32 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ELSE ( IF (IV_TOTALDURATION < 25 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_2' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE ( IF (IV_TOTALDURATION > 25 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE_GEN_1' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ELSE ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_ANT_PAT' ) THEN ( IF (IV_TOTALDURATION > 14 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE7' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE ( IF (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_FR_POST_PAT' ) THEN ( IF (IV_TOTALDURATION > 28 ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_MAP_RULE8' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) ) ) IF (PER_ASG_DATE_PROBATION_END was NOT DEFAULTED ) THEN ( ret = ess_log_write ( '-- Start of CHECK PROBATION PERIOD------') lc_variable_to_be_logged = 'probation end date : '|| TO_CHAR(trunc(PER_ASG_DATE_PROBATION_END)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'start date absence: '|| TO_CHAR(trunc(IV_START_DATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'probation end date : '|| TO_CHAR(trunc(IV_END_DATE)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (IV_END_DATE was NOT DEFAULTED) THEN ( IF( IV_START_DATE was NOT DEFAULTED) THEN ( IF ( trunc(IV_END_DATE) <= trunc(PER_ASG_DATE_PROBATION_END) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_PROB_PER' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF ( trunc(IV_START_DATE) <= trunc(PER_ASG_DATE_PROBATION_END) ) THEN ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_FR_ABS_PROB_PER' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "UK SHPL Absence Validation",
        "answer": "DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR IV_PAYMENT_DTL_BAND IS 0 DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_PAYMENT_DTL_BAND ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_SHPL_LESS7DAYS' ERROR_CODE = 'E' VALID='Y' l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) l_dtl_band =100 IF ( IV_PAYMENT_DTL_BAND was NOT DEFAULTED ) Then l_dtl_band = IV_PAYMENT_DTL_BAND IF (l_dtl_band <= 0) then return VALID l_days_bew = DAYS_BETWEEN(trunc(iv_end_date),trunc(iv_start_date)) +1 l_days_after = mod(l_days_bew,7) if (l_days_after >= 1) then ( l_certificate_start_date = add_days(iv_end_date,(0-l_days_after)+1) TOKEN_NAME[1] = 'START_DATE' TOKEN_VALUE[1] = TO_CHAR(trunc(l_certificate_start_date),'DD-MON-YYYY') TOKEN_NAME[2] = 'END_DATE' TOKEN_VALUE[2] = TO_CHAR(trunc(iv_end_date),'DD-MON-YYYY') VALID='N' return VALID,ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) else ( RETURN VALID )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "Unpaid_leave_Validation_Multiple_Assignments",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'Vision' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TITLE_ARR is EMPTY_TEXT_NUMBER INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_TITLE_ARR DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT for l_asg_primary is 'X' DEFAULT FOR l_asg_primary_non_primary is 'X' DEFAULT FOR PER_SYS_DATE_TIME IS '4712/12/31 00:00:00' VALID='N' l_debug = ess_log_write('In Single ASG Flag Formula') l_debug = ess_log_write('Asg Number: '+PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Flag: '+PER_ASG_PRIMARY_FLAG) l_debug = ess_log_write('PER_SYS_DATE_TIME: '+PER_SYS_DATE_TIME) i = 0 l_input_date = get_context(Effective_Date ,'0001/01/01' (date)) l_debug = ess_log_write('l_input_date: ' + to_char(l_input_date)) l_hr_per_id = to_char(GET_CONTEXT(PERSON_ID,0)) l_asg_primary ='Z' l_asg_primary_non_primary ='Z' start_date = to_char(IV_START_DATE) count_assignment = 0 l_yyyy=SUBSTR(start_date,1,4) l_mm=SUBSTR(start_date,6,2) l_dd=SUBSTR(start_date,9,2) l_debug = ess_log_write('l_yyyy: '+l_yyyy) l_debug = ess_log_write('l_mm: '+l_mm) l_debug = ess_log_write('l_dd: '+l_dd) l_asg_count=to_number(GET_VALUE_SET('BC_PAY_GET_ASSIGNMENT_COUNT','|=P_PERSON_ID='''||(l_hr_per_id)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) l_debug = ess_log_write('l_asg_count: ' + to_char(l_asg_count)) l_asg_primary=(GET_VALUE_SET('BC_PAY_GET_ASSIGNMENT_EXIST','|=P_PERSON_ID='''||(l_hr_per_id)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) if ISNULL(l_asg_count) = 'N' then ( VALID = 'N' ERROR_MESSAGE = '\"The unpaid leave you have chosen is invalid at this date this is usually due to the employee having single assignment at this date. Please check employee and date track to the correct time period to use the correct Unpaid leave type.\"' RETURN VALID, ERROR_MESSAGE ) VALID = 'Y' RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Unpaid_leave_Validation_Single_Assignment",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'Vision' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TITLE_ARR is EMPTY_TEXT_NUMBER INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_TITLE_ARR DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT for l_asg_primary is 'X' DEFAULT FOR l_asg_primary_non_primary is 'X' DEFAULT FOR PER_SYS_DATE_TIME IS '4712/12/31 00:00:00' VALID='N' l_debug = ess_log_write('In Single ASG Flag Formula') l_debug = ess_log_write('Asg Number: '+PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Flag: '+PER_ASG_PRIMARY_FLAG) l_debug = ess_log_write('PER_SYS_DATE_TIME: '+PER_SYS_DATE_TIME) i = 0 l_input_date = get_context(Effective_Date ,'0001/01/01' (date)) l_debug = ess_log_write('l_input_date: ' + to_char(l_input_date)) l_hr_per_id = to_char(GET_CONTEXT(PERSON_ID,0)) l_asg_primary ='Z' l_asg_primary_non_primary ='Z' start_date = to_char(IV_START_DATE) count_assignment = 0 l_yyyy=SUBSTR(start_date,1,4) l_mm=SUBSTR(start_date,6,2) l_dd=SUBSTR(start_date,9,2) l_debug = ess_log_write('l_yyyy: '+l_yyyy) l_debug = ess_log_write('l_mm: '+l_mm) l_debug = ess_log_write('l_dd: '+l_dd) l_asg_count=to_number(GET_VALUE_SET('BC_PAY_GET_ASSIGNMENT_COUNT','|=P_PERSON_ID='''||(l_hr_per_id)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) l_debug = ess_log_write('l_asg_count: ' + to_char(l_asg_count)) l_asg_primary=(GET_VALUE_SET('BC_PAY_GET_ASSIGNMENT_EXIST','|=P_PERSON_ID='''||(l_hr_per_id)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) if ISNULL(l_asg_count) = 'Y' then ( VALID = 'N' ERROR_MESSAGE = '\"The unpaid leave you have chosen is invalid at this date this is usually due to the employee having multiple assignment at this date. Please check employee and date track to the correct time period to use the correct Unpaid leave type.\"' RETURN VALID, ERROR_MESSAGE ) VALID = 'Y' RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "FR Therapeutic part time Validation",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_INFORMATION7 IS ' ' INPUTS ARE IV_START_DATE ,IV_END_DATE, IV_INFORMATION_ARR (TEXT_NUMBER), IV_INFORMATION_NUMBER_ARR (NUMBER_NUMBER) if ( ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID WAS NOT DEFAULTED ) then ( valid='Y' l_curr_ref_abs_entry_id = IV_INFORMATION_NUMBER_ARR[2] l_curr_payable_check = IV_INFORMATION_ARR[7] l_curr_per_payable = -1 if(IV_INFORMATION_NUMBER_ARR.exists(1)) then ( l_curr_per_payable = IV_INFORMATION_NUMBER_ARR[1] ) if(ANC_ABS_ENTRS_INFORMATION_NUMBER2 WAS NOT DEFAULTED ) then ( l_old_ref_abs_entry_id = ANC_ABS_ENTRS_INFORMATION_NUMBER2 if ( valid='Y' and l_old_ref_abs_entry_id <> l_curr_ref_abs_entry_id ) then ( valid='N' ) ) if(ANC_ABS_ENTRS_INFORMATION7 WAS NOT DEFAULTED ) then ( l_old_payable_check = ANC_ABS_ENTRS_INFORMATION7 if ( valid='Y' and l_old_payable_check <> l_curr_payable_check ) then ( valid='N' ) ) l_old_per_payable = ANC_ABS_ENTRS_INFORMATION_NUMBER1 if ( valid='Y' and l_old_per_payable <> l_curr_per_payable ) then ( valid='N' ) if( valid='Y' ) then ( return valid ) else ( valid='N' ERROR_MESSAGE='HRX:::HRX_FR_ABS_FORFAIT_CHG' ERROR_CODE='E' return VALID,ERROR_MESSAGE,ERROR_CODE ) ) valid='Y' return valid",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "CIMB_NIAGA_ANNUAL_LEAVE_VALID",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS ' ' DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_hire_month=to_number(to_char(PER_ASG_REL_DATE_START,'MM')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' IF (PER_ASG_DATE_PROBATION_END WAS NOT DEFAULTED) THEN ( if (l_sys_date > l_prob_end_date) then ( VALID = 'Y' ) ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_PROB_END_DT_MISSING' RETURN VALID, ERROR_MESSAGE ) ) l_dur=0 l_dur=IV_TOTALDURATION floored_accrual = floor(l_dur) decimal_accrual = l_dur - floored_accrual IF (decimal_accrual > 0) THEN ( VALID='N' ERROR_MESSAGE='CIMB_NIAGA_DECIMAL_ERROR' RETURN VALID,ERROR_MESSAGE ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave' ) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54) THEN ( VALID = 'Y' RETURN VALID ) IF(PER_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED) THEN ( VALID = 'Y' RETURN VALID ) IF(l_grade_name LIKE 'G3%') THEN l_grade_band='G3' IF(l_grade_name LIKE 'U1%') THEN l_grade_band='U1' IF(l_grade_name LIKE 'U2%') THEN l_grade_band='U2' IF(l_grade_name LIKE 'U3%') THEN l_grade_band='U3' IF(l_grade_name LIKE 'U4%') THEN l_grade_band='U4' IF(l_grade_name LIKE 'U5%') THEN l_grade_band='U5' IF(l_grade_name LIKE 'U6%') THEN l_grade_band='U6' IF(l_grade_name LIKE 'U7%') THEN l_grade_band='U7' IF(l_grade_name LIKE 'U8%') THEN l_grade_band='U8' IF(l_grade_name LIKE 'U9%') THEN l_grade_band='U9' IF(l_grade_name LIKE 'U10%') THEN l_grade_band='U10' IF(l_grade_name LIKE 'U11%') THEN l_grade_band='U11' IF(l_grade_name LIKE 'MT%') THEN l_grade_band='MT' IF(l_hire_year+10 <=to_number(to_char(IV_START_DATE,'YYYY'))) THEN ( l_year_band='BLK_10' ) ELSE IF(l_hire_year+4 <=to_number(to_char(IV_START_DATE,'YYYY'))) THEN ( l_year_band='BLK_4_10' ) ELSE ( l_year_band='BLK_1_4' ) L_blk_accrual = TO_NUMBER(GET_TABLE_VALUE('CIMB_ID_ANNUAL_LEAVE',l_grade_name,l_year_band,'0')) l_blk_curr_prev_dur = l_abs_duration + IV_TOTALDURATION l_asg_cat=' ' IF (l_absence_reason = 'Block Leave' AND l_blk_curr_prev_dur >= L_blk_accrual) then ( VALID = 'Y' RETURN VALID ) ELSE ( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, PERSON_ID = l_person_id, EFFECTIVE_DATE = ld_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_ann_bal = GET_PLAN_BALANCE('Annual Leave') l_asg_cat = PER_ASG_EMPLOYMENT_CATEGORY ) if (count = 1) then ( l_ann_bal = l_ann_bal + l_duration ) l_curr_bal = l_ann_bal - IV_TOTALDURATION l_block_minus=L_blk_accrual-l_blk_curr_prev_dur IF(l_block_minus<0) THEN ( l_block_minus=0 ) if (l_curr_bal>0 AND l_curr_bal <= l_block_minus AND l_absence_reason = 'Non Block Leave' AND l_blk_curr_prev_dur < L_blk_accrual) then ( if (l_abs_duration < L_blk_accrual) then ( l_years_contract=(to_number(to_char(PER_ASG_PROJECTED_ASSIGNMENT_END_DATE,'YYYY'))-l_hire_year) IF(l_asg_cat='CONTRACT' AND PER_ASG_PROJECTED_ASSIGNMENT_END_DATE WAS NOT DEFAULTED) THEN ( VALID = 'Y' ) ELSE IF(l_asg_cat='PERMANENT' AND l_hire_year=to_number(to_char(l_start_date,'YYYY')) AND l_hire_month>=4) THEN ( VALID = 'Y' ) ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG' RETURN VALID, ERROR_MESSAGE ) ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_KH_AL_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 0 l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_union = GET_VALUE_SET('CIMB_GET_UNION','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan') l_plan_name = 'Annual Leave Plan' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 1 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance_emp) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance_emp),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_comp_limit = 5 IF IV_TOTALDURATION < l_comp_limit AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF IV_END_DATE > l_year_end_date AND (0079657 - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= l_comp_limit AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_KH_AL_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 0 l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_union = GET_VALUE_SET('CIMB_GET_UNION','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_comp_limit = 5 IF IV_TOTALDURATION < l_comp_limit AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Minimum 5 days required for Compulsory Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF IV_END_DATE > l_year_end_date AND (0079657 - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= l_comp_limit AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_SL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 180 IF ADD_DAYS(EffDate,1) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( L_without_cert_duration = 0 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND l_abs_typ_name_check = 'Sick Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD ='SUBMITTED' AND (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000115262932 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000117139859 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755198 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755055 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014) THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Sick Leave for more than one (1) consecutive day will require a medical certificate. Please change reason for Sick Leave and attached Medical Certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION ) ) ) ) j = j + 1 ) ) IF (IV_ABSENCE_REASON = 'Medical Leave Without Certificate' AND (L_without_cert_duration + l_duration) > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = IV_ABSENCE_REASON||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_without_cert_duration)|| ' day(s). Please submit Medical Leave With Certificate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (IV_ABSENCE_REASON != 'Medical Leave Without Certificate' AND IV_TOTALDURATION <=1 ) THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attach your Medical Certificate and click \"Save and Close\". Go to \"Existing Leave\", click on \"Pencil\" icon next to saved \"Sick Leave\" and click \"Submit\"' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_KH_BFL_VAL_FF",
        "answer": "DEFAULT FOR per_asg_date_probation_end IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT FOR global_pay_interface_extraction_date IS '1951/01/01' DEFAULT FOR iv_attribute_1 IS 'X' DEFAULT FOR iv_absence_reason IS 'X' DEFAULT FOR anc_abs_entrs_user_mode IS 'X' DEFAULT FOR per_asg_manager_user_person_id IS 0 DEFAULT FOR per_per_person_number IS 'X' DEFAULT FOR per_asg_attribute7 IS 'X' DEFAULT FOR per_asg_bargaining_unit_code_name IS 'X' DEFAULT FOR per_asg_grade_name IS 'X' inputs are iv_start_date (date),iv_end_date (date),iv_caledarstartdate (date), iv_caledarenddate (date),iv_totalduration (Number), iv_absence_reason (Text), iv_attribute_1 (Text) valid = 'Y' l_duration = iv_totalduration l_bfl_noexp_acrl_balance = 0 l_grade_name = per_asg_grade_name l_person_id = get_context(person_id,0) l_bfl_3y_acrl_balance = 0 effdate = to_date(global_pay_interface_extraction_date ,'rrrr/mm/dd') l_ldg_id = get_context(legislative_data_group_id,0) l_year_begin_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-12-31','YYYY-MM-DD') l_nxt_working_day = '1951/01/01 00:00:00' (date) l_chk_nxt_wrk_dur = 0 l_msg = 'X' l_shift = per_asg_bargaining_unit_code_name l_union = per_asg_attribute7 l_effective_date = get_context(effective_date,'4712/12/31 00:00:00'(date)) l_absence_entry_id = get_context(absence_entry_id,0) l_hr_assign_id = get_context(hr_assignment_id,0) l_fnd_person_number = get_value_set('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' change_contexts(hr_assignment_id = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = per_asg_manager_user_person_id ) change_contexts(effective_date = l_year_end_date, legislative_data_group_id = l_ldg_id) ( l_bfl_noexp_acrl_balance = get_plan_balance('Brought Forward Leave Plan No Expiry') l_bfl_3y_acrl_balance = get_plan_balance('Brought Forward Leave Plan 3 Years Expiry - Year 3') l_bfl_3y_acrl_balance = l_bfl_3y_acrl_balance + get_plan_balance('Brought Forward Leave Plan 3 Years Expiry - Year 2') l_bfl_3y_acrl_balance = l_bfl_3y_acrl_balance + get_plan_balance('Brought Forward Leave Plan 3 Years Expiry - Year 1') ) change_contexts(effective_date=l_effective_date,absence_entry_id = l_absence_entry_id) ( l_user_mode=anc_abs_entrs_user_mode ) IF (l_user_mode != 'ADMIN' AND per_per_person_number = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF l_bfl_noexp_acrl_balance > 0 OR l_bfl_3y_acrl_balance > 0 THEN valid = 'Y' ELSE ( valid = 'N' error_message = 'CIMB_ABS_INSUFF_BAL' RETURN valid, error_message ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( valid = 'N' error_message = 'CIMB_ABS_OVERLAP' RETURN valid, error_message ) IF iv_absence_reason <> 'Emergency Leave' THEN ( l_msg = 'In' l_nxt_working_day = add_days(effdate,1) l_chk_nxt_wrk_dur = get_pay_availability ('ASSIGN', add_days(effdate,1), add_days(effdate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(l_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(l_chk_nxt_wrk_dur) IF l_chk_nxt_wrk_dur < 1 THEN ( WHILE (l_chk_nxt_wrk_dur < 1) LOOP ( l_nxt_working_day = add_days(l_nxt_working_day,1) l_chk_nxt_wrk_dur = get_pay_availability ('ASSIGN', add_days(effdate,1), add_days(l_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(l_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(l_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(l_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( valid = 'N' error_message = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN valid, error_message ) ) IF (((l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND l_grade_name NOT LIKE '%.C') OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%') AND l_union = 'National Union of Bank Employees (NUBE)')) AND MOD(l_duration,1) <> 0 THEN ( valid = 'N' error_message = 'CIMB_HALFDAY_NOTALLOW' RETURN valid, error_message ) ) RETURN valid",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_NIAGA_OTC_5DAYS_WTC_2DAYS_WITH_BLK_VALID",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_ATTRIBUTE_2(TEXT),IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' IF (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_5DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 2) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_2DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_DM_CHK",
        "answer": "DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_NIAGA_OTC_WITH_BLK_VALID",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_NIAGA_OTC_COMPASIONATE_WITH_BLK_VALID",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'NA' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_ATTRIBUTE_2(TEXT),IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' IF ((IV_ATTRIBUTE_2 = 'Spouse Death') OR (IV_ATTRIBUTE_2 = 'Parent Death') OR (IV_ATTRIBUTE_2 = 'Spouse Parent Death') OR (IV_ATTRIBUTE_2 = 'Child Death')) AND (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 8) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_8DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Spouse Death') OR (IV_ATTRIBUTE_2 = 'Parent Death') OR (IV_ATTRIBUTE_2 = 'Spouse Parent Death') OR (IV_ATTRIBUTE_2 = 'Child Death')) AND (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_5DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Sibling Death') OR (IV_ATTRIBUTE_2 = 'Grandparent Death')) AND (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 6) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_6DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Sibling Death') OR (IV_ATTRIBUTE_2 = 'Grandparent Death')) AND (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_3DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Son-in-law Death') OR (IV_ATTRIBUTE_2 = 'Daughter-in-law Death')) AND (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_5DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Son-in-law Death') OR (IV_ATTRIBUTE_2 = 'Daughter-in-law Death')) AND (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 2) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_2DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF (IV_ATTRIBUTE_2 = 'Death of Other family member in one roof') AND (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 4) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_4DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF (IV_ATTRIBUTE_2 = 'Death of Other family member in one roof') AND (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_1DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_UK_ANNUAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 1 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance_emp) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance_emp),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change Absence Reason to Emergency Leave because your Start Date is less than 1 day from today/submission date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please provide Remark for Emergency Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ( l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' OR l_grade_name = 'U1.' OR l_grade_name = 'U2.' OR l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = '36' OR l_grade_name = '35' OR l_grade_name = '34' ) THEN ( l_comp_limit = '5' ) IF ( l_grade_name = 'U9.' OR l_grade_name = 'U10.' OR l_grade_name = 'U11.' OR l_grade_name = '33S' OR l_grade_name = '33' OR l_grade_name = '32' ) THEN ( l_comp_limit = '3' ) IF ( l_grade_name = 'C1.' OR l_grade_name = 'C2.' OR l_grade_name = 'C3.' OR l_grade_name = 'C4.' OR l_grade_name = 'C5.' OR l_grade_name = 'C6.' OR l_grade_name = 'C7.' OR l_grade_name = 'C8.' OR l_grade_name = 'C9.' OR l_grade_name = 'C10.' OR l_grade_name = 'C11.' ) THEN ( l_comp_limit = '3' ) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Minimun duration requirement for your Grade is '||l_comp_limit||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF IV_END_DATE > l_year_end_date AND (L_Ann_Acrl_Balance_emp - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change your end date to avoid insufficient balance in next year.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your leave duration is equal or more than the Compulsory Leave and the reason for this leave is regular leave. If you proceed, it will remain as regular leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_NIAGA_OTC_9DAYS_WTC_6DAYS_WITH_BLK_VALID",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_ATTRIBUTE_2(TEXT),IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' IF (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 9) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_9DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 6) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_6DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_NIAGA_OTC_UNPAID_WITH_BLK_VALID",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'NA' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_ATTRIBUTE_2(TEXT),IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID='Y' IF ((IV_ATTRIBUTE_2 = 'UP_ON DUTY') OR (IV_ATTRIBUTE_2 = 'UP_PREGNANCY MEDICATION') OR (IV_ATTRIBUTE_2 = 'UP_PROLONGED ILLNESS FAMILY') OR (IV_ATTRIBUTE_2 = 'PILGRIMAGE') OR (IV_ATTRIBUTE_2 = 'UP_PROLONGED_ILLNESS') OR (IV_ATTRIBUTE_2 = 'UP_FURTHER EDUCATION')) THEN ( IF (IV_TOTALDURATION > 180) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_180DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF(IV_ATTRIBUTE_2 = 'UP_OTHER') THEN ( IF (IV_TOTALDURATION > 365) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_365DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF(IV_ATTRIBUTE_2='JEDA KONTRAK') THEN ( IF (IV_TOTALDURATION > 31) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_31DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_UK_PATERNITY_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_reason = 'Maternity Leave' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_birth = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_birth = IV_ACTUALCHILDBIRTHDATE IF ADD_DAYS(IV_START_DATE, 105) < l_child_birth THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Start Date applied exceeding maximum of 15 weeks from Actual/Schedule Child Birthdate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please upload your certificate (MAT B1) from registered medical practitione or registered midwife, stating the expected week of childbirth. ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ML_HP_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 l_maternity_fp_dur = 0 l_maternity_hp_dur = 0 L_without_cert_duration = 0 l_sl_balance = 0 L_grade_name = PER_ASG_GRADE_NAME l_limit = 0 L_prv_found = 'X' child_person_id[1] = 0 child_dob[1] = '1951/01/01 00:00:00' (date) j = 1 k = 1 l_contact_dob_char = 'X' l_contact_type = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') L_duration_days = ROUND(DAYS_BETWEEN(iv_end_date,iv_start_date),0) l_limit_DAYS = 90 l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_HP_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_type = 'X' l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( child_person_id[k] = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(PER_PER_CONT_REL_CONTACT_PERSON_ID[j])) child_dob[k] = TO_DATE(l_contact_dob_char) k = k + 1 ) j = j + 1 ) ) IF k > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_5_CHILD' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= add_months(iv_start_date,-12) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Maternity Leave - 1st Time Mothers' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_ONCE_YEAR' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_abs_typ_name_check = 'Maternity Leave' THEN ( l_maternity_fp_dur = l_maternity_fp_dur + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE)+1 IF ADD_DAYS(IV_START_DATE,-1) = ANC_ABS_ENTRS_END_DATE THEN L_prv_found = 'Y' ) ELSE IF l_abs_typ_name_check = 'Maternity Leave - Half Pay' THEN ( l_maternity_hp_dur = l_maternity_hp_dur + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE)+1 IF l_maternity_hp_dur + L_duration_days > 98 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_HP_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ) ) ) ) i = i + 1 ) IF l_maternity_fp_dur < 98 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_HP' RETURN VALID, ERROR_MESSAGE ) ELSE IF L_prv_found <> 'Y' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_HP_NEXTDAY_FP' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_MATERNITY_FIRST_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') L_duration_days = ROUND(DAYS_BETWEEN(iv_end_date,iv_start_date),0) l_mgr_asg_status = 'X' l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_birth = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_birth = IV_ACTUALCHILDBIRTHDATE IF L_duration_days > 180 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your leave duration exceeded 180 days. ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF (l_asg_category = 'CONTRACT' AND PER_ASG_DATE_PROBATION_END > iv_start_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF ADD_DAYS(l_child_birth,30) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EDOB_30_DAYS_LATER' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( IF PER_PER_CONT_REL_CONTACT_TYPE[j] = 'C' THEN ( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) IF ADD_MONTHS(l_contact_dob,7) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_MAT_FIRST_ERROR' RETURN VALID, ERROR_MESSAGE ) ) ELSE ELIGIBLE = 'Y' j = j + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_EX_SICK_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_sl_balance = 0 l_person_id = GET_CONTEXT(PERSON_ID,-1) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) VALID = 'Y' change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_sl_balance = GET_PLAN_BALANCE('Sick Leave Plan') ) IF l_sl_balance > 0 THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'Employee can apply for more then Extended Maternity Leave only after 8 weeks of Maternity Leave have been utilized' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_PILGRIMMAGE_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_TOTALDURATION > 7 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(7) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF MONTHS_BETWEEN(iv_start_date,PER_ASG_REL_DATE_START) < 120 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= l_hire_date , END_DATE= ADD_DAYS(IV_START_DATE,-1)) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check LIKE 'Hajj Leave%' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_hl_duration = l_hl_duration + ANC_ABS_ENTRS_DURATION IF l_hl_duration = 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_hl_duration > 23 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-l_hl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_PILGRIMMAGE_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_LOCATION_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_LDG_LEGISLATION_CODE IS 'NULL' DEFAULT_DATA_VALUE FOR PER_EXT_RELIGION_NAME IS 'NULL' DEFAULT_DATA_VALUE FOR PER_EXT_RELIGION_LEGISLATION_CODE IS 'NULL' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' l_person_religion = ' ' l_location = PER_ASG_LOCATION_NAME l_union = PER_ASG_ATTRIBUTE7 IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (l_grade_name LIKE 'G%' OR l_grade_name LIKE 'U%' ) THEN l_entitlement = 40 ELSE l_entitlement = 30 IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name = '70' OR l_grade_name ='71' OR l_grade_name ='72' OR l_grade_name = '35' OR l_grade_name ='36' OR l_grade_name ='73' OR l_grade_name ='74') THEN ( IF PER_LDG_LEGISLATION_CODE WAS NOT DEFAULTED THEN ( L_LEGISLATION_CODE = PER_LDG_LEGISLATION_CODE I = 1 WHILE PER_EXT_RELIGION_LEGISLATION_CODE.EXISTS(I) LOOP ( IF (PER_EXT_RELIGION_LEGISLATION_CODE[I] = TRIM(L_LEGISLATION_CODE)) THEN ( l_person_religion = PER_EXT_RELIGION_NAME[I] ) I = I + 1 ) ) l_person_religion = l_person_religion ) IF (ADD_MONTHS(l_hire_date,60) > IV_START_DATE) AND ((l_grade_name = 'G1.' OR l_grade_name ='G2.' OR l_grade_name ='G3.' OR l_grade_name like 'U1%' OR l_grade_name like 'U2%' OR l_grade_name like 'U3%' OR l_grade_name like 'U4%' OR l_grade_name like 'U5%' OR l_grade_name like 'U6%' OR l_grade_name like 'U7%' OR l_grade_name like 'U8%' OR l_grade_name like 'U9%' OR l_grade_name like 'U10%'OR l_grade_name like 'U11%' OR l_grade_name ='75' OR l_grade_name ='76' OR l_grade_name ='77' OR l_grade_name ='78' OR l_grade_name ='79' OR l_grade_name ='80' OR l_grade_name ='81' OR l_grade_name like '%.DE')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not elgible for Umrah/Pilgrimage Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((l_grade_name LIKE 'G%' OR l_grade_name LIKE 'U%' OR l_grade_name LIKE '8%' OR l_grade_name LIKE '%DE' OR l_grade_name = '75' OR l_grade_name = '76' OR l_grade_name = '77' OR l_grade_name = '78' OR l_grade_name = '79') AND(IV_TOTALDURATION > 7)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You maximum entitlement is 7 days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_TOTALDURATION > 7 AND (l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '34%'))THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You maximum entitlement is 7 days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) < 120) AND ( l_grade_name LIKE '34%') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (UPPER(l_person_religion) = 'ISLAM') AND (ADD_MONTHS(l_hire_date,60) < IV_START_DATE) THEN ( IF (IV_TOTALDURATION > 10 AND (l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72' OR l_grade_name = '73' OR l_grade_name ='74'))THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You maximum entitlement is 10 days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_TOTALDURATION > 10 AND (l_grade_name = '35' OR l_grade_name ='36' AND (l_union = 'CIMB Bank Berhad Executive Staff Union (CIMBESU) - Peninsular')))THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Umrah Leave for Muslim CIMBESU members is 10 days per service.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) < 120) AND (l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72' OR l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '34%') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) < 60) AND (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '73' OR l_grade_name ='74') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for this leave only after 5 years of service.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= l_hire_date , END_DATE= ADD_DAYS(IV_START_DATE,-1)) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check LIKE 'Hajj Leave%' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_hl_duration = l_hl_duration + ANC_ABS_ENTRS_DURATION IF l_hl_duration = l_entitlement THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_entitlement - l_hl_duration <= 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_entitlement - l_hl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_UNPAID_LEAVE_VAL_FF",
        "answer": "default for per_asg_date_probation_end is '1951/01/01 00:00:00' (date) default for per_asg_rel_date_start is '1951/01/01 00:00:00' (date) default for per_asg_grade_name is 'X' default for per_asg_sex is 'X' default for global_pay_interface_extraction_date is '1951/01/01' default for iv_attribute_1 is 'X' default for per_asg_action_code is 'X' default for per_asg_job_name is 'X' default for per_asg_user_person_type is 'X' default_data_value for anc_per_abs_entrs_absence_entry_id_arr is 0 default for anc_abs_entrs_duration is 0 default for anc_abs_typ_name is ' ' default for anc_abs_entrs_absence_status_cd is ' ' default for anc_abs_entrs_end_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_start_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_absence_type_id is 0 default for anc_abs_entrs_approval_status_cd is 'X' default for anc_abs_entrs_user_mode is 'X' default for per_asg_manager_user_person_id is 0 default for per_per_person_number is 'X' default for per_asg_employment_category is 'X' inputs are iv_start_date (date),iv_end_date (date),iv_caledarstartdate (date), iv_caledarenddate (date),iv_totalduration (number), iv_absence_reason (text), iv_attribute_1 (text) valid = 'Y' l_duration = iv_totalduration l_grade_name = per_asg_grade_name effdate = to_date(global_pay_interface_extraction_date ,'rrrr/mm/dd') l_hr_assign_id = get_context(hr_assignment_id,0) l_ldg_id = get_context(legislative_data_group_id,0) l_person_id = get_context(person_id,0) l_probation_end = per_asg_date_probation_end l_ann_acrl_balance_emp = 0 l_ann_acrl_balance_contr = 0 l_ann_acrl_balance = 0 l_year_start_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_hire_date = per_asg_rel_date_start l_job_name = per_asg_job_name l_user_person_type = per_asg_user_person_type l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = get_context(absence_entry_id,0) l_absence_entry_id = to_char(l_abs_entry_id) l_sl_days = 0 i = 1 l_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = get_context(effective_date,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(hr_assignment_id,0) l_person_id = get_context(person_id,0) l_asg_category = per_asg_employment_category l_fnd_person_number = get_value_set('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' if MOD(l_duration,0.5) <> 0 then ( valid = 'N' error_message = 'CIMB_MIN_DAYS_REQ' token_name[1] = 'MSG' token_value[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' return valid, error_message, token_name, token_value ) if isnull(l_fnd_person_number) = 'N' then l_fnd_person_number = 'N' change_contexts(hr_assignment_id = l_hr_assign_id, effective_date = effdate) ( l_manager_id = per_asg_manager_user_person_id ) l_mgr_asg_status = get_value_set('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = get_value_set('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date=l_effective_date,absence_entry_id = l_abs_entry_id) ( l_user_mode=anc_abs_entrs_user_mode ) if (l_user_mode != 'ADMIN' and per_per_person_number = l_fnd_person_number) or (l_user_mode != 'ADMIN' and l_manager_id = TO_NUMBER(l_fnd_person_number_id)) then ( if iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') then ( valid = 'N' error_message = 'CIMB_PRIOR_DM' return valid, error_message ) if l_mgr_asg_status <> 'ACTIVE' or l_manager_id = 0 then ( valid = 'N' error_message = 'CIMB_INACTIVE_MGR_ERROR' return valid, error_message ) change_contexts(effective_date = l_year_end_date, legislative_data_group_id = l_ldg_id) ( if l_asg_category != 'CONTRACT' then ( l_ann_acrl_balance_emp = get_plan_balance('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) else ( l_ann_acrl_balance_contr = get_plan_balance('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) ) if (iv_start_date > per_asg_date_probation_end and per_asg_date_probation_end < ADD_MONTHS(l_hire_date,24)) then ( if l_ann_acrl_balance_emp > 0 and iv_absence_reason <> 'Adoption' then ( valid = 'N' error_message = 'CIMB_UNPAID_ERROR' return valid, error_message ) if l_ann_acrl_balance_contr > 0 and iv_absence_reason <> 'Adoption' then ( valid = 'N' error_message = 'CIMB_UNPAID_ERROR' return valid, error_message ) ) if iv_absence_reason <> 'Emergency Leave' then ( l_msg = 'In' l_nxt_working_day = add_days(effdate,1) l_chk_nxt_wrk_dur = get_pay_availability ('ASSIGN', add_days(effdate,1), add_days(effdate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(l_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(l_chk_nxt_wrk_dur) if l_chk_nxt_wrk_dur < 1 then ( while (l_chk_nxt_wrk_dur < 1) loop ( l_nxt_working_day = add_days(l_nxt_working_day,1) l_chk_nxt_wrk_dur = get_pay_availability ('ASSIGN', add_days(effdate,1), add_days(l_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(l_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(l_chk_nxt_wrk_dur) ) ) if TO_DATE(TO_CHAR(l_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') then ( valid = 'N' error_message = 'CIMB_ABS_AL_FUTURE_ABSENCE' return valid, error_message ) ) if iv_absence_reason = 'Emergency Leave' and iv_attribute_1 = 'X' then ( valid = 'N' error_message = 'CIMB_ABS_AL_EMRG_ABSENCE' return valid, error_message ) if (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) or (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) then ( valid = 'N' error_message = 'CIMB_ABS_OVERLAP' return valid, error_message ) if iv_absence_reason = 'Adoption' and per_asg_sex = 'M' then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Unpaid Leave - Adoption.' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Adoption' and iv_totalduration > 30 then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'Maximum entitlement for Unpaid Adoption Leave per Adopted Child is 30 days' return valid, error_message, token_name, token_value ) ) return valid,error_message",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_SG_EXT_MATERNITY_LEAVE_NP_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,-1) l_absence_entry_id = to_char(l_abs_entry_id) l_ml_duration = 0 l_msg = 'X' l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_ml_end_date = '1951/01/01 00:00:00' (date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_prv_found = 'X' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_dob = IV_ACTUALCHILDBIRTHDATE IF ADD_MONTHS(l_child_dob,12) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_PRV_YEAR_CHILD' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_MONTHS(l_child_dob,-12) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Extended Maternity Leave - No Pay' OR l_abs_typ_name_check = 'Maternity Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Maternity Leave' THEN ( l_ml_duration = l_ml_duration + ANC_ABS_ENTRS_DURATION IF ADD_DAYS(IV_START_DATE,-1) = ANC_ABS_ENTRS_END_DATE THEN L_prv_found = 'Y' ) ELSE IF l_abs_typ_name_check = 'Extended Maternity Leave - No Pay' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > 28 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EXT_MAP_NP_MAX' RETURN VALID, ERROR_MESSAGE ) ) ) ) ) i = i + 1 ) ) IF l_ml_duration < 56 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_BAL_AVL' RETURN VALID, ERROR_MESSAGE ) ELSE IF L_prv_found <> 'Y' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EXT_MAT_AFT_MAT' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_NSC_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) VALID = 'Y' l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_LIEU_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF IV_ATTRIBUTE_DATE1 <= PER_ASG_REL_DATE_START THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply in Lieu of a day worked prior to or on hire date' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_TH_UPL_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_comp_limit = 'X' l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_grade_band = 'X' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance_Year = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) i = 1 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) L_sl_duration = 0 L_esl_duration = 0 l_usl_duration = 0 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY L_hire_date = PER_ASG_REL_DATE_START l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ELSE L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') ) IF L_Annual_Acrl_Balance > 0 AND l_start_date > ADD_DAYS(PER_ASG_DATE_PROBATION_END,1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_UP_AL_BAL_AVL' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_MY_SL_VAL_FF_2",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START l_asg_end = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE 'C%' OR l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' OR l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN ( l_sl_limit = 14 L_year_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_CONTRACT_RENEWAL_DATE','|=P_PERSON_ID='||to_char(l_person_id)),'YYYY-MM-DD') L_year_end_date = EffDate ) ELSE IF l_grade_name LIKE 'XT' THEN l_sl_limit = 21 ELSE l_sl_limit = 30 IF IV_ABSENCE_REASON != 'Sick Leave without Certificate' AND (IV_ATTRIBUTE_1 = 'X' or IV_ATTRIBUTE_2 = 'X') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WITHO_CERT' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = ' Your leave duration is '||to_char(l_duration)||' day(s), Please change to Full day' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' Your leave duration exceed '||to_char(l_sl_limit)||' day(s) Annual Provision' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Sick Leave without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION ) ) ) i = i + 1 ) ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( IF IV_ABSENCE_REASON = 'Sick Leave without Certificate' THEN ( CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( L_without_cert_duration = 0 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF (l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND l_abs_typ_name_check = 'Sick Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755198 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755055 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014)) THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Sick Leave for more than one (1) consecutive day will require a medical certificate. Please change reason for Sick Leave and attached Medical Certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION ) ) ) ) j = j + 1 ) ) IF (L_without_cert_duration + l_duration) > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = IV_ABSENCE_REASON||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_without_cert_duration)|| ' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (IV_ABSENCE_REASON != 'Sick Leave without Certificate' AND IV_TOTALDURATION <=1 ) THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attach your Medical Certificate and click \"Save and Close\". Go to \"Existing Leave\", click on \"Pencil\" icon next to saved \"Sick Leave\" and click \"Submit\"' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_SG_HL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance = 0 VALID = 'Y' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave (Including Sick Leave)') ) IF L_Acrl_Balance - IV_TOTALDURATION < 0 THEN ( VALID = 'N' ERROR_MESSAGE= 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_MY_HL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance = 0 l_plan_name = 'X' VALID = 'Y' L_user_person_type = PER_ASG_USER_PERSON_TYPE l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_duration = IV_TOTALDURATION l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_grade_name = PER_ASG_GRADE_NAME l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave Plan (Including Sick Leave)') l_plan_name = 'Hospitalization Leave Plan(Including Sick Leave)' ) ELSE ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave Plan Contractor (Including Sick Leave)') l_plan_name = 'Hospitalization Leave Plan Contractor (Including Sick Leave)' ) ) IF L_Acrl_Balance - IV_TOTALDURATION < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (((l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND l_grade_name NOT LIKE '%.C') OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%') AND l_union = 'National Union of Bank Employees (NUBE)')) AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_HL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance = 0 l_plan_name = 'X' VALID = 'Y' L_user_person_type = PER_ASG_USER_PERSON_TYPE l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_duration = IV_TOTALDURATION l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_grade_name = PER_ASG_GRADE_NAME l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave Plan') l_plan_name = 'Hospitalization Leave Plan' ) ELSE ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave Plan Contractor') l_plan_name = 'Hospitalization Leave Plan Contractor' ) ) IF L_Acrl_Balance - IV_TOTALDURATION < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (((l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND l_grade_name NOT LIKE '%.C') OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%') AND l_union = 'National Union of Bank Employees (NUBE)')) AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_RET_VAL_FF",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date < ADD_MONTHS(PER_ASG_REL_ACTUAL_TERMINATION_DATE,-1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_RET_LEAVE_MONTH' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_VOL_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_mgr_asg_status = 'X' l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_SG_UNPAID_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date < LEAST(l_probation_end,ADD_MONTHS(L_hire_date,3)) THEN ( change_contexts(effective_date = iv_start_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) ) IF (L_Ann_Acrl_Balance_emp > 0 OR L_Ann_Acrl_Balance_contr > 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_UNPAID_ERROR' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_TH_UNPAID_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF L_user_person_type != 'Fixed Term Contract' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) ) IF (iv_start_date > PER_ASG_DATE_PROBATION_END AND PER_ASG_DATE_PROBATION_END < ADD_MONTHS(L_hire_date,6)) THEN ( CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Extended Sick Leave' OR l_abs_typ_name_check = 'Unpaid Sick Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,L_year_start_date) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(L_year_end_date,ANC_ABS_ENTRS_START_DATE) + 1 ) ) ) I = I + 1 ) ) IF (L_Ann_Acrl_Balance_emp > 0 OR L_Ann_Acrl_Balance_contr > 0) OR L_sl_days < 90 THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply for Unpaid Leave only after using Annual Leave and Sick Leave' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_STUDY_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_ML_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_LOCATION_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_duration = IV_TOTALDURATION l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_Mat_Balance = 0 l_dob = '1951/01/01 00:00:00' (date) I = 1 L_mlfp_duration = 0 L_mlnp_duration = 0 L_ml_limit = 0 L_ml_duration = 0 L_Dep_name = PER_ASG_ORG_DEPARTMENT_NAME l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = TO_CHAR(l_absence_entry_id_num) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_limit_DAYS_mlfp = 45 l_limit_DAYS_mlnp = 53 l_msg = 'X' l_loc_name = PER_ASG_LOCATION_NAME CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_dob = IV_ACTUALCHILDBIRTHDATE IF (l_loc_name = 'Vientiane Branch, Laos' OR l_loc_name = 'Vientiane, Laos Branch') THEN L_ml_limit = 105 ELSE( L_ml_limit = 98 IF IV_ABSENCE_REASON = 'Full Pay' THEN L_ml_limit = l_limit_DAYS_mlfp ELSE L_ml_limit = l_limit_DAYS_mlnp ) IF l_duration > L_ml_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MAT_LEAVE_MAX' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(L_ml_limit) TOKEN_NAME[2] = 'ABS_TYPE' IF IV_ABSENCE_REASON = 'Full Pay' THEN TOKEN_VALUE[2] = 'Maternity Leave Full Pay' ELSE TOKEN_VALUE[2] = 'Maternity Leave No Pay' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(iv_start_date,-12), END_DATE = iv_start_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Maternity Leave' THEN ( l_msg = l_msg||'reas:'||to_char(ANC_ABS_ENTRS_ABSENCE_REASON_ID) IF ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000473222989 THEN ( L_mlfp_duration = L_mlfp_duration + ANC_ABS_ENTRS_DURATION IF IV_ABSENCE_REASON = 'Full Pay' THEN L_ml_duration = L_mlfp_duration + L_ml_duration ) ELSE IF ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000473222991 THEN ( L_mlnp_duration = L_mlnp_duration + ANC_ABS_ENTRS_DURATION IF IV_ABSENCE_REASON = 'No Pay' THEN L_ml_duration = L_mlnp_duration + L_ml_duration ) ) ) ) ) i = i + 1 ) ) IF L_ml_duration + l_duration > L_ml_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MAT_LEAVE_MAX' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(L_ml_limit) TOKEN_NAME[2] = 'ABS_TYPE' IF IV_ABSENCE_REASON = 'Full Pay' THEN TOKEN_VALUE[2] = 'Maternity Leave Full Pay' ELSE TOKEN_VALUE[2] = 'Maternity Leave No Pay' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF IV_ABSENCE_REASON = 'No Pay' AND L_mlfp_duration <> l_limit_DAYS_mlfp THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MAT_LEAVE_NPAFP' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_MY_SL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 30 IF IV_ABSENCE_REASON != 'Sick Leave without Certificate' AND (IV_ATTRIBUTE_1 = 'X' or IV_ATTRIBUTE_2 = 'X') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WITHO_CERT' RETURN VALID, ERROR_MESSAGE ) IF ((l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days of Banking') AND l_grade_name NOT LIKE '%.C') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Sick Leave without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) IF ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000002463386 AND IV_ABSENCE_REASON = 'Sick Leave without Certificate' THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_PRV_NXT_DAY' RETURN VALID, ERROR_MESSAGE ) ELSE( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION IF (L_without_cert_duration + l_duration) > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_MAX_5' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) ) ) i = i + 1 ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON != 'Sick Leave without Certificate' THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE= 'CIMB_ABS_MEDCERT_MANDATORY' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_APL_VAL_FF",
        "answer": "DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' j = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_child_birth = '1951/01/01 00:00:00' (date) L_child_exists = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN l_child_birth = IV_ACTUALCHILDBIRTHDATE ELSE l_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF (l_child_birth <> iv_start_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_APL_CHILD_DOB' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( l_count = 0 WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( IF PER_PER_CONT_REL_CONTACT_TYPE[j] = 'C' THEN ( l_count = l_count + 1 ) j = j +1 ) IF l_count > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_APL_FIRST_CHILD' RETURN VALID, ERROR_MESSAGE ) ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_CL_VAL_FF",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_SEX IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_cl_duration = 0 l_grade_name = PER_ASG_GRADE_NAME l_abs_reason = IV_ABSENCE_REASON L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_cl_balance = 0 L_hire_date = PER_ASG_REL_DATE_START l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) L_cl_limit_days = 10 l_mgr_asg_status = 'X' l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name = 'INTERN' OR l_grade_name = 'MT' OR l_grade_name = 'MA' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_NE_GRADES' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND PER_ASG_EMPLOYMENT_CATEGORY != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_abs_reason = 'Death in Family' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_abs_reason = 'Serious Illness' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(2) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '34' ) AND l_abs_reason = 'Serious Illness' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name LIKE '33%') AND l_abs_reason = 'Disaster' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name <> '34' OR l_grade_name <> '32' OR l_grade_name <> '33' OR l_grade_name <> '33S') AND IV_ABSENCE_REASON <> 'Paternity' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_ABSENCE_REASON = 'Paternity' AND l_duration > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_PL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_ABSENCE_REASON = 'Paternity' AND PER_ASG_SEX <> 'M' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_PL_FEMALE_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_EMPLOYMENT_CATEGORY = 'CONTRACT' THEN ( L_year_start_date = L_HIRE_date IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' OR l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN L_cl_limit_days = 5 IF TO_CHAR(L_HIRE_date,'MM') > TO_CHAR(iv_start_date,'MM') THEN ( L_year_start_date = TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(iv_start_date,'YYYY'))-1)||'/'||TO_CHAR(L_HIRE_date,'MM')||'/'||TO_CHAR(L_HIRE_date,'DD'),'YYYY/MM/DD') L_year_end_date = ADD_MONTHS(L_year_start_date,12) ) ELSE( L_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'/'||TO_CHAR(L_HIRE_date,'MM')||'/'||TO_CHAR(L_HIRE_date,'DD'),'YYYY/MM/DD') L_year_end_date = ADD_MONTHS(L_year_start_date,12) ) IF PER_ASG_PROJECTED_ASSIGNMENT_END_DATE WAS NOT DEFAULTED THEN L_year_end_date = PER_ASG_PROJECTED_ASSIGNMENT_END_DATE ) IF l_grade_name NOT LIKE 'C%' THEN ( CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > L_cl_limit_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_10_DAYS_MORE' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) ) ELSE IF l_grade_name LIKE 'C%' THEN ( IF l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_CONTRACT_3_DAYS' RETURN VALID, ERROR_MESSAGE ) i = 1 l_cl_duration = 0 CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_CONTRACT_3_DAYS' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_CL_VAL_FF",
        "answer": "default for anc_abs_entrs_duration is 0 default for iv_totalduration is 0 default for anc_abs_entrs_approval_status_cd is ' ' default_data_value for anc_per_abs_entrs_absence_entry_id_arr is 0 default for anc_abs_entrs_absence_type_id is 0 default for anc_abs_entrs_duration is 0 default for anc_abs_typ_name is ' ' default for anc_abs_entrs_absence_status_cd is ' ' default for anc_abs_entrs_end_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_start_date is '4712/12/31 00:00:00' (date) default for iv_start_date is '4712/12/31 00:00:00' (date) default for iv_end_date is '4712/12/31 00:00:00' (date) default for iv_caledarstartdate is '4712/12/31 00:00:00' (date) default for iv_caledarenddate is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_absence_reason_id is 0 default for per_asg_grade_name is 'X' default for iv_absence_reason is 'X' default for per_asg_rel_date_start is '1951/01/01 00:00:00' (date) default for per_asg_projected_assignment_end_date is '4712/12/31 00:00:00' (date) default for global_pay_interface_extraction_date is '1951/01/01' default for per_asg_user_person_type is 'X' default for per_asg_sex is 'X' default for per_asg_employment_category is 'X' default for anc_abs_entrs_user_mode is 'X' default for per_asg_manager_user_person_id is 0 default for per_per_person_number is 'X' default for per_asg_date_probation_end is '4712/12/31 00:00:00' (date) inputs are iv_start_date (date),iv_end_date (date),iv_caledarstartdate (date), iv_caledarenddate (date),iv_totalduration (number), iv_absence_reason (text) valid = 'Y' l_duration = iv_totalduration l_abs_entry_id = get_context(absence_entry_id,0) l_absence_entry_id = to_char(l_abs_entry_id) effdate = to_date(global_pay_interface_extraction_date ,'rrrr/mm/dd') l_year_start_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_cl_duration = 0 l_grade_name = per_asg_grade_name l_abs_reason = iv_absence_reason l_ldg_id = get_context(legislative_data_group_id,0) l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_cl_balance = 0 l_hire_date = per_asg_rel_date_start l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = get_value_set('CIMB_ATTACHMENTS',l_param) l_effective_date = get_context(effective_date,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(hr_assignment_id,0) l_person_id = get_context(person_id,0) l_cl_limit_days = 10 l_mgr_asg_status = 'X' l_fnd_person_number = get_value_set('CIMB_GET_FND_PERSON') if MOD(l_duration,0.5) <> 0 then ( valid = 'N' error_message = 'CIMB_MIN_DAYS_REQ' token_name[1] = 'MSG' token_value[1] = 'You leave duration is incorrect. Please enter start time or end time according to your half day working hours' return valid, error_message, token_name, token_value ) if isnull(l_fnd_person_number) = 'N' then l_fnd_person_number = 'N' change_contexts(hr_assignment_id = l_hr_assign_id, effective_date = effdate) ( l_manager_id = per_asg_manager_user_person_id ) change_contexts(effective_date=l_effective_date,absence_entry_id = l_abs_entry_id) ( l_user_mode=anc_abs_entrs_user_mode ) l_mgr_asg_status = get_value_set('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = get_value_set('CIMB_GET_FND_PERSON_ID') if (l_user_mode != 'ADMIN' and per_per_person_number = l_fnd_person_number) or (l_user_mode != 'ADMIN' and l_manager_id = TO_NUMBER(l_fnd_person_number_id)) then ( if iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') then ( valid = 'N' error_message = 'CIMB_PRIOR_DM' return valid, error_message ) if l_mgr_asg_status <> 'ACTIVE' or l_manager_id = 0 then ( valid = 'N' error_message = 'CIMB_INACTIVE_MGR_ERROR' return valid, error_message ) if l_grade_name = 'INTERN' or l_grade_name = 'MT' or l_grade_name = 'MA' then ( valid = 'N' error_message = 'CIMB_CL_NE_GRADES' return valid, error_message ) if (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) or (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) and per_asg_employment_category != 'CONTRACT' then ( valid = 'N' error_message = 'CIMB_ABS_OVERLAP' return valid, error_message ) if l_abs_reason = 'Death in Family' and l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_MAXDAYS' token_name[1] = 'ABS_REASON' token_value[1] = l_abs_reason token_name[2] = 'MAX_CL_DAYS' token_value[2] = TO_CHAR(3) return valid, error_message,token_name,token_value ) if l_abs_reason = 'Serious Illness' then ( if (l_grade_name = '32' or l_grade_name = '33' or l_grade_name = '33S') then ( if l_duration > 2 then ( valid = 'N' error_message = 'CIMB_CL_MAXDAYS' token_name[1] = 'ABS_REASON' token_value[1] = l_abs_reason token_name[2] = 'MAX_CL_DAYS' token_value[2] = TO_CHAR(2) return valid, error_message,token_name,token_value ) ) else ( if l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_MAXDAYS' token_name[1] = 'ABS_REASON' token_value[1] = l_abs_reason token_name[2] = 'MAX_CL_DAYS' token_value[2] = TO_CHAR(3) return valid, error_message,token_name,token_value ) ) ) if (l_grade_name = '34' or l_grade_name = '32' or l_grade_name like '33%') and l_abs_reason = 'Disaster' and l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_MAX_DAYS' return valid, error_message ) if iv_absence_reason = 'Paternity' and l_duration > 5 then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'Compassionate Leave - Paternity cannot be applied for more than 5 days' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Adoption' and l_duration > 5 then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'Compassionate Leave - Adoption cannot be applied for more than 5 days' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Paternity' and per_asg_sex <> 'M' then ( valid = 'N' error_message = 'CIMB_CL_PL_FEMALE_ERROR' return valid, error_message ) if iv_absence_reason = 'Adoption' and per_asg_employment_category = 'CONTRACT' then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Compassionate Leave - Adoption. Please check your Employment Category.' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Adoption' and per_asg_sex <> 'M' then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Compassionate Leave - Adoption. If you are Female, please change your Leave type to Adoption Leave.' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Adoption' and (iv_start_date <= per_asg_date_probation_end) then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Compassionate Leave - Adoption. Please check you Probation Status' return valid, error_message, token_name, token_value ) if per_asg_employment_category = 'CONTRACT' then ( if iv_absence_reason = 'Adoption' then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Compassionate Leave - Adoption. Please check your employement category. ' return valid, error_message, token_name, token_value ) else ( l_year_start_date = l_hire_date if l_grade_name = '75.DE' or l_grade_name = '76.DE' or l_grade_name = '77.DE' or l_grade_name = '78.DE'or l_grade_name = '79.DE' or l_grade_name = '80.DE' or l_grade_name = '81.DE' or l_grade_name = '75.D' or l_grade_name = '76.D' or l_grade_name = '77.D' or l_grade_name = '78.D' or l_grade_name = '79.D' or l_grade_name = '80.D' or l_grade_name = '81.D' or l_grade_name = '74.D' or l_grade_name = '73.D' or l_grade_name = '72.D' or l_grade_name = '71.D' or l_grade_name = '70.D' then l_cl_limit_days = 5 if TO_CHAR(l_hire_date,'MM') > TO_CHAR(iv_start_date,'MM') then ( l_year_start_date = TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(iv_start_date,'YYYY'))-1)||'/'||TO_CHAR(l_hire_date,'MM')||'/'||TO_CHAR(l_hire_date,'DD'),'YYYY/MM/DD') l_year_end_date = ADD_MONTHS(l_year_start_date,12) ) else ( l_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'/'||TO_CHAR(l_hire_date,'MM')||'/'||TO_CHAR(l_hire_date,'DD'),'YYYY/MM/DD') l_year_end_date = ADD_MONTHS(l_year_start_date,12) ) if per_asg_projected_assignment_end_date was not defaulted then l_year_end_date = per_asg_projected_assignment_end_date ) if (l_grade_name not like 'C1%' or l_grade_name not like 'C2%' or l_grade_name not like 'C3%' or l_grade_name not like 'C4%' or l_grade_name not like 'C5%' or l_grade_name not like 'C6%'or l_grade_name not like 'C7%' or l_grade_name not like 'C8%'or l_grade_name not like 'C9%'or l_grade_name not like 'C10%') then ( change_contexts (start_date= l_year_start_date , end_date= l_year_end_date) ( while (anc_per_abs_entrs_absence_entry_id_arr.exists(i)) loop ( change_contexts(absence_entry_id = anc_per_abs_entrs_absence_entry_id_arr[i]) ( change_contexts (absence_type_id = anc_abs_entrs_absence_type_id) ( l_abs_typ_name_check = anc_abs_typ_name if l_abs_entry_id <> anc_per_abs_entrs_absence_entry_id_arr[i] and l_abs_typ_name_check = 'Compassionate Leave' and anc_abs_entrs_absence_status_cd <> 'ORA_WITHDRAWN' and anc_abs_entrs_approval_status_cd <> 'DENIED' and anc_abs_entrs_absence_status_cd <> 'SAVED' then ( l_cl_duration = l_cl_duration + anc_abs_entrs_duration if l_cl_duration + l_duration > l_cl_limit_days then ( valid = 'N' error_message = 'CIMB_CL_10_DAYS_MORE' return valid, error_message ) ) ) ) i = i + 1 ) ) ) else if (l_grade_name like 'C1%' or l_grade_name like 'C2%' or l_grade_name like 'C3%' or l_grade_name like 'C4%' or l_grade_name like 'C5%' or l_grade_name like 'C6%'or l_grade_name like 'C7%' or l_grade_name like 'C8%'or l_grade_name like 'C9%'or l_grade_name like 'C10%') then ( if l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_CONTRACT_3_DAYS' return valid, error_message ) i = 1 l_cl_duration = 0 change_contexts (start_date= l_year_start_date , end_date= l_year_end_date) ( while (anc_per_abs_entrs_absence_entry_id_arr.exists(i)) loop ( change_contexts(absence_entry_id = anc_per_abs_entrs_absence_entry_id_arr[i]) ( change_contexts (absence_type_id = anc_abs_entrs_absence_type_id) ( l_abs_typ_name_check = anc_abs_typ_name if l_abs_entry_id <> anc_per_abs_entrs_absence_entry_id_arr[i] and l_abs_typ_name_check = 'Compassionate Leave' and anc_abs_entrs_absence_status_cd <> 'ORA_WITHDRAWN' and anc_abs_entrs_approval_status_cd <> 'DENIED' and anc_abs_entrs_absence_status_cd <> 'SAVED' then ( l_cl_duration = l_cl_duration + anc_abs_entrs_duration if l_cl_duration + l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_CONTRACT_3_DAYS' return valid, error_message ) ) ) ) i = i + 1 ) ) ) ) if (l_grade_name like 'EQ.1%' or l_grade_name like 'EQ.2%' or l_grade_name like 'EQ.3%' or l_grade_name like 'EQ.4%' ) then ( if l_abs_reason != 'Death in Family' then ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are only entitle to Compassionate Leave - Death of family members (Parents, Parents in law, Spouse, Children and Siblings)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) if l_duration > 2 then ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your leave duration exceed 2 days limit per ocassion' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) if isnull(l_value) = 'N' then ( l_value = '0' ) if l_value = '0' then ( valid = 'N' error_code = 'W' error_message= 'CIMB_DOCUMENT_MANDATORY' return valid, error_message ) ) return valid",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_MRG_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MARITAL_STATUS IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 5 AND (l_grade_name <> '35' AND l_grade_name <> '36' AND l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '33' AND l_grade_name <> '33S') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 10 AND (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE ,TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 3 AND (l_grade_name = 'EQ.1' OR l_grade_name = 'EQ.2' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.4' ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE ,TOKEN_NAME, TOKEN_VALUE ) IF ADD_MONTHS(IV_ATTRIBUTE_DATE1,6) < iv_start_date AND ADD_MONTHS(IV_ATTRIBUTE_DATE2,6) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MRGL_REG_CER_DATE' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_SPORTS_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_prv_duration = 0 EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_TOTALDURATION > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sports Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF l_prv_duration + IV_TOTALDURATION > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_HAJJ_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_assignment_category = PER_ASG_EMPLOYMENT_CATEGORY l_job_name = PER_ASG_JOB_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_pl_duration = 0 l_msg = 'X' l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_departure_dt = IV_ATTRIBUTE_DATE1 l_arrival_dt = IV_ATTRIBUTE_DATE2 IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_assignment_category = 'CONTRACT' AND (l_grade_name = 'GCEO.' OR l_job_name LIKE '%Chief%JF0008') THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for this leave for up to 40 days only' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= l_year_begin_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND l_abs_typ_name_check LIKE 'Hajj Leave%'THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 40) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(40-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ELSE IF (l_grade_name <> '35' AND l_grade_name <> '36' AND l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '70' AND l_grade_name <> '71' AND l_grade_name <> '72' AND l_grade_name <> '33' AND l_grade_name <> '33S' AND l_grade_name NOT LIKE '81%' AND l_grade_name NOT LIKE '80%' AND l_grade_name NOT LIKE '79%' AND l_grade_name NOT LIKE '78%' AND l_grade_name NOT LIKE '77%' AND l_grade_name NOT LIKE '76%' AND l_grade_name NOT LIKE '75%' AND l_grade_name NOT LIKE '74%' AND l_grade_name NOT LIKE '73%') THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for this leave for up to 40 days only' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= l_year_begin_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND l_abs_typ_name_check LIKE 'Hajj Leave%'THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 40) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(40-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ELSE IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S' OR l_grade_name LIKE '81%' OR l_grade_name LIKE '80%' OR l_grade_name LIKE '79%' OR l_grade_name LIKE '78%' OR l_grade_name LIKE '77%' OR l_grade_name LIKE '76%' OR l_grade_name LIKE '75%' OR l_grade_name LIKE '74%' OR l_grade_name LIKE '73%' OR l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72') THEN ( IF (l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '33' AND l_grade_name <> '33S' AND l_grade_name <> '70' AND l_grade_name <> '71' AND l_grade_name <> '72') AND ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ELSE IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S' OR l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72') AND ADD_MONTHS(PER_ASG_REL_DATE_START,120) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for this leave for up to 30 days only' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) I = 1 L_year_end_date = TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'-12-31','YYYY-MM-DD') CHANGE_CONTEXTS (START_DATE= l_hire_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S' OR l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72') THEN ( IF l_abs_typ_name_check = 'Pilgrimage Leave or Umrah Leave' THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ELSE IF l_abs_typ_name_check LIKE 'Hajj%' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_ONCE_SVCPERIOD' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) IF l_arrival_dt < l_departure_dt OR l_departure_dt > iv_start_date OR l_arrival_dt < TRUNC(IV_END_DATE) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_HAJJ_ARLTDEP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_HAJJ_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_pl_duration = 0 l_msg = 'X' l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_departure_dt = IV_ATTRIBUTE_DATE1 l_arrival_dt = IV_ATTRIBUTE_DATE2 IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name <> '35' AND l_grade_name <> '36' AND l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '33' AND l_grade_name <> '33S' AND l_grade_name NOT LIKE '81%' AND l_grade_name NOT LIKE '80%' AND l_grade_name NOT LIKE '79%' AND l_grade_name NOT LIKE '78%' AND l_grade_name NOT LIKE '77%' AND l_grade_name NOT LIKE '76%' AND l_grade_name NOT LIKE '75%' AND l_grade_name NOT LIKE '74%' AND l_grade_name NOT LIKE '73%') THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_DAYS_ERROR' TOKEN_NAME[1] = 'LEAVE_DAYS' TOKEN_VALUE[1] = TO_CHAR(40) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= l_year_begin_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND l_abs_typ_name_check LIKE 'Hajj Leave%'THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 40) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(40-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ELSE IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S' OR l_grade_name LIKE '81%' OR l_grade_name LIKE '80%' OR l_grade_name LIKE '79%' OR l_grade_name LIKE '78%' OR l_grade_name LIKE '77%' OR l_grade_name LIKE '76%' OR l_grade_name LIKE '75%' OR l_grade_name LIKE '74%' OR l_grade_name LIKE '73%') THEN ( IF (l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '33' AND l_grade_name <> '33S') AND ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ELSE IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND ADD_MONTHS(PER_ASG_REL_DATE_START,120) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_DAYS_ERROR' TOKEN_NAME[1] = 'LEAVE_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) I = 1 L_year_end_date = TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'-12-31','YYYY-MM-DD') CHANGE_CONTEXTS (START_DATE= l_hire_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') THEN ( IF l_abs_typ_name_check = 'Pilgrimage Leave or Umrah Leave' THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ELSE IF l_abs_typ_name_check LIKE 'Hajj%' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_ONCE_SVCPERIOD' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) IF l_arrival_dt < l_departure_dt OR l_departure_dt > iv_start_date OR l_arrival_dt < TRUNC(IV_END_DATE) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_HAJJ_ARLTDEP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_TRANSFER_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION l_person_id = GET_CONTEXT(PERSON_ID,0) l_union_code = 'X' l_union_code = PER_ASG_ATTRIBUTE7 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' L_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') I = 1 L_tl_days = 0 l_tl_limit = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ISNULL(l_union_code) = 'N' THEN l_union_code = 'X' IF PER_ASG_EMPLOYMENT_CATEGORY = 'CONTRACT' OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%') AND l_union_code <> 'Sarawak Bank Employees Union (SBEU)') THEN ( VALID = 'N' ERROR_MESSAGE = 'You are not eligible to apply for this leave' RETURN VALID, ERROR_MESSAGE ) IF ((l_grade_name = '34' OR l_grade_name = '72' OR l_grade_name = '71' OR l_grade_name = '70') OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '34%') AND l_union_code = 'Sarawak Bank Employees Union (SBEU)')) THEN ( l_tl_limit = 3 IF l_duration > l_tl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TL_MAX_LIMIT' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ELSE ( l_tl_limit = 5 IF l_duration > l_tl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TL_MAX_LIMIT' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) IF ADD_MONTHS(IV_ATTRIBUTE_DATE1,12) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE= 'CIMB_MY_TRANSFER_12_MTHS' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-5) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Transfer Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( L_tl_days = L_tl_days + ANC_ABS_ENTRS_DURATION IF L_tl_days > l_tl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TL_MAX_LIMIT' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_tl_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_PIL_VAL_FF",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hl_balance = 0 l_sl_balance = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') valid = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_hl_balance = GET_PLAN_BALANCE('Hospitalization Leave') l_sl_balance = GET_PLAN_BALANCE('Sick Leave') ) IF l_hl_balance > 0 OR l_sl_balance > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply for this only if Sick Leave and Hospitalization Leave have been completely used' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_NPL_VAL_FF",
        "answer": "INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_al_balance = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_al_balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ) IF l_al_balance = 0 THEN ( l_al_balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') ) IF l_al_balance > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply for this only if Annual Leave has been completely used' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_EXAM_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_study_prv_duration = 0 l_exam_prv_duration = 0 i = 1 l_limit = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF (PER_ASG_EMPLOYMENT_CATEGORY = 'CONTRACT' and (l_grade_name NOT LIKE 'G%' AND l_grade_name NOT LIKE 'U%' AND l_grade_name NOT LIKE '%DE' )) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CONTRACTOR_NOT_ALLOWED' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name NOT LIKE '35' AND l_grade_name NOT LIKE '36' AND l_grade_name NOT LIKE '34' AND l_grade_name NOT LIKE '32' AND l_grade_name NOT LIKE '33%' ) THEN ( l_limit = 5 IF l_duration > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) IF (l_grade_name LIKE '35' OR l_grade_name LIKE '36' OR l_grade_name LIKE '34' OR l_grade_name LIKE '32.' OR l_grade_name LIKE '33%' ) THEN ( l_limit = 7 IF l_duration > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(7) ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Examination Leave' OR l_abs_typ_name_check = 'Study Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Examination Leave' THEN ( l_exam_prv_duration = l_exam_prv_duration + ANC_ABS_ENTRS_DURATION IF l_exam_prv_duration + IV_TOTALDURATION > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) ELSE l_study_prv_duration = l_study_prv_duration + ANC_ABS_ENTRS_DURATION IF l_study_prv_duration + l_exam_prv_duration + l_duration > 10 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EXAM_STUDY_TOTAL' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) IF TO_DATE(TO_CHAR(IV_ATTRIBUTE_DATE1,'YYYY/MM/DD'),'YYYY/MM/DD') <> TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SG_EXAM_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_STUDY_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (Date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_prv_duration = 0 EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_study_duration = 0 L_MSG = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF TO_DATE(TO_CHAR(IV_ATTRIBUTE_DATE1,'YYYY/MM/DD'),'YYYY/MM/DD') < iv_start_date OR TO_DATE(TO_CHAR(IV_ATTRIBUTE_DATE1,'YYYY/MM/DD')) > ADD_DAYS(iv_start_date,14) THEN ( VALID = 'N' TOKEN_NAME[1] = 'EXAM_DATE' TOKEN_VALUE[1] = '14' ERROR_MESSAGE = 'CIMB_EXAM_DATE_ERROR' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Examination Leave' OR l_abs_typ_name_check = 'Study Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_prv_duration + l_duration > 10 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EXAM_STUDY_TOTAL' RETURN VALID, ERROR_MESSAGE ) IF l_abs_typ_name_check = 'Study Leave' THEN ( L_study_duration = L_study_duration + ANC_ABS_ENTRS_DURATION IF L_study_duration + l_duration > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_STUDY_LEAVE_ERROR' RETURN VALID, ERROR_MESSAGE ) ) ) ) ) i = i + 1 ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_FL4CSR_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_mgr_asg_status = 'X' l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ELSE IF ADD_MONTHS(PER_ASG_REL_DATE_START,24) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(2) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_SG_EXAM_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_prv_duration = 0 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date < PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF TO_DATE(TO_CHAR(IV_ATTRIBUTE_DATE1,'YYYY/MM/DD'),'YYYY/MM/DD') <> TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SG_EXAM_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Examination Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION ) IF l_prv_duration + L_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) i = i + 1 ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_MATERNITY_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_msg = 'X' L_person_id = GET_CONTEXT(PERSON_ID,-1) l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_EXT_MATERNITY_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR i_st_date IS '1951/01/01 00:00:00' (date) DEFAULT FOR l_ed_date IS '4712/12/31 23:59:59' (date) INPUTS ARE IV_START_DATE (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_abs_typ_name_check = ANC_ABS_TYP_NAME l_person_id = GET_CONTEXT(PERSON_ID,-1) l_absence_entry_id = to_char(l_abs_entry_id) l_ml_duration = 0 l_msg = 'X' l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_age = MONTHS_BETWEEN(IV_START_DATE,IV_ACTUALCHILDBIRTHDATE) L_prv_found = 'X' l_child_dob = IV_ACTUALCHILDBIRTHDATE (date) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_effective_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(IV_ACTUALCHILDBIRTHDATE,12) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Child age above 12 months. Birth date : '|| to_char(IV_ACTUALCHILDBIRTHDATE,'dd-mon-yyyy')|| ', '|| to_char(IV_START_DATE,'dd-mon-yyyy hh:mi:ss')||', '|| to_char(l_age)||' months' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) l_st_date = IV_ACTUALCHILDBIRTHDATE l_ed_date = IV_START_DATE l_eml_days_cnt = trunc(GET_ABSENCE_DAYS_PER_TYPE('Extended Maternity Leave',l_st_date,l_ed_date)) IF (l_eml_days_cnt) > 56 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized '||to_char(l_prv_duration)|| ' Days of your '||' Extended Maternity Leave entitlement from '|| to_char(l_st_date,'dd-mon-yyyy')|| ' to '|| to_char(l_ed_date,'dd-mon-yyyy')||'.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) l_st_date = ADD_MONTHS(IV_ACTUALCHILDBIRTHDATE,-1) l_ed_date = IV_START_DATE l_ml_days_cnt = trunc(GET_ABSENCE_DAYS_PER_TYPE('Maternity Leave',l_st_date,l_ed_date)) IF l_ml_days_cnt < 56 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Maternity Leave duration from '|| to_char(l_st_date,'dd-mon-yyyy')|| ' to '|| to_char(l_ed_date,'dd-mon-yyyy')||' is '|| to_char(l_ml_days_cnt)||' Days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_CL_VAL_FF",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_reason = IV_ABSENCE_REASON L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_abs_reason = 'Death of Spouse' OR l_abs_reason = 'Death of Parents' OR l_abs_reason = 'Death of Parents-in-Law' OR l_abs_reason = 'Death of Children') AND (l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_CL_IMMFAM' RETURN VALID, ERROR_MESSAGE ) ELSE IF (l_abs_reason = 'Death of Sibling' OR l_abs_reason = 'Death of Grandparents') AND l_duration > 1 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_CL_FAM' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_NPL_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) ) IF (iv_start_date > PER_ASG_DATE_PROBATION_END AND PER_ASG_DATE_PROBATION_END < ADD_MONTHS(L_hire_date,6)) THEN ( IF (L_Ann_Acrl_Balance_emp > 0 OR L_Ann_Acrl_Balance_contr > 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_UNPAID_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_PATERNITY_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number),IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_dob = IV_ACTUALCHILDBIRTHDATE IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(PER_PER_CONT_REL_CONTACT_PERSON_ID[j])) l_contact_dob = TO_DATE(l_contact_dob_char) IF PER_PER_CONT_REL_CONTACT_TYPE[j] = 'C' THEN ( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_child_exists = 'Y' CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] ) ) j = j + 1 ) ) IF ADD_DAYS(l_child_dob,365) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PAT_16W_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_ADOPTION_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date),IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_TOTALDURATION > 84 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(84) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_dob = IV_ACTUALCHILDBIRTHDATE IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > l_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(l_child_dob,12) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ADL_12_MONTHS' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_SPL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_DATE1 (date), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_msg = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_child_dob = '1951/01/01 00:00:00' (date) i = 1 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_dob = IV_ACTUALCHILDBIRTHDATE CHANGE_CONTEXTS (START_DATE= ADD_MONTHS(l_child_dob,-12) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Shared Parental Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > 28 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(28) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF ADD_MONTHS(l_child_dob,12) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ADL_12_MONTHS' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_CIL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) L_duration = IV_TOTALDURATION l_abs_reason = IV_ABSENCE_REASON VALID = 'Y' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') I = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_prv_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF L_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CIL_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Critical Illness Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION ) IF l_prv_duration + L_duration > 10 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CIL_MAX_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_CCL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'Singapore' l_duration = IV_TOTALDURATION VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_service_months = 0 l_elg_leave_days = 0 l_contact_person_id = 0 l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) K = 1 g = 1 child_person_id[1] = 0 child_citizen[1] = 'X' child_dob[1] = '1951/01/01 00:00:00' (date) youngest_person_id = 0 youngest_citizen = 'X' youngest_dob = '1951/01/01 00:00:00' (date) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_msg = 'X' l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = 'X' l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH','|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] ) child_person_id[k] = l_contact_person_id child_citizen[k] = l_child_citizen child_dob[k] = l_contact_dob k = k + 1 ) j = j + 1 ) ) IF l_child_exists = 'Y' THEN ( youngest_person_id = child_person_id[1] youngest_citizen = child_citizen[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_citizen = child_citizen[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) l_service_months = MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) IF l_service_months > 12 THEN ( IF TO_DATE(TO_CHAR(ADD_MONTHS(youngest_dob,84),'YYYY')||'-12-31','YYYY-MM-DD') < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CCL_LT_7' RETURN VALID, ERROR_MESSAGE ) ELSE IF TO_DATE(TO_CHAR(ADD_MONTHS(youngest_dob,84),'YYYY')||'-12-31','YYYY/MM/DD') >= IV_START_DATE THEN ( IF youngest_citizen = 'Singapore' THEN ( l_elg_leave_days = 6 IF l_duration > 6 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CCL_SG_MAX' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF youngest_citizen != 'Singapore' THEN ( l_elg_leave_days = 2 IF l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CCL_NSG_MAX' RETURN VALID, ERROR_MESSAGE ) ) ELSE VALID = 'Y' I = 1 CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Child Care Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > l_elg_leave_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are entitle for '||to_char(l_elg_leave_days)|| ' days. You current balance is '||to_char(l_elg_leave_days - l_prv_duration)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ) ELSE( IF TO_DATE(TO_CHAR(ADD_MONTHS(youngest_dob,84),'YYYY')||'-12-31','YYYY-MM-DD') < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CCL_LT_7' RETURN VALID, ERROR_MESSAGE ) ELSE IF youngest_citizen = 'Singapore' THEN ( l_elg_leave_days = ROUND(l_service_months/12 * 6,0) IF l_duration > l_elg_leave_days THEN ( VALID = 'N' TOKEN_NAME[1] = 'CCL_SG_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_elg_leave_days) ERROR_CODE = 'E' ERROR_MESSAGE = 'CIMB_CCL_SG_MAX_MM' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) ) ELSE( l_elg_leave_days = ROUND(l_service_months/12 * 6,0) IF l_duration > l_elg_leave_days THEN ( VALID = 'N' TOKEN_NAME[1] = 'CCL_NSG_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_elg_leave_days) ERROR_CODE = 'E' ERROR_MESSAGE = 'CIMB_CCL_NSG_MAX_MM' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= PER_ASG_REL_DATE_START , END_DATE= ADD_MONTHS(PER_ASG_REL_DATE_START,12)) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Child Care Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > l_elg_leave_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are eligible for '||to_char(l_elg_leave_days)|| ' days. You have utilized '|| to_char(l_prv_duration) ||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_CHILD_NO_UPD' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_EXT_CCL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'Singapore' l_duration = IV_TOTALDURATION VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_service_months = 0 l_elg_leave_days = 0 l_contact_person_id = 0 l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) K = 1 g = 1 child_person_id[1] = 0 child_citizen[1] = 'X' child_dob[1] = '1951/01/01 00:00:00' (date) youngest_person_id = 0 youngest_citizen = 'X' youngest_dob = '1951/01/01 00:00:00' (date) youngest_age = 0 l_msg = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_contact_type = 'X' l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = 'X' l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] ) child_person_id[k] = l_contact_person_id child_citizen[k] = l_child_citizen child_dob[k] = l_contact_dob k = k + 1 ) j = j + 1 ) ) IF l_child_exists = 'Y' THEN ( youngest_person_id = child_person_id[1] youngest_citizen = child_citizen[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_citizen = child_citizen[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) youngest_age = FLOOR(DAYS_BETWEEN(IV_START_DATE, youngest_dob)/365) IF youngest_age < 7 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot apply Extended Child Care Leave as youngest child age is '||TO_CHAR(youngest_age)||', younger than minimum of 7 years old' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF youngest_age > 12 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot apply Extended Child Care Leave as youngest child age '||TO_CHAR(youngest_age)||' , older than maximum of 12 years old' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( IF l_duration > 2 AND youngest_citizen = 'Singapore' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ECCL_SG_MAX' RETURN VALID, ERROR_MESSAGE ) ELSE IF youngest_citizen != 'Singapore' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ECCL_NSG_ERROR' RETURN VALID, ERROR_MESSAGE ) ELSE VALID = 'Y' ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Extended Child Care' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF l_prv_duration + l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ECCL_SG_MAX' RETURN VALID, ERROR_MESSAGE ) ) ) ) ) i = i + 1 ) ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_CHILD_NO_UPD' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_KH_MATL_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_reason = 'Maternity Leave' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_birth = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_birth = IV_ACTUALCHILDBIRTHDATE IF IV_TOTALDURATION > 90 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_DAYS' TOKEN_VALUE[2] = TO_CHAR(90) TOKEN_NAME[3] = 'OUM_TYPE' TOKEN_VALUE[3] = 'days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF PER_ASG_DATE_PROBATION_END > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ELSE IF ADD_DAYS(l_child_birth,-30) > IV_START_DATE THEN ( l_min_start_date = ADD_DAYS(l_child_birth,-30) VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your leave start date must not exceeding 30 days from Actual/Expected Child Birthdate.Earliest date allow is ' ||to_char(l_min_start_date,'DD-MON-YYYY') RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_UK_SL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( l_sl_limit = 30 IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,L_year_start_date) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(L_year_end_date,ANC_ABS_ENTRS_START_DATE) + 1 IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) ELSE IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply only for '||TO_CHAR(l_sl_limit-L_sl_days)||' of Sick Leave' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) IF l_duration > 7 THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE= 'CIMB_ABS_MEDCERT_MANDATORY' RETURN VALID, ERROR_CODE, ERROR_MESSAGE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_UK_MATERNITY_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_reason = 'Maternity Leave' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_birth = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_birth = IV_ACTUALCHILDBIRTHDATE IF ADD_DAYS(IV_START_DATE, 77) < l_child_birth THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Start Date applied exceeding maximum of 11 weeks from Actual/Schedule Child Birthdate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF PER_ASG_DATE_PROBATION_END > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_child_birth < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Start Date applied must be within 11 weeks before Actual/Schedule Child Birthdate or on the same date as Actual/Schedule Child Birthdate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please upload your certificate (MAT B1) from registered medical practitione or registered midwife, stating the expected week of childbirth. ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_UK_COMPASSIONATE_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_SEX IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_cl_duration = 0 l_grade_name = PER_ASG_GRADE_NAME l_abs_reason = IV_ABSENCE_REASON L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_cl_balance = 0 L_hire_date = PER_ASG_REL_DATE_START l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND PER_ASG_EMPLOYMENT_CATEGORY != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP'||PER_ASG_EMPLOYMENT_CATEGORY RETURN VALID, ERROR_MESSAGE ) IF l_abs_reason = 'Civil Partner, Spouse, Children, Parents or Parents-In-Law' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Compassionate Leave applied exceeding maximum of 3 days entitlement.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_abs_reason = 'Brothers or Sisters' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Compassionate Leave applied exceeding maximum of 2 days entitlement.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_abs_reason = 'Grandparents' AND l_duration > 1 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Compassionate Leave applied exceeding maximum of 1 days entitlement.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > 7 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Total Compassionate Leave applied exceeding maximum of 7 days entitlement per year.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE= 'CIMB_DOCUMENT_MANDATORY' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_SG_MRG_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_msg = 'X' l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date < PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ELSE IF ADD_MONTHS(IV_ATTRIBUTE_DATE1,6) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MRGL_REG_CER_DATE' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ANNUAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' OR l_grade_name LIKE 'GCEO.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT.' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA.' THEN l_grade_band = 'MA' ELSE IF l_grade_name = '80' OR l_grade_name = '79' OR l_grade_name = '78' OR l_grade_name = '77' OR l_grade_name = '76' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name = '75' OR l_grade_name = '74' OR l_grade_name = '73' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name = '72' THEN l_grade_band = 'G_72' ELSE IF l_grade_name = '71' OR l_grade_name = '70' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' THEN l_grade_band = 'GRADE_81DE_TO_75DE' ELSE IF l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' THEN l_grade_band = 'GRADE_81D_TO_75D' ELSE IF l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_74D_TO_73D' ELSE IF l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name LIKE 'C%' THEN l_grade_band = 'C' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'GRADE_32_TO_33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' OR l_grade_band = 'GRADE_81DE_TO_75DE' OR l_grade_band = 'GRADE_81D_TO_75D' OR l_grade_band = 'GRADE_74D_TO_73D' OR l_grade_band = 'GRADE_72D_TO_70D' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band ,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND l_asg_category != 'CONTRACT' AND (L_Ann_accrual - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ANNUAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE 'GCEO.%' OR l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' OR l_grade_name LIKE 'GCEO.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT%' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA%' THEN l_grade_band = 'MA' ELSE IF l_grade_name = '80' OR l_grade_name = '79' OR l_grade_name = '78' OR l_grade_name = '77' OR l_grade_name = '76' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name = '75' OR l_grade_name = '74' OR l_grade_name = '73' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name = '72' THEN l_grade_band = 'G_72' ELSE IF l_grade_name = '71' OR l_grade_name = '70' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' THEN l_grade_band = 'GRADE_81DE_TO_75DE' ELSE IF l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' THEN l_grade_band = 'GRADE_81D_TO_75D' ELSE IF l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_74D_TO_73D' ELSE IF l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name LIKE 'C%' THEN l_grade_band = 'C' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'GRADE_32_TO_33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' OR l_grade_band = 'GRADE_81DE_TO_75DE' OR l_grade_band = 'GRADE_81D_TO_75D' OR l_grade_band = 'GRADE_74D_TO_73D' OR l_grade_band = 'GRADE_72D_TO_70D' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band ,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND l_asg_category != 'CONTRACT' AND (L_Ann_accrual - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ANNUAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START L_attrition_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME l_position_name = PER_ASG_POSITION_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (l_duration - FLOOR(l_duration) <> 0 AND l_duration - FLOOR(l_duration) <> 0.5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = LEAST(L_attrition_date,L_year_end_date), LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) IF (l_grade_name LIKE 'C%' OR l_grade_name LIKE '%.D' OR l_grade_name LIKE '%XT') THEN ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr IF (L_Ann_Acrl_Balance - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have insufficient leave balance. Your current leave balance as at '||TO_CHAR(L_attrition_date,'YYYY/MM/DD')||' is '||to_char(L_Ann_Acrl_Balance)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ELSE ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp IF (L_Ann_Acrl_Balance - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have insufficient leave balance. Your current leave balance as at '||TO_CHAR(l_year_end_date,'YYYY/MM/DD')||' is '||to_char(L_Ann_Acrl_Balance)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND (l_asg_category != 'CONTRACT' OR (l_asg_category = 'CONTRACT' AND (l_grade_name NOT LIKE 'G1.%' OR l_grade_name NOT LIKE 'G2.%' OR l_grade_name NOT LIKE 'G3.%'))) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE 'GCEO.%' OR l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' OR l_grade_name LIKE 'GCEO.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' OR l_grade_name LIKE 'EQ.%'THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' OR l_grade_name LIKE 'EQ%'THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT%' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA%' THEN l_grade_band = 'MA' ELSE IF l_grade_name = '80' OR l_grade_name = '79' OR l_grade_name = '78' OR l_grade_name = '77' OR l_grade_name = '76' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name = '75' OR l_grade_name = '74' OR l_grade_name = '73' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name = '72' THEN l_grade_band = 'G_72' ELSE IF l_grade_name = '71' OR l_grade_name = '70' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' THEN l_grade_band = 'GRADE_81DE_TO_75DE' ELSE IF l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' THEN l_grade_band = 'GRADE_81D_TO_75D' ELSE IF l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_74D_TO_73D' ELSE IF l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name LIKE 'C%' THEN l_grade_band = 'C' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'GRADE_32_TO_33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' OR l_grade_band = 'GRADE_81DE_TO_75DE' OR l_grade_band = 'GRADE_81D_TO_75D' OR l_grade_band = 'GRADE_74D_TO_73D' OR l_grade_band = 'GRADE_72D_TO_70D' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band ,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND l_asg_category != 'CONTRACT' AND (L_Ann_accrual - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_SG_ANNUAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_comp_limit = 'X' l_grade_band = 'X' L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_Ann_accrual_char = 'X' L_Ann_accrual = 0 L_leave_current_yr = 0 L_leave_next_yr = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_hire_date = PER_ASG_REL_DATE_START l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) L_svc_months = 0 L_svc_band = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_msg = 'X' l_init_bal_char = '0' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_init_bal = 0 l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_covrex = 0 l_mgr_asg_status = 'X' l_contract_yr_end_dt = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD'),'YYYY-MM-DD') l_person_number = PER_PER_PERSON_NUMBER l_covrex_CHAR = '0' IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') <= TO_DATE(TO_CHAR(EffDate,'YYYY/MM/DD'),'YYYY/MM/DD') AND IV_ABSENCE_REASON <> 'Emergency Leave' AND EffDate > TO_DATE('2019/10/17','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SG_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF l_asg_category != 'CONTRACT' THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) IF iv_end_date <= TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'/04/01','YYYY/MM/DD') AND iv_START_date > TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'/01/01','YYYY/MM/DD') THEN l_covrex_CHAR = GET_VALUE_SET('CIMB_GET_COVREX_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_LEG_CODE='''|| 'SG'||''''||'|P_EFF_DATE='''||TO_CHAR(iv_end_date,'YYYY')||'/04/01'||'''') L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp + TO_NUMBER(l_covrex_CHAR) *-1 l_msg = 'COVREX'||l_covrex_CHAR ) ELSE ( IF (l_person_number = '0061470' OR l_person_number = '5325154' OR l_person_number = '0037823' OR l_person_number = '0042777' OR l_person_number = '0078091' OR l_person_number = '0049436' OR l_person_number = '0035534' OR l_person_number = '0035606' OR l_person_number = '0035869' OR l_person_number = '0035878' OR l_person_number = '0035885' OR l_person_number = '0059716' OR l_person_number = '0013947' OR l_person_number = '5387529') THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) IF iv_end_date <= TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'/04/01','YYYY/MM/DD') AND iv_START_date > TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'/01/01','YYYY/MM/DD') THEN l_covrex_CHAR = GET_VALUE_SET('CIMB_GET_COVREX_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_LEG_CODE='''|| 'SG'||''''||'|P_EFF_DATE='''||TO_CHAR(iv_end_date,'YYYY')||'/04/01'||'''') L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp + TO_NUMBER(l_covrex_CHAR) *-1 l_msg = 'COVREX'||l_covrex_CHAR ) ELSE ( change_contexts(effective_date = l_contract_yr_end_dt, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (L_Ann_Acrl_Balance - l_duration) < 0 AND (IV_END_DATE <= l_year_end_date AND l_asg_category != 'CONTRACT') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' OR l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'S6' OR l_grade_name = 'S7' OR l_grade_name = 'S8' OR l_grade_name = 'S9' OR l_grade_name = 'S10' OR l_grade_name = 'S11' OR l_grade_name = 'S12' THEN l_grade_band = 'U1_TO_U5' ELSE IF l_grade_name = 'U6.' OR l_grade_name = 'S4' OR l_grade_name = 'S5' THEN l_grade_band = 'U6' ELSE IF l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3' THEN l_grade_band = 'U7_TO_U9' ELSE IF l_grade_name = 'U10.' OR l_grade_name = 'U11.' THEN l_grade_band = 'U10_TO_U11' l_comp_limit = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'COMPULSORY','0') IF l_duration >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF l_duration < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SG_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE ) IF IV_END_DATE > l_year_end_date THEN ( L_svc_months = MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) IF L_svc_months <= 60 THEN L_svc_band = 'LT_5' ELSE IF L_svc_months > 60 AND L_svc_months <= 120 THEN L_svc_band = 'GT_5_LT_10' ELSE L_svc_band = 'GT_10' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,L_svc_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF IV_START_DATE > l_year_end_date THEN ( IF L_Ann_accrual - l_duration < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE( L_leave_current_yr = GET_PAY_AVAILABILITY ( 'ASSIGN', IV_START_DATE, ADD_DAYS(l_year_end_date,1), 'Y', 'Y', 'Y', 'Y', 'D') L_leave_next_yr = l_duration - L_leave_current_yr IF (L_Ann_Acrl_Balance - L_leave_current_yr < 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF (L_Ann_accrual - L_leave_next_yr < 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_TH_ANNUAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_nxt_year_end_date = ADD_MONTHS(l_year_end_date,12) l_year_mid_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-06-30','YYYY-MM-DD') l_comp_limit = 'X' l_grade_band = 'X' L_Acrl_Balance_Year = 0 L_Annual_Acrl_Balance = 0 L_Annual_Acrl_Balance_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_bu_id = '0' l_msg = 'X' l_entitlement = 0 l_entitlement_char = 'X' L_curr_year_days = 0 L_hire_date = PER_ASG_REL_DATE_START L_nxt_year_days = 0 L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') l_hdl_create = GET_VALUE_SET('CIMB_HDL_CREATE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_ABS_ENTRY_ID='''||TO_CHAR(l_abs_entry_id)||'''') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_hdl_create = 'Y' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_HDL_CREATED' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_start_date <= ADD_DAYS(PER_ASG_DATE_PROBATION_END,0) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PROB_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_start_date > TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(EffDate,'YYYY'))+1)||'/06/30','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_FUTURE_ABS_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = l_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ELSE L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') ) IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' THEN l_grade_band = 'U1_TO_U2' ELSE IF l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' THEN l_grade_band = 'U3_TO_U6' ELSE IF l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'U10.' OR l_grade_name = 'U11.' THEN l_grade_band = 'U7_TO_U11' l_comp_limit = GET_TABLE_VALUE('CIMB_TH_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'COMPULSORY',iv_start_date) l_entitlement_char = GET_TABLE_VALUE('CIMB_TH_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'ENTITLEMENT',iv_start_date) l_entitlement = TO_NUMBER(l_entitlement_char) IF L_Annual_Acrl_Balance - l_duration < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_END_DATE > l_year_end_date THEN ( L_curr_year_days = GET_PAY_AVAILABILITY ( 'ASSIGN', IV_START_DATE, ADD_DAYS(l_year_end_date,1), 'Y', 'Y', 'Y', 'Y', 'D') L_nxt_year_days = l_duration - L_curr_year_days IF iv_start_date < l_year_end_date AND L_Annual_Acrl_Balance - L_curr_year_days < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_entitlement - L_nxt_year_days < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ) IF (IV_ABSENCE_REASON <> 'Emergency Leave' AND IV_START_DATE <= EffDate) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot apply for this leave without 2 days of prior notice. In urgent case, please change the reason to Emergency and re-apply.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF EffDate < iv_start_date AND IV_ABSENCE_REASON <> 'Emergency Leave' AND EffDate > TO_DATE('2019/10/17','YYYY/MM/DD') THEN ( L_nxt_working_day = ADD_DAYS(EffDate,2) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY('ASSIGN', ADD_DAYS(EffDate,1), L_nxt_working_day, 'Y', 'Y', 'Y', 'Y', 'D') IF L_chk_nxt_wrk_dur < 2 THEN ( WHILE (L_chk_nxt_wrk_dur < 2) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), L_nxt_working_day, 'Y', 'Y', 'Y', 'Y', 'D') ) ) IF iv_start_date <= L_nxt_working_day AND iv_start_date >= EffDate THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) l_bu_id = get_value_set('CIMB_GET_BU_ID','|=P_PERSON_ID='||to_char(l_person_id)) IF l_bu_id = '300000003862329' then l_comp_limit = '3' ELSE l_comp_limit = l_comp_limit IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Block Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION > TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON != 'Block Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_TH_AL_CMPLSORY_WARN' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_SICK_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_comp_limit = 'X' l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_grade_band = 'X' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance_Year = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) i = 1 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) L_sl_duration = 0 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_user_person_type = PER_ASG_USER_PERSON_TYPE L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_HALF_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) ERROR_MESSAGE = 'CIMB_TH_SL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(START_DATE = l_year_begin_date, END_DATE = iv_start_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Sick Leave' THEN L_sl_duration = L_sl_duration + ANC_ABS_ENTRS_DURATION IF L_sl_duration + l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-L_sl_duration) ERROR_MESSAGE = 'CIMB_TH_SL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_EX_SICK_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_comp_limit = 'X' l_grade_band = 'X' L_Acrl_Balance_Year = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) i = 1 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) L_sl_duration = 0 L_esl_duration = 0 l_abs_typ_name = 'X' l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_user_person_type = PER_ASG_USER_PERSON_TYPE L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_HALF_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) ERROR_MESSAGE = 'CIMB_TH_ESL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) IF l_asg_category != 'CONTRACT' THEN L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ELSE L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') IF L_Annual_Acrl_Balance - L_Annual_Acrl_Balance > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You still have balance in Annual Leave Plan. Your Annual Leave Plan balance is '||to_char(L_Annual_Acrl_Balance)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(START_DATE = l_year_begin_date, END_DATE = iv_start_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Sick Leave' THEN L_sl_duration = L_sl_duration + ANC_ABS_ENTRS_DURATION ELSE IF l_abs_typ_name = 'Extended Sick Leave' THEN L_esl_duration = L_esl_duration + ANC_ABS_ENTRS_DURATION IF L_esl_duration + l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'N' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-L_esl_duration) ERROR_MESSAGE = 'CIMB_TH_ESL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE ,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) IF L_sl_duration < 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ESL_SL_NOTUSED' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_UP_SICK_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 L_esl_days = 0 l_upl_days = 0 I = 1 l_absence_entry_id = to_char(GET_CONTEXT(ABSENCE_ENTRY_ID, -1)) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY L_ol_duration = 0 l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') L_esl_days = 0 L_usl_days = 0 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ELSE L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) ERROR_MESSAGE = 'CIMB_TH_USL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) IF l_start_date > ADD_DAYS(PER_ASG_DATE_PROBATION_END,1) AND L_Annual_Acrl_Balance > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_SL_AL_BAL_AVL' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Extended Sick Leave' OR l_abs_typ_name_check = 'Unpaid Sick Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN ( L_ol_duration = 0 L_ol_duration = GET_PAY_AVAILABILITY ( 'ASSIGN', L_year_start_date, ANC_ABS_ENTRS_END_DATE, 'Y', 'Y', 'Y', 'Y', 'N') IF l_abs_typ_name_check = 'Sick Leave' THEN L_sl_days = L_sl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Extended Sick Leave' THEN L_esl_days = L_esl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Unpaid Sick Leave' THEN L_usl_days = L_usl_days + L_ol_duration ) ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN ( L_ol_duration = ANC_ABS_ENTRS_DURATION IF l_abs_typ_name_check = 'Sick Leave' THEN L_sl_days = L_sl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Extended Sick Leave' THEN L_esl_days = L_esl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Unpaid Sick Leave' THEN L_usl_days = L_usl_days + L_ol_duration ) ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN ( L_ol_duration = 0 L_ol_duration = GET_PAY_AVAILABILITY ( 'ASSIGN', ANC_ABS_ENTRS_START_DATE, L_year_end_date, 'Y', 'Y', 'Y', 'Y', 'N') IF l_abs_typ_name_check = 'Sick Leave' THEN L_sl_days = L_sl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Extended Sick Leave' THEN L_esl_days = L_esl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Unpaid Sick Leave' THEN L_usl_days = L_usl_days + L_ol_duration ) ) ) ) I = I + 1 ) ) IF L_usl_days + l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-L_usl_days) ERROR_MESSAGE = 'CIMB_TH_USL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) IF L_sl_days < 30 OR L_esl_days < 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_USL_SL_ESL_NOTUSED' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_PERSONAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_SEX IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') L_pl_duration = 0 i = 1 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_HALF_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 10 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(10) ERROR_MESSAGE = 'CIMB_TH_PL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE , ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_ABSENCE_REASON = 'Marriage (Self)' OR IV_ABSENCE_REASON = 'Graduation (Self)') AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PL_MRGGRAD' RETURN VALID, ERROR_MESSAGE ) ELSE IF PER_ASG_SEX = 'F' AND IV_ABSENCE_REASON = 'Paternity Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PL_BOC' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(START_DATE = l_year_begin_date, END_DATE = l_year_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Personal Leave' THEN L_pl_duration = L_pl_duration + ANC_ABS_ENTRS_DURATION IF L_pl_duration + l_duration > 10 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(10-L_pl_duration) ERROR_MESSAGE = 'CIMB_TH_PL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE , ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_HAJJ_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_value = 'X' EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = to_char(l_absence_entry_id_num) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_start_date < ADD_MONTHS(PER_ASG_REL_DATE_START,24) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MHL_2_YRS' RETURN VALID, ERROR_MESSAGE ) IF l_start_date < ADD_DAYS(EffDate,30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_30_DAYS_ADV' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_MONKHOOD_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_TOTALDURATION > 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_start_date < ADD_MONTHS(PER_ASG_REL_DATE_START,24) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MHL_2_YRS' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_STERILIZATION_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_value = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_value = GET_VALUE_SET('CIMB_ATTACHMENTS','|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_MS_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_value = 'X' l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = to_char(l_absence_entry_id_num) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS','|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id) I = 1 l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_ms_duration = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 60 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(60) ERROR_MESSAGE = 'CIMB_TH_MILT_LEAVE_BAL_NAVL' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(START_DATE = l_year_begin_date, END_DATE = l_year_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Military Service Leave' THEN l_ms_duration = l_ms_duration + ANC_ABS_ENTRS_DURATION IF l_ms_duration + l_duration > 60 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(60-l_ms_duration) ERROR_MESSAGE = 'CIMB_TH_MILT_LEAVE_BAL_NAVL' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) IF iv_start_date < ADD_MONTHS(PER_ASG_REL_DATE_START,24) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MHL_2_YRS' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_TRAINING_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = to_char(l_absence_entry_id_num) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS','|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_start_date < ADD_DAYS(EffDate,7) THEN ( VALID = 'N' ERROR_MESSAGE= 'CIMB_TH_TL_7DAYS_NOTICE' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_SG_SICK_VAL_FF",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_sl_balance = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' l_asg_start = PER_ASG_REL_DATE_START L_year_start_date = GREATEST(TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD'),l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 ERROR_CODE = 'W' l_grade = 'X' EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_sl_days = 0 l_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_ol_duration = 0 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF EffDate < TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = LEAST(L_year_end_date,PER_ASG_REL_ACTUAL_TERMINATION_DATE)) ( l_grade = PER_ASG_GRADE_NAME ) IF l_grade = 'MA.' OR l_grade = 'MA' OR l_grade = 'U8.' OR l_grade = 'U7.' OR l_grade = 'U6.' OR l_grade = 'U5.' OR l_grade = 'U4.' OR l_grade = 'U3.' OR l_grade = 'U2.' OR l_grade = 'U1.' OR l_grade = 'G1.' OR l_grade = 'G2.' OR l_grade = 'G3.' OR l_grade = 'S1' OR l_grade = 'S1A' OR l_grade = 'S1B' OR l_grade = 'S1a' OR l_grade = 'S1b' OR l_grade = 'S2' OR l_grade = 'S3' OR l_grade = 'S4' OR l_grade = 'S5' OR l_grade = 'S6' OR l_grade = 'S7' OR l_grade = 'S8' OR l_grade = 'S9' OR l_grade = 'S10' OR l_grade = 'S11' OR l_grade = 'S12' THEN l_limit = 14 ELSE IF (l_grade = 'U9.' OR l_grade = 'U10.' OR l_grade = 'U11.') THEN l_limit = 30 IF l_duration > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'ABS_REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) ERROR_MESSAGE = 'CIMB_ABS_REM_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Sick Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN ( L_ol_duration = 0 L_ol_duration = GET_PAY_AVAILABILITY ( 'ASSIGN', L_year_start_date, ANC_ABS_ENTRS_END_DATE, 'Y', 'Y', 'Y', 'Y', 'N') L_sl_days = L_sl_days + L_ol_duration ) ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN ( L_ol_duration = 0 L_ol_duration = GET_PAY_AVAILABILITY ( 'ASSIGN', ANC_ABS_ENTRS_START_DATE, L_year_end_date, 'Y', 'Y', 'Y', 'Y', 'N') L_sl_days = L_sl_days + L_ol_duration ) IF L_sl_days > l_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000004145323 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014) THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) AND IV_ABSENCE_REASON = 'Sick Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_PRV_NXT_DAY' RETURN VALID, ERROR_MESSAGE ) ELSE( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION IF (L_without_cert_duration + l_duration) > 5 AND IV_ABSENCE_REASON = 'Sick Leave Without Certificate' THEN ( VALID = 'N' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) ERROR_MESSAGE = 'CIMB_SL_WOC_MAX_5' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) ) ) ) ) i = i + 1 ) IF L_sl_days + l_duration > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'ABS_REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit-L_sl_days) ERROR_MESSAGE = 'CIMB_ABS_REM_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) IF IV_ABSENCE_REASON != 'Sick Leave Without Certificate' THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE= 'CIMB_ABS_MEDCERT_MANDATORY' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_MY_BFL_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION L_BFL_noexp_Acrl_Balance = 0 l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) L_BFL_3y_Acrl_Balance = 0 EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_msg = 'X' l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' l_grade_band = 'X' l_comp_limit = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_BFL_noexp_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan No Expiry') L_BFL_3y_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 3') L_BFL_3y_Acrl_Balance = L_BFL_3y_Acrl_Balance + GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 2') L_BFL_3y_Acrl_Balance = L_BFL_3y_Acrl_Balance + GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 1') ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (L_BFL_noexp_Acrl_Balance - l_duration) >= 0 OR (L_BFL_3y_Acrl_Balance - l_duration) >= 0 THEN VALID = 'Y' ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_BFL_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION L_BFL_noexp_Acrl_Balance = 0 L_BFL_6Month_Acrl_Balance = 0 l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) L_BFL_3y_Acrl_Balance = 0 EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_msg = 'X' l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' l_grade_band = 'X' l_comp_limit = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_BFL_noexp_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan No Expiry') L_BFL_3y_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 3') L_BFL_3y_Acrl_Balance = L_BFL_3y_Acrl_Balance + GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 2') L_BFL_3y_Acrl_Balance = L_BFL_3y_Acrl_Balance + GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 1') L_BFL_6Month_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan 6 Months Expiry') ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (L_BFL_noexp_Acrl_Balance - l_duration) >= 0 OR (L_BFL_3y_Acrl_Balance - l_duration) >= 0 OR (L_BFL_6Month_Acrl_Balance - l_duration) >= 0 THEN VALID = 'Y' ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name = '71' OR l_grade_name = '71' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '72' THEN l_grade_band = 'G_72' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ML_FP_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 l_maternity_fp_dur = 0 l_maternity_hp_dur = 0 L_without_cert_duration = 0 l_sl_balance = 0 L_grade_name = PER_ASG_GRADE_NAME l_limit = 0 l_limit_DAYS = 0 child_person_id[1] = 0 child_dob[1] = '1951/01/01 00:00:00' (date) l_child_birth = '1951/01/01 00:00:00' (date) j = 1 k = 1 l_contact_dob_char = 'X' l_child_exists = 'X' youngest_person_id = 0 youngest_dob = '1951/01/01 00:00:00' (date) l_msg = 'X' l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) L_duration_days = ROUND(DAYS_BETWEEN(iv_end_date,iv_start_date),0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN l_child_birth = IV_ACTUALCHILDBIRTHDATE ELSE l_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF l_child_birth > ADD_DAYS(IV_START_DATE,30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EDOB_30_DAYS_LATER' RETURN VALID, ERROR_MESSAGE ) IF L_grade_name = 'C1.' OR L_grade_name = 'C1.' OR L_grade_name = 'C3.' OR L_grade_name = 'C4.' OR L_grade_name = 'C5.' OR L_grade_name = 'C6.' OR L_grade_name = 'C7.' OR L_grade_name = 'C8.' OR L_grade_name = 'C9.' THEN ( l_limit = 2 l_limit_DAYS = 60 ) ELSE( l_limit = 3 l_limit_DAYS = 90 ) IF L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_MAX_DAYS' TOKEN_NAME[1] = 'MAX_FP_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_type = 'X' l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' child_person_id[k] = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(PER_PER_CONT_REL_CONTACT_PERSON_ID[j])) child_dob[k] = TO_DATE(l_contact_dob_char) k = k + 1 ) j = j + 1 ) ) IF k > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_5_CHILD' RETURN VALID, ERROR_MESSAGE ) IF l_child_exists = 'Y' AND k = 5 THEN ( youngest_person_id = child_person_id[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) IF (youngest_dob = IV_START_DATE AND ADD_MONTHS(youngest_dob ,7) < l_effective_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your youngest DOB recorded is '|| to_char(youngest_dob,'DD-Mon-YYYY') || ' person id is ' || to_char(youngest_person_id) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= ADD_MONTHS(iv_start_date,-9) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Maternity Leave - 1st Time Mothers' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_ONCE_YEAR' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_abs_typ_name_check = 'Maternity Leave' THEN ( l_maternity_fp_dur = l_maternity_fp_dur + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE)+1 l_msg = l_msg||'dur:'||to_char(l_maternity_fp_dur)||'LD:'||TO_CHAR(l_limit_DAYS) IF l_maternity_fp_dur + L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_MAX_DAYS' TOKEN_NAME[1] = 'MAX_FP_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) ) i = i + 1 ) ) ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ML_FP_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 l_maternity_fp_dur = 0 l_maternity_hp_dur = 0 L_without_cert_duration = 0 l_sl_balance = 0 L_grade_name = PER_ASG_GRADE_NAME l_limit = 0 l_limit_DAYS = 0 child_person_id[1] = 0 child_dob[1] = '1951/01/01 00:00:00' (date) l_child_birth = '1951/01/01 00:00:00' (date) j = 1 k = 1 l_contact_dob_char = 'X' l_child_exists = 'X' youngest_person_id = 0 youngest_dob = '1951/01/01 00:00:00' (date) l_msg = 'X' l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) L_duration_days = ROUND(DAYS_BETWEEN(iv_end_date,iv_start_date),0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN l_child_birth = IV_ACTUALCHILDBIRTHDATE ELSE l_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF l_child_birth > ADD_DAYS(IV_START_DATE,30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EDOB_30_DAYS_LATER' RETURN VALID, ERROR_MESSAGE ) l_limit = 3.22 l_limit_DAYS = 98 IF L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_MAX_DAYS' TOKEN_NAME[1] = 'MAX_FP_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_type = 'X' l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' child_person_id[k] = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(PER_PER_CONT_REL_CONTACT_PERSON_ID[j])) child_dob[k] = TO_DATE(l_contact_dob_char) k = k + 1 ) j = j + 1 ) ) IF k > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_5_CHILD' RETURN VALID, ERROR_MESSAGE ) IF l_child_exists = 'Y' AND k = 5 THEN ( youngest_person_id = child_person_id[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) IF (youngest_dob = IV_START_DATE AND ADD_MONTHS(youngest_dob ,7) < l_effective_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your youngest DOB recorded is '|| to_char(youngest_dob,'DD-Mon-YYYY') || ' person id is ' || to_char(youngest_person_id) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= ADD_MONTHS(iv_start_date,-9) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Maternity Leave - 1st Time Mothers' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_ONCE_YEAR' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_abs_typ_name_check = 'Maternity Leave' THEN ( l_maternity_fp_dur = l_maternity_fp_dur + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE)+1 l_msg = l_msg||'dur:'||to_char(l_maternity_fp_dur)||'LD:'||TO_CHAR(l_limit_DAYS) IF l_maternity_fp_dur + L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_MAX_DAYS' TOKEN_NAME[1] = 'MAX_FP_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) ) i = i + 1 ) ) ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_CN_MATERNITYLEAVE_VAL",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL DELIVERY' ) AND l_duration > 98) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum days (98 Calendar Days) allowed for normal delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'CESAREAN SECTION DELIVERY' ) AND l_duration > 113) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum days (113 Calendar Days) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB China"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ADOPTION_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date),IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_child_age = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_effective_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_asg_category = 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not elgible for Adoption Leave. Please check your Assigment Category' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not eligible for Adoption Leave. Please check your Confirmation Status or Confirmation Date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) l_child_dob = IV_ACTUALCHILDBIRTHDATE l_child_age = FLOOR(( DAYS_BETWEEN(IV_START_DATE,l_child_dob) + 1 ) /365 ) IF l_child_age > 7 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not eligible for Adoption Leave. Only eligible for child below 7 years old .' ||to_char(l_child_age)|| ' years old. ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (l_child_age <= 2 AND (IV_TOTALDURATION > 60)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Maximum duration for adoption leave for child younger or equal to 2 years old is 60 consecutive days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (l_child_age > 2 AND (IV_TOTALDURATION > 30)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Maximum duration for adoption leave for child older than 2 years old is 30 consecutive days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_VN_MaternityLeave",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'SINGLETON' ) AND l_duration > 6) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 6 months) allowed for normal delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'TWINS' ) AND l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 7 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'TRIPLETS' ) AND l_duration > 8) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 8 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'QUADRUPLETS' ) AND l_duration > 9) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 9 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'QUINTUPLETS' ) AND l_duration > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 10 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'UNPAID' ) ) THEN ( CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Maternity Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION ) ) ) i = i + 1 ) ) IF (L_sl_days <> 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 10 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_NIAGA_DAY_OFF_VALID",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS ' ' DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME IS ' ' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_abs_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_hire_month=to_number(to_char(PER_ASG_REL_DATE_START,'MM')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' l_dur=0 l_dur=IV_TOTALDURATION floored_accrual = floor(l_dur) decimal_accrual = l_dur - floored_accrual IF (decimal_accrual > 0) THEN ( VALID='N' ERROR_MESSAGE='CIMB_NIAGA_DECIMAL_ERROR' RETURN VALID,ERROR_MESSAGE ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = l_abs_type_id) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration= l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) ld_department_name =PER_ASG_ORG_DEPARTMENT_NAME IF (l_abs_duration+l_dur) > 12 AND (ld_department_name like 'TCB Pool%' OR ld_department_name like 'The Complete Banker%') THEN ( VALID='N' ERROR_MESSAGE = 'CIMB_NIAGA_DAY_OF_TCB_VALID' RETURN VALID,ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_HK_ANNUAL_LEAVE_ENTRY",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(l_effective_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(l_effective_date,'YYYY')||'-12-31','YYYY-MM-DD') l_nyear_begin_date = TO_DATE(TO_CHAR(l_effective_date,'YYYY')||'-01-01','YYYY-MM-DD') L_nyear_end_date = TO_DATE(TO_CHAR(l_effective_date,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME l_position_name = PER_ASG_POSITION_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('HK Permanent Employee Annual Leave Plan') l_plan_name = 'HK Permanent Employee Annual Leave Plan' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('HK Contract Employee Annual Leave Plan') l_plan_name = 'HK Contract Employee Annual Leave Plan' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_comp_limit = '7' IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Minimum duration for Compulsory/Block Leave is '||l_comp_limit||' days Please change your Absence Reason to Regular Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Hong Kong"
    },
    {
        "FORMULA_NAME": "CIMB_SG_VOLUNTEER_L_V_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_RSN_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' l_abs_rsn_name_check = 'X' i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_user_person_type = PER_ASG_USER_PERSON_TYPE l_limit = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_msg = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date, ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF l_duration > 1 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration exceeding the entitlement' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_absence_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Volunteer Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,L_year_start_date) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(L_year_end_date,ANC_ABS_ENTRS_START_DATE) + 1 IF L_sl_days > 1 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have already utilized your Volunteer Leave entitlement for this year' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_VOLUNTEER_L_V_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_RSN_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' l_abs_rsn_name_check = 'X' l_abs_entries_duration = 0 i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_user_person_type = PER_ASG_USER_PERSON_TYPE l_limit = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_msg = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date, ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration exceeding the entitlement' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE = L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_typ_name_check = 'Volunteer Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have already utilized your Volunteer Leave entitlement for this year' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) )i = i + 1 ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_VN_SEVILLLEAVE_VAL",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_Emp = GET_PLAN_BALANCE('VN Sick Leave Full Paid Plan') l_plan_name = 'VN Sick Leave Full Paid Plan' ) IF (L_Ann_Acrl_Balance_Emp > 0 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Unable to record this absence because you still have '|| to_char(L_Ann_Acrl_Balance_Emp)||' days of your Sick Leave Full Paid Plan. Please change your leave type to Sick Leave Full Paid.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB UK BFL Expiry Validation",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR l_expiry_date IS '4712/01/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_expiry_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-05-01','YYYY-MM-DD') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_reason = 'Maternity Leave' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = IV_START_DATE) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF IV_START_DATE >= TO_DATE('2024-01-01','YYYY-MM-DD') THEN ( IF IV_START_DATE >= l_expiry_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Brought Forward Leave Plan expired on 31 March. Please change your leave type.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF IV_END_DATE >= l_expiry_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Brought Forward Leave Plan expired on 31 March. Please split your leave application.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_VN_PaternityLeave",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text), IV_ACTUALCHILDBIRTHDATE (date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - SINGLETON' ) AND l_duration > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 5 days) allowed for normal delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - TWINS' ) AND l_duration > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 10 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - TRIPLETS' ) AND l_duration > 13) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 13 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - QUADRUPLETS' ) AND l_duration > 16) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 16 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - QUINTUPLETS' ) AND l_duration > 19) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 19 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'PREMATURE BIRTH' ) AND l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 7 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'SURGICAL CESAREAN SECTION - SINGLETON' ) AND l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 7 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'SURGICAL CESAREAN SECTION - TWINS OR MORE' ) AND l_duration > 14) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 14 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_VN_PersonalLeave",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text), IV_ACTUALCHILDBIRTHDATE (date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'MARRIAGE - SELF' ) AND l_duration > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 3 days) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE 'MARRIAGE - CHILDREN' ) AND l_duration > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'DEATH - IMMEDIATE FAMILY MEMBER ' ) AND l_duration > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_VN_PrenatalLeave",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text), IV_ACTUALCHILDBIRTHDATE (date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL CONDITION' ) AND l_duration > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE 'SPECIAL CONDITION' ) AND l_duration > 2) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_VN_UnpaidLeave",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_Emp = GET_PLAN_BALANCE('VN Employee Annual Leave Plan') l_plan_name = 'VN Employee Annual Leave Plan' ) IF (L_Ann_Acrl_Balance_Emp >= 0.5 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Unable to record this absence because you still have '|| to_char(L_Ann_Acrl_Balance_Emp)||' days of your Annual Leave Plan. Please change your leave type to Annual Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_VN_UnpaidMaternityLeave",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF (l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND l_abs_typ_name_check = 'Maternity Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') THEN ( IF (ADD_DAYS(ANC_ABS_ENTRS_END_DATE,1) <> IV_START_DATE) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Unpaid Maternity Leave must start exactly after End Date of Maternity Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) j = j + 1 ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_SG_UICL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'Singapore' l_duration = IV_TOTALDURATION VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_service_months = 0 l_elg_leave_days = 12 l_contact_person_id = 0 l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) K = 1 g = 1 child_person_id[1] = 0 child_citizen[1] = 'X' child_dob[1] = '1951/01/01 00:00:00' (date) youngest_person_id = 0 youngest_citizen = 'X' youngest_dob = '1951/01/01 00:00:00' (date) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_msg = 'X' l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = 'X' l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH','|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] ) child_person_id[k] = l_contact_person_id child_citizen[k] = l_child_citizen child_dob[k] = l_contact_dob k = k + 1 ) j = j + 1 ) IF l_child_exists = 'Y' THEN ( youngest_person_id = child_person_id[1] youngest_citizen = child_citizen[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_citizen = child_citizen[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) ) IF youngest_citizen != 'Singapore' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not eligible for Unpaid Infant Child Leave. Registered citizenship is' || l_child_citizen RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( IF( MONTHS_BETWEEN(IV_START_DATE, youngest_dob) > 24)THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not eligible for Unpaid Infant Child Leave. Registered Date of Birth is '|| l_contact_dob_char RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) I = 1 CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Unpaid Infant Care Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > l_elg_leave_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are entitle for '||to_char(l_elg_leave_days)|| ' days. You current balance is '||to_char(l_elg_leave_days - l_prv_duration)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CHILD_NO_UPD' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_MY_UNPAID_TU_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_PATCALDAYS_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START l_asg_end = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 L_first_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' l_sl_limit = 10 CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (l_grade_name LIKE 'G%' OR l_grade_name LIKE 'U%' OR l_grade_name LIKE '7%' OR l_grade_name LIKE '8%' OR l_grade_name LIKE '35%' OR l_grade_name LIKE '36&') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please select Paternity Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (l_union = 'Kesatuan Pegawai-pegawai Bank Sarawak (KPPBS) - G36' OR l_union = 'Kesatuan Pegawai-pegawai Bank Sarawak (KPPBS) - G35' OR l_union = 'Kesatuan Pegawai-pegawai Bank Sarawak (KPPBS) - G34' OR l_union = 'Kesatuan Pegawai-pegawai Bank Sabah (KPPBSABAH) - G34' OR l_union = 'Sarawak Bank Employees Union (SBEU)') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please select Paternity Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name = 'EQ.1' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.4') THEN ( IF (l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Paternity Leave entitlement per ocassion is 7 day(s).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ELSE ( IF (l_duration > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Paternity Leave entitlement per ocassion is 10 day(s).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Paternity Leave - 1st Time Father' OR l_abs_typ_name_check = 'Paternity Leave' OR(l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755052)) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_first_days = L_first_days + 1 ) ) ) i = i + 1 ) ) IF L_sl_days + 1 > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized '||to_char(L_sl_days)||' days of Paternity Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_UK_BIRTHDAY_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_PER_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_birthdate = PER_PER_DATE_OF_BIRTH l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' l_curr_year_birthdate = to_date(to_char(l_birthdate,'DDMM')||to_char(EffDate,'YYYY'),'DDMMYYYY') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < l_curr_year_birthdate) THEN ( l_birthdate_duration = GET_PAY_AVAILABILITY('ASSIGN',iv_start_date,l_curr_year_birthdate,'Y','Y','Y','Y','D') IF (l_birthdate_duration > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change the leave date to any dates between 5 days before and 5 days after your Birthday date.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) IF (IV_START_DATE > l_curr_year_birthdate) THEN ( l_birthdate_duration = GET_PAY_AVAILABILITY('ASSIGN',l_curr_year_birthdate,iv_start_date,'Y','Y','Y','Y','D') IF (l_birthdate_duration > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change the leave date to any dates between 5 days before and 5 days after your Birthday date.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_UK_MARRIAGE_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MARITAL_STATUS IS 'X' DEFAULT FOR PER_PER_MARITAL_STATUS IS 'X' DEFAULT FOR PER_PER_MARITAL_STATUS_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (PER_PER_MARITAL_STATUS != 'S' AND ADD_MONTHS(PER_PER_MARITAL_STATUS_DATE,6)> IV_START_DATE) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not entitled to Marriage Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF ( l_duration > 5 AND l_grade_name LIKE 'U%' ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for a maximum of 5 days of Marriage Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ( l_duration > 10 AND l_grade_name LIKE '3%' ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for a maximum of 10 days of Marriage Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_VN_AnnualLeave",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('VN Employee Annual Leave Plan') l_plan_name = 'VN Employee Annual Leave Plan' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND (l_asg_category != 'CONTRACT' OR (l_asg_category = 'CONTRACT' AND (l_grade_name NOT LIKE 'G1.%' OR l_grade_name NOT LIKE 'G2.%' OR l_grade_name NOT LIKE 'G3.%'))) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name LIKE 'GCEO.%' OR l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%') THEN l_comp_limit = '10' ELSE IF (l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%') THEN l_comp_limit = '7' ELSE IF (l_grade_name LIKE 'U7.%' OR l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' OR l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%') THEN l_comp_limit = '5' IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Minimum days for Compulsory Leave for your Grade '||l_grade_name||' is '|| l_comp_limit||' days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_MY_CL_VAL_FF_2",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_SEX IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_cl_duration = 0 l_grade_name = PER_ASG_GRADE_NAME l_abs_reason = IV_ABSENCE_REASON L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_cl_balance = 0 L_hire_date = PER_ASG_REL_DATE_START l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) L_cl_limit_days = 10 l_mgr_asg_status = 'X' l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name = 'INTERN' OR l_grade_name = 'MT' OR l_grade_name = 'MA' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_NE_GRADES' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Paternity' AND IV_START_DATE < TO_DATE('2023/01/01','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ERROR_MSG' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change your selected leave type to Paternity Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND PER_ASG_EMPLOYMENT_CATEGORY != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_abs_reason = 'Death in Family' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_abs_reason = 'Serious Illness' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(2) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '34' ) AND l_abs_reason = 'Serious Illness' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name LIKE '33%') AND l_abs_reason = 'Disaster' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name <> '34' OR l_grade_name <> '32' OR l_grade_name <> '33' OR l_grade_name <> '33S') AND IV_ABSENCE_REASON <> 'Paternity' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_ABSENCE_REASON = 'Paternity' AND l_duration > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_PL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_ABSENCE_REASON = 'Paternity' AND PER_ASG_SEX <> 'M' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_PL_FEMALE_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_EMPLOYMENT_CATEGORY = 'CONTRACT' THEN ( L_year_start_date = L_HIRE_date IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' OR l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN L_cl_limit_days = 5 IF TO_CHAR(L_HIRE_date,'MM') > TO_CHAR(iv_start_date,'MM') THEN ( L_year_start_date = TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(iv_start_date,'YYYY'))-1)||'/'||TO_CHAR(L_HIRE_date,'MM')||'/'||TO_CHAR(L_HIRE_date,'DD'),'YYYY/MM/DD') L_year_end_date = ADD_MONTHS(L_year_start_date,12) ) ELSE( L_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'/'||TO_CHAR(L_HIRE_date,'MM')||'/'||TO_CHAR(L_HIRE_date,'DD'),'YYYY/MM/DD') L_year_end_date = ADD_MONTHS(L_year_start_date,12) ) IF PER_ASG_PROJECTED_ASSIGNMENT_END_DATE WAS NOT DEFAULTED THEN L_year_end_date = PER_ASG_PROJECTED_ASSIGNMENT_END_DATE ) IF l_grade_name NOT LIKE 'C%' THEN ( CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > L_cl_limit_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_10_DAYS_MORE' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) ) ELSE IF l_grade_name LIKE 'C%' THEN ( IF l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_CONTRACT_3_DAYS' RETURN VALID, ERROR_MESSAGE ) i = 1 l_cl_duration = 0 CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_CONTRACT_3_DAYS' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_UK_UNPAID PARENTAL LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') i = 1 l_abs_entry_id = get_context(absence_entry_id,0) l_absence_entry_id = (l_abs_entry_id) l_cl_duration = 0 l_duration = iv_totalduration IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ELSE ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are submitting a late notification leave. Please change your leave date to minimum 3 days from current date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (start_date= l_year_start_date , end_date= l_year_end_date) ( while (anc_per_abs_entrs_absence_entry_id_arr.exists(i)) loop ( CHANGE_CONTEXTS(absence_entry_id = anc_per_abs_entrs_absence_entry_id_arr[i]) ( change_contexts (absence_type_id = anc_abs_entrs_absence_type_id) ( l_abs_typ_name_check = anc_abs_typ_name if l_abs_entry_id <> anc_per_abs_entrs_absence_entry_id_arr[i] and l_abs_typ_name_check = 'Unpaid Parental Leave' and anc_abs_entrs_absence_status_cd <> 'ORA_WITHDRAWN' and anc_abs_entrs_approval_status_cd <> 'DENIED' and anc_abs_entrs_absence_status_cd <> 'SAVED' then ( l_cl_duration = l_cl_duration + anc_abs_entrs_duration if l_cl_duration + l_duration > 2 then ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized your entitlement for this year' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_VN_UnpaidPersonalLeave",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text), IV_ACTUALCHILDBIRTHDATE (date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'DEATH - BIOLOGICAL BROTHER OR SISTER' ) AND l_duration > 1 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE 'DEATH - GRANDPARENTS' ) AND l_duration > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'MARRIAGE - MOTHER, FATHER, BIOLOGICAL BROTHER OR BIOLOGICAL SISTER' ) AND l_duration > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_CN_PATERNITYLEAVE_VAL",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_duration > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply maximum of 10 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB China"
    },
    {
        "FORMULA_NAME": "CIMB_CN_UNPAIDLEAVE_VAL",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_Emp = GET_PLAN_BALANCE('CN Annual Leave Plan Permanent Employee') l_plan_name = 'CN Annual Leave Plan Permanent Employee' ) IF (L_Ann_Acrl_Balance_Emp >= 0 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You still have '|| to_char(L_Ann_Acrl_Balance_Emp)||' days of your Annual Leave Plan. Please change your leave type to Annual Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB China"
    },
    {
        "FORMULA_NAME": "CIMB_IN_ANNUAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (IV_TOTALDURATION < 3 AND DAYS_BETWEEN(IV_START_DATE, EFFDATE)< 5)THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are required to submit your application 5 days in advance for obtaining approval for 1 - 2 days leave duration' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((IV_TOTALDURATION > 2 AND IV_TOTALDURATION < 6) AND (DAYS_BETWEEN(IV_START_DATE, EFFDATE) > 5 AND DAYS_BETWEEN(IV_START_DATE, EFFDATE)< 10) )THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are required to submit your application 15 days in advance for obtaining approval for 3 - 5 days leave duration' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((IV_TOTALDURATION > 5 AND IV_TOTALDURATION < 11 ) AND DAYS_BETWEEN(IV_START_DATE, EFFDATE) > 10 )THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are required to submit your application 30 days in advance for obtaining approval for 6 - 10 days leave duration' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_TOTALDURATION > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Annual Leave cannot be availed for more than 10 continuous working days ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_IN_SICK_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_MY_PATL_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START l_asg_end = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 L_first_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' l_sl_limit = 5 CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Paternity Leave entitlement per ocassion is '||to_char(l_sl_limit)||' day(s).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Paternity Leave - 1st Time Father' OR l_abs_typ_name_check = 'Paternity Leave' OR(l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755052)) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_first_days = L_first_days + 1 ) ) ) i = i + 1 ) ) IF L_sl_days + 1 > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized '||to_char(L_sl_days)||' days of Paternity Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_KH_SICK_LEAVE_ENTRY_VAL",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 180 IF ADD_DAYS(EffDate,1) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Sick Leave - Inactive') AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( L_without_cert_duration = 0 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND (l_abs_typ_name_check = 'Sick Leave' AND l_abs_typ_name_check = 'Sick Leave - Inactive') AND (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000115262932 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000117139859 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755198 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755055 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Sick Leave for more than one (1) consecutive day will require a medical certificate. Please change reason for Sick Leave and attached Medical Certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION ) ) ) ) j = j + 1 ) ) IF (IV_ABSENCE_REASON = 'Medical Leave Without Certificate' AND (L_without_cert_duration + l_duration) > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = IV_ABSENCE_REASON||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_without_cert_duration)|| ' day(s). Please submit Medical Leave With Certificate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_ABSENCE_REASON != 'Medical Leave Without Certificate' AND IV_TOTALDURATION <=1 ) THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attach your Medical Certificate and click \"Save and Close\". Go to \"Existing Leave\", click on \"Pencil\" icon next to saved \"Sick Leave\" and click \"Submit\"' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_IN_MATERNITY_LEAVE_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN ( l_fnd_person_number = 'N' ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= l_asg_start , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Maternity Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + 1 ) ) ) i = i + 1 ) IF (UPPER(IV_ABSENCE_REASON) != 'NORMAL DELIVERY' AND UPPER(IV_ABSENCE_REASON) != 'CESAREAN DELIVERY') AND (IV_TOTALDURATION > 30 )THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have submitted more than 1 month of leave duration. Please change your leave end date.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF (L_sl_days > 2 AND l_duration > 84 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have submitted more than 84 days / 12 weeks duration allow for 3rd occurence and above. Please change your leave end date.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_IN_CASUAL_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_SG_OUTSTATION_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_prv_duration = 0 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_CN_ANNUALLEAVE_VAL",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME l_position_name = PER_ASG_POSITION_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('CN Annual Leave Plan Employee') l_plan_name = 'CN Annual Leave Plan Permanent Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND (l_asg_category != 'CONTRACT' OR (l_asg_category = 'CONTRACT' AND (l_grade_name NOT LIKE 'G1.%' OR l_grade_name NOT LIKE 'G2.%' OR l_grade_name NOT LIKE 'G3.%'))) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) l_comp_limit = '5' IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND l_asg_category != 'CONTRACT' AND (L_Ann_Acrl_Balance - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB China"
    },
    {
        "FORMULA_NAME": "CIMB_VN_ChildCareTimeOff",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_STATUS IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'Singapore' l_duration = IV_TOTALDURATION VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_service_months = 0 l_elg_leave_days = 0 l_contact_person_id = 0 l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) K = 1 z = 1 g = 1 child_person_id[1] = 0 child_citizen[1] = 'X' child_dob[1] = '1951/01/01 00:00:00' (date) youngest_person_id = 0 youngest_citizen = 'X' youngest_dob = '1951/01/01 00:00:00' (date) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_msg = 'X' l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = 'X' l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH','|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN ( IF PER_EXT_PERSON_CITIZENSHIP_STATUS.EXISTS(1) THEN ( IF PER_EXT_PERSON_CITIZENSHIP_STATUS[z] = 'A' THEN ( l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] z=z+1 ) ) ) ) child_person_id[k] = l_contact_person_id child_citizen[k] = l_child_citizen child_dob[k] = l_contact_dob k = k + 1 ) j = j + 1 ) ) IF l_child_exists = 'Y' THEN ( youngest_person_id = child_person_id[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) IF TO_DATE(TO_CHAR(ADD_MONTHS(youngest_dob,12),'YYYY')||'-12-31','YYYY-MM-DD') < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Not able to record this absence. Your youngest child is older than 12 months of age.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Not able to record this absence. You are not eligible to Child Care Time Off' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_VN_SICKFULLPAID_VAL",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_Emp = GET_PLAN_BALANCE('VN Sick Leave Full Paid Plan') l_plan_name = 'VN Sick Leave Full Paid Plan' ) IF (L_Ann_Acrl_Balance_Emp = 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Unable to record this absence. Your '||l_plan_name|| ' balance is '|| to_char(L_Ann_Acrl_Balance_Emp)|| ' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_HK_MRG_LEAVE_VAL_FF",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MARITAL_STATUS IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MARITAL_STATUS_DATE IS '4712/12/31 00:00:00'(date) INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_marriage_date = PER_ASG_MARITAL_STATUS_DATE IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_MARITAL_STATUS != 'S' THEN ( IF TO_CHAR(l_marriage_date,'YYYY/MM/DD') = '4712/12/31' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Pleas update you Marriage Registration date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ADD_MONTHS(l_marriage_date,12) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Marriage Leave start date must not exceeding 1 Year from the Marriage Registration date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Hong Kong"
    },
    {
        "FORMULA_NAME": "CIMB_CN_COMPASSIONATELEAVE_VAL",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE '%GRANDPARENT' OR UPPER(IV_ABSENCE_REASON) LIKE '%SIBLINGS') AND (l_duration > 1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply maximum of 1 day for the selected reason' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE '%SPOUSE' OR UPPER(IV_ABSENCE_REASON) LIKE '%CHILDREN' OR UPPER(IV_ABSENCE_REASON) LIKE '%PARENTS' OR UPPER(IV_ABSENCE_REASON) LIKE '%PARENTS-IN-LAW') AND (l_duration > 3)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply maximum of 3 days for the selected reason' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB China"
    },
    {
        "FORMULA_NAME": "CIMB_IN_UNPAID_LEAVE_VAL_FF",
        "answer": "default for per_asg_date_probation_end is '1951/01/01 00:00:00' (date) default for per_asg_rel_date_start is '1951/01/01 00:00:00' (date) default for per_asg_grade_name is 'X' default for per_asg_sex is 'X' default for global_pay_interface_extraction_date is '1951/01/01' default for iv_attribute_1 is 'X' default for per_asg_action_code is 'X' default for per_asg_job_name is 'X' default for per_asg_user_person_type is 'X' default_data_value for anc_per_abs_entrs_absence_entry_id_arr is 0 default for anc_abs_entrs_duration is 0 default for anc_abs_typ_name is ' ' default for anc_abs_entrs_absence_status_cd is ' ' default for anc_abs_entrs_end_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_start_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_absence_type_id is 0 default for anc_abs_entrs_approval_status_cd is 'X' default for anc_abs_entrs_user_mode is 'X' default for per_asg_manager_user_person_id is 0 default for per_per_person_number is 'X' default for per_asg_employment_category is 'X' inputs are iv_start_date (date),iv_end_date (date),iv_caledarstartdate (date), iv_caledarenddate (date),iv_totalduration (number), iv_absence_reason (text), iv_attribute_1 (text) valid = 'Y' l_duration = iv_totalduration l_grade_name = per_asg_grade_name effdate = to_date(global_pay_interface_extraction_date ,'rrrr/mm/dd') l_hr_assign_id = get_context(hr_assignment_id,0) l_ldg_id = get_context(legislative_data_group_id,0) l_person_id = get_context(person_id,0) l_probation_end = per_asg_date_probation_end l_ann_acrl_balance_emp = 0 l_ann_acrl_balance_contr = 0 l_ann_acrl_balance = 0 l_year_start_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_hire_date = per_asg_rel_date_start l_job_name = per_asg_job_name l_user_person_type = per_asg_user_person_type l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = get_context(absence_entry_id,0) l_absence_entry_id = to_char(l_abs_entry_id) l_sl_days = 0 i = 1 l_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = get_context(effective_date,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(hr_assignment_id,0) l_person_id = get_context(person_id,0) l_asg_category = per_asg_employment_category l_fnd_person_number = get_value_set('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' if MOD(l_duration,0.5) <> 0 then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'Leave duration must be in 0.5 incremental.' return valid, error_message, token_name, token_value ) if isnull(l_fnd_person_number) = 'N' then l_fnd_person_number = 'N' change_contexts(hr_assignment_id = l_hr_assign_id, effective_date = effdate) ( l_manager_id = per_asg_manager_user_person_id ) l_mgr_asg_status = get_value_set('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = get_value_set('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date=l_effective_date,absence_entry_id = l_abs_entry_id) ( l_user_mode=anc_abs_entrs_user_mode ) if (l_user_mode != 'ADMIN' and per_per_person_number = l_fnd_person_number) or (l_user_mode != 'ADMIN' and l_manager_id = TO_NUMBER(l_fnd_person_number_id)) then ( if iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') then ( valid = 'N' error_message = 'CIMB_PRIOR_DM' return valid, error_message ) if l_mgr_asg_status <> 'ACTIVE' or l_manager_id = 0 then ( valid = 'N' error_message = 'CIMB_INACTIVE_MGR_ERROR' return valid, error_message ) change_contexts(effective_date = l_year_end_date, legislative_data_group_id = l_ldg_id) ( l_ann_acrl_balance_emp = get_plan_balance('IN Annual Leave Plan') l_plan_name = 'IN Annual Leave Plan' ) if (iv_start_date > per_asg_date_probation_end and per_asg_date_probation_end < ADD_MONTHS(l_hire_date,24)) then ( if (l_ann_acrl_balance_emp > 0 or l_ann_acrl_balance_contr > 0) then ( valid = 'N' error_message = 'CIMB_UNPAID_ERROR' return valid, error_message ) ) if (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) or (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) then ( valid = 'N' error_message = 'CIMB_ABS_OVERLAP' return valid, error_message ) ) return valid,error_message",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_KH_INACTIVE_LEAVE",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' VALID = 'Y' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Selected leave type only for historical transaction. Please select other leave type' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_KH_SICK_L_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 180 IF ADD_DAYS(EffDate,1) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Sick Leave - Inactive') AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( L_without_cert_duration = 0 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND (l_abs_typ_name_check = 'Sick Leave' AND l_abs_typ_name_check = 'Sick Leave - Inactive') AND (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000115262932 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000117139859 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755198 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755055 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Sick Leave for more than one (1) consecutive day will require a medical certificate. Please change reason for Sick Leave and attached Medical Certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION ) ) ) ) j = j + 1 ) ) IF (IV_ABSENCE_REASON = 'Medical Leave Without Certificate' AND (L_without_cert_duration + l_duration) > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = IV_ABSENCE_REASON||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_without_cert_duration)|| ' day(s). Please submit Medical Leave With Certificate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_ABSENCE_REASON != 'Medical Leave Without Certificate' AND IV_TOTALDURATION <=1 ) THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attach your Medical Certificate and click \"Save and Close\". Go to \"Existing Leave\", click on \"Pencil\" icon next to saved \"Sick Leave\" and click \"Submit\"' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_KH_SICK_L_V_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_RSN_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' l_abs_rsn_name_check = 'X' i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 180 IF ADD_DAYS(EffDate,1) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days of Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME l_abs_rsn_name_check = ANC_ABS_RSN_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Sick Leave Inactive') AND l_abs_rsn_name_check = 'Medical Leave Without Certificate' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,L_year_start_date) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(L_year_end_date,ANC_ABS_ENTRS_START_DATE) + 1 IF L_sl_days > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have already utilized '||to_char(l_sl_days)||' days Medical Leave Without Certificate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply only for '||TO_CHAR(l_sl_limit-L_sl_days)||' of Sick Leave' RETURN VALID, ERROR_MESSAGE ) IF l_abs_rsn_name_check = 'Medical Leave Without Certificate' AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_PRV_NXT_DAY' RETURN VALID, ERROR_MESSAGE ) ELSE( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION IF (L_without_cert_duration + l_duration) > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have fully utilized Sick Leave Without Certification.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) ) ) i = i + 1 ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON != 'Medical Leave Without Certificate' THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attached your sick leave certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_PATWORKDAYS_VAL_FF",
        "answer": "DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START l_asg_end = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 L_first_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' l_sl_limit = 5 CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (l_union = 'Association of Bank Officers, Peninsular Malaysia (ABOM)' OR l_union = 'National Union of Bank Employees (NUBE)' OR l_union = 'Sabah Banking Employees Union (SABAHBEU)') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please select Paternity Leave (Calendar Days).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (l_grade_name = 'EQ.1' OR l_grade_name = 'EQ.2' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.4') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please select Paternity Leave (Calendar Days).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Paternity Leave entitlement per ocassion is '||to_char(l_sl_limit)||' day(s).' ||l_union RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Paternity Leave - 1st Time Father' OR l_abs_typ_name_check = 'Paternity Leave' OR(l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755052)) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_first_days = L_first_days + 1 ) ) ) i = i + 1 ) ) IF L_sl_days + 1 > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized '||to_char(L_sl_days)||' days of Paternity Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_UK_Late_Notification",
        "answer": "DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ELSE ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are submitting a late notification leave. Please change your leave date to minimum 3 days from current date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "UK Paternity Absence Validation Custom",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE VALID='Y' ERROR_MESSAGE = 'Success' l_days_after = 0 l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE if(l_event_type = 'CHB') then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) if(l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) if(l_start_date < l_placement_date) then ( VALID='N' if(l_event_type = 'CHB') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ) else if(l_event_type = 'PLC') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ) ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) l_days = days_between(l_end_date, l_start_date) +1 if (l_days = 7 or l_days = 14 ) then ( VALID='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'EMG_PATERNITY_DAYS' return VALID, ERROR_MESSAGE,ERROR_CODE ) if (l_days = 1 or l_days = 2 or l_days = 3 or l_days = 4 or l_days = 5 or l_days = 6 or l_days = 8 or l_days = 9 or l_days = 10 or l_days = 11 or l_days = 12 or l_days = 13 ) then ( VALID='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'EMG_PATERNITY_DAYS_ERROR' return VALID, ERROR_MESSAGE,ERROR_CODE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG Paternity Absence Validation",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE VALID='Y' ERROR_MESSAGE = 'Success' l_days_after = 0 l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE if(l_event_type = 'CHB') then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) if(l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) if(l_start_date < l_placement_date) then ( VALID='N' if(l_event_type = 'CHB') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ) else if(l_event_type = 'PLC') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ) ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) l_days = days_between(l_end_date, l_start_date) +1 if (l_days = 7 or l_days = 14 ) then ( VALID='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'EMG_PATERNITY_DAYS' return VALID, ERROR_MESSAGE,ERROR_CODE ) if (l_days = 1 or l_days = 2 or l_days = 3 or l_days = 4 or l_days = 5 or l_days = 6 or l_days = 8 or l_days = 9 or l_days = 10 or l_days = 11 or l_days = 12 or l_days = 13 ) then ( VALID='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'EMG_PATERNITY_DAYS_ERROR' return VALID, ERROR_MESSAGE,ERROR_CODE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "EMG Stringer Leave Validation",
        "answer": "DEFAULT FOR PER_PER_PERSON_NUMBER is 'X' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION VALID = 'N' l_sickness_exists = '1' l_sub_date='0001/01/01' l_start_date = trunc(IV_START_DATE) l_sub_date = substr(to_char(l_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_sickness_exists = GET_VALUE_SET('GET_OPEN_ENDED_SICKNESS','|=P_PERSON_NUMBER='''||PER_PER_PERSON_NUMBER||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''') if l_sickness_exists = '1' then ( VALID = 'Y' ) else ( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE ='EMG_STRINGER_VALIDATE' ) return VALID,ERROR_MESSAGE,ERROR_CODE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "UK PATERNITY ABSENCE VALIDATION CUSTOM NEW",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS 'UNKNOWN' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT for IV_INFORMATION_NUMBER5 IS 0 DEFAULT for ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH is '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_MTRNT_ACTUAL_CHILD_BIRTH_DATE is '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE,IV_INFORMATION_NUMBER1,IV_INFORMATION_NUMBER5 VALID='Y' ERROR_MESSAGE = 'Success' l_statutory_date_2024 = '4712/12/31 00:00:00' (date) l_start_date = '0001/01/01 00:00:00' (date) l_placement_date = '0001/01/01 00:00:00' (date) l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE ) if ((ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT' ) OR (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO' )) THEN ( if (l_event_type = 'CHB')then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_placement_date = IV_EXPECTEDCHILDBIRTHDATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_placement_date = IV_ACTUALCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE ) l_start_date = IV_START_DATE l_end_date = IV_END_DATE dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_start_date '||to_char(l_start_date)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_end_date '||to_char(l_end_date)) if (l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) if(l_start_date < l_placement_date) then ( if (l_event_type = 'CHB') then ( VALID='N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) else if (l_event_type = 'PLC') then ( VALID='N' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) ) ) if ((ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_EXTN' ) OR (ANC_ABS_TYP_LEG_GROUPING_CD = 'ORA_HRX_GB_PAT_ADO_EXTN' )) THEN ( IF IV_INFORMATION_NUMBER5 WAS NOT DEFAULTED THEN ( l_expected_child_birth = '0001/01/01 00:00:00' (date) l_actual_birth_date = '0001/01/01 00:00:00' (date) l_main_return_date = '4712/12/31 00:00:00' (date) l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=IV_INFORMATION_NUMBER5) ( l_expected_child_birth = ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH l_main_return_date = ANC_ABS_ENTRS_END_DATE l_actual_birth_date = ANC_ABS_MTRNT_ACTUAL_CHILD_BIRTH_DATE dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_expected_child_birth '||to_char(l_expected_child_birth)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_main_return_date '||to_char(l_main_return_date)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_actual_birth_date '||to_char(l_actual_birth_date)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_start_date '||to_char(l_start_date)) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_end_date '||to_char(l_end_date)) ) IF (l_start_date (date) < l_main_return_date (date)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_NO_LNK_FUTURE' return VALID, ERROR_MESSAGE, ERROR_CODE ) if (l_event_type = 'CHB') then ( l_statutory_date_2024 = '2024/04/07 00:00:00' (date) l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) IF (l_ewc (date) < l_statutory_date_2024 (date)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_EXT_INVALID' return VALID, ERROR_MESSAGE, ERROR_CODE ) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> l_ewc '||to_char(l_ewc)) ) ELSE IF (l_event_type = 'PLC') then ( l_statutory_date_2024 = '2024/04/06 00:00:00' (date) reference_birth_date = '0001/01/01 00:00:00' (date) IF ('0001/01/01 00:00:00' (date) < l_actual_birth_date (date)) THEN ( reference_birth_date = l_actual_birth_date ) else ( reference_birth_date = l_expected_child_birth ) dummy = ESS_LOG_WRITE ( 'PAT_VALIDATION >> reference_birth_date '||to_char(reference_birth_date)) IF (reference_birth_date (date) < l_statutory_date_2024 (date)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_ADOP_EXT_INV' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_days = days_between(l_end_date, l_start_date) +1 if (l_days = 7 or l_days = 14 ) then ( VALID='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'EMG_PATERNITY_DAYS' return VALID, ERROR_MESSAGE,ERROR_CODE ) if (l_days = 1 or l_days = 2 or l_days = 3 or l_days = 4 or l_days = 5 or l_days = 6 or l_days = 8 or l_days = 9 or l_days = 10 or l_days = 11 or l_days = 12 or l_days = 13 ) then ( VALID='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'EMG_PATERNITY_DAYS_ERROR' return VALID, ERROR_MESSAGE,ERROR_CODE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Kaneka Absence Start Date Validation FF",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '4712/12/31 00:00:00' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 default for ANC_ABS_ENTRS_DURATION is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (NUMBER) VALID = 'Y' abs_start_date = IV_START_DATE CUR_SYS_DATE = GLOBAL_PAY_INTERFACE_EXTRACTION_DATE l_effective_date= to_date(CUR_SYS_DATE,'yyyy/mm/dd') abs_duration = IV_TOTALDURATION IF(abs_duration <= 2)THEN ( validation_date = ADD_DAYS(l_effective_date, 2) IF(abs_start_date < validation_date)THEN ( VALID = 'N' ERROR_MESSAGE = 'Your leave duration is '+ to_char(abs_duration) + '. You will have to submit your leave application atleast 2 days in advance' return VALID, ERROR_MESSAGE ) ) ELSE IF(abs_duration > 2 AND abs_duration <= 7)THEN ( validation_date = ADD_DAYS(l_effective_date, 7) IF(abs_start_date < validation_date)THEN ( VALID = 'N' ERROR_MESSAGE = 'Your leave duration is '+ to_char(abs_duration) + '. You will have to submit your leave application atleast 7 days in advance' return VALID, ERROR_MESSAGE ) ) ELSE IF(abs_duration > 7)THEN ( validation_date = ADD_DAYS(l_effective_date, 14) IF(abs_start_date < validation_date)THEN ( VALID = 'N' ERROR_MESSAGE = 'Your leave duration is '+ to_char(abs_duration) + '. You will have to submit your leave application atleast 2 weeks in advance' return VALID, ERROR_MESSAGE ) ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "KANEKA EXAM LEAVE VALIDATION FF",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '4712/12/31 00:00:00' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY is 'NA' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (NUMBER) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE limit = 0 FTE = PER_ASG_FTE_VALUE avg_hr = PER_ASG_ATTRIBUTE_NUMBER1 msg = 'XXX' l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_duration = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Examination Leave') AND ((ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD='APPROVED') or (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD='AWAITING') or (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD='DENIED')) then ( l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) msg = ANC_ABS_ENTRS_ABSENCE_STATUS_CD + '---' + ANC_ABS_ENTRS_APPROVAL_STATUS_CD ) IF(l_duration > 5)THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot take more than 5 days in a year' return VALID, ERROR_MESSAGE ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Kaneka Annual leave validation",
        "answer": "DEFAULT FOR IV_PERSON_ID IS 0 DEFAULT FOR IV_TERM_ID IS 0 DEFAULT FOR IV_EFF_DT IS '2014/01/01' (DATE) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_SYS_DATE_TIME IS '0001/01/01 00:00:00' Default for PAY_EARN_PERIOD_END is '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'APPROVED' DEFAULT FOR ANC_ABS_TYP_NAME IS 'PARISH' DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 INPUTS ARE IV_START_DATE (date) ,IV_END_DATE (date) ,IV_START_TIME(text) ,IV_END_TIME(text) ,IV_TOTALDURATION , IV_CARRYOVER (Number) , IV_PERSON_ID , IV_TERM_ID , IV_EFF_DT (DATE) , IV_ACCRUAL , IV_CEILING , IV_ACCRUALPERIODSTARTDATE (date) , IV_ACCRUALPERIODENDDATE (date) , IV_CALEDARSTARTDATE (date) , IV_CALEDARENDDATE (date) , IV_PLANENROLLMENTSTARTDATE (date) , IV_PLANENROLLMENTENDDATE (date) VALID = 'Y' LOS = ROUND(Months_Between(IV_START_DATE,PER_PERSON_ENTERPRISE_HIRE_DATE)/12,2) IF LOS >=1 THEN ( L_PLAN_NAME = 'Annual Leave Plan' L_ASG_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_PER_ID = GET_CONTEXT(Person_ID,0) L_SYS_DATE = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE,'YYYY/MM/DD') L_EFFECTIVE_DATE = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_CALC_DATE = LAST_DAY(ADD_MONTHS(TRUNC(L_EFFECTIVE_DATE,'YYYY'),11)) L_LEG_DATA = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_CURR_YEAR = TO_CHAR(L_EFFECTIVE_DATE,'YYYY') L_ANVERS_DATE = TO_DATE(L_CURR_YEAR ||'-01-01') L_FRST_BAND_ED = ADD_DAYS(ADD_MONTHS(L_ANVERS_DATE,6),-1) L_SCND_BAND_SD = ADD_MONTHS(L_ANVERS_DATE,6) L_SCND_BAND_ED = ADD_DAYS(ADD_MONTHS(L_ANVERS_DATE,12),-1) L_ELIG = 0 V_WTWT_CRY = 0 L_CRY_OVR = 0 HIRE_DATE = TO_CHAR(PER_PERSON_ENTERPRISE_HIRE_DATE,'DD') HIRE_MONTH = TO_CHAR(PER_PERSON_ENTERPRISE_HIRE_DATE,'MM') L_ANVERS_DATE_CH = (L_CURR_YEAR)||'-01-01' l_plan_id = 300000002885473 L_CRY_OVR = TO_NUMBER( GET_VALUE_SET( 'KANEKA_ABS_CARRYOVER_VALUE', '|=l_person_id='''||to_char(L_PER_ID)||''''|| '|l_plan_id='''||TO_CHAR(l_plan_id)||''''|| '|l_accrual_period='''||(L_ANVERS_DATE_CH)||'''') ) IF ISNULL (L_CRY_OVR) = 'N' THEN ( L_CRY_OVR = 0 ) L_LGNTH_SERVICE = FLOOR(Months_Between(IV_START_DATE,PER_PERSON_ENTERPRISE_HIRE_DATE)/12) IF L_LGNTH_SERVICE >= 1 and L_LGNTH_SERVICE < 2 THEN ( L_ELIG = 15 ) ELSE IF L_LGNTH_SERVICE >= 2 and L_LGNTH_SERVICE < 3 THEN ( L_ELIG = 16 ) ELSE IF L_LGNTH_SERVICE >= 3 and L_LGNTH_SERVICE < 4 THEN ( L_ELIG = 17 ) ELSE IF L_LGNTH_SERVICE >= 4 and L_LGNTH_SERVICE < 5 THEN ( L_ELIG = 18 ) ELSE IF L_LGNTH_SERVICE >= 5 and L_LGNTH_SERVICE < 6 THEN ( L_ELIG = 19 ) ELSE IF L_LGNTH_SERVICE >= 6 and L_LGNTH_SERVICE < 7 THEN ( L_ELIG = 20 ) ELSE IF L_LGNTH_SERVICE >= 7 and L_LGNTH_SERVICE < 20 THEN ( L_ELIG = 21 ) ELSE IF L_LGNTH_SERVICE >= 20 and L_LGNTH_SERVICE < 21 THEN ( L_ELIG = 26 ) ELSE IF L_LGNTH_SERVICE >= 21 THEN ( L_ELIG = 21 ) V_ELIG = (L_ELIG/2) CHANGE_CONTEXTS ( HR_ASSIGNMENT_ID = L_ASG_ID, PERSON_ID = L_PER_ID, EFFECTIVE_DATE = L_CALC_DATE, LEGISLATIVE_DATA_GROUP_ID = L_LEG_DATA ) ( L_ACC_BAL = GET_PLAN_BALANCE(L_PLAN_NAME) ) IF (IV_START_DATE >= L_ANVERS_DATE) AND (IV_START_DATE <= L_FRST_BAND_ED) THEN ( I=1 L_TKN_ABS_1 = 0 CHANGE_CONTEXTS(START_DATE = L_ANVERS_DATE, END_DATE = L_FRST_BAND_ED) ( I=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(I) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Annual Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) THEN ( L_TKN_ABS_1 = L_TKN_ABS_1 + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) IF IV_TOTALDURATION > (L_CRY_OVR + V_ELIG) - L_TKN_ABS_1 THEN ( VALID = 'N' ERROR_MESSAGE = 'Dear: You have submitted absence for: '||TO_CHAR(IV_TOTALDURATION)||' Days'|| ' And you have '||TO_CHAR(L_CRY_OVR)||' As a carryover + Eligibility Days: '||TO_CHAR(V_ELIG)|| ' For the First Half of this year'||' Taken into cosideration you have enjoyed with : '||TO_CHAR(L_TKN_ABS_1)||' Days during this part of year' ) ) ) ELSE VALID = 'Y' Return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "KANEKA MATERNITY LEAVE START DATE VALIDATION FF",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '4712/12/31 00:00:00' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 default for ANC_ABS_ENTRS_DURATION is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (NUMBER) abs_start_date = IV_START_DATE l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) abs_duration = IV_TOTALDURATION VALID = 'Y' IF(abs_duration > 60)THEN ( validation_date = ADD_MONTHS(l_effective_date, 1) IF(abs_start_date < validation_date)THEN ( VALID = 'N' ERROR_MESSAGE = 'Your leave duration is '+ to_char(abs_duration) + '. You will have to submit your leave application atleast 1 month in advance' + ' - validation_date - ' + to_char(validation_date) + ' - l_effective_date - ' + to_char(l_effective_date) + ' - abs_start_date - ' + to_char(abs_start_date) return VALID, ERROR_MESSAGE ) ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "KANEKA COMPASSIONATE LEAVE VALIDATION FF",
        "answer": "DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT for ANC_ABS_RSN_NAME is 'Domestic' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT for PER_PER_MARITAL_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' INPUTS ARE iv_start_date (date), iv_end_date (date), IV_TOTALDURATION (number) l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') VALID='Y' i=1 L_Total_Duration = 0 L_Absence_Type_Name = ANC_ABS_TYP_NAME l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) l_absnece_reason_id = GET_CONTEXT(ABSENCE_REASON_ID,0) L_Absence_Reason = ANC_ABS_RSN_NAME L_Prev_Duration = 0 L_occurence = 1 lc_marital_status = PER_PER_MARITAL_STATUS L_Duration = IV_TOTALDURATION (number) CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( L_Absence_Reason = ANC_ABS_RSN_NAME CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if((l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID)and(l_absnece_reason_id = ANC_ABS_ENTRS_ABSENCE_REASON_ID) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')) then ( L_Prev_Duration = L_Prev_Duration + ANC_ABS_ENTRS_DURATION L_occurence = L_occurence + 1 ) ) i=i+1 ) ) L_Total_Duration = L_Prev_Duration + L_Duration IF(L_Absence_Reason = 'Death of Spouse/Children/Parent/Parent in law' ) Then ( IF(L_Total_Duration > 12) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot take more leaves, you have used the leave balance according to the policy' ) ) ELSE IF(L_Absence_Reason = 'Death of Brother/Sister/Grand Parent') Then ( IF(L_Total_Duration > 8) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot take more leaves, you have used the leave balance according to the policy' ) ) ELSE IF(L_Absence_Reason = 'Critical Illness of Spouse/Children/Parent/Parent in law') Then ( IF(L_Total_Duration > 8) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot take more leaves for Critical Illness of a family member, you have used the leave balance according to the policy' ) ) ELSE IF(L_Absence_Reason = 'Paternity Leave') Then ( IF(L_Total_Duration > 4) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot take more leaves for Paternity Leave, you have used the leave balance according to the policy' ) ) ELSE IF(L_Absence_Reason = 'Birth of Male employee child') Then ( IF(L_Total_Duration > 4) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot take more leaves for Birth of Male employee child, you have used the leave balance according to the policy' ) ) Duration = L_Duration return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "MATERNITY VALIDATION",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3 VALID = 'Y' l_Flag = 'X' l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_birth_date = IV_EXPECTEDCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE l_actual_start_date = IV_ACTUALSTARTDATE l_planned_start_date = IV_PLANNEDSTARTDATE l_hr_asg_id = ASG_HR_ASG_ID if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE > ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,1)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_BDATE_EXPECTED' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE > ADD_DAYS(IV_ACTUALCHILDBIRTHDATE,1)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_BDATE_ACTUAL' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-6)) if ( IV_ACTUALSTARTDATE WAS not DEFAULTED ) then ( if ( DAYS_BETWEEN(l_ewc,l_actual_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) else ( if( DAYS_BETWEEN(l_ewc , l_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_Flag = GET_VALUE_SET('SICK_PREGNENCY_LEAVE','|=P_PERSON_ID='''|| to_char(l_hr_asg_id)) if(l_Flag = 'Y') then ( VALID = 'N' ERROR_MESSAGE = 'HRX:::HRX_PREGNANCY_ILLNESS' ERROR_CODE = 'W' return VALID, ERROR_CODE, ERROR_MESSAGE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "NCC_BEREAVEMENT",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') five = 0 eligible = 0 duration = IV_TOTALDURATION max_days = 0 IF ( ANC_ABS_TYP_NAME = 'Bereavement' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Bereavement' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( five = five + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = five + duration max_days = 20 IF eligible > max_days then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(max_days) + ' ' + 'days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_TIMEOFFTOCARE",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT for PER_ASG_FTE_VALUE is 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') five = 0 eligible = 0 duration = IV_TOTALDURATION five_days = 0 IF ( ANC_ABS_TYP_NAME = 'Time off to care for dependents' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Time off to care for dependents' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( five = five + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = five + duration five_days = (5 * PER_ASG_FTE_VALUE) IF eligible > five_days then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(five_days) + ' ' + 'days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_Unforeseen_Incidents_UI",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) half_day = 0 half_day_value = 0 half_day_start_date = '0001/01/01 00:00:00' (DATE) half_day_end_date = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) half_day_start_date = IV_START_DATE half_day_end_date = ADD_DAYS(IV_START_DATE, 1) half_day = GET_PAY_AVAILABILITY ('ASSIGN', half_day_start_date, half_day_end_date, 'Y', 'Y', 'Y', 'Y', 'H') half_day_value = (half_day/2) working_days = 0 absence_start = '0001/01/01 00:00:00' (DATE) absence_week = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) absence_start = IV_START_DATE absence_week = ADD_DAYS(absence_start, -7) working_days = GET_PAY_AVAILABILITY ('ASSIGN', absence_week, absence_start, 'Y', 'Y', 'Y', 'Y', 'D') working_hours = 0 absence_start = '0001/01/01 00:00:00' (DATE) absence_week = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) absence_start = IV_START_DATE absence_week = ADD_DAYS(absence_start, -7) working_hours = GET_PAY_AVAILABILITY ('ASSIGN', absence_week, absence_start, 'Y', 'Y', 'Y', 'Y', 'H') one_day = (working_hours/working_days) If IV_TOTALDURATION < half_day_value then ( VALID = 'N' ERROR_MESSAGE = 'You need to book atleast half-day off.' + ' ' + 'Please book atleast' + ' ' + to_char(half_day_value) + ' ' + 'hours.') else ( current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') one = 0 eligible = 0 duration = IV_TOTALDURATION IF ( ANC_ABS_TYP_NAME = 'Unforeseen Incidents' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Unforeseen Incidents' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( one = one + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = one + duration IF eligible > one_day then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(one_day) + ' ' + 'hours') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_Annual_Leave_Salary_Sacrifice",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_RSN_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) duration = IV_TOTALDURATION current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') five_days = 0 l_five = 0 VALID = 'Y' ERROR_MESSAGE = 'One' CHANGE_CONTEXTS(START_DATE=current_year_start, END_DATE=current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Annual Leave Salary Sacrifice' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED')) then ( five_days = five_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_five = 0 l_five = duration + five_days if (l_five > 5) then ( VALID = 'N' ERROR_MESSAGE = 'You can take only five days in a year') return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_Annual_Leave_Salary_Sacrifice",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_RSN_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) duration = IV_TOTALDURATION current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') five_days = 0 l_five = 0 VALID = 'Y' ERROR_MESSAGE = 'One' CHANGE_CONTEXTS(START_DATE=current_year_start, END_DATE=current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Annual Leave Salary Sacrifice' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED')) then ( five_days = five_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_five = 0 l_five = duration + five_days if (l_five > 10) then ( VALID = 'N' ERROR_MESSAGE = 'You can take only 10 days in a year') return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_Dependant_Leave",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') sixty_days = 0 eligible = 0 duration = IV_TOTALDURATION IF ( ANC_ABS_TYP_NAME = 'Dependent Care' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Dependent Care' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( sixty_days = sixty_days + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = sixty_days + duration IF eligible > 60 then ( VALID = 'N' ERROR_MESSAGE = 'You are not eligible for more than 60 days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_JOB_INTERVIEW",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') two = 0 eligible = 0 duration = IV_TOTALDURATION IF ( ANC_ABS_TYP_NAME = 'Job Interview' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Job Interview' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( two = two + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = two + duration two = 2 IF eligible > two then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for two days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_PUBLIC_SERVICE_DUTIES",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) half_day = 0 half_day_value = 0 half_day_start_date = '0001/01/01 00:00:00' (DATE) half_day_end_date = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) half_day_start_date = IV_START_DATE half_day_end_date = ADD_DAYS(IV_START_DATE, 1) person = GET_CONTEXT(PERSON_ID,0) absence = 300000005273263 p_duration_days = 0 p_duration_hours = 0 p_duration_cal = 0 p_duration_weeks = 0 p_duration_months = 0 p_duration_years = 0 occurence = 0 current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') count = GET_ABSENCE_COUNTS ( person, absence, 0, 0, 0, 0, 0, current_year_start, current_year_end, p_duration_days, p_duration_hours, p_duration_cal, p_duration_weeks, p_duration_months, p_duration_years, occurence ) if count > 48 then (VALID = 'N' ERROR_MESSAGE = 'You are allowed only 48 Study Leaves in an year') else (VALID = 'Y' ERROR_MESSAGE = 'Yes') return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_Adult_Cadet_Instructors_leave",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') ten = 0 eligible = 0 duration = IV_TOTALDURATION ten_days = 0 IF ( ANC_ABS_TYP_NAME = 'Adult Cadet Intructors Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF (l_abs_typ_name ='Adult Cadet Intructors Leave' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( ten = ten + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = ten + duration ten_days = (10 * PER_ASG_FTE_VALUE) IF eligible > ten_days then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(ten_days) + ' ' + 'days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_Non_Regular_Forces_Leave",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT for PER_ASG_FTE_VALUE is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') five = 0 eligible = 0 duration = IV_TOTALDURATION five_days = 0 IF ( ANC_ABS_TYP_NAME = 'Non Regular Forces Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Non Regular Forces Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( five = five + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = five + duration five_days = (10 * PER_ASG_FTE_VALUE) IF eligible > five_days then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(five_days) + ' ' + 'days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_TRADE_UNION",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') ThirtySeven = 0 eligible = 0 duration = IV_TOTALDURATION three_month_equivalent = 0 IF ( ANC_ABS_TYP_NAME = 'Trade Union Facility Time' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Trade Union Facility Time' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( ThirtySeven = ThirtySeven + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = ThirtySeven + duration IF eligible > 37 then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for only 37 hours in a calendar year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_TWENTY_FIVE_YEARS",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT for PER_ASG_FTE_VALUE is 1 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) default for ANC_ABS_ENTRS_DURATION is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) two = 0 eligible = 0 duration = IV_TOTALDURATION two_days = 0 tf_year_date = '1951/01/01 00:00:00' (date) ts_year_date = '4712/01/01 00:00:00' (date) hire_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) tf_year_date = ADD_MONTHS(hire_date,300) ts_year_date = ADD_MONTHS(hire_date,313) abs_type = 300000040147481 IF ( ANC_ABS_TYP_NAME = 'Twenty Five Year Leave') THEN ( CHANGE_CONTEXTS(START_DATE=tf_year_date, END_DATE=ts_year_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=abs_type) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Twenty Five Year Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( two = two + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = two + duration IF eligible > 2 then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(two_days) + ' ' + 'days in an year' ) ELSE IF IV_START_DATE < ts_year_date and IV_START_DATE > tf_year_date then ( VALID = 'Y' ERROR_MESSAGE = 'One' ) ELSE( VALID = 'N' ERROR_MESSAGE = 'You are eligible for leave only during 25-26th year' ) ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_FLEXI_LEAVE",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') l_prevoious_duration = 0 eligible = 0 duration = IV_TOTALDURATION settlement_period_start = '1951/01/01 00:00:00' (date) settlement_period_end = '4712/01/01 00:00:00' (date) settlement_period_number = 0 settlement_period_start_date1 = GET_TABLE_VALUE('NCC_FLEXI_LEAVE','ABS_NAME','FLEXI-LEAVE') settlement_period_start_date = TO_DATE(settlement_period_start_date1) settlement_period_value = to_number(GET_TABLE_VALUE('NCC_FLEXI_LEAVE','FLEXI_REST','Flexi-Leave')) settlement_period_number = (DAYS_BETWEEN(IV_START_DATE,settlement_period_start_date)/28) settlement_period_number = FLOOR(settlement_period_number) end_days = settlement_period_number*28 settlement_period_start = ADD_DAYS(settlement_period_start_date,end_days) settlement_period_end = ADD_DAYS(settlement_period_start,27) yearly_entitlement_start_date = ADD_DAYS(IV_START_DATE,-365) VALID='Y' ERROR_MESSAGE='No error' three = 0 eligible = 0 duration = IV_TOTALDURATION three_days = 0 twenty_four= 0 IF ( ANC_ABS_TYP_NAME = 'Flexi Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE=settlement_period_start, END_DATE=settlement_period_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Flexi Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( three = three + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) ) eligible = three + duration IF eligible > 3 then ( THREE_VALID = 'N' ERROR_MESSAGE_FOR_THREE = 'Only 3 leaves allowed between settlement period ' + to_char(settlement_period_start) + ' and ' + to_char(settlement_period_end)) else ( THREE_VALID = 'Y' ERROR_MESSAGE_FOR_THREE = (' ') ) IF ( ANC_ABS_TYP_NAME = 'Flexi Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE=yearly_entitlement_start_date, END_DATE=IV_START_DATE) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Flexi Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( twenty_four = twenty_four + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) ) eligible = twenty_four + duration IF eligible > 24 then ( TWENTY_FOUR_VALID = 'N' ERROR_MESSAGE_FOR_TWENTY_FOUR = 'Only 24 leaves allowed from ' + to_char(yearly_entitlement_start_date)) ELSE ( TWENTY_FOUR_VALID = 'Y' ERROR_MESSAGE_FOR_TWENTY_FOUR = (' ') ) IF TWENTY_FOUR_VALID = 'Y' AND THREE_VALID = 'Y' THEN( VALID = 'Y' ) ELSE( VALID = 'N' ERROR_MESSAGE = ERROR_MESSAGE_FOR_THREE + ERROR_MESSAGE_FOR_TWENTY_FOUR ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_FLEXI_LEAVE",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' default for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT for current_abs_entry_id is 0 DEFAULT for ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) prev_year = (to_char(ADD_YEARS(IV_START_DATE,-1),'YYYY')) future_year = (to_char(ADD_YEARS(IV_START_DATE,1),'YYYY')) current_month = (to_char(IV_START_DATE,'MM')) current_abs_entry_id = 0 current_abs_entry_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IF (current_month = '01' OR current_month = '02' OR current_month = '03') THEN ( yearly_entitlement_start_date = to_date('01/04/'||prev_year,'DD/MM/YYYY') yearly_entitlement_end_date = to_date('31/03/'||current_year,'DD/MM/YYYY')) ELSE ( yearly_entitlement_start_date = to_date('01/04/'||current_year,'DD/MM/YYYY') yearly_entitlement_end_date = to_date('31/03/'||future_year,'DD/MM/YYYY')) settlement_period_start = '1951/01/01 00:00:00' (date) settlement_period_end = '4712/01/01 00:00:00' (date) settlement_period_number = 0 settlement_period_start_date1 = GET_TABLE_VALUE('NCC_FLEXI_LEAVE','ABS_NAME','FLEXI-LEAVE') settlement_period_start_date = TO_DATE(settlement_period_start_date1) settlement_period_number = (DAYS_BETWEEN(IV_START_DATE,settlement_period_start_date)/28) settlement_period_number = FLOOR(settlement_period_number) end_days = settlement_period_number*28 settlement_period_start = ADD_DAYS(settlement_period_start_date,end_days) settlement_period_end = ADD_DAYS(settlement_period_start,27) VALID='Y' ERROR_MESSAGE='No error' period_total = 0 eligible = 0 duration = IV_TOTALDURATION year_total= 0 IF ( ANC_ABS_TYP_NAME = 'Flexi Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE=settlement_period_start, END_DATE=settlement_period_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Flexi Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID <> current_abs_entry_id ) THEN ( period_total = period_total + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) ) eligible = period_total + duration IF eligible > 2 then ( MAX_PERIOD_VALID = 'N' ERROR_MESSAGE_FOR_MAX_PERIOD = 'Only 2 leaves allowed between settlement period ' + to_char(settlement_period_start) + ' and ' + to_char(settlement_period_end)) else ( MAX_PERIOD_VALID = 'Y' ERROR_MESSAGE_FOR_MAX_PERIOD = (' ') ) IF ( ANC_ABS_TYP_NAME = 'Flexi Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE=yearly_entitlement_start_date, END_DATE=yearly_entitlement_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Flexi Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID <> current_abs_entry_id ) THEN (year_total = year_total + ANC_ABS_ENTRS_DURATION) ) ) i =i+1 ) ) ) eligible = year_total + duration IF eligible > 18 then ( MAX_YEAR_VALID = 'N' ERROR_MESSAGE_FOR_MAX_YEAR = 'Only 18 leaves allowed from ' + to_char(yearly_entitlement_start_date)) ELSE ( MAX_YEAR_VALID = 'Y' ERROR_MESSAGE_FOR_MAX_YEAR = (' ') ) IF MAX_YEAR_VALID = 'Y' AND MAX_PERIOD_VALID = 'Y' THEN( VALID = 'Y' ) ELSE( VALID = 'N' ERROR_MESSAGE = ERROR_MESSAGE_FOR_MAX_PERIOD + ERROR_MESSAGE_FOR_MAX_YEAR + to_char(ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) + ' '+ to_char(current_abs_entry_id) ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_COMPASSIONATE",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') five = 0 eligible = 0 duration = IV_TOTALDURATION max_days = 0 IF ( ANC_ABS_TYP_NAME = 'Compassionate Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Compassionate_Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( five = five + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = five + duration max_days = 5 IF eligible > max_days then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(max_days) + ' ' + 'days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_VOLUNTEERING_LEAVE_HOURS",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT for PER_ASG_FTE_VALUE is 0 DEFAULT for ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) start_month = (to_char(IV_START_DATE,'MM')) start_year = TO_DATE('01/04/'||(to_char(IV_START_DATE,'YYYY')),'DD/MM/YYYY') end_year = TO_DATE('31/03/'||(to_char(IV_START_DATE,'YYYY')),'DD/MM/YYYY') current_abs_entry_id = 0 current_abs_entry_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IF (start_month = '01' or start_month ='02' or start_month ='03') THEN( year_start = ADD_YEARS(start_year,-1) year_end = end_year ) ELSE( year_start = start_year year_end = ADD_YEARS(end_year,1) ) Num_Used= 0 total_hours = 0 Max_Hours = 0 IF ( ANC_ABS_TYP_NAME = 'Volunteering Leave - Hours' ) THEN ( CHANGE_CONTEXTS(START_DATE = year_start, END_DATE = year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Volunteering Leave - Hours' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') AND ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID <> current_abs_entry_id ) THEN ( Num_Used= Num_Used + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) total_hours = Num_Used + IV_TOTALDURATION Max_Hours = (14.8 * PER_ASG_FTE_VALUE) IF total_hours > Max_Hours THEN ( VALID = 'N' IF IV_TOTALDURATION > Max_Hours THEN ERROR_MESSAGE = 'NCC_VOL_LEAVE_HRS_MAX1' IF (Num_Used = Max_Hours or Num_Used > Max_Hours) THEN ERROR_MESSAGE = 'NCC_VOL_LEAVE_HRS_MAX2' IF total_hours > Max_Hours THEN ERROR_MESSAGE = 'NCC_VOL_LEAVE_HRS_MAX3' ) ELSE ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_SICKNESS_RTW_MESSAGE",
        "answer": "DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE1 is ' ' DEFAULT for IV_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_SICKNESS_CATEGORY is ' ' DEFAULT FOR PER_ASG_ATTRIBUTE16 is ' ' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number), IV_SICKNESS_CATEGORY DURATION = IV_TOTALDURATION VALID = 'Y' x = ess_log_write('*** NCC_SICKNESS_RTW_MESSAGE Formula - Starts ***') x = ess_log_write('PER_ASG_ATTRIBUTE16: ' + PER_ASG_ATTRIBUTE16) x = ess_log_write('PER_ASG_ASSIGNMENT_NUMBER: '+ PER_ASG_ASSIGNMENT_NUMBER) IF ( ANC_ABS_TYP_NAME = 'Sickness' AND PER_ASG_ATTRIBUTE16 ='Automated Sickness' AND IV_END_DATE was NOT DEFAULTED) THEN( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'NCC_RTW_WARNING' ) IF PER_ASG_ATTRIBUTE16 <> 'Automated Sickness' THEN ( VALID='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'Assignment is on Manual Sickness' ) x = ess_log_write('VALID: '+ VALID) x = ess_log_write('*** NCC_SICKNESS_RTW_MESSAGE Formula - Ends ***') RETURN VALID,ERROR_MESSAGE,ERROR_CODE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "SPLIT Validation Formula",
        "answer": "DEFAULT FOR PER_PER_PERSON_NUMBER is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_TYP_NAME is 'X' default FOR ANC_ABS_ENTRS_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) default FOR ANC_ABS_ENTRS_END_DATE is '1000-01-01T00:00:00.000Z' (DATE) default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_TOTALDURATION VALID = 'N' l_duration = 0 l_previous_hours_duration = 0 l_previous_days_duration = 0 l_total_duration = 0 l_sub_date='0001/01/01'(date) l_previous_year = '0001/01/01'(date) l_start_date = add_days(trunc(IV_START_DATE),-1) l_debug = ess_log_write('*** In SPLIT Validation Formula **** ') l_previous_year = ADD_DAYS(trunc(IV_START_DATE),-365) l_debug = ess_log_write('XX Start Date: ' + to_char(l_start_date,'DD-Mon-YYYY')) l_debug = ess_log_write('Previous Year: ' + to_char(l_previous_year,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE: ' + to_char(ANC_ABS_ENTRS_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_ENTRS_END_DATE: ' + to_char(ANC_ABS_ENTRS_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('IV_START_DATE: ' + to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('IV_END_DATE: ' + to_char(IV_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('IV_TOTALDURATION: ' + to_char(IV_TOTALDURATION)) l_debug = ess_log_write('ASG_HR_ASG_ID: ' + to_char(ASG_HR_ASG_ID)) l_debug = ess_log_write('ANC_ABS_TYP_NAME: ' + ANC_ABS_TYP_NAME) CHANGE_CONTEXTS(START_DATE = l_previous_year, END_DATE = l_start_date, ABSENCE_TYPE_ID=300003047733636) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME ln_entry_duration_d = 0 if ((ANC_ABS_TYP_ABSENCE_TYPE_ID = 300003047733636) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN',ANC_ABS_ENTRS_START_DATE, ADD_DAYS(ANC_ABS_ENTRS_END_DATE,1), 'Y', 'Y', 'Y', 'Y', 'D') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) l_previous_hours_duration = l_previous_hours_duration + ln_entry_duration_d l_debug = ess_log_write('l_previous_hours_duration: ' + to_char(l_previous_hours_duration)) l_debug = ess_log_write('ANC_ABS_ENTRS_DURATION: ' + to_char(ANC_ABS_ENTRS_DURATION)) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE v2: ' + to_char(ANC_ABS_ENTRS_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE v2: ' + to_char(ANC_ABS_ENTRS_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_TYP_NAME v2: ' + ANC_ABS_TYP_NAME) l_debug = ess_log_write('ANC_ABS_TYP_ABSENCE_TYPE_ID v2: ' + to_char(ANC_ABS_TYP_ABSENCE_TYPE_ID)) l_debug = ess_log_write('ANC_ABS_ENTRS_ABSENCE_TYPE_ID v3: ' + to_char(ANC_ABS_ENTRS_ABSENCE_TYPE_ID)) ) ) ) i =i+1 ) ) CHANGE_CONTEXTS(START_DATE = l_previous_year, END_DATE = l_start_date,ABSENCE_TYPE_ID=300003047733600) ( j=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(j) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_debug = ess_log_write('ANC_ABS_TYP_NAME v4: ' + ANC_ABS_TYP_NAME) if ( (ANC_ABS_TYP_ABSENCE_TYPE_ID = 300003047733600) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( l_previous_days_duration = l_previous_days_duration + ANC_ABS_ENTRS_DURATION l_debug = ess_log_write('ANC_ABS_ENTRS_DURATION v2: ' + to_char(ANC_ABS_ENTRS_DURATION)) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE v3: ' + to_char(ANC_ABS_ENTRS_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE v3: ' + to_char(ANC_ABS_ENTRS_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_TYP_NAME v3: ' + ANC_ABS_TYP_NAME) l_debug = ess_log_write('ANC_ABS_TYP_ABSENCE_TYPE_ID v3: ' + to_char(ANC_ABS_TYP_ABSENCE_TYPE_ID)) l_debug = ess_log_write('ANC_ABS_ENTRS_ABSENCE_TYPE_ID v3: ' + to_char(ANC_ABS_ENTRS_ABSENCE_TYPE_ID)) ) ) ) j =j+1 ) ) ln_current_duration_hours = 0 ln_current_duration_days = 0 if ANC_ABS_TYP_NAME = 'SPLIT Hours' THEN ( ln_current_duration_hours = GET_PAY_AVAILABILITY ('ASSIGN',IV_START_DATE, (IV_END_DATE), 'Y', 'Y', 'Y', 'Y', 'D') ) if ANC_ABS_TYP_NAME = 'SPLIT Days' THEN ( ln_current_duration_days = IV_TOTALDURATION ) l_total_duration = l_previous_days_duration + l_previous_hours_duration + ln_current_duration_hours + ln_current_duration_days l_debug = ess_log_write('Current Absence Duration Hours: ' + to_char(ln_current_duration_hours)) l_debug = ess_log_write('Current Absence Duration Days: ' + to_char(ln_current_duration_days)) l_debug = ess_log_write('l_total_duration: ' + to_char(l_total_duration)) l_debug = ess_log_write('l_duration: ' + to_char(l_duration)) IF l_total_duration > 20 then ( VALID = 'N' ERROR_MESSAGE = 'You can take a maximum of 20 SPLIT days.') else ( VALID = 'Y' ERROR_MESSAGE = 'Correct') return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "KIT VALIDATION FORMULA",
        "answer": "DEFAULT FOR PER_PER_PERSON_NUMBER is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_TYP_NAME is 'X' default FOR ANC_ABS_ENTRS_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) default FOR ANC_ABS_ENTRS_END_DATE is '1000-01-01T00:00:00.000Z' (DATE) default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_TOTALDURATION VALID = 'N' l_duration = 0 l_previous_hours_duration = 0 l_previous_days_duration = 0 l_total_duration = 0 l_sub_date='0001/01/01'(date) l_previous_year = '0001/01/01'(date) l_start_date = add_days(trunc(IV_START_DATE),-1) l_debug = ess_log_write('*** In KIT Validation Formula **** ') l_previous_year = ADD_DAYS(trunc(IV_START_DATE),-365) l_debug = ess_log_write('XX Start Date: ' + to_char(l_start_date,'DD-Mon-YYYY')) l_debug = ess_log_write('Previous Year: ' + to_char(l_previous_year,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE: ' + to_char(ANC_ABS_ENTRS_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_ENTRS_END_DATE: ' + to_char(ANC_ABS_ENTRS_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('IV_START_DATE: ' + to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('IV_END_DATE: ' + to_char(IV_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('IV_TOTALDURATION: ' + to_char(IV_TOTALDURATION)) l_debug = ess_log_write('ASG_HR_ASG_ID: ' + to_char(ASG_HR_ASG_ID)) l_debug = ess_log_write('ANC_ABS_TYP_NAME: ' + ANC_ABS_TYP_NAME) CHANGE_CONTEXTS(START_DATE = l_previous_year, END_DATE = l_start_date, ABSENCE_TYPE_ID=300003047733528) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME ln_entry_duration_d = 0 if (ANC_ABS_TYP_ABSENCE_TYPE_ID =300003047733528 AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN',ANC_ABS_ENTRS_START_DATE, ADD_DAYS(ANC_ABS_ENTRS_END_DATE,1), 'Y', 'Y', 'Y', 'Y', 'D') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) l_previous_hours_duration = l_previous_hours_duration + ln_entry_duration_d l_debug = ess_log_write('l_previous_hours_duration: ' + to_char(l_previous_hours_duration)) l_debug = ess_log_write('ANC_ABS_ENTRS_DURATION: ' + to_char(ANC_ABS_ENTRS_DURATION)) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE v2: ' + to_char(ANC_ABS_ENTRS_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE v2: ' + to_char(ANC_ABS_ENTRS_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_TYP_NAME v2: ' + ANC_ABS_TYP_NAME) l_debug = ess_log_write('ANC_ABS_TYP_ABSENCE_TYPE_ID v2: ' + to_char(ANC_ABS_TYP_ABSENCE_TYPE_ID)) l_debug = ess_log_write('ANC_ABS_ENTRS_ABSENCE_TYPE_ID v3: ' + to_char(ANC_ABS_ENTRS_ABSENCE_TYPE_ID)) ) ) ) i =i+1 ) ) CHANGE_CONTEXTS(START_DATE = l_previous_year, END_DATE = l_start_date,ABSENCE_TYPE_ID=300003047733564) ( j=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(j) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_debug = ess_log_write('ANC_ABS_TYP_NAME v4: ' + ANC_ABS_TYP_NAME) if ( (ANC_ABS_TYP_ABSENCE_TYPE_ID = 300003047733564) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( l_previous_days_duration = l_previous_days_duration + ANC_ABS_ENTRS_DURATION l_debug = ess_log_write('ANC_ABS_ENTRS_DURATION v2: ' + to_char(ANC_ABS_ENTRS_DURATION)) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE v3: ' + to_char(ANC_ABS_ENTRS_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_ENTRS_START_DATE v3: ' + to_char(ANC_ABS_ENTRS_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ANC_ABS_TYP_NAME v3: ' + ANC_ABS_TYP_NAME) l_debug = ess_log_write('ANC_ABS_TYP_ABSENCE_TYPE_ID v3: ' + to_char(ANC_ABS_TYP_ABSENCE_TYPE_ID)) l_debug = ess_log_write('ANC_ABS_ENTRS_ABSENCE_TYPE_ID v3: ' + to_char(ANC_ABS_ENTRS_ABSENCE_TYPE_ID)) ) ) ) j =j+1 ) ) ln_current_duration_hours = 0 ln_current_duration_days = 0 if ANC_ABS_TYP_NAME = 'KIT Hours' THEN ( ln_current_duration_hours = GET_PAY_AVAILABILITY ('ASSIGN',IV_START_DATE, (IV_END_DATE), 'Y', 'Y', 'Y', 'Y', 'D') ) if ANC_ABS_TYP_NAME = 'KIT Days' THEN ( ln_current_duration_days = IV_TOTALDURATION ) l_total_duration = l_previous_days_duration + l_previous_hours_duration + ln_current_duration_hours + ln_current_duration_days l_debug = ess_log_write('Current Absence Duration Hours: ' + to_char(ln_current_duration_hours)) l_debug = ess_log_write('Current Absence Duration Days: ' + to_char(ln_current_duration_days)) l_debug = ess_log_write('l_total_duration: ' + to_char(l_total_duration)) l_debug = ess_log_write('l_duration: ' + to_char(l_duration)) IF l_total_duration > 10 then ( VALID = 'N' ERROR_MESSAGE = 'You can take a maximum of 10 KIT days.') else ( VALID = 'Y' ERROR_MESSAGE = 'Correct') return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_Non_Regular_Forces_Leave_Hours",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT for PER_ASG_FTE_VALUE is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') Num_Used= 0 eligible = 0 duration = IV_TOTALDURATION Max_Hours = 0 IF ( ANC_ABS_TYP_NAME = 'Non Regular Forces Leave - Hours' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Non Regular Forces Leave - Hours' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( Num_Used= Num_Used+ ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = Num_Used+ duration Max_Hours = (74 * PER_ASG_FTE_VALUE) IF eligible > Max_Hours then ( VALID = 'N' ERROR_MESSAGE = 'Your Maximum allowed hours are ' + ' ' + TO_CHAR(Max_Hours) + '. This absence will exceed this allowance ' + TO_CHAR(eligible)) else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_FOSTERING_LEAVE",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') five = 0 eligible = 0 duration = IV_TOTALDURATION max_days = 0 IF ( ANC_ABS_TYP_NAME = 'Fostering Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Fostering Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( five = five + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = five + duration max_days = 5 IF eligible > max_days then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(max_days) + ' ' + 'days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_VOLUNTEERING_LEAVE",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT for ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) start_month = (to_char(IV_START_DATE,'MM')) start_year = TO_DATE('01/04/'||(to_char(IV_START_DATE,'YYYY')),'DD/MM/YYYY') end_year = TO_DATE('31/03/'||(to_char(IV_START_DATE,'YYYY')),'DD/MM/YYYY') current_abs_entry_id = 0 current_abs_entry_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IF (start_month = '01' or start_month ='02' or start_month ='03') THEN( year_start = ADD_YEARS(start_year,-1) year_end = end_year ) ELSE( year_start = start_year year_end = ADD_YEARS(end_year,1) ) two = 0 eligible = 0 duration = IV_TOTALDURATION two_days = 0 IF ( ANC_ABS_TYP_NAME = 'Volunteering Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE = year_start, END_DATE = year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Volunteering Leave' AND ( ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') AND ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID <> current_abs_entry_id ) THEN ( two = two + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = two + duration two_days = 2 IF eligible > two_days THEN ( VALID = 'N' IF IV_TOTALDURATION > 2 THEN ERROR_MESSAGE = 'NCC_VOL_LEAVE_MAX1' IF two = 2 THEN ERROR_MESSAGE = 'NCC_VOL_LEAVE_MAX2' IF two = 1 AND IV_TOTALDURATION = 2 THEN ERROR_MESSAGE = 'NCC_VOL_LEAVE_MAX3' IF two = 0.5 AND IV_TOTALDURATION > 1.5 THEN ERROR_MESSAGE = 'NCC_VOL_LEAVE_MAX3' IF two = 1.5 AND IV_TOTALDURATION > 0.5 THEN ERROR_MESSAGE = 'NCC_VOL_LEAVE_MAX3' ) ELSE ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_VOLUNTEERING_LEAVE",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for HWP_EMP_WORKING_HOURS is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) current_year = (to_char(IV_START_DATE,'YYYY')) current_year_start = to_date('01/01/'||current_year,'DD/MM/YYYY') current_year_end = to_date('31/12/'||current_year,'DD/MM/YYYY') two = 0 eligible = 0 duration = IV_TOTALDURATION two_days = 0 IF ( ANC_ABS_TYP_NAME = 'Volunteering Leave' ) THEN ( CHANGE_CONTEXTS(START_DATE = current_year_start, END_DATE = current_year_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Volunteering Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'AWAITING' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SCHEDULED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'INPROGRESS' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( two = two + ANC_ABS_ENTRS_DURATION ) ) ) i =i+1 ) ) eligible = two + duration two_days = 2 IF eligible > two_days then ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for' + ' ' + TO_CHAR(two_days) + ' ' + 'days in an year') else ( VALID = 'Y' ERROR_MESSAGE = 'One') ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "Rebisco Birthday Leave Validation FF",
        "answer": "DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_JOB_MANAGER_LEVEL IS 'AA' DEFAULT FOR PER_ASG_EMPLOYEE_CATEGORY IS 'YY' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'ZZ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_DATE_OF_BIRTH IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_DATE_OF_BIRTH IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date) ln_birth_month = '1' ln_absence_month = '2' lc_valid = 'Y' L_EFFECTIVE_DATE = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) ln_birth_month = TO_CHAR(PER_PER_DATE_OF_BIRTH, 'mm') ln_absence_month = TO_CHAR(IV_START_DATE, 'mm') ln_worker_category = PER_ASG_EMPLOYEE_CATEGORY IF(ln_birth_month <> ln_absence_month) THEN ( lc_valid = 'N' VALID = lc_valid ERROR_MESSAGE = 'Birthday leave must be applied in your birthday month' || PER_ASG_JOB_MANAGER_LEVEL RETURN VALID, ERROR_MESSAGE ) VALID = lc_valid RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "PH Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Rebisco Maternity Leave Validation FF",
        "answer": "DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_RSN_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number), IV_ABSENCE_REASON (text) l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) l_absence_reason_id = GET_CONTEXT(ABSENCE_REASON_ID,0) L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_Eligible_Duration = 0 l_log = 'XX' L_Duration = IV_TOTALDURATION L_SOLO_PARENT_ID = '0' L_Default_Date = '0001/01/01 00:00:00' (DATE) L_Effective_Date = GET_CONTEXT(EFFECTIVE_DATE,L_Default_Date) lc_valid = 'Y' CHANGE_CONTEXTS(EFFECTIVE_DATE = L_Effective_Date) ( L_SOLO_PARENT_ID = GET_VALUE_SET('SOLO_PARENT_NATIONAL_ID_VALUE_SET','|=P_PERSON_ID='''||to_char(L_Person_ID)||'''')||'NO' ) IF(L_SOLO_PARENT_ID = 'RBC_SOLO_PARENTNO') THEN ( IF(IV_TOTALDURATION > 120) THEN ( lc_valid = 'N' error_message = 'Maximum Limit for Solo Parent Maternity Leave exceeded' ) ) ELSE ( IF((ANC_ABS_RSN_NAME = 'Normal Spontaneous Delivery') OR (ANC_ABS_RSN_NAME = 'Caesarean Delivery')) THEN ( IF(IV_TOTALDURATION > 105) THEN ( lc_valid = 'N' error_message = 'Maximum Limit for Normal Spontaneous/ Caesarean Delivery Maternity Leave exceeded' ) ) ELSE IF(ANC_ABS_RSN_NAME = 'Miscarriage') THEN ( IF(IV_TOTALDURATION > 60) THEN ( lc_valid = 'N' error_message = 'Maximum Limit for Miscarriage exceeded' ) ) ) VALID = lc_valid RETURN VALID, error_message",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "PH Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Parental Leave Validation Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of Parental Leave validation formula Log ***') Service_days=0 valid='N' l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Weeks_of_service=Service_days/7 l_debug = ' ' l_debug = ess_log_write('IV_START_DATE'+ to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE'+ to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ACP_HIRE_DATE'+ to_char(ACP_HIRE_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Service_days'+ to_char(Service_days)) l_debug = ess_log_write('Weeks_of_service'+ to_char(Weeks_of_service)) IF (Weeks_of_service>=52) THEN ( valid = 'Y' l_debug = ess_log_write('Eligibility: ' + valid) ) else error_message = 'Minimum 52 weeks of service is required' Return valid,error_message",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Career Break Validation Formula",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE x = ESS_LOG_WRITE('*** Start of Career break validation formula Log ***') Service_days=0 valid='N' l_start_dt='0001/01/01 00:00:00' (date) if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( l_start_dt = ACP_HIRE_DATE ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) Service_days=DAYS_BETWEEN(IV_START_DATE,l_start_dt) Year_of_service=Service_days/365 l_debug = ' ' l_debug = ess_log_write('IV_START_DATE'+ to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE'+ to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('ACP_HIRE_DATE'+ to_char(ACP_HIRE_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Service_days'+ to_char(Service_days)) l_debug = ess_log_write('Year_of_service'+ to_char(Year_of_service)) IF (Year_of_service>=2) THEN ( valid = 'Y' l_debug = ess_log_write('Eligibility: ' + valid) ) else error_message = 'Minimum 2 years of service is required' Return valid,error_message",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC KIT VALIDATION",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 INPUTS ARE IV_START_DATE, IV_END_DATE x = ESS_LOG_WRITE('*** Start of Career break validation formula Log ***') Service_days=0 VALID='Y' l_start_dt='0001/01/01 00:00:00' (date) l_debug = ' ' l_debug = ess_log_write('IV_START_DATE'+ to_char(IV_START_DATE,'DD-Mon-YYYY')) L_Absence_Type_Name = ANC_ABS_TYP_NAME l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) l_duration=1 l_duration = ANC_ABS_ENTRS_DURATION l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( MATERNITY = GET_ABSENCE_DAYS_PER_TYPE('Maternity Leave',l_start_date,l_end_date) ADOPTION = GET_ABSENCE_DAYS_PER_TYPE('Adoption Leave',l_start_date,l_end_date) ) CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date, DATE_EARNED=IV_START_DATE) ( SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', PAY_EARN_PERIOD_START) SET_INPUT ('mode', 'GET_PAY_AVAILABILITY') EXECUTE('SC_GET_HR_DATA') l_working_hours = GET_OUTPUT('X_OUTPUT_NUMBER', 0) l_debug = ess_log_write('l_working_hours = '+(to_char(l_working_hours))) ) l_value = to_char(l_duration) IF (l_start_date != l_end_date) THEN ( VALID = 'N' ERROR_CODE = 'E' error_message = 'Invalid Start and End Dates' l_debug = ess_log_write('Eligibility: ' + valid) return VALID, ERROR_MESSAGE, ERROR_CODE ) IF (MATERNITY=1 OR ADOPTION=1) THEN ( VALID = 'Y' ) ELSE ( VALID = 'N' ERROR_CODE = 'E' error_message = 'You can only apply during maternity' l_debug = ess_log_write('Eligibility: ' + valid) return VALID, ERROR_MESSAGE, ERROR_CODE ) ERROR_MESSAGE='Success' ERROR_CODE='W' VALID='Y' Return VALID,ERROR_MESSAGE,ERROR_CODE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC SPLIT VALIDATION",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 INPUTS ARE IV_START_DATE, IV_END_DATE x = ESS_LOG_WRITE('*** Start of Career break validation formula Log ***') Service_days=0 VALID='Y' l_start_dt='0001/01/01 00:00:00' (date) l_debug = ' ' l_debug = ess_log_write('IV_START_DATE'+ to_char(IV_START_DATE,'DD-Mon-YYYY')) L_Absence_Type_Name = ANC_ABS_TYP_NAME l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) l_duration=1 l_duration = ANC_ABS_ENTRS_DURATION l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( SSPB = GET_ABSENCE_DAYS_PER_TYPE('Shared Parental Leave - Birth',l_start_date,l_end_date) SSPA = GET_ABSENCE_DAYS_PER_TYPE('Shared Parental Leave - Adoption',l_start_date,l_end_date) ) CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date, DATE_EARNED=IV_START_DATE) ( SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', PAY_EARN_PERIOD_START) SET_INPUT ('mode', 'GET_PAY_AVAILABILITY') EXECUTE('SC_GET_HR_DATA') l_working_hours = GET_OUTPUT('X_OUTPUT_NUMBER', 0) l_debug = ess_log_write('l_working_hours = '+(to_char(l_working_hours))) ) l_value = to_char(l_duration) IF (l_start_date != l_end_date) THEN ( VALID = 'N' ERROR_CODE = 'E' error_message = 'Invalid Start and End Dates' l_debug = ess_log_write('Eligibility: ' + valid) return VALID, ERROR_MESSAGE, ERROR_CODE ) IF (SSPA = 1 OR SSPB = 1) THEN ( VALID = 'Y' ) ELSE ( VALID = 'N' ERROR_CODE = 'E' error_message = 'You can only apply during Shared Parental Leave' l_debug = ess_log_write('Eligibility: ' + valid) return VALID, ERROR_MESSAGE, ERROR_CODE ) ERROR_MESSAGE='Success' ERROR_CODE='W' VALID='Y' Return VALID,ERROR_MESSAGE,ERROR_CODE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "WC_7DAYSVALIDATION_FORMULA",
        "answer": "DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR IV_TYPE_OF_ATTACHMENT_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR IV_START_TIME IS '01:23' DEFAULT FOR IV_END_TIME IS '23:23' DEFAULT FOR IV_START_DURATION is 0 DEFAULT FOR IV_END_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_START_TIME is '00:00' DEFAULT FOR ANC_ABS_ENTRS_END_TIME is '00:00' DEFAULT FOR ANC_ABS_TYP_INFORMATION3 IS ' ' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' DEFAULT FOR ORA_HRX_GB_ABS_MASG_SICK_TRANSITION_DATE IS '0001-01-01T00:00:00.000Z' (DATE) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING IS 'X' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION,IV_TYPE_OF_ATTACHMENT_ARR l_days = days_between(IV_END_DATE,IV_START_DATE) + 1 l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING:'+ PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING) EMP_Cat1 = 'X' EMP_Cat1 = (substr(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,1,12)) EMP_Cat2 = 'X' EMP_Cat2 = (substr(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,1,8)) EMP_Cat = 'X' If EMP_Cat1 = 'Non-Teaching' then ( l_debug = ess_log_write('In Non teaching condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,2)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) else if EMP_Cat2 = 'Teaching' then ( l_debug = ess_log_write('In teaching condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) else ( l_debug = ess_log_write('In other condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) Bank_off='N' if EMP_Cat = 'Part Time' or EMP_Cat = 'Full Time' then ( l_date=IV_START_DATE while (l_date<= IV_END_DATE) loop ( l_column='HOLIDAYS' l_calendar = 'BANK_HOLIDAYS' l_sub_date = substr(to_char(l_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) Bank_off = GET_VALUE_SET('GET_BANK_HOLIDAYS','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_calendar|| '''') If Bank_off='Y' then ( l_debug = ess_log_write('Bank Off: ' + Bank_off) l_debug = ess_log_write('Holiday Date is: ' + to_char(l_date)) VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'WC_LEAVE_OVERLAP_TEST' l_date=IV_END_DATE ) else ( VALID='Y' ) l_date=add_days(l_date,1) ) ) else ( Valid='Y' ) return VALID, ERROR_MESSAGE, ERROR_CODE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "WC_ANNUAL_LEAVE_VALIDATION_FORMULA",
        "answer": "DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR IV_TYPE_OF_ATTACHMENT_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR IV_START_TIME IS '01:23' DEFAULT FOR IV_END_TIME IS '23:23' DEFAULT FOR IV_START_DURATION is 0 DEFAULT FOR IV_END_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_START_TIME is '00:00' DEFAULT FOR ANC_ABS_ENTRS_END_TIME is '00:00' DEFAULT FOR ANC_ABS_TYP_INFORMATION3 IS ' ' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' DEFAULT FOR ORA_HRX_GB_ABS_MASG_SICK_TRANSITION_DATE IS '0001-01-01T00:00:00.000Z' (DATE) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING IS 'X' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION,IV_TYPE_OF_ATTACHMENT_ARR l_days = days_between(IV_END_DATE,IV_START_DATE) + 1 l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING:'+ PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING) EMP_Cat1 = 'X' EMP_Cat1 = (substr(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,1,12)) EMP_Cat2 = 'X' EMP_Cat2 = (substr(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,1,8)) EMP_Cat = 'X' If EMP_Cat1 = 'Non-Teaching' then ( l_debug = ess_log_write('In Non teaching condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,2)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) else if EMP_Cat2 = 'Teaching' then ( l_debug = ess_log_write('In teaching condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) else ( l_debug = ess_log_write('In other condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) Bank_off='N' if EMP_Cat = 'Part Time' then ( l_date=IV_START_DATE while (l_date<= IV_END_DATE) loop ( l_column='HOLIDAYS' l_calendar = 'BANK_HOLIDAYS' l_sub_date = substr(to_char(l_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) Bank_off = GET_VALUE_SET('GET_BANK_HOLIDAYS','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_calendar|| '''') If Bank_off='Y' then ( l_debug = ess_log_write('Bank Off: ' + Bank_off) l_debug = ess_log_write('Holiday Date is: ' + to_char(l_date)) VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'WC_BH_EXISTS_BETWEEN_AL' l_date=IV_END_DATE ) else ( VALID='Y' ) l_date=add_days(l_date,1) ) ) else ( Valid='Y' ) return VALID, ERROR_MESSAGE, ERROR_CODE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "WC_BH_VALIDATION_FORMULA",
        "answer": "DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_MTRNT_EXPECTED_DATE_CHILD_BIRTH IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_PATTERN_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_MAP_EVENT_TYPE_CODE IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR IV_TYPE_OF_ATTACHMENT_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR IV_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR IV_END_DATE is '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR IV_START_TIME IS '01:23' DEFAULT FOR IV_END_TIME IS '23:23' DEFAULT FOR IV_START_DURATION is 0 DEFAULT FOR IV_END_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '1000-01-01T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_START_TIME is '00:00' DEFAULT FOR ANC_ABS_ENTRS_END_TIME is '00:00' DEFAULT FOR ANC_ABS_TYP_INFORMATION3 IS ' ' DEFAULT FOR ANC_ABS_TYP_LEG_GROUPING_CD IS ' ' DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_ACTUAL_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_START_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_MTRNT_PLANNED_RETURN_DATE IS '4712-12-31T00:00:00.000Z' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' DEFAULT FOR ORA_HRX_GB_ABS_MASG_SICK_TRANSITION_DATE IS '0001-01-01T00:00:00.000Z' (DATE) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING IS 'X' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION,IV_TYPE_OF_ATTACHMENT_ARR VALID='N' l_days = days_between(IV_END_DATE,IV_START_DATE) + 1 l_date=IV_START_DATE while (l_date<= IV_END_DATE) loop ( l_column='HOLIDAYS' l_calendar = 'BANK_HOLIDAYS' l_sub_date = substr(to_char(l_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) Bank_off = GET_VALUE_SET('GET_BANK_HOLIDAYS','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_calendar|| '''') If Bank_off='Y' then ( l_debug = ess_log_write('Bank Off: ' + Bank_off) l_debug = ess_log_write('Holiday Date is: ' + to_char(l_date)) VALID='Y' ) else ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'WC_BH_DOES_NOT_EXISTS' l_date=IV_END_DATE ) l_date=add_days(l_date,1) ) return VALID, ERROR_MESSAGE, ERROR_CODE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "MATERNITY VALIDATION",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3 VALID = 'Y' l_Flag = 'X' l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_birth_date = IV_EXPECTEDCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE l_actual_start_date = IV_ACTUALSTARTDATE l_planned_start_date = IV_PLANNEDSTARTDATE l_hr_asg_id = ASG_HR_ASG_ID if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE > ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,1)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_BDATE_EXPECTED' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE > ADD_DAYS(IV_ACTUALCHILDBIRTHDATE,1)) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_BDATE_ACTUAL' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_birth_date,-6)) if ( IV_ACTUALSTARTDATE WAS not DEFAULTED ) then ( if ( DAYS_BETWEEN(l_ewc,l_actual_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) else ( if( DAYS_BETWEEN(l_ewc , l_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_Flag = GET_VALUE_SET('SICK_PREGNENCY_LEAVE','|=P_PERSON_ID='''|| to_char(l_hr_asg_id)) if(l_Flag = 'Y') then ( VALID = 'N' ERROR_MESSAGE = 'HRX:::HRX_PREGNANCY_ILLNESS' ERROR_CODE = 'W' return VALID, ERROR_CODE, ERROR_MESSAGE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBL Maternity Validation",
        "answer": "DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE , IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE, IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3 VALID = 'Y' l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_birth_date = IV_EXPECTEDCHILDBIRTHDATE l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE l_actual_start_date = IV_ACTUALSTARTDATE l_planned_start_date = IV_PLANNEDSTARTDATE if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF IV_PLANNEDENDDATE<ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,14) THEN ( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_14_DAYS_CHECK' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF( IV_PLANNEDSTARTDATE > IV_EXPECTEDCHILDBIRTHDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_BDATE_EXPECTED' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF IV_ACTUALENDDATE<ADD_DAYS(IV_ACTUALSTARTDATE,14) THEN ( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_14_DAYS_CHECK' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE > IV_ACTUALCHILDBIRTHDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_BDATE_ACTUAL' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) if ( IV_ACTUALSTARTDATE WAS not DEFAULTED ) then ( if ( IV_ACTUALCHILDBIRTHDATE WAS not DEFAULTED ) then ( if ( DAYS_BETWEEN(l_actual_birth_date,l_actual_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) else ( if( DAYS_BETWEEN(l_expected_birth_date,l_actual_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) else ( if ( IV_ACTUALCHILDBIRTHDATE WAS not DEFAULTED ) then ( if ( DAYS_BETWEEN(l_actual_birth_date, l_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) else ( if( DAYS_BETWEEN(l_expected_birth_date , l_start_date ) > 77 ) then ( VALID ='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_DATE_BIRTH_MAT' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL_FLEXI_LEAVE",
        "answer": "DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for PER_ASG_WORKING_HOURS is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) Calendar_Month_start=to_date('01/'||to_char(IV_START_DATE,'MM/YYYY'),'DD/MM/YYYY') Calendar_Month_end=last_day(IV_START_DATE) applied_days = 0 eligible = 0 Y=0 FTE=PER_ASG_FTE_VALUE FINAL_FTE=FTE*(PER_ASG_ATTRIBUTE_NUMBER1/52.14) duration = IV_TOTALDURATION X=GET_TABLE_VALUE('LBL_MAX_LIMIT','Leave_Type',upper(ANC_ABS_TYP_NAME),'01/01/1951') l_debug = ess_log_write('X= '+ X ) l_debug = ess_log_write('ANC_ABS_TYP_NAME= '+ ANC_ABS_TYP_NAME ) Max_Days=0 Y=TO_NUMBER(X)*FTE Max_Days = Y l_debug = ess_log_write('Max_Days= '+ to_char(Max_Days) ) IF (ANC_ABS_TYP_NAME = 'Flexi Leave') THEN ( CHANGE_CONTEXTS(START_DATE = Calendar_Month_start, END_DATE = Calendar_Month_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Flexi Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( applied_days = applied_days + duration ) ) ) i =i+1 ) ) ) eligible = (Max_Days) l_debug = ess_log_write('eligible= '+ to_char(eligible) ) l_debug = ess_log_write('applied_days = '+ to_char(applied_days) ) IF (eligible < applied_days) THEN ( VALID = 'N' ERROR_MESSAGE = ' You are only eligible for '+ to_char(eligible)+' hours in one month.Please review the absence date you have applied for.' ) ELSE ( VALID = 'Y' ERROR_MESSAGE = 'Pass' ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL_TOIL_LEAVE",
        "answer": "DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for PER_ASG_WORKING_HOURS is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) Calendar_Month_start=to_date('01/'||to_char(IV_START_DATE,'MM/YYYY'),'DD/MM/YYYY') Calendar_Month_end=last_day(IV_START_DATE) applied_days = 0 eligible = 0 Y=0 FTE=PER_ASG_FTE_VALUE FINAL_FTE=FTE*(PER_ASG_ATTRIBUTE_NUMBER1/52.14) duration = IV_TOTALDURATION X=GET_TABLE_VALUE('LBL_MAX_LIMIT','Leave_Type',ANC_ABS_TYP_NAME,'01/01/1951') Max_Days=0 IF (X = '01/01/1951') THEN (Max_Days = 0) ELSE ( Y=TO_NUMBER(X)*FTE Max_Days = Y ) IF (ANC_ABS_TYP_NAME = 'TOIL') THEN ( CHANGE_CONTEXTS(START_DATE = Calendar_Month_start, END_DATE = Calendar_Month_end) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='TOIL' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED') ) then ( applied_days = applied_days + duration ) ) ) i =i+1 ) ) ) eligible = (Max_Days) IF (eligible < applied_days) THEN ( VALID = 'N' ERROR_MESSAGE = ' You are only eligible for '+ to_char(eligible)+' hours in one month.Please review the absence date you have applied for.' ) ELSE ( VALID = 'Y' ERROR_MESSAGE = 'Pass' ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL_SPECIAL_LEAVE",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' default for year_1_ago is 0 default for year_3_ago is 0 Default for l_yr_start_date_1_ago_date is '0001/01/01 00:00:00' (DATE) Default for l_yr_start_date_3_ago_date is '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE year_1_ago = to_number(to_char(date_start,'YYYY')) -1 year_3_ago = to_number(to_char(date_start,'YYYY')) -3 l_yr_end_date_1_ago= (to_char(date_start,'DD/MM/YYYY')) l_yr_start_date_1_ago = (to_char(date_start,'DD/MM')||'/'|| to_char(year_1_ago)) l_yr_start_date_1_ago_date =to_date(l_yr_start_date_1_ago) l_yr_start_date_3_ago = (to_char(date_start,'DD/MM')||'/'|| to_char(year_3_ago)) l_yr_start_date_3_ago_date =to_date(l_yr_start_date_3_ago) l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date_1_ago_date, END_DATE=date_start) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Special Leave Paid' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED')) then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'You are only eligible for 5 days in past 1 year' return VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(START_DATE=l_yr_start_date_3_ago_date, END_DATE=date_start) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Force Majeure Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'APPROVED')) then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL_UNPAID_LEAVE_DAYS_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'London Borough of Lambeth' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TITLE_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_ABSENCE_REASON IS 'N' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_TITLE_ARR, IV_ABSENCE_REASON, IV_TOTALDURATION i=1 l_absence_days = DAYS_BETWEEN(TRUNC(IV_END_DATE), TRUNC(IV_START_DATE)) + 1 CHANGE_CONTEXTS(START_DATE=IV_START_DATE, END_DATE=IV_END_DATE) ( IF ( IV_ABSENCE_REASON = 'Special Unpaid Leave' AND ((10 < IV_TOTALDURATION))) THEN ( VALID = 'N' ERROR_MESSAGE = 'You can take Unpaid Leave with Reason = Special Leave for maximum 10days.' RETURN VALID, ERROR_MESSAGE ) ELSE( VALID = 'Y') ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL_UNPAID_LEAVE_HOURS_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'London Borough of Lambeth' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TITLE_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_ABSENCE_REASON IS 'N' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_TITLE_ARR, IV_ABSENCE_REASON, IV_TOTALDURATION i=1 l_absence_days = DAYS_BETWEEN(TRUNC(IV_END_DATE), TRUNC(IV_START_DATE)) + 1 CHANGE_CONTEXTS(START_DATE=IV_START_DATE, END_DATE=IV_END_DATE) ( IF ( IV_ABSENCE_REASON = 'Special Unpaid Leave' AND ((70 < IV_TOTALDURATION))) THEN ( VALID = 'N' ERROR_MESSAGE = 'You can take Unpaid Leave with Reason = Special Leave for Maximum 70 Hours.' RETURN VALID, ERROR_MESSAGE ) ELSE( VALID = 'Y') ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Restrict Future Dated",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date) current_year = to_text(get_sysdate(),'yyyy') IF (IV_START_DATE < TO_DATE(current_year||'-01-01','yyyy-mm-dd')) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_CURRENT_YEAR' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) ELSE IF (IV_START_DATE > get_sysdate()) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_ADVANCE_ENTRY' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) else ( VALID = 'Y' RETURN VALID )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Voluntary Leave Validation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_TOTALDURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_TOTALDURATION current_year = to_text(get_sysdate(),'yyyy') past_days = GET_ABSENCE_DAYS_PER_TYPE('Voluntary Work',TO_DATE(current_year||'-01-01','yyyy-mm-dd'),TO_DATE(current_year||'-12-31','yyyy-mm-dd')) IF (past_days + IV_TOTALDURATION > 1) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_VOLUNTARY_WORK_ERROR_MSG' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) ELSE IF (IV_START_DATE < TO_DATE(current_year||'-01-01','yyyy-mm-dd')) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_CURRENT_YEAR' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) else ( VALID = 'Y' RETURN VALID )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Study Leave Validation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_TOTALDURATION IS 0 INPUTS ARE IV_START_DATE (date),IV_TOTALDURATION current_year = to_text(get_sysdate(),'yyyy') past_days = GET_ABSENCE_DAYS_PER_TYPE('Study leave',TO_DATE(current_year||'-01-01','yyyy-mm-dd'),TO_DATE(current_year||'-12-31','yyyy-mm-dd')) IF (past_days + IV_TOTALDURATION > 3) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_STUDY_LEAVE_ERROR_MESSAGE' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) ELSE IF (IV_START_DATE < TO_DATE(current_year||'-01-01','yyyy-mm-dd')) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_CURRENT_YEAR' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) else ( VALID = 'Y' RETURN VALID )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Start Date validation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date) current_year = to_text(get_sysdate(),'yyyy') IF (IV_START_DATE < TO_DATE(current_year||'-01-01','yyyy-mm-dd')) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_CURRENT_YEAR' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) else ( VALID = 'Y' RETURN VALID )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Parental Leave Validation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_TOTALDURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_TOTALDURATION current_year = to_text(get_sysdate(),'yyyy') start_date = TO_DATE(current_year||'-01-01','yyyy-mm-dd') end_date = TO_DATE(current_year||'-12-31','yyyy-mm-dd') current_absences = GET_ABSENCE_DAYS_PER_TYPE('Parental Leave',start_date,end_date) IF (IV_START_DATE < TO_DATE(current_year||'-01-01','yyyy-mm-dd')) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_CURRENT_YEAR' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) ELSE IF ((current_absences + IV_TOTALDURATION) > 28) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_PARENTAL_ENTRY' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) else ( VALID = 'Y' RETURN VALID )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Carers Leave Validation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_TOTALDURATION IS 0 INPUTS ARE IV_START_DATE (date),IV_TOTALDURATION current_year = to_text(get_sysdate(),'yyyy') past_days = GET_ABSENCE_DAYS_PER_TYPE('Carers Leave',TO_DATE(current_year||'-01-01','yyyy-mm-dd'),TO_DATE(current_year||'-12-31','yyyy-mm-dd')) IF (past_days + IV_TOTALDURATION > 5) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_CARERS_LEAVE_ERROR_MESSAGE' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) ELSE IF (IV_START_DATE < TO_DATE(current_year||'-01-01','yyyy-mm-dd')) THEN( VALID = 'N' ERROR_CODE = 'E' ERROR_MESSAGE = 'POD_CURRENT_YEAR' RETURN VALID,ERROR_CODE, ERROR_MESSAGE ) else ( VALID = 'Y' RETURN VALID )",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SAC UK Paternity Absence Entitlement",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE VALID='Y' ERROR_MESSAGE = 'Success' l_days_after = 0 l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE ) if(l_event_type = 'CHB') then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) if(l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) l_adj_placement_date = IV_EXPECTEDCHILDBIRTHDATE IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( IF IV_ACTUALCHILDBIRTHDATE < IV_EXPECTEDCHILDBIRTHDATE THEN l_adj_placement_date = IV_EXPECTEDCHILDBIRTHDATE ELSE l_adj_placement_date = IV_ACTUALCHILDBIRTHDATE ) l_no_of_days = days_between(l_start_date, l_adj_placement_date) l_56th_day = ADD_DAYS(l_adj_placement_date, 56) If (l_start_date >= l_adj_placement_date AND l_end_date >= l_56th_day) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'ANC:::ABS_PATERNITY_56_DAYS_ERR' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) if(l_start_date < l_placement_date) then ( VALID='N' if(l_event_type = 'CHB') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ) else if(l_event_type = 'PLC') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ) ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "SAC_GB_PAY_ACCESS_HR_CMP",
        "answer": "ALIAS PER_HIST_ASG_EFFECTIVE_END_DATE AS H_END_DATE ALIAS PER_HIST_ASG_EFFECTIVE_START_DATE AS H_START_DATE ALIAS PER_HIST_ASG_EFFECTIVE_LATEST_CHANGE AS H_LATEST_CHANGE ALIAS PER_HIST_ASG_ASSIGNMENT_TYPE AS H_ASG_TYPE ALIAS PER_HIST_ASG_STATUS_USER_STATUS AS H_ASG_STATUS ALIAS PER_HIST_ASG_GRADE_ID AS H_GRADE_ID ALIAS PER_HIST_ASG_ASSIGNMENT_ID AS H_ASG_ID ALIAS CMP_ASSIGNMENT_SALARY_RGE_ACTION_NAME AS H_SAL_ACTION ALIAS CMP_ASSIGNMENT_SALARY_RGE_DATE_FROM AS H_SAL_DATE_FROM ALIAS CMP_ASSIGNMENT_SALARY_RGE_DATE_FROM AS H_SAL_DATE_TO ALIAS CMP_ASSIGNMENT_SALARY_RGE_SALARY_AMOUNT AS H_SAL_AMOUNT ALIAS PER_ASG_FTE_VALUE AS FTE ALIAS PER_ASG_STATUS_USER_STATUS AS ASG_STATUS ALIAS PER_ASG_PEOPLE_GROUP_SEGMENT2 AS CONTRACT_TYPE DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_END_DATE IS '31-DEC-4712' (DATE) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '01-JAN-1950' (DATE) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_LATEST_CHANGE IS 'NULL' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_TYPE IS 'NULL' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_STATUS_USER_STATUS IS 'NULL' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_GRADE_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID IS 0 DEFAULT_DATA_VALUE FOR CMP_ASSIGNMENT_SALARY_RGE_ACTION_NAME IS 'NULL' DEFAULT_DATA_VALUE FOR CMP_ASSIGNMENT_SALARY_RGE_DATE_FROM IS '4712/12/31 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR CMP_ASSIGNMENT_SALARY_RGE_DATE_TO IS '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR CMP_ASSIGNMENT_SALARY_RGE_SALARY_AMOUNT IS 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_STATUS_USER_STATUS IS 'NULL' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'NULL' DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 0 DEFAULT FOR date1 IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR date2 IS '0001/01/01 00:00:00' (DATE) INPUTS ARE mode (text) , date1 (date) , date2 (date) lvFormulaName = '[SAC_GB_PAY_ACCESS_HR_CMP] ' NullDate = '0001/01/01 00:00:00' (DATE) ctxAsgId = GET_CONTEXT(HR_ASSIGNMENT_ID, 0) temp = PAY_INTERNAL_LOG_WRITE(lvFormulaName + '::: START OF FORMULA') IF mode = 'SNCT_TERM_YEAR' THEN ( EVENT_DATES = EMPTY_DATE_NUMBER EVENT_DESC = EMPTY_TEXT_NUMBER EVENT_COUNT = 0 ldTermStart = GET_CONTEXT(START_DATE, NullDate) ldTermEnd = GET_CONTEXT(END_DATE, NullDate) lnTempFTE = 0 lnTempAmount = 0 lnTempCT = 'Y' lnTempStatus = 'NULL' lnEvents = 0 kIdx = 0 i = PER_HIST_ASG_EFFECTIVE_START_DATE.FIRST(-1234) WHILE PER_HIST_ASG_EFFECTIVE_START_DATE.EXISTS(i) LOOP ( rLog = ESS_LOG_WRITE (lvFormulaName + 'Asg Idx: ' + TO_CHAR(i) + ' Event: Start Date $$$ ' + 'ldAsgEffStartDt '+ TO_CHAR (H_START_DATE[i], 'DD-MON-RRRR') + 'ldAsgEffEndDt '+ TO_CHAR (H_END_DATE[i], 'DD-MON-RRRR') + 'H_ASG_TYPE '+ H_ASG_TYPE[i] + ' lvAsgLatestChange ' + H_LATEST_CHANGE[i]) IF ( H_ASG_ID[i] = ctxAsgId AND H_LATEST_CHANGE[i] = 'Y' AND H_ASG_TYPE[i] = 'E') THEN ( IF ( H_START_DATE[i] <= ldTermEnd AND H_END_DATE[i] >= ldTermStart) THEN ( lnFTEChange = 0 lnStatusChange = 0 lnTempDate = GREATEST(H_START_DATE[i], ldTermStart) CHANGE_CONTEXTS(EFFECTIVE_DATE = lnTempDate) ( lnFTE = PER_ASG_FTE_VALUE lvContractType = GET_TABLE_VALUE('SAC_PQP_CONTRACT_TYPES', 'SNCT_CONTRACT', CONTRACT_TYPE, 'N') ) IF H_ASG_STATUS[i] != 'Long Term - No Payroll' AND H_ASG_STATUS[i] != 'External Secondment - No Payroll' AND H_ASG_STATUS[i] != 'Maternity/Adoption Leave - Payroll Eligible' AND H_ASG_STATUS[i] != 'Inactive Substantive Post - No Payroll' THEN ( lnAsgStatus = 1 ) ELSE ( lnAsgStatus = 0 ) IF lnTempStatus != 'Long Term - No Payroll' AND lnTempStatus != 'External Secondment - No Payroll' AND lnTempStatus != 'Maternity/Adoption Leave - Payroll Eligible' AND lnTempStatus != 'Inactive Substantive Post - No Payroll' THEN ( lnTempAsgStatus = 1 ) ELSE ( lnTempAsgStatus = 0 ) IF lnTempFTE != lnFTE AND lnAsgStatus = 1 THEN ( lnTempFTE = lnFTE lnFTEChange = 1 kIdx = kIdx + 1 EVENT_DATES[kIdx] = lnTempDate EVENT_DESC[kIdx] = 'FTE' ) IF lnTempStatus != H_ASG_STATUS[i] AND ( (lnAsgStatus = 1 AND lnTempAsgStatus = 0) OR (lnAsgStatus = 0 AND lnTempAsgStatus = 1)) THEN ( lnStatusChange = 1 lnTempStatus = H_ASG_STATUS[i] IF lnFTEChange = 1 THEN ( EVENT_DESC[kIdx] = EVENT_DESC[kIdx] || '_ASG_STATUS - ' || TO_CHAR(lnAsgStatus) ) ELSE ( kIdx = kIdx + 1 EVENT_DATES[kIdx] = lnTempDate EVENT_DESC[kIdx] = 'ASG_STATUS - ' || TO_CHAR(lnAsgStatus) ) ) IF lnTempCT != lvContractType THEN ( IF lnFTEChange = 1 OR lnStatusChange = 1 THEN ( EVENT_DESC[kIdx] = EVENT_DESC[kIdx] || '_CONTRACT' ) ELSE ( kIdx = kIdx + 1 EVENT_DATES[kIdx] = lnTempDate EVENT_DESC[kIdx] = 'ASG_STATUS - ' || TO_CHAR(lnAsgStatus) ) ) rLog = ESS_LOG_WRITE ('Idx: ' + TO_CHAR(i) + ' lnFTE: ' + TO_CHAR(lnFTE) + ', Status: ' + H_ASG_STATUS[i] + ', CT: ' + lvContractType) ) ELSE IF H_START_DATE[i] > ldTermEnd THEN ( EXIT ) ) i = PER_HIST_ASG_EFFECTIVE_START_DATE.NEXT(i, -1234) ) i = H_SAL_DATE_FROM.FIRST(-1234) WHILE H_SAL_DATE_FROM.EXISTS(i) LOOP ( rLog = ESS_LOG_WRITE (lvFormulaName + 'Salary Idx: ' + TO_CHAR(i) + ' Event: Start Date $$$ ' + ', SalaryEffStartDt '+ TO_CHAR (H_SAL_DATE_FROM[i], 'DD-MON-RRRR') + ', SalaryEffEndDt '+ TO_CHAR (H_SAL_DATE_TO[i], 'DD-MON-RRRR') + ', SalaryAction '+ H_SAL_ACTION[i] + ', Amount ' + TO_CHAR (H_SAL_AMOUNT[i])) lnTempDate = GREATEST(H_SAL_DATE_FROM[i], ldTermStart) CHANGE_CONTEXTS(EFFECTIVE_DATE = lnTempDate) ( lvAsgStatus = PER_ASG_STATUS_USER_STATUS ) IF lnTempAmount != H_SAL_AMOUNT[i] AND lvAsgStatus != 'Long Term - No Payroll' AND lvAsgStatus != 'External Secondment - No Payroll' AND lvAsgStatus != 'Maternity/Adoption Leave - Payroll Eligible' AND lvAsgStatus != 'Inactive Substantive Post - No Payroll' THEN ( lnTempAmount = H_SAL_AMOUNT[i] kIdx = kIdx + 1 EVENT_DATES[kIdx] = lnTempDate EVENT_DESC[kIdx] = 'SALARY_' || H_SAL_ACTION[i] ) i = H_SAL_DATE_FROM.NEXT(i, -1234) ) IF IS_DATE_BETWEEN(date1, ldTermStart, ldTermEnd) = 1 THEN ( kIdx = kIdx + 1 EVENT_DATES[kIdx] = ADD_DAYS(date1, 1) EVENT_DESC[kIdx] = 'TERMINATION' ) eIdx = 1 lnEvents = EVENT_DATES.COUNT WHILE eIdx <= lnEvents LOOP ( fIdx = eIdx + 1 WHILE fIdx <= lnEvents LOOP ( IF EVENT_DATES[eIdx] > EVENT_DATES[fIdx] THEN ( ldTemp = EVENT_DATES[eIdx] lvTemp = EVENT_DESC[eIdx] EVENT_DATES[eIdx] = EVENT_DATES[fIdx] EVENT_DESC[eIdx] = EVENT_DESC[fIdx] EVENT_DATES[fIdx] = ldTemp EVENT_DESC[fIdx] = lvTemp ) fIdx = fIdx + 1 ) eIdx = eIdx + 1 ) eIdx = 1 WHILE eIdx <= lnEvents LOOP ( rLog = ESS_LOG_WRITE(lvFormulaName + 'Sort Idx: ' + TO_CHAR (eIdx) + ' Event Dates: ' + TO_CHAR (EVENT_DATES[eIdx], 'DD-MON-RRRR') + ' Description: ' + EVENT_DESC[eIdx]) eIdx = eIdx + 1 ) eIdx = 1 WHILE eIdx <= lnEvents LOOP ( fIdx = eIdx + 1 WHILE fIdx <= lnEvents LOOP ( IF EVENT_DATES[eIdx] = EVENT_DATES[fIdx] THEN ( EVENT_DESC[eIdx] = EVENT_DESC[eIdx] || '_' || EVENT_DESC[fIdx] rLog = ESS_LOG_WRITE('eIdx: ' + TO_CHAR (eIdx) + ' Non Duplicate Dates: ' + TO_CHAR (EVENT_DATES[eIdx], 'DD-MON-RRRR') + ' Description: ' + EVENT_DESC[eIdx]) rLog = ESS_LOG_WRITE('fIdx: ' + TO_CHAR (fIdx) + ' Non Duplicate Dates: ' + TO_CHAR (EVENT_DATES[fIdx], 'DD-MON-RRRR') + ' Description: ' + EVENT_DESC[fIdx]) gIdx = fIdx WHILE gIdx < lnEvents LOOP ( rLog = ESS_LOG_WRITE('gIdx: ' + TO_CHAR (gIdx) + ' Non Duplicate Dates: ' + TO_CHAR (EVENT_DATES[gIdx], 'DD-MON-RRRR') + ' Description: ' + EVENT_DESC[gIdx]) hIdx = gIdx + 1 rLog = ESS_LOG_WRITE('hIdx: ' + TO_CHAR (hIdx) + ' Non Duplicate Dates: ' + TO_CHAR (EVENT_DATES[hIdx], 'DD-MON-RRRR') + ' Description: ' + EVENT_DESC[hIdx]) EVENT_DATES[gIdx] = EVENT_DATES[hIdx] EVENT_DESC[gIdx] = EVENT_DESC[hIdx] gIdx = hIdx ) lnEvents = lnEvents - 1 ) ELSE ( fIdx = fIdx + 1 ) ) eIdx = eIdx + 1 ) eIdx = 1 WHILE eIdx <= lnEvents LOOP ( rLog = ESS_LOG_WRITE(lvFormulaName + 'Unique Idx: ' + TO_CHAR (eIdx) + ' Non Duplicate Dates: ' + TO_CHAR (EVENT_DATES[eIdx], 'DD-MON-RRRR') + ' Description: ' + EVENT_DESC[eIdx]) eIdx = eIdx + 1 ) EVENT_COUNT = lnEvents RETURN EVENT_DATES, EVENT_DESC, EVENT_COUNT ) ELSE IF mode = 'ORA_HRX_GB_ABS_ASG_LIST_COUNT' THEN ( ASG_COUNT = ORA_HRX_GB_ABS_ASG_LIST_COUNT RETURN ASG_COUNT ) RETURN",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "SAC UK Paternity Absence Validation",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE VALID='Y' ERROR_MESSAGE = 'Success' l_days_after = 0 l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE ) if(l_event_type = 'CHB') then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) if(l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) l_adj_placement_date = IV_EXPECTEDCHILDBIRTHDATE IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( IF IV_ACTUALCHILDBIRTHDATE < IV_EXPECTEDCHILDBIRTHDATE THEN l_adj_placement_date = IV_EXPECTEDCHILDBIRTHDATE ELSE l_adj_placement_date = IV_ACTUALCHILDBIRTHDATE ) l_no_of_days = days_between(l_start_date, l_adj_placement_date) l_56th_day = ADD_DAYS(l_adj_placement_date, 364) If (l_start_date >= l_adj_placement_date AND l_end_date >= l_56th_day) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'ANC:::ABS_PATERNITY_56_DAYS_ERR' return VALID, ERROR_MESSAGE, ERROR_CODE ) if(l_start_date < l_placement_date) then ( VALID='N' if(l_event_type = 'CHB') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ) else if(l_event_type = 'PLC') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ) ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "SAC Hourly Absence Overlap Validation",
        "answer": "DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '01-DEC-4712' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '01-JAN-1900' (DATE) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'SUBMITTED' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'APPROVED' DEFAULT FOR ANC_ABS_TYP_DURATION_UOM_CD IS 'X' DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS 'N' DEFAULT FOR ANC_ABS_TYP_PREVENT_MULTIPLE_ASG_FLAG IS 'N' DEFAULT FOR ANC_ABS_ENTRS_ASSIGNMENT_ID IS 0 DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE) VALID = 'Y' ERROR_MESSAGE = ' ' l_start_date = ADD_YEARS(IV_START_DATE, -2) l_end_date = LAST_DAY(IV_END_DATE) ctxEntryId = GET_CONTEXT (ABSENCE_ENTRY_ID, 0) ctxAssignmentId = GET_CONTEXT (HR_ASSIGNMENT_ID, 0) lvAbsAsgType = ANC_ABS_TYP_PREVENT_MULTIPLE_ASG_FLAG CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date) ( i = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.LAST(-1234) WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( lnEntryId = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] IF ctxEntryId != lnEntryId THEN ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = lnEntryId) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( ldAbsenceStartDt = ANC_ABS_ENTRS_START_DATE ldAbsenceEndDt = ANC_ABS_ENTRS_END_DATE lvPrevAbsAsgType = ANC_ABS_TYP_PREVENT_MULTIPLE_ASG_FLAG IF ( IS_DATE_BETWEEN (ldAbsenceStartDt, IV_START_DATE, IV_END_DATE) = 1 OR IS_DATE_BETWEEN (ldAbsenceEndDt, IV_START_DATE, IV_END_DATE) = 1 OR IS_DATE_BETWEEN (IV_START_DATE, ldAbsenceStartDt, ldAbsenceEndDt) = 1 OR IS_DATE_BETWEEN (IV_END_DATE, ldAbsenceStartDt, ldAbsenceEndDt) = 1) AND ( ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED' AND ( ANC_ABS_ENTRS_APPROVAL_STATUS_CD = 'APPROVED' OR ANC_ABS_ENTRS_APPROVAL_STATUS_CD = 'AWAITING')) AND ( (lvAbsAsgType = 'N' AND lvPrevAbsAsgType = 'N') OR (lvAbsAsgType = 'Y' AND lvPrevAbsAsgType = 'N') OR (lvAbsAsgType = 'N' AND lvPrevAbsAsgType = 'Y') OR (lvAbsAsgType = 'Y' AND lvPrevAbsAsgType = 'Y' AND ctxAssignmentId = ANC_ABS_ENTRS_ASSIGNMENT_ID)) THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC:::SAC_ABS_ENTRY_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.PRIOR(i, -1234) ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "SCC PAID LEAVE FOR NHS VALIDATION FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS ' ' Default for PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'XX' Default for PER_ASG_ATTRIBUTE2 is 'XX' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ABSENCE_REASON collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME VALID = 'Y' if ( IV_ABSENCE_REASON = 'Carers leave (Paid) NHS Staff Only') Then ( if ( collective_agreement != 'NHS (TUPE)' AND collective_agreement != 'NHS Agenda for Change (TUPE)' ) then ( VALID = 'N' ERROR_MESSAGE = 'ANC_NON_NHS_STAFF' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "PATERNITY_LEAVE_ADDITIONAL_ABS_VALIDATION",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION ,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE ,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1 ,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE ,IV_ACTUALPLACEMENTDATE VALID='Y' ERROR_MESSAGE = 'Success' l_days_after = 0 l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE ) if(l_event_type = 'CHB') then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) if ( IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' l_message = 'You must enter the Actual Date of Childbirth.' ERROR_MESSAGE = GET_MESG('HRX','SCC_ABS_MESG','TOKEN1',l_message) return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) if ( IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' l_message = 'You must enter the Actual Date of Placement' ERROR_MESSAGE = GET_MESG('HRX','SCC_ABS_MESG','TOKEN1',l_message) return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) if(l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF days_between(IV_ACTUALSTARTDATE,IV_ACTUALCHILDBIRTHDATE) > 70 THEN ( VALID ='N' ERROR_CODE = 'E' l_message = 'Absence Actual Start Date should within 70 days of Child Birth' ERROR_MESSAGE = GET_MESG('HRX','SCC_ABS_MESG','TOKEN1',l_message) return VALID, ERROR_MESSAGE, ERROR_CODE ) IF days_between(IV_ACTUALENDDATE,IV_ACTUALCHILDBIRTHDATE) > 70 THEN ( VALID ='N' ERROR_CODE = 'E' l_message = 'Absence Actual End Date should within 70 days of Child Birth' ERROR_MESSAGE = GET_MESG('HRX','SCC_ABS_MESG','TOKEN1',l_message) return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) else if(l_event_type = 'PLC') then ( IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) IF days_between(IV_ACTUALSTARTDATE,IV_ACTUALCHILDBIRTHDATE) > 70 THEN ( VALID ='N' ERROR_CODE = 'E' l_message = 'Absence Actual Start Date should within 70 days of Child Birth' ERROR_MESSAGE = GET_MESG('HRX','SCC_ABS_MESG','TOKEN1',l_message) return VALID, ERROR_MESSAGE, ERROR_CODE ) IF days_between(IV_ACTUALENDDATE,IV_ACTUALCHILDBIRTHDATE) > 70 THEN ( VALID ='N' ERROR_CODE = 'E' l_message = 'Absence Actual End Date should within 70 days of Child Birth' ERROR_MESSAGE = GET_MESG('HRX','SCC_ABS_MESG','TOKEN1',l_message) return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) if(l_start_date < l_placement_date) then ( VALID='N' if(l_event_type = 'CHB') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ) else if(l_event_type = 'PLC') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ) ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) if (IV_TOTALDURATION <> 7 AND IV_TOTALDURATION <> 14 ) then ( VALID = 'N' ERROR_MESSAGE = 'ABS_PAT_SEVEN_FOURTEEN_DAY' return VALID, ERROR_MESSAGE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "HRX_GB_PAT_VALIDATION_V2",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG IS ' ' INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE VALID='Y' ERROR_MESSAGE = 'Success' l_days_after = 0 l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_trunc_eff_date) ( if ( ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG WAS NOT DEFAULTED ) then ( if ANC_ABS_TYP_BASIC_ASSIGNMENT_FLAG = 'Y' then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_TYP_SEC_ENTRY' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE ) if(l_event_type = 'CHB') then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) if(l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) if(l_start_date < l_placement_date) then ( VALID='N' if(l_event_type = 'CHB') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ) else if(l_event_type = 'PLC') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ) ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) if (IV_TOTALDURATION <> 7 AND IV_TOTALDURATION <> 14 ) then ( VALID = 'N' ERROR_MESSAGE = 'ABS_PAT_SEVEN_FOURTEEN_DAY' return VALID, ERROR_MESSAGE ) return VALID",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Unpaid Leave Entry Validation",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE start_year_char = to_char(date_start,'YYYY') start_year = to_number(start_year_char) - 5 l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(start_year),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Unpaid Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD='APPROVED')) then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF (l_applicable_abs_days <= 90) then ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Exceptional Unpaid Leave Entry Validation",
        "answer": "DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_LEGAL_ENTITY_ID IS 0 DEFAULT FOR PER_ASG_Position_NAME IS 'X' DEFAULT FOR PER_Position_NAME IS 'X' DEFAULT FOR PER_Position_FUNCTION_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_DATE_PROBATION_END is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'A' INPUTS ARE iv_start_date (date), iv_end_date (date) l_start_date = TO_DATE('01/01/2016') l_end_date = TO_DATE('31/12'||'/'||TO_CHAR(iv_start_date,'YYYY'),'DD/MM/YYYY') VALID='Y' i=1 L_Absence_Type_Name = ANC_ABS_TYP_NAME l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) L_People_Group = 'X' L_Col_Name1 = 'Cambridge' L_Col_Name2 = 'Others' L_LE_ID = PER_ASG_LEGAL_ENTITY_ID L_Position = PER_ASG_Position_NAME L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_Eligible_Duration = 0 L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Eff_Dt = IV_START_DATE SET_INPUT('IV_PERSON_ID', L_Person_Id) SET_INPUT('IV_TERM_ID', L_Term_Id) SET_INPUT('IV_EFF_DT', L_Eff_Dt) l_log = 'XX' L_Eligible_Duration = 5 l_accrual_units = 0 effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) l_log = ESS_LOG_WRITE(TO_CHAR(L_Eligible_Duration)) l_log = ESS_LOG_WRITE(L_Position) first_leave_date = TO_DATE('0001/01/01 00:00:00') L_Duration = round(DAYS_BETWEEN(IV_END_DATE,IV_START_DATE)) L_Prev_Duration = 0 L_Total_Duration = 0 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(1) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[1]) ( if(l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( first_leave_date = ANC_ABS_ENTRS_START_DATE ) EXIT ) ) ) first_leave_date = ACP_HIRE_DATE first_leave_year = to_number(to_char(first_leave_date,'YYYY')) new_end_year = to_number(to_char(first_leave_date,'YYYY')) +5 new_end_date = TO_DATE(TO_CHAR(first_leave_date,'DD')||'/'||TO_CHAR(first_leave_date,'MM')||'/'||to_char(new_end_year),'DD/MM/YYYY') start_leave_date = IV_START_DATE start_leave_year = to_number(to_char(start_leave_date,'YYYY')) diff_mod = 0 if (IV_START_DATE >= new_end_date) then ( diff_years = start_leave_year - first_leave_year diff_mod = mod(diff_years,5) new_end_year = start_leave_year + (5-diff_mod) first_leave_year = start_leave_year - diff_mod new_end_date = TO_DATE(TO_CHAR(first_leave_date,'DD')||'/'||TO_CHAR(first_leave_date,'MM')||'/'||to_char(new_end_year),'DD/MM/YYYY') first_leave_date = TO_DATE(TO_CHAR(ACP_HIRE_DATE,'DD')||'/'||TO_CHAR(ACP_HIRE_DATE,'MM')||'/'||to_char(first_leave_year),'DD/MM/YYYY') ) CHANGE_CONTEXTS(START_DATE=first_leave_date, END_DATE=new_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if(l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( L_Prev_Duration = L_Prev_Duration + ANC_ABS_ENTRS_DURATION ) ) i= i+1 ) L_Total_Duration = L_Prev_Duration + L_Duration l_log = ESS_LOG_WRITE(TO_CHAR(L_Total_Duration)) l_log = ESS_LOG_WRITE(TO_CHAR(L_Prev_Duration)) ) L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Eff_Dt = IV_START_DATE l_accrual_units = 0 l_plan_id = 300000001445315 SET_INPUT('IV_PERSON_ID', L_Person_Id) SET_INPUT('IV_TERM_ID', L_Term_Id) SET_INPUT('IV_EFF_DT', L_Eff_Dt) SET_INPUT('IV_PLAN_ID',l_plan_id) EXECUTE('Unpaid Leave Balance') l_accrual_units = GET_OUTPUT('L_Leave_Balance', 0) IF (l_accrual_units > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'Annual Leave Balance greater than 0.Available balance as on '+to_char(L_Eff_Dt) + ' is : '+to_char(l_accrual_units) ) Limit_date = ADD_MONTHS(ACP_HIRE_DATE,12) If (IV_START_DATE > Limit_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'You are not eligibile as 1 year of service is completed' ) User_name = 'x' User_name = GET_VALUE_SET('LOGGED_IN_USER') Res_end_date='2020/12/31 00:00:00' (DATE) Res_start_date='2020/04/01 00:00:00' (DATE) If (to_date(to_char(iv_start_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_start_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to december should go through HR' ) ) If (to_date(to_char(iv_end_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_end_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to december should go through HR' ) ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Annual Leave Entry Validation Formula",
        "answer": "DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_LEGAL_ENTITY_ID IS 0 DEFAULT FOR PER_ASG_Position_NAME IS 'X' DEFAULT FOR PER_Position_NAME IS 'X' DEFAULT FOR PER_Position_FUNCTION_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_DATE_PROBATION_END is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'A' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_NAME is 'X' DEFAULT FOR IV_ABSENCE_REASON IS ' ' INPUTS ARE iv_start_date (date), iv_end_date (date), IV_ABSENCE_REASON l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') VALID='Y' i=1 L_Absence_Type_Name = ANC_ABS_TYP_NAME l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) L_People_Group = 'X' L_Col_Name1 = 'Cambridge' L_Col_Name2 = 'Others' L_LE_ID = PER_ASG_LEGAL_ENTITY_ID L_Position = PER_ASG_Position_NAME L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_Eligible_Duration = 0 l_citizenship = PER_PER_CITIZENSHIP_LEG_NAME l_log = 'XX' reason = IV_ABSENCE_REASON L_Eligible_Duration = 5 l_log = ESS_LOG_WRITE(TO_CHAR(L_Eligible_Duration)) l_log = ESS_LOG_WRITE(L_Position) L_Duration = round(DAYS_BETWEEN(IV_END_DATE,IV_START_DATE)) L_Prev_Duration = 0 L_Total_Duration = 0 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if(l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( L_Prev_Duration = L_Prev_Duration + ANC_ABS_ENTRS_DURATION ) ) i=i+1 ) ) L_Total_Duration = L_Prev_Duration + L_Duration l_log = ESS_LOG_WRITE(TO_CHAR(L_Total_Duration)) l_log = ESS_LOG_WRITE(TO_CHAR(L_Prev_Duration)) IF(L_Duration < 12 AND reason = 'Local with Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF(L_Duration < 12 AND reason = 'External with Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF(L_Duration < 12 AND reason = 'External with Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF(L_Duration < 12 AND reason = 'External with Ticket & Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF(L_Duration < 12 AND reason = 'External with Ticket, Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF (l_citizenship = 'Saudi Arabia' AND reason = 'External with Ticket') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Only Non-Saudi are eleigible for Tickets' ) IF (l_citizenship = 'Saudi Arabia' AND reason = 'External with Ticket & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Only Non-Saudi are eleigible for Tickets' ) IF (l_citizenship = 'Saudi Arabia' AND reason = 'External with Ticket & Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Only Non-Saudi are eleigible for Tickets' ) IF (l_citizenship = 'Saudi Arabia' AND reason = 'External with Ticket, Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Only Non-Saudi are eleigible for Tickets' ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Unpaid Leave Validation Formula",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' default for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is ' ' DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) lc_plan_name ='Annual Leave Plan' VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_work_term_asg_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID ln_person_id = GET_CONTEXT(PERSON_ID,0) ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) start_year_char = to_char(date_start,'YYYY') start_year = to_number(start_year_char) - 5 l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(start_year),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if ((l_abs_typ_name ='Unpaid Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='COMPLETED' or ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' or ANC_ABS_ENTRS_APPROVAL_STATUS_CD ='APPROVED' OR ANC_ABS_ENTRS_APPROVAL_STATUS_CD='A')) then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 90 THEN ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for only 90 days of Unpaid leave in 5 years' return VALID, ERROR_MESSAGE ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Sick Leave Validation",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Sick Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD='APPROVED')) then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 120 THEN ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for only 120 days of Sick leave in an year' return VALID, ERROR_MESSAGE ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Annual Leave Validation Formula",
        "answer": "DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_LEGAL_ENTITY_ID IS 0 DEFAULT FOR PER_ASG_Position_NAME IS 'X' DEFAULT FOR PER_Position_NAME IS 'X' DEFAULT FOR ACP_HIRE_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_Position_FUNCTION_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'X' DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_DATE_PROBATION_END is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'A' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 is 'X' DEFAULT FOR PER_WORK_SCHEDULE_EXCEPTION_CODE is 'X' DEFAULT FOR PER_WORK_SCHEDULE_EXCEPTION_MEANING is 'X' DEFAULT FOR PER_WORK_SCHEDULE_EXCEPTION_LOOKUP_MEANING is 'X' DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_START_DATE_TIME IS '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_END_DATE_TIME IS '4712/12/31 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_COVERAGE_NODE IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE1 is 'XX' DEFAULT FOR IV_ATTRIBUTE_1 is 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE12 is 'FRI-SAT' DEFAULT FOR PER_PER_PERSON_NUMBER is '0' IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Exit Re-entry* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket & Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket & Salary Advance* reason please change leave reson to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket, Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket, Salary Advance & Exit Re-entry* reason please change leave reson to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket & Exit Re-entry* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Salary Advance & Exit Re-entry* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Salary Advance* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket & Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket & Salary Advance* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) pre_weekend_date = TO_DATE('0001/01/01','YYYY/MM/DD') pre_weekend_day = 'XX' post_weekend_date = TO_DATE('0001/01/01','YYYY/MM/DD') post_weekend_day = 'XX' Work_schedule_day1 = SUBSTR(PER_ASG_ATTRIBUTE12,1,3) Work_schedule_day2 = SUBSTR(PER_ASG_ATTRIBUTE12,5,7) previous_date1 = ADD_DAYS(IV_START_DATE,-1) previous_date2 = ADD_DAYS(IV_START_DATE,-2) previous_day1 = GET_DATE_DAY_OF_WEEK(previous_date1) previous_day2 = GET_DATE_DAY_OF_WEEK(previous_date2) next_date1 = ADD_DAYS(IV_END_DATE,1) next_date2 = ADD_DAYS(IV_END_DATE,2) next_day1 = GET_DATE_DAY_OF_WEEK(next_date1) next_day2 = GET_DATE_DAY_OF_WEEK(next_date2) IF(previous_day1 = Work_schedule_day1) THEN ( pre_weekend_date = add_days(IV_START_DATE,-2) pre_weekend_day = GET_DATE_DAY_OF_WEEK(pre_weekend_date) ) IF (previous_day1 = Work_schedule_day2 AND previous_day2 = Work_schedule_day1) OR (previous_day1 = Work_schedule_day1 AND previous_day2 = Work_schedule_day2)THEN ( pre_weekend_date = add_days(IV_START_DATE,-3) pre_weekend_day = GET_DATE_DAY_OF_WEEK(pre_weekend_date) ) IF(next_day1 = Work_schedule_day1) THEN ( post_weekend_date = add_days(IV_END_DATE,2) post_weekend_day = GET_DATE_DAY_OF_WEEK(post_weekend_date) ) IF (next_day1 = Work_schedule_day2 AND next_day2 = Work_schedule_day1) OR (next_day1 = Work_schedule_day1 AND next_day2 = Work_schedule_day2)THEN ( post_weekend_date = add_days(IV_END_DATE,3) post_weekend_day = GET_DATE_DAY_OF_WEEK(post_weekend_date) ) post_weekend_date_new = SUBSTR(TO_CHAR(post_weekend_date),1,10) Context_end_date = ADD_DAYS(IV_START_DATE,100) CHANGE_CONTEXTS(START_DATE=ACP_HIRE_DATE, END_DATE=Context_end_date) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if((l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='COMPLETED' or ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' or ANC_ABS_ENTRS_APPROVAL_STATUS_CD='APPROVED'OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD='A')) THEN ( absence_start_date = SUBSTR(TO_CHAR(ANC_ABS_ENTRS_START_DATE),1,10) if (pre_weekend_date=ANC_ABS_ENTRS_END_DATE) then ( flag = 1 Exit ) IF(post_weekend_date_new = absence_start_date) THEN ( flag = 2 EXIT ) ) ) i=i+1 ) ) Leave_start_date = SUBSTR(TO_CHAR(IV_START_DATE),1,10) Leave_end_date = SUBSTR(TO_CHAR(IV_END_DATE),1,10) IF ( flag = 1) then ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply this leave starting on '||Leave_start_date||' as you already have a leave ending on '||pre_weekend_day Return VALID, ERROR_MESSAGE ) IF(flag = 2) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply this leave ending on '||Leave_end_date||' as you already have a leave starting on upcoming '||post_weekend_day Return VALID, ERROR_MESSAGE ) Anniversary_date =TO_DATE(TO_CHAR(ACP_HIRE_DATE,'DD/MM')||TO_CHAR(IV_START_DATE,'YYYY'),'DD/MM/YYYY') first_anniversary = ADD_YEARS(ACP_HIRE_DATE,1) first_anniversary = ADD_MONTHS(first_anniversary,-1) IF(IV_START_DATE < Anniversary_date) THEN ( l_start_date = ADD_YEARS(Anniversary_date,-1) l_end_date = Anniversary_date ) ELSE ( l_start_date = Anniversary_date l_end_date = ADD_YEARS(Anniversary_date,1) ) count1 = 0 count2 = 0 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_typ_reason = ANC_ABS_ENTRS_ABSENCE_REASON_ID l_ticket_members = ANC_ABS_ENTRS_ATTRIBUTE1 if((l_abs_typ_name = 'Annual Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') AND (l_abs_typ_reason = reason1 OR l_abs_typ_reason = reason2 OR l_abs_typ_reason = reason3 OR l_abs_typ_reason = reason4) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='COMPLETED' or ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' or ANC_ABS_ENTRS_APPROVAL_STATUS_CD ='APPROVED' OR ANC_ABS_ENTRS_APPROVAL_STATUS_CD='A')) then ( IF(l_ticket_members = 'Employee Only') THEN count1 = count1 + 1 IF(l_ticket_members = 'Both') THEN count2 = count2 + 1 ) ) i=i+1 ) ) ) IF(l_ticket = 'XX'AND (reason ='External with Ticket' OR reason = 'External with Ticket & Salary Advance' OR reason = 'External with Ticket, Salary Advance & Exit Re-entry' OR reason = 'External with Ticket & Exit Re-entry')) THEN ( VALID = 'N' ERROR_MESSAGE = 'Please enter \"Tickets for Members\". ' return VALID,ERROR_MESSAGE ) IF((IV_START_DATE < first_anniversary) AND (reason ='External with Ticket' OR reason = 'External with Ticket & Salary Advance' OR reason = 'External with Ticket, Salary Advance & Exit Re-entry' OR reason = 'External with Ticket & Exit Re-entry')) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply for Ticket before completing One year in the Organization.' return VALID,ERROR_MESSAGE ) date_start = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY')||'-12-31','YYYY-MM-DD') ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = GET_CONTEXT(PERSON_ID,0) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ln_hr_assignment_id, PERSON_ID = ln_person_id, EFFECTIVE_DATE = date_start, LEGISLATIVE_DATA_GROUP_ID = ln_leg_group_id) ( ticket_self = GET_PLAN_BALANCE('Ticket Accrual Employee') ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ln_hr_assignment_id, PERSON_ID = ln_person_id, EFFECTIVE_DATE = date_start, LEGISLATIVE_DATA_GROUP_ID = ln_leg_group_id) ( ticket_dependent = GET_PLAN_BALANCE('Ticket Accrual Dependent') ) IF(count1 >= ticket_self AND (reason ='External with Ticket' OR reason = 'External with Ticket & Salary Advance' OR reason = 'External with Ticket, Salary Advance & Exit Re-entry' OR reason = 'External with Ticket & Exit Re-entry') AND (l_ticket = 'Employee Only' OR l_ticket = 'Both') AND ( PER_PER_PERSON_NUMBER <> '14012500' OR PER_PER_PERSON_NUMBER <> '14016061' OR PER_PER_PERSON_NUMBER <> '14013960')) THEN ( VALID = 'N' ERROR_MESSAGE = 'Employee cannot apply ticket for themselves, As you have consumed your ticket balance for the contractual year, You can apply for a ticket after '||SUBSTR(TO_CHAR(l_end_date),1,10) return VALID,ERROR_MESSAGE ) IF(count2 <> 0 AND (reason ='External with Ticket' OR reason = 'External with Ticket & Salary Advance' OR reason = 'External with Ticket, Salary Advance & Exit Re-entry' OR reason = 'External with Ticket & Exit Re-entry') AND l_ticket = 'Both') THEN ( VALID = 'N' ERROR_MESSAGE = 'Employees cannot apply for ticket for themselves and Dependents more then once in the contractual year. You can apply for ticket after '||SUBSTR(TO_CHAR(l_end_date),1,10) return VALID,ERROR_MESSAGE ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Holiday validation",
        "answer": "DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) HOLIDAY[1] ='2022/07/07 00:00:00'(DATE) HOLIDAY[2] ='2022/07/14 00:00:00'(DATE) HOLIDAY[3] ='2022/02/21 00:00:00'(DATE) HOLIDAY[4] ='2022/02/23 00:00:00'(DATE) HOLIDAY[5] ='2022/04/30 00:00:00'(DATE) HOLIDAY[6] ='2022/05/05 00:00:00'(DATE) HOLIDAY[7] ='2022/09/21 00:00:00'(DATE) HOLIDAY[8] ='2022/09/23 00:00:00'(DATE) HOLIDAY[9] ='2023/02/22 00:00:00'(DATE) HOLIDAY[10] ='2023/02/23 00:00:00'(DATE) HOLIDAY[11] ='2023/04/23 00:00:00'(DATE) HOLIDAY[12] ='2023/04/27 00:00:00'(DATE) HOLIDAY[13] ='2023/06/27 00:00:00'(DATE) HOLIDAY[14] ='2023/06/30 00:00:00'(DATE) HOLIDAY[15] ='2023/07/02 00:00:00'(DATE) HOLIDAY[16] ='2023/07/03 00:00:00'(DATE) HOLIDAY[17] ='2023/09/24 00:00:00'(DATE) HOLIDAY[18] ='2023/09/25 00:00:00'(DATE) IF (IV_START_DATE <= HOLIDAY[1] OR IV_END_DATE >= HOLIDAY[2]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE <= HOLIDAY[3] OR IV_END_DATE >= HOLIDAY[4]) THEN ( VALID = 'N' ERROR_MESSAGE2 = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE <= HOLIDAY[5] OR IV_END_DATE >= HOLIDAY[6]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE <= HOLIDAY[7] OR IV_END_DATE >= HOLIDAY[8]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[9] OR IV_END_DATE >= HOLIDAY[10]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[11] OR IV_END_DATE >= HOLIDAY[12]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[13] OR IV_END_DATE >= HOLIDAY[14]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[15] OR IV_END_DATE >= HOLIDAY[16]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[17] OR IV_END_DATE >= HOLIDAY[18]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SANED Unpaid Leave Entry Validation Formula",
        "answer": "DEFAULT FOR iv_Start_date IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR iv_end_date IS '4712/12/31 00:00:00' (DATE) INPUTS ARE iv_start_date (date), iv_end_date (date) VALID = 'Y' User_name = 'x' User_name = GET_VALUE_SET('LOGGED_IN_USER') Res_end_date='2020/12/31 00:00:00' (DATE) Res_start_date='2020/04/01 00:00:00' (DATE) If (to_date(to_char(iv_start_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_start_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to december should go through HR' ) ) If (to_date(to_char(iv_end_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_end_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to december should go through HR' ) ) return VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "XX_Absence for Utilization",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR IV_TOTALDURATION is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = IV_END_DATE l_yr_start_date = IV_START_DATE l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Annual Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days return VALID,l_applicable_abs_days",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Travel Order Validation formula",
        "answer": "DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '0001/01/01 00:00:00' (DATE) INPUTS ARE iv_start_date (date), iv_end_date (date), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) VALID='Y' L_Absence_Type_Name = ANC_ABS_TYP_NAME IF (L_Absence_Type_Name = 'Travel Order') and (IV_ATTRIBUTE_DATE1 < iv_start_date) AND (IV_ATTRIBUTE_DATE2 > iv_end_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'Please apply departure date and arraival date in between absence dates' ) IF (L_Absence_Type_Name = 'Travel Order') and (IV_ATTRIBUTE_DATE1 = iv_start_date) AND (IV_ATTRIBUTE_DATE2 > iv_end_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'Please apply arraival date in between absence dates' ) IF (L_Absence_Type_Name = 'Travel Order') and (IV_ATTRIBUTE_DATE1 < iv_start_date) AND (IV_ATTRIBUTE_DATE2 = iv_end_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'Please apply departure date in between absence dates' ) RETURN VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "TOH_Absence_Worker_Comp_Validation",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'NA' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'NA' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY is ' ' INPUTS ARE iv_start_date (date), iv_end_date (date),IV_TOTALDURATION (number) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0) lv_days = days_between(iv_end_date,iv_start_date) l_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_asg_emp_cat ='XYZ' CHANGE_CONTEXTS (HR_ASSIGNMENT_ID = l_hr_assignment_id, EFFECTIVE_DATE= iv_start_date) ( l_asg_emp_cat = PER_ASG_EMPLOYMENT_CATEGORY ) lv_message = 'NA' VALID='Y' p_emp_cat = 'XYZ'||l_asg_emp_cat if ( trim(p_emp_cat) = 'XYZ' and IV_TOTALDURATION > 0 ) then ( VALID='N' lv_message = 'Workers Compensation cannot be requested when employment status is not Wokrer Comp' ) else if ( ( (l_asg_emp_cat <> 'WC_FT') or (l_asg_emp_cat <> 'WC_PT') or (l_asg_emp_cat <> 'WC_SE') ) and IV_TOTALDURATION > 0 ) then ( VALID='N' lv_message = 'Workers Compensation cannot be requested when employment status is not Wokrer Comp' ) ERROR_MESSAGE = lv_message return VALID,ERROR_MESSAGE",
        "question": "This formula validates absence entries to ensure that employees cannot request Workers' Compensation leave if their employment status does not match specific categories. It checks the duration of the requested leave and the employee's employment category. If the employment category is not one of the allowed categories for Workers' Compensation (such as full-time, part-time, or seasonal Workers' Compensation), and the leave duration is greater than zero, the formula sets the validation status to invalid and returns an error message indicating that Workers' Compensation cannot be requested with the current employment status.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "TOH_Absence_JuryDuty_Leave_Validation",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'NA' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'NA' INPUTS ARE iv_start_date (date), iv_end_date (date), IV_TOTALDURATION (number) lv_working_hours = PER_ASG_NORMAL_HOURS/5 l_payroll_id = GET_CONTEXT(PAYROLL_ID,0) i=1 j=0 l_abs_duration2 =0 l_absence_type_id= GET_CONTEXT(ABSENCE_TYPE_ID,0) if (trunc(iv_start_date) <> trunc(iv_end_date) ) then ( VALID='N' ERROR_MESSAGE ='Request should not span over two dates ,please split your request into two' ) else ( CHANGE_CONTEXTS(START_DATE=iv_start_date, END_DATE=iv_end_date) ( while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if(l_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID and ANC_ABS_ENTRS_ABSENCE_STATUS_CD<> 'ORA_WITHDRAWN' ) then ( l_abs_duration2 = l_abs_duration2 + ANC_ABS_ENTRS_DURATION ) i=i+1 ) ) ) l_abs_duration2 = l_abs_duration2 + IV_TOTALDURATION if(l_abs_duration2 <> (IV_TOTALDURATION) ) then ( VALID='N' ERROR_MESSAGE ='You should not place two Jury requests for on one Work day, please withdraw your earlier request and place new one ' ) else( VALID='Y' ) ) return VALID,ERROR_MESSAGE",
        "question": "This formula validates jury duty leave requests to ensure that employees do not enter multiple requests for the same type of absence on the same workday. Here's a detailed explanation of the calculation process:  Check Date Span: The formula first checks if the start and end dates of the leave request are different. If they are, it sets the validation status to invalid and returns an error message indicating that the request should not span over two dates and should be split into two separate requests.  Retrieve Existing Absence Entries: If the start and end dates are the same, the formula retrieves existing absence entries for the given date range. It loops through these entries to check if there are any existing jury duty leave requests that have not been withdrawn.  Calculate Total Duration: The formula calculates the total duration of the existing jury duty leave requests and adds the duration of the new request.  Validate Request: If the total duration of the existing and new jury duty leave requests is greater than the duration of the new request alone, the formula sets the validation status to invalid and returns an error message indicating that multiple jury duty requests cannot be placed on the same workday. Otherwise, it sets the validation status to valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "TOH_Unpaid_Leave_Validation",
        "answer": "DEFAULT FOR PER_ASG_FULL_PART_TIME IS ' ' DEFAULT FOR PER_ASG_POS_ATTRIBUTE1 IS ' ' DEFAULT for PER_ASG_PERMANENT_TEMPORARY_FLAG is ' ' INPUTS ARE iv_start_date (date), iv_end_date (date),IV_TOTALDURATION (number) p_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01 00:00:00' (DATE)) l_hr_assignment_id= GET_CONTEXT(HR_ASSIGNMENT_ID,1) p_vacation_plan_name ='ABS Vacation Leave' p_personal_plan_name='ABS Personal Paid Leave' p_floting_plan_name='ABS Floating Holiday' CHANGE_CONTEXTS (HR_ASSIGNMENT_ID = l_hr_assignment_id, EFFECTIVE_DATE= iv_start_date) ( l_vacation_accrual_units = 0 l_vacation_accrual_units = GET_PLAN_BALANCE(p_vacation_plan_name) l_log = PAY_INTERNAL_LOG_WRITE('[GET_PLAN_BALANCE] l_vacation_accrual_units '||TO_CHAR(l_vacation_accrual_units )) ) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID = l_hr_assignment_id, EFFECTIVE_DATE= iv_start_date) ( l_personal_accrual_units = 0 l_personal_accrual_units = GET_PLAN_BALANCE(p_personal_plan_name) l_log = PAY_INTERNAL_LOG_WRITE('[GET_PLAN_BALANCE] l_personal_accrual_units '||TO_CHAR(l_personal_accrual_units)) ) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID = l_hr_assignment_id, EFFECTIVE_DATE= iv_start_date) ( l_floting_accrual_units = 0 l_floting_accrual_units = GET_PLAN_BALANCE(p_floting_plan_name) l_log = PAY_INTERNAL_LOG_WRITE('[GET_PLAN_BALANCE] l_floting_accrual_units '||TO_CHAR(l_floting_accrual_units)) ) if ( ( l_vacation_accrual_units > 0 or l_personal_accrual_units > 0 or l_floting_accrual_units > 0 ) ) then ( VALID = 'N' ERROR_MESSAGE ='Unpaid leave can not be request when Leave balance available' ) else ( VALID = 'Y' ) RETURN VALID,ERROR_MESSAGE",
        "question": "This formula validates unpaid leave requests to ensure that employees cannot request unpaid leave if they have available leave balances in their vacation, personal paid leave, or floating holiday plans. Here's a detailed explanation of the calculation process:  Retrieve Leave Balances: The formula retrieves the available leave balances for the employee's vacation leave, personal paid leave, and floating holiday plans as of the start date of the leave request.  Check Leave Balances: It checks if any of the retrieved leave balances are greater than zero. If any of the leave balances are available, the formula sets the validation status to invalid and returns an error message indicating that unpaid leave cannot be requested when leave balances are available.  Validation Result: If none of the leave balances are available, the formula sets the validation status to valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_MA_ABSENCE_ENTRY_VALIDATION_NON_EXEMPT",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = '01-Jan-2022' (date) l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (l_abs_typ_name ='Massachusetts Paid Sick Leave (Non Exempt)') AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply more that 40 hours in Massachusetts Paid Sick Leave (Non Exempt) in a year.' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "question": "This formula validates the Massachusetts Paid Sick Leave (Non Exempt) requests to ensure that employees do not exceed the allowed 40 hours of leave in a year. Here's a detailed explanation of the calculation process:  Initialize Variables: The formula initializes variables to store the total duration of the new leave request and the start date of the current year.  Retrieve Existing Absence Entries: It retrieves existing absence entries for the given date range (from the start of the year to the start date of the new request). It loops through these entries to check if there are any existing Massachusetts Paid Sick Leave (Non Exempt) requests that have not been withdrawn, saved, or denied.  Calculate Total Duration: The formula calculates the total duration of the existing approved Massachusetts Paid Sick Leave (Non Exempt) requests and adds the duration of the new request.  Validate Request: If the total duration of the existing and new Massachusetts Paid Sick Leave (Non Exempt) requests exceeds 40 hours, the formula sets the validation status to invalid and returns an error message indicating that more than 40 hours cannot be applied for in a year. Otherwise, it sets the validation status to valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_NM_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/07/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('30/06/'||to_char(l_next_year)),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'New Mexico Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date('30/06/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date('01/07/'|| to_char(l_prev_year),'DD/MM/YYYY') if (trunc(IV_START_DATE) >= l_curr_year_st) THEN ( l_curr_year_st = l_curr_year_st l_curr_year_end = l_curr_year_end ) if (trunc(IV_START_DATE) < l_curr_year_st) THEN ( l_curr_year_st = l_prev_year_date l_curr_year_end = l_curr_year_date ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 64) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_NM_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "question": "Write a global ansence entry validation formula to  ensure that employees cannot apply for more than 64 hours of New Mexico Paid Sick Leave in a year by validating the total duration of existing and new requests.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_CO_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'Colorado Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_prev_year),'DD/MM/YYYY') l_remainder = mod(l_total_duration,0.25) if (l_remainder <> 0) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_CO_PST_SICK_ERR_MSG' return VALID, ERROR_MESSAGE ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 48) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_CO_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "question": "The formula validates Colorado Paid Sick Leave requests to ensure employees do not exceed 48 hours of leave in a year. It checks if the leave duration is in increments of 0.25 hours. It retrieves the total approved absence hours for the current leave year and adds the duration of the new request. If the total exceeds 48 hours, the request is invalid. Otherwise, it is valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_MA_ABSENCE_ENTRY_VALIDATION_EXEMPT",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = '01-Jan-2022' (date) l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (l_abs_typ_name ='Massachusetts Paid Sick Leave (Exempt)') AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply more that 40 hours in Massachusetts Paid Sick Leave (Exempt) in a year.' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "question": "This formula validates Massachusetts Paid Sick Leave (Exempt) requests to ensure that employees do not exceed the allowed 40 hours of leave in a year. It checks the total duration of the new leave request and adds it to the total approved duration of existing leave requests of the same type for the current year. If the total exceeds 40 hours, the request is invalid. Otherwise, it is valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_HCM_AM_PTO_VALIDATION_FF",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00'(DATE) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00'(DATE) DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE IS 'X' DEFAULT FOR PER_ASG_COL_AGREEMENT_UNION_NAME IS 'X' DEFAULT FOR PER_ASG_UNION_NAME IS 'X' DEFAULT FOR PER_ASG_JOB_FUNCTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_MANAGER_LEVEL IS 'X' DEFAULT FOR PER_ASG_JOB_MANAGER_LEVEL_NAME IS 'X' DEFAULT FOR PER_ASG_JOB_ID IS 0 DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_LEGISLATION_CODE IS 'XX' DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_INFORMATION1 is 'TEXT' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_START_DURATION, IV_END_DURATION l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01 00:00:00'(DATE)) L_FLSA = ' ' L_JOB_ID = PER_ASG_JOB_ID ELIGIBLE = 'N' l_debug = 'Y' VALID = 'Y' ERROR_MESSAGE = ' ' l_abs_type_name = ANC_ABS_TYP_NAME CHANGE_CONTEXTS(EFFECTIVE_DATE = l_eff_date,JOB_ID = L_JOB_ID) ( i = 1 WHILE PER_JOB_LEG_ALL_LEGISLATION_CODE.EXISTS(i) LOOP ( IF (PER_JOB_LEG_ALL_LEGISLATION_CODE[i]) = 'US' THEN ( L_FLSA = PER_JOB_LEG_ALL_INFORMATION1[i] ) i = i + 1 ) ) l_hourly_mod = mod(IV_TOTALDURATION,1) l_8_hour_mod = mod(IV_TOTALDURATION,8) l_quarter_hour_mod = mod(IV_TOTALDURATION,0.25) if (l_abs_type_name = 'Paid Time Off') THEN ( if (L_FLSA = 'NONEXEMPT') and (l_hourly_mod <> 0) then ( VALID = 'N' ERROR_MESSAGE = 'LHC_NON_EXEMPT_PTO_ERR' return VALID, ERROR_MESSAGE ) if (L_FLSA = 'EXEMPT') and (l_8_hour_mod <> 0) then ( VALID = 'N' ERROR_MESSAGE = 'LHC_PTO_EXEMPT_VALID_ERR' return VALID, ERROR_MESSAGE ) ) if (l_abs_type_name = 'HCBS PTO') THEN ( if (L_FLSA = 'NONEXEMPT') and (l_quarter_hour_mod <> 0) then ( VALID = 'N' ERROR_MESSAGE = 'LHC_NON_EXEMPT_HCBS_PTO_ERR' return VALID, ERROR_MESSAGE ) if (L_FLSA = 'EXEMPT') and (l_8_hour_mod <> 0) then ( VALID = 'N' ERROR_MESSAGE = 'LHC_PTO_EXEMPT_VALID_ERR' return VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LHC_NY_PST_SICK_VALIDATION_FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_remainder = mod(l_total_duration,0.25) if (l_remainder <> 0) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_NY_PST_SICK_ERR_MSG' return VALID, ERROR_MESSAGE ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_NY_PST_SICK_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_NY_PST_SICK_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 56) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_NY_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LHC_NJ_ABS_ENTRY_VALIDATION_FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_remainder = mod(l_total_duration,0.25) if (l_remainder <> 0) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_NJ_SICK_ERR_MSG' return VALID, ERROR_MESSAGE ) return VALID, ERROR_MESSAGE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LHC_CC_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'Cook County Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_remainder = mod(l_total_duration,1) if (l_remainder <> 0) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_CC_PST_SICK_ERR_MSG' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LHC_AZ_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'Arizona Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_prev_year),'DD/MM/YYYY') if (trunc(IV_START_DATE) >= l_curr_year_date) THEN ( l_curr_year_st = l_curr_year_date l_curr_year_end = add_days(l_next_year_date,-1) ) if (trunc(IV_START_DATE) < l_curr_year_date) THEN ( l_curr_year_st = l_prev_year_date l_curr_year_end = add_days(l_curr_year_date,-1) ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 40) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_AZ_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "question": "This formula validates Arizona Paid Sick Leave requests to ensure that employees do not exceed the allowed 40 hours of leave in a year. It checks the total duration of the new leave request and adds it to the total approved duration of existing leave requests of the same type for the current year. If the total exceeds 40 hours, the request is invalid. Otherwise, it is valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_CA_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'California Paid Sick Leave (Non Exempt)' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_prev_year),'DD/MM/YYYY') if (trunc(IV_START_DATE) >= l_curr_year_date) THEN ( l_curr_year_st = l_curr_year_date l_curr_year_end = add_days(l_next_year_date,-1) ) if (trunc(IV_START_DATE) < l_curr_year_date) THEN ( l_curr_year_st = l_prev_year_date l_curr_year_end = add_days(l_curr_year_date,-1) ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 40) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_CA_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "question": "This formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. This ensures that employees do not exceed the allowed sick leave hours.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_OR_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'XX' DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_END_DATE(date), IV_START_DATE(date) ,IV_TOTALDURATION l_abs_duration = IV_TOTALDURATION l_absence_type = ANC_ABS_TYP_NAME ld_start_date = IV_START_DATE ld_end_date = IV_END_DATE l_person_id = GET_CONTEXT( PERSON_ID,0) l_absence_type_id = GET_CONTEXT( ABSENCE_TYPE_ID,0) l_absence_name = '$$ ABS TYPE' l_duration_days=0 l_duration_hours=0 l_duration_cal=0 l_duration_weeks=0 l_duration_months=0 l_duration_years=0 l_occurences=0 l_exclude_abs_status = 'ORA_WITHDRAWN' lc_sickness_paid_name = 'New Mexico Paid Sick Leave' ld_start_date = TO_DATE('1951-01-01','yyyy-MM-dd') ld_end_date = TO_DATE('4712-12-31','yyyy-MM-dd') l_count=0 p_duration_hours=0 p_include_type_id=0 l_absence_duration=ANC_ABS_ENTRS_DURATION l_log = ESS_LOG_WRITE('l_count'||'l_count'|| TO_CHAR(l_count)) l_count=GET_ABSENCE_COUNTS (l_person_id , l_absence_type_id, 0, 0, 0, 0, 0, ld_start_date, ld_end_date, l_duration_days, l_duration_hours, l_duration_cal, l_duration_weeks, l_duration_months, l_duration_years, l_occurences, l_exclude_abs_status ) IF (lc_sickness_paid_name=ANC_ABS_TYP_NAME AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED') Then( If ( l_absence_duration + l_count >40 ) Then ( Valid ='N' ERROR_MESSAGE = l_count RETURN VALID, ERROR_MESSAGE ) Else ( Valid='Y' ) ) Return Valid",
        "question": "This formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. This ensures that employees do not exceed the allowed sick leave hours.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_MA_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'XX' DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_END_DATE(date), IV_START_DATE(date) ,IV_TOTALDURATION l_abs_duration = IV_TOTALDURATION l_absence_type = ANC_ABS_TYP_NAME ld_start_date = IV_START_DATE ld_end_date = IV_END_DATE l_person_id = GET_CONTEXT( PERSON_ID,0) l_absence_type_id = GET_CONTEXT( ABSENCE_TYPE_ID,0) l_absence_name = '$$ ABS TYPE' l_duration_days=0 l_duration_hours=0 l_duration_cal=0 l_duration_weeks=0 l_duration_months=0 l_duration_years=0 l_occurences=0 l_exclude_abs_status = 'ORA_WITHDRAWN' lc_sickness_paid_name = 'New Mexico Paid Sick Leave' ld_start_date = TO_DATE('1951-01-01','yyyy-MM-dd') ld_end_date = TO_DATE('4712-12-31','yyyy-MM-dd') l_count=0 p_duration_hours=0 p_include_type_id=0 l_absence_duration=ANC_ABS_ENTRS_DURATION l_log = ESS_LOG_WRITE('l_count'||'l_count'|| TO_CHAR(l_count)) l_count=GET_ABSENCE_COUNTS (l_person_id , l_absence_type_id, 0, 0, 0, 0, 0, ld_start_date, ld_end_date, l_duration_days, l_duration_hours, l_duration_cal, l_duration_weeks, l_duration_months, l_duration_years, l_occurences, l_exclude_abs_status ) IF (lc_sickness_paid_name=ANC_ABS_TYP_NAME AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED') Then( If ( l_absence_duration + l_count >40 ) Then ( Valid ='N' ERROR_MESSAGE = l_count RETURN VALID, ERROR_MESSAGE ) Else ( Valid='Y' ) ) Return Valid",
        "question": "This formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_IL_ABSENCE_ENTRY_VALIDATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'Illinois Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_remainder = mod(l_total_duration,1) if (l_remainder <> 0) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_IL_PST_SICK_ERR_MSG' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AROC_FMLA_VALIDATION_FORMULA",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = ADD_MONTHS (l_yr_end_date, -12) l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (l_abs_typ_name ='FMLA') AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 2016 THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_FMLA_VALIDATION_MESSAGE' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "question": "This formula is designed to validate the entry of Family and Medical Leave Act (FMLA) absences for employees. It checks if the total duration of the submitted FMLA leave, combined with previously recorded FMLA leave within the past year, exceeds 2016 hours. If the total exceeds 2016 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. This ensures that employees do not exceed the allowed FMLA leave hours. The formula also excludes absences with statuses \"DENIED\" and \"SAVED\" from the calculation.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AROC_VOLUNTARY_LEAVE_FF",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ACP_HIRE_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR hr_assign_id IS 0 DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_NAME_ARR IS 'XXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = ADD_MONTHS (l_yr_end_date, -12) l_applicable_abs_days = 0 l_approved_abs_days = 0 l_effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) l_year=to_number(to_char(l_effdate,'YYYY')) l_date = to_date(to_char(l_year)||'/06/30','YYYY/MM/DD') l_start_date_year=to_number(to_char(IV_START_DATE,'YYYY')) l_year_start_date=to_date(to_char(l_start_date_year)||'/01/01','YYYY/MM/DD') l_year_end_date=to_date(to_char(l_start_date_year)||'/12/31','YYYY/MM/DD') l_end_date_year=to_number(to_char(IV_END_DATE,'YYYY')) l_mod=4 if ACP_HIRE_DATE was not defaulted and ACP_HIRE_DATE <= l_date and l_year<=2020 then ( l_days=8 )else if ACP_HIRE_DATE was not defaulted and ACP_HIRE_DATE <= l_date and l_year >2020 then ( l_days=17 ) else ( l_days=8 ) CHANGE_CONTEXTS(START_DATE=l_year_start_date, END_DATE=l_year_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (upper(l_abs_typ_name) = upper('Voluntary Time Off') or upper(l_abs_typ_name) = upper('Paid Time to Volunteer')) AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' and ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days if mod(duration,l_mod) <> 0 then ( VALID = 'N' ERROR_MESSAGE = 'AROC_VOLUNTARY_VALIDATION' ) else if l_applicable_abs_days >= l_days THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_VOL_MAX_LIMIT_VALIDATION' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "question": "This formula is designed to validate the entry of voluntary leave absences for employees. It checks if the total duration of the submitted voluntary leave, combined with previously recorded voluntary leave within the current year, exceeds the allowed limit. The formula also ensures that the duration of the leave is a multiple of 4 hours. If the total exceeds the allowed limit or the duration is not a multiple of 4, the formula returns a validation error. Otherwise, it confirms the entry as valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AROC_PTO_LEAVE_VALIDATION",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for PER_JOBS_LEG_EFF_HRX_US_JOBS_FLSA_STATUS is 'X' DEFAULT for PER_JOB_JOB_CODE is 'X' DEFAULT for PER_ASG_JOB_CODE is 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_NAME_ARR IS 'XXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number),IV_START_TIME(text),IV_END_TIME(text) VALID = 'Y' ERROR_MESSAGE = ' ' lv_Exempt = 0 lv_NonExempt = 0 lv_duration = IV_TOTALDURATION lv_flsa_status = UPPER(PER_JOBS_LEG_EFF_HRX_US_JOBS_FLSA_STATUS) lv_Exempt = MOD(lv_duration,4) lv_NonExempt = MOD(lv_duration,1) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') lc_9_80_flag='N' l_days_between = DAYS_BETWEEN(ld_period_end_date,ld_period_start_date) CHANGE_CONTEXTS(START_DATE=ld_period_start_date, END_DATE=ld_period_end_date) ( i=1 while ANC_ASSIGNED_SHIFT_NAME_ARR.exists(i) loop ( lv_shift_name = ANC_ASSIGNED_SHIFT_NAME_ARR[i] i=i+1 ) ) lv_shift_name = lv_shift_name if (lv_shift_name like 'Rotator 9/80%') then ( lc_9_80_flag='Y' ) lv_Exempt_9 = MOD(lv_duration,9) lv_Exempt_10 = MOD(lv_duration,10) l_friday = 0 l_friday_factor = 0 l_other_day = 0 l_other_factor = 0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE while l_start_date <= l_end_date loop ( if (to_char(l_start_date,'D')) = '6' then ( l_friday = l_friday + 1 ) else if ((to_char(l_start_date,'D')) = '2' OR (to_char(l_start_date,'D')) = '3' OR (to_char(l_start_date,'D')) = '4' OR (to_char(l_start_date,'D')) = '5') then ( l_other_day = l_other_day + 1 ) l_start_date = ADD_DAYS(l_start_date,1) ) IF l_friday <> 0 then l_friday_factor = 4 IF l_other_day <> 0 then l_other_factor = 9 IF l_friday = 0 then l_friday_factor = 0 IF l_other_day = 0 then l_other_factor = 0 l_divisor = 0 l_divisor = (l_other_day*l_other_factor + l_friday*l_friday_factor) lv_Exempt_Dynamic = MOD(lv_duration,l_divisor) IF (((lv_shift_name like '4.5%') AND ((lv_Exempt_9 = 0) OR (lv_Exempt_Dynamic = 0))) OR ((lv_shift_name like '4/10%') AND (lv_Exempt_10 =0))) THEN (VALID = 'Y') ELSE IF PER_ASG_JOB_CODE = PER_JOB_JOB_CODE AND lv_flsa_status = 'EXEMPT' AND lv_Exempt > 0 and lc_9_80_flag='N' THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PTO_EXEMPT_VALIDATION' ) ELSE IF PER_ASG_JOB_CODE = PER_JOB_JOB_CODE AND lv_flsa_status = 'NONEXEMPT' AND lv_NonExempt > 0 and lc_9_80_flag='N' THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PTO_NONEXEMPT_VALIDATION' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "question": "This formula is designed to validate the entry of Paid Time Off (PTO) absences for employees. It ensures that PTO can only be taken in specific increments: 4 hours for exempt employees and 1 hour for non-exempt employees. The formula also includes custom logic to handle specific shift patterns, such as the \"Rotator 9/80\" shift, and adjusts the validation accordingly. If the duration of the PTO does not meet the required increments or exceeds the allowed limits, the formula returns a validation error. Otherwise, it confirms the entry as valid. This ensures that employees adhere to the company's PTO policies and guidelines.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AROC_LTD_VALIDATION_FORMULA",
        "answer": "DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '0001/01/01 00:00:00' (date) Default for IV_ATTRIBUTE_DATE1 is '2050/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_ATTRIBUTE_DATE1 (Date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' last_end_date = '0001/01/01 00:00:00' (date) ERROR_MESSAGE = ' ' Return_date = IV_ATTRIBUTE_DATE1 duration = IV_TOTALDURATION date_start = IV_START_DATE currdtchar = GLOBAL_PAY_INTERFACE_EXTRACTION_DATE Eff1date= to_date(currdtchar,'rrrr/mm/dd') l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='STD') then ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( last_end_date = ANC_ABS_ENTRS_END_DATE ) ) ) ) i=i+1 ) ) IF (TRUNC(ADD_DAYS(last_end_date,1)) <> TRUNC(IV_START_DATE)) then ( VALID = 'N' ERROR_MESSAGE = 'AROC_LTD_ABSENCE_ERROR_MESSAGE' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "question": "This formula is designed to validate the entry of Long-Term Disability (LTD) absences for employees. It checks if the start date of the submitted LTD leave is the day after the end date of the last recorded Short-Term Disability (STD) leave. If the start date does not immediately follow the end date of the last STD leave, the formula returns a validation error. Otherwise, it confirms the entry as valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AROC_PERSONAL_LEAVE_VALID_FF",
        "answer": "DEFAULT FOR BEN_ABS_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date), iv_end_date (date), IV_TOTALDURATION L_Acrl_Balance_Personal = 0 L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Eff_Dt = IV_START_DATE L_Leave_Balance = 0 SET_INPUT('IV_PERSON_ID', L_Person_Id) SET_INPUT('IV_TERM_ID', L_Term_Id) SET_INPUT('IV_EFF_DT', L_Eff_Dt) EXECUTE('AROC_GET_LEAVE_BALANCE_FORMULA') L_Acrl_Balance_Personal = GET_OUTPUT('L_Leave_Balance', 0) IF (L_Acrl_Balance_Personal >= 1 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PERSONAL_LEAVE_VALIDATION' ) else ( VALID = 'Y' ) return VALID,ERROR_MESSAGE",
        "question": "This formula is designed to validate the entry of personal leave absences for employees. It checks if the employee has any personal leave balance available. If the balance is greater than or equal to one day, the formula returns a validation error, prompting the employee to utilize their personal leave balance first. Otherwise, it confirms the entry as valid.",
        "FORMULA_TYPE_NAME": "Global Absence Entry Validation",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    }
]