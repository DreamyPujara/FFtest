[
    {
        "FORMULA_NAME": "UK Statutory Sick Pay Conversion For Absence Type In Hours",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT for ANC_ABS_PLN_WS_CATEGORY_CD is 'NONE' DEFAULT FOR ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PUB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_PUB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PUB_ALT_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_PUB_ALT_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_ABS_START_DATE is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_ABS_END_DATE is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_TIME is 'x' DEFAULT FOR IV_END_TIME is 'x' DEFAULT FOR IV_UOM is 'x' INPUTS ARE IV_ABS_START_DATE (DATE), IV_ABS_END_DATE (DATE), IV_START_DATE (DATE), IV_END_DATE (DATE), IV_START_TIME (TEXT), IV_END_TIME (TEXT), IV_UOM (TEXT) USE_ALT_SCHEDULE='N' ALT_SCHEDULE_NAME=ANC_ABS_PLN_WS_CATEGORY_CD E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_HOURS_CONVERSION:ANC_ABS_PLN_WS_CATEGORY_CD=' ||ANC_ABS_PLN_WS_CATEGORY_CD) E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_HOURS_CONVERSION:ALT_SCHEDULE_NAME=' ||ALT_SCHEDULE_NAME) IF ALT_SCHEDULE_NAME ='SSP' THEN ( USE_ALT_SCHEDULE='Y' ) E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_HOURS_CONVERSION:USE_ALT_SCHEDULE=' ||USE_ALT_SCHEDULE) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) thisDayDate=trunc(IV_START_DATE) thisDayEOD=add_days(thisDayDate,1) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') and (USE_ALT_SCHEDULE='Y') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_PUB_ALT_AVAILABILITY_END_DATE_TIME_ARR[ni4] If (r_start >= thisDayDate and r_start < thisDayEOD) and (r_end >= IV_ABS_START_DATE and r_start < IV_ABS_END_DATE) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_PUB_ALT_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) if (duration > 0) then( DAY_CALL_FLAG='X' DAY_CALL_FLAG=wsa_get('DAY_CALL_FLAG','X') THIS_DAY_FLAG=to_char(l_context_assignment_id)+','+to_char(trunc(IV_START_DATE)) e_log=ESS_LOG_WRITE('WDU:DURATION_N1: THIS_DAY_FLAG='+THIS_DAY_FLAG+' DAY_CALL_FLAG='+DAY_CALL_FLAG) if DAY_CALL_FLAG=THIS_DAY_FLAG then ( duration=0 e_log=ESS_LOG_WRITE('WDU:DURATION_N1: DAY_CALL_FLAG DETECTED, EXIT,'+DAY_CALL_FLAG) ) else ( DAY_CALL_FLAG=THIS_DAY_FLAG wsa_set('DAY_CALL_FLAG',DAY_CALL_FLAG) ) ) ) ) else if (type_of_shift='TIME') and (USE_ALT_SCHEDULE='N') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_PUB_AVAILABILITY_END_DATE_TIME_ARR[ni4] If (r_start >= thisDayDate and r_start < thisDayEOD) and (r_end >= IV_ABS_START_DATE and r_start < IV_ABS_END_DATE) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_PUB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) if (duration > 0) then( DAY_CALL_FLAG='X' DAY_CALL_FLAG=wsa_get('DAY_CALL_FLAG','X') THIS_DAY_FLAG=to_char(l_context_assignment_id)+','+to_char(trunc(IV_START_DATE)) e_log=ESS_LOG_WRITE('WDU:DURATION_N1: THIS_DAY_FLAG='+THIS_DAY_FLAG+' DAY_CALL_FLAG='+DAY_CALL_FLAG) if DAY_CALL_FLAG=THIS_DAY_FLAG then ( duration=0 e_log=ESS_LOG_WRITE('WDU:DURATION_N1: DAY_CALL_FLAG DETECTED, EXIT,'+DAY_CALL_FLAG) ) else ( DAY_CALL_FLAG=THIS_DAY_FLAG wsa_set('DAY_CALL_FLAG',DAY_CALL_FLAG) ) ) ) ) else ( thisdate=trunc(IV_START_DATE) E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_HOURS_CONVERSION:thisdate=' ||to_char(thisdate)) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N', USE_ALT_SCHEDULE,ALT_SCHEDULE_NAME,'ORA_ANC_PUB_SCHED') E_LOG=ESS_LOG_WRITE('DPK:ORA_HRX_GB_ABS_HOURS_CONVERSION:duration1=' ||to_char(duration)) ) return duration",
        "question": "write a  fast formula is designed to validate annual leave requests for CIMB NIAGA employees. Here's the detailed calculation logic:  Probation End Date Check: If the system date is after the probation end date, the leave request is valid. Otherwise, it is invalid, and an error message is returned.  Decimal Duration Check: If the total duration of the leave request has a decimal part, the leave request is invalid, and an error message is returned.  Block Leave Validation: The formula checks for overlapping block leave entries and ensures that there are no subsequent block leave entries within one day of the current leave request. If there are, the leave request is invalid, and an error message is returned.  New Joiner Check: If the employee joined in April or later of the current year and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.  Age Check: If the employee is 54 years or older, the leave request is valid.  Termination Date Check: If the employee has an actual termination date, the leave request is valid.  Grade and Year Band Calculation: The formula calculates the grade band and year band based on the employee's grade and hire year.  Block Leave Accrual Calculation: The formula retrieves the block leave accrual value from a table based on the grade band and year band.  Current and Previous Duration Calculation: The formula calculates the total duration of block leave taken so far and adds the current leave request duration to it.  Block Leave Accrual Check: If the total block leave duration exceeds the block leave accrual value, the leave request is valid. Otherwise, the formula checks the annual leave balance and ensures that the remaining balance is sufficient for the leave request. If not, the leave request is invalid, and an error message is returned.  write a  ensures that the annual leave requests are validated based on probation end date, decimal duration, block leave rules, new joiner status, age, termination date, grade, and leave balance.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_AF_PLAN_DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 50 DEFAULT FOR IV_END_DURATION IS 100 DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_START_time IS '01:00' DEFAULT FOR IV_ABS_END_time IS '23:59' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text),IV_START_DURATION,IV_END_DURATION,iv_abs_start_date (date),iv_abs_end_date (date) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') p_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') p_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') DURATION=0 ln_entry_duration_d=0 l_total_duration_d = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_HR_ASS_id= GET_CONTEXT(HR_ASSIGNMENT_ID,100) r = ess_log_write ('Plan Duarion Call Start Afghanistan Annual Leave==============================================' ) l_person_id = GET_CONTEXT(PERSON_ID,0) l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(l_HR_ASS_id)||''''||'|EFF_DATE='''||to_char(IV_START_DATE,'DD-MM-YYYY')||'''') l_debug = ess_log_write('l_schedule: ' + l_schedule) l_debug = ess_log_write('l_date_shift: ' + to_char(iv_start_date, 'DDMMYYYY')) l_debug = ess_log_write('l_end_date_shift: ' + to_char(iv_end_date, 'DDMMYYYY')) IF (l_schedule = '8 hours Elapsed General Work Schedule AFG NEW' ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') IF (trunc(IV_ABS_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( ln_entry_duration_d=ln_entry_duration_d ) ) IF (( TRUNC(IV_ABS_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_ABS_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ) IF (TRUNC(IV_ABS_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_ABS_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d IF (IV_end_DURATION = 100) THEN ( ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( ln_entry_duration_d=ln_entry_duration_d ) ) DURATION=DURATION+ln_entry_duration_d RETURN DURATION ) ELSE( ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') l_debug = ess_log_write('ln_entry_duration_d '||to_char(ln_entry_duration_d)) l_abs_days = ln_entry_duration_d If l_schedule = 'New Afghanistan General Work Schedule Summer with 1 Hour break' then ( IF (ln_entry_duration_d>0 AND ln_entry_duration_d<=4.5) THEN (ln_entry_duration_d = 4) IF (ln_entry_duration_d>4.5) THEN (ln_entry_duration_d =8)) IF (ln_entry_duration_d>0 AND ln_entry_duration_d<=1) THEN (ln_entry_duration_d = 1) IF (ln_entry_duration_d>1 AND ln_entry_duration_d<=2) THEN (ln_entry_duration_d = 2) IF (ln_entry_duration_d>2 AND ln_entry_duration_d<=3) THEN (ln_entry_duration_d = 3) IF (ln_entry_duration_d>3 AND ln_entry_duration_d<=4) THEN (ln_entry_duration_d = 4) IF (ln_entry_duration_d>4) THEN (ln_entry_duration_d =8) If l_schedule = 'AFG Security Guard Work Schedule 60 hours' then ( D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') ld_period_start_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d1 l_debug = ess_log_write('Entered the Security Guard work Schedule') L_start_day=GET_DATE_DAY_OF_WEEK(D_IV_START_DATE) L_end_day=GET_DATE_DAY_OF_WEEK(D_IV_END_DATE) l_day_date = GET_DATE_DAY_OF_WEEK(ld_period_start_date_SG) l_debug = ess_log_write(' ln_entry_duration_d'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('L_start_day'||(L_start_day)) l_debug = ess_log_write('L_end_day'||(L_end_day)) l_debug = ess_log_write('l_day_date'||(l_day_date)) IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) IF (l_day_date = 'FRI' OR l_day_date = 'SAT' ) THEN (ln_entry_duration_d = 0) IF(ld_period_start_date_SG = IV_ABS_START_DATE and (L_start_day = 'FRI' OR L_start_day = 'SAT')) THEN ( l_debug = ess_log_write('Condition 1') l_debug = ess_log_write('IV_START_DATE'||TO_CHAR(IV_START_DATE,'DD-MM-YYYY')) l_debug = ess_log_write('IV_ABS_START_DATE'||TO_CHAR(IV_ABS_START_DATE,'DD-MM-YYYY')) l_debug = ess_log_write('IV_ABS_END_DATE'||TO_CHAR(IV_ABS_END_DATE,'DD-MM-YYYY')) IF (ln_entry_duration_d < 12 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 12)) ELSE IF (ld_period_end_date_SG = IV_ABS_END_DATE and (L_end_day = 'FRI' OR L_start_day = 'SAT'))then (l_debug = ess_log_write('Condition 2') IF (ln_entry_duration_d < 12 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 12)) l_debug = ess_log_write(' ln_entry_duration_d after calculation v1'||to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d l_debug = ess_log_write(' DURATION after calculation v1'||to_char(DURATION)) RETURN DURATION ) l_debug = ess_log_write('ln_entry_duration_d After condition '||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Plan Duration*****') If l_schedule = 'AFG Drivers Work Schedule 50 hours' then ( D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') ld_period_start_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d1 l_debug = ess_log_write('Entered the Drivers Work Schedule') L_start_day=GET_DATE_DAY_OF_WEEK(D_IV_START_DATE) L_end_day=GET_DATE_DAY_OF_WEEK(D_IV_END_DATE) l_day_date = GET_DATE_DAY_OF_WEEK(ld_period_start_date_SG) l_debug = ess_log_write(' ln_entry_duration_d'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('L_start_day'||(L_start_day)) l_debug = ess_log_write('L_end_day'||(L_end_day)) l_debug = ess_log_write('l_day_date'||(l_day_date)) IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) IF (l_day_date = 'FRI' OR l_day_date = 'SAT' ) THEN (ln_entry_duration_d = 0) IF(ld_period_start_date_SG = IV_ABS_START_DATE and (L_start_day = 'FRI' OR L_start_day = 'SAT')) THEN ( l_debug = ess_log_write('Condition 1') l_debug = ess_log_write('IV_START_DATE'||TO_CHAR(IV_START_DATE,'DD-MM-YYYY')) l_debug = ess_log_write('IV_ABS_START_DATE'||TO_CHAR(IV_ABS_START_DATE,'DD-MM-YYYY')) l_debug = ess_log_write('IV_ABS_END_DATE'||TO_CHAR(IV_ABS_END_DATE,'DD-MM-YYYY')) IF (ln_entry_duration_d < 10 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 10)) ELSE IF (ld_period_end_date_SG = IV_ABS_END_DATE and (L_end_day = 'FRI' OR L_start_day = 'SAT'))then (l_debug = ess_log_write('Condition 2') IF (ln_entry_duration_d < 10 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 10)) l_debug = ess_log_write(' ln_entry_duration_d after calculation v1'||to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d l_debug = ess_log_write(' DURATION after calculation v1'||to_char(DURATION)) RETURN DURATION ) l_debug = ess_log_write('ln_entry_duration_d After condition '||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Plan Duration*****') DURATION = ln_entry_duration_d l_debug = ess_log_write('DURATION '||to_char(DURATION)) RETURN DURATION )",
        "question": "Validates unpaid maternity leave applications in Vietnam. Ensures the duration complies with local regulations, requires full-pay maternity leave to be exhausted, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "AF Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF KG Plan Duration",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Child Care Leave') THEN ( l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d*8 ) IF (L_ABS_TYPE = 'Additional paid leave for high altitude regions') THEN ( l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY = 8 THEN (L_DAY = 1) IF L_DAY = 4 THEN (L_DAY = .5) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( L_DAY = 1 ) ) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( l_total_duration_d = 0 l_total_wd = 0 l_total_we =0 l_total_hol = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY = 8 THEN (L_DAY = 1) IF L_DAY = 4 THEN (L_DAY = .5) IF L_DAY> 0 THEN (l_total_wd = l_total_wd+l_day) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( l_total_we = l_total_we + 1 )ELSE ( l_total_hol = l_total_hol +1 ) ) l_date = add_days(l_date,1) ) IF PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY = 'AKF_LOCAL' THEN ( l_total_duration_d = l_total_wd+l_total_we ) ELSE ( l_total_duration_d = l_total_wd ) ) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "write a  formula validates jury duty leave requests to ensure that employees do not enter multiple requests for the same type of absence on the same workday. Here's a detailed explanation of the calculation process:  Check Date Span: The formula first checks if the start and end dates of the leave request are different. If they are, it sets the validation status to invalid and returns an error message indicating that the request should not span over two dates and should be split into two separate requests.  Retrieve Existing Absence Entries: If the start and end dates are the same, the formula retrieves existing absence entries for the given date range. It loops through these entries to check if there are any existing jury duty leave requests that have not been withdrawn.  Calculate Total Duration: The formula calculates the total duration of the existing jury duty leave requests and adds the duration of the new request.  Validate Request: If the total duration of the existing and new jury duty leave requests is greater than the duration of the new request alone, the formula sets the validation status to invalid and returns an error message indicating that multiple jury duty requests cannot be placed on the same workday. Otherwise, it sets the validation status to valid.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "KG Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_TJ_PLAN_DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave') THEN ( l_he = 0 l_we = 0 l_wd =0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY>0 THEN ( IF L_DAY = 8 THEN (L_WD = L_WD+1) IF L_DAY = 4 THEN (L_WD = L_WD+.5) ) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( l_we = l_we + 1 )ELSE ( l_he = l_he +1 ) ) l_date = add_days(l_date,1) ) l_he = 0 IF PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY != 'AKF_LOCAL' THEN ( l_total_duration_d = l_wd )ELSE ( l_total_duration_d = l_wd + l_we + l_he ) ) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "write a  formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees do not exceed the allowed sick leave hours.",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "TJ Legislative Data Group"
    },
    {
        "FORMULA_NAME": "France Vacation Absence Plan Duration",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' DEFAULT FOR ORA_HRX_FR_ABS_PRIMARY_ASG_ID is 0 DEFAULT FOR ORA_HRX_FR_ABS_ALL_ASG_IDS is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_FR_ABS_ALL_ASG_IDS is 0 DEFAULT FOR PER_WORKER_ASSIGNMENT_TYPE is ' ' DEFAULT FOR PER_WORKER_ASSIGNMENT_NORMAL_HOURS is 0.0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number), IV_ABS_START_DATE (date), IV_ABS_END_DATE (date),IV_ABS_START_DURATION (number), IV_ABS_END_DURATION (number), IV_UOM (text) l_asg_resource_type = 'ASSIGN' l_use_sch_asg_y = 'Y' l_use_sch_inh_y = 'Y' l_include_noshift_y = 'Y' l_include_calevents_y = 'Y' l_calc_units_d = 'H' l_debug_prefix_str = 'FrVacPlanDurationDiag: ' IF ((IV_START_DURATION=1 OR IV_START_DURATION=0.5) AND (IV_END_DURATION=1 OR IV_END_DURATION=0.5)) THEN ( l_time_or_elapsed = 'E' ) else ( l_time_or_elapsed = 'T' ) l_debug_str = l_debug_prefix_str || 'Plan Duration Start' l_dummy = ESS_LOG_WRITE(l_debug_str) l_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_asg_type_for_called_asg = PER_WORKER_ASSIGNMENT_TYPE l_effective_Date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_primary_asg_id = ORA_HRX_FR_ABS_PRIMARY_ASG_ID l_asg_fte = PER_ASG_FTE_VALUE l_start_of_day = to_date( to_char(trunc(IV_START_DATE),'DD/MM/RRRR')||' 00:00','DD/MM/RRRR HH24:MI') l_end_of_day = to_date( to_char(trunc(IV_END_DATE),'DD/MM/RRRR')||' 23:59','DD/MM/RRRR HH24:MI') l_any_asg_scheduled = 'N' l_time_or_elapsed = 'T' l_resource_type = 'ASSIGN' l_start_of_calc = l_start_of_day l_end_of_calc = l_end_of_day l_use_sch_asg = 'Y' l_use_sch_inh = 'Y' l_include_noshift = 'Y' l_include_calevents = 'Y' l_calc_units = 'H' l_day_classification = 'M' l_is_first_day = 'N' l_is_last_day = 'N' duration = 0 l_debug_str = l_debug_prefix_str || 'Invoked for : '|| 'AsgId : '|| to_char(l_hr_assignment_id)|| ' Schedule Type: '|| l_time_or_elapsed || ' on '|| to_char(trunc(IV_START_DATE), 'YYYYMMDD') l_dummy = ESS_LOG_WRITE(l_debug_str) l_debug_str = l_debug_prefix_str ||'IV_START_DURATION / IV_END_DURATION '|| to_char(IV_START_DURATION) || ' / ' || to_char(IV_END_DURATION) l_dummy = ESS_LOG_WRITE(l_debug_str) l_wsa_sch_prefix = 'FRVAC_SCH_FOR_AE_' l_wsa_abs_prefix = 'FRVAC_ABS_FOR_AE_' l_wsa_duration_prefix = 'FRVAC_DUR_FOR_AE_' l_wsa_duration_for_today = l_wsa_duration_prefix ||to_char(l_abs_entry_id)||'_ON_'||to_char(trunc(IV_START_DATE), 'YYYYMMDD') if ( l_asg_type_for_called_asg = 'ET') THEN ( duration = 0.0 l_debug_str = l_debug_prefix_str || 'Returning Duration on '|| TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - TermId : '||l_asg_type_for_called_asg ||', '|| to_char(l_hr_assignment_id) ||' is: '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) IF WSA_EXISTS(l_wsa_duration_for_today ,'NUMBER') THEN ( duration = WSA_GET(l_wsa_duration_for_today,0 ) l_debug_str = l_debug_prefix_str || 'Returning_From_WSA : '||'AsgId: '|| to_char(l_hr_assignment_id) || ' on '|| TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' : '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) RETURN duration ) if (trunc(IV_START_DATE) = trunc(IV_ABS_START_DATE)) THEN ( l_day_classification = 'F' if (l_time_or_elapsed = 'T' ) then ( l_start_of_calc = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI') ) ) else if (trunc(IV_END_DATE) = trunc(IV_ABS_END_DATE)) THEN ( l_day_classification = 'L' if (l_time_or_elapsed = 'T' ) then ( l_end_of_calc = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI') ) ) ELSE ( l_day_classification = 'M' ) l_debug_str = l_debug_prefix_str ||'Start of Calc/end of Calc' || to_char(l_start_of_calc,'DDMM-HH24:MI') || '/'||to_char(l_end_of_calc,'DDMM-HH24:MI') ||' / DayClassification: '|| l_day_classification l_dummy = ESS_LOG_WRITE(l_debug_str) l_asg_sch_hours = 0.0 l_asg_absent_hours = 0.0 l_grand_total_sch_hours = 0.0 l_grand_total_absent_hours = 0.0 l_grand_total_fte = 0.0 duration = 1.0 idx=1 l_debug_str = l_debug_prefix_str || 'Looping through all assignments' l_dummy = ESS_LOG_WRITE(l_debug_str) l_debug_str = l_debug_prefix_str || '----------------------------------------------' l_dummy = ESS_LOG_WRITE(l_debug_str) idx=ORA_HRX_FR_ABS_ALL_ASG_IDS.FIRST(-1) while ORA_HRX_FR_ABS_ALL_ASG_IDS.exists(idx) LOOP ( l_debug_str = l_debug_prefix_str || 'Iterating over AsgId['||to_char(idx)||']: ' || to_char(ORA_HRX_FR_ABS_ALL_ASG_IDS[idx]) l_dummy = ESS_LOG_WRITE(l_debug_str) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID=ORA_HRX_FR_ABS_ALL_ASG_IDS[idx]) ( l_asg_type = PER_WORKER_ASSIGNMENT_TYPE l_asg_sch_hours = 0.0 l_asg_absent_hours = 0.0 l_asg_id = ORA_HRX_FR_ABS_ALL_ASG_IDS[idx] l_wsa_asg_sch_hrs_for_today = l_wsa_sch_prefix ||to_char(l_abs_entry_id)||'_ASG_'||to_char(l_asg_id)||'_ON_'||to_char(trunc(IV_START_DATE), 'YYYYMMDD') l_wsa_asg_abs_hrs_for_today = l_wsa_abs_prefix ||to_char(l_abs_entry_id)||'_ASG_'||to_char(l_asg_id)||'_ON_'||to_char(trunc(IV_START_DATE), 'YYYYMMDD') if ( l_asg_type = 'E') then ( IF WSA_EXISTS( l_wsa_asg_sch_hrs_for_today,'NUMBER') THEN ( l_asg_sch_hours = WSA_GET(l_wsa_asg_sch_hrs_for_today , 0) l_debug_str = l_debug_prefix_str || 'WSA Already Exists: '|| l_wsa_asg_sch_hrs_for_today ||': '||to_char(l_asg_sch_hours) l_dummy = ESS_LOG_WRITE(l_debug_str) ) ELSE ( l_asg_sch_hours = GET_PAY_AVAILABILITY (l_asg_resource_type, l_start_of_day, l_end_of_day, l_use_sch_asg_y, l_use_sch_inh_y, l_include_noshift_y, l_include_calevents_y, l_calc_units_d) WSA_SET( l_wsa_asg_sch_hrs_for_today, l_asg_sch_hours) l_debug_str = l_debug_prefix_str || 'No WSA: '|| l_wsa_asg_sch_hrs_for_today|| ' Setting to: '|| to_char(l_asg_sch_hours) l_dummy = ESS_LOG_WRITE(l_debug_str) if ( l_asg_sch_hours > 0) THEN ( l_any_asg_scheduled = 'Y' l_debug_str = l_debug_prefix_str || 'Any assignment scheduled flag is set to Y now' l_dummy = ESS_LOG_WRITE(l_debug_str) ) l_grand_total_sch_hours = l_grand_total_sch_hours + l_asg_sch_hours ) if ( l_asg_sch_hours > 0 ) then ( if (( l_time_or_elapsed = 'E' AND l_day_classification = 'F') OR ( IV_START_DURATION > 0 AND l_day_classification = 'F')) then ( duration = IV_START_DURATION WSA_SET(l_wsa_duration_for_today, duration) l_debug_str = l_debug_prefix_str || 'Returning_E_F : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) else if (( l_time_or_elapsed = 'E' AND l_day_classification = 'L') OR ( IV_END_DURATION > 0 AND l_day_classification = 'L')) then ( duration = IV_END_DURATION WSA_SET(l_wsa_duration_for_today, duration) l_debug_str = l_debug_prefix_str || 'Returning_E_L : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) else if ( l_day_classification = 'M') then ( duration = 1.0 WSA_SET(l_wsa_duration_for_today, duration) l_debug_str = l_debug_prefix_str || 'Returning_E_or_T_M : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) ) else ( l_asg_absent_hours = 0 IF WSA_EXISTS( l_wsa_asg_abs_hrs_for_today,'NUMBER') THEN ( l_debug_str = l_debug_prefix_str || 'No Scheduled hours today set asg absent hours to 0' ) ELSE ( WSA_SET( l_wsa_asg_abs_hrs_for_today, l_asg_absent_hours) l_debug_str = l_debug_prefix_str || 'Scheduled hours present but no WSA so set '|| l_wsa_asg_abs_hrs_for_today|| ' to '|| to_char(l_asg_absent_hours) ) l_dummy = ESS_LOG_WRITE(l_debug_str) ) if (( l_day_classification = 'F') or ( l_day_classification = 'L')) then ( if ( l_asg_sch_hours > 0 ) then ( IF WSA_EXISTS( l_wsa_asg_abs_hrs_for_today,'NUMBER') THEN ( l_asg_absent_hours = WSA_GET(l_wsa_asg_abs_hrs_for_today , 0) l_debug_str = l_debug_prefix_str || 'WSA Exists, '|| l_wsa_asg_abs_hrs_for_today ||': '|| to_char(l_asg_absent_hours) l_dummy = ESS_LOG_WRITE(l_debug_str) ) ELSE ( l_asg_absent_hours = GET_PAY_AVAILABILITY (l_asg_resource_type, l_start_of_calc, l_end_of_calc, l_use_sch_asg_y, l_use_sch_inh_y, l_include_noshift_y, l_include_calevents_y, l_calc_units_d) l_grand_total_absent_hours = l_grand_total_absent_hours + l_asg_absent_hours WSA_SET( l_wsa_asg_abs_hrs_for_today, l_asg_absent_hours) l_debug_str = l_debug_prefix_str || 'WSA NOT Exist '|| l_wsa_asg_abs_hrs_for_today ||'being set: '|| to_char(l_asg_absent_hours) l_dummy = ESS_LOG_WRITE(l_debug_str) ) ) ) l_asg_fte = PER_ASG_FTE_VALUE if ( l_asg_sch_hours > 0 ) then ( l_grand_total_fte = l_grand_total_fte + l_asg_fte ) l_debug_str = l_debug_prefix_str || 'Ah:'||to_char(l_asg_sch_hours) || ' /Aa:' ||to_char(l_asg_absent_hours) ||' /Afte:'|| to_char(l_asg_fte) l_dummy = ESS_LOG_WRITE(l_debug_str) ) ) l_debug_str = l_debug_prefix_str || 'GtS:'||to_char(l_grand_total_sch_hours) || '/GtA:'||to_char(l_grand_total_absent_hours) || ' /GtF:'|| to_char(l_grand_total_fte) l_dummy = ESS_LOG_WRITE(l_debug_str) idx=ORA_HRX_FR_ABS_ALL_ASG_IDS.NEXT(idx,-1) ) if ( l_any_asg_scheduled = 'N') THEN ( duration = 0.0 l_debug_str = l_debug_prefix_str || 'Nothing Scheduled on '|| to_char(l_effective_Date,'DD-MON-YYYY')||' so returning 0' l_dummy = ESS_LOG_WRITE(l_debug_str) IF WSA_EXISTS(l_wsa_duration_for_today ,'NUMBER') THEN ( l_debug_str = 'Do nothing as WSA is already set' ) ELSE ( WSA_SET(l_wsa_duration_for_today, duration) ) l_debug_str = l_debug_prefix_str || 'Returning_No_Sch_Asg : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) ELSE ( if ( l_grand_total_sch_hours > 0) then ( duration = l_grand_total_absent_hours / l_grand_total_sch_hours l_debug_str = l_debug_prefix_str || 'Returning_GrandSchHrs_MoreThan_0 : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) ) else ( duration = 0.0 l_debug_str = l_debug_prefix_str || 'Returning_GrandSchHrs_Equal_0 : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) ) ) l_dummy = ESS_LOG_WRITE(l_debug_str) IF WSA_EXISTS(l_wsa_duration_for_today ,'NUMBER') THEN ( l_debug_str = 'Do nothing as WSA is already set' ) ELSE ( l_debug_str = 'Set WSA '|| l_wsa_duration_for_today ||' to: '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) WSA_SET(l_wsa_duration_for_today, duration) ) RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "France - Cong\u00e9s - Dur\u00e9e du plan d'absence",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' DEFAULT FOR ORA_HRX_FR_ABS_PRIMARY_ASG_ID is 0 DEFAULT FOR ORA_HRX_FR_ABS_ALL_ASG_IDS is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_FR_ABS_ALL_ASG_IDS is 0 DEFAULT FOR PER_WORKER_ASSIGNMENT_TYPE is ' ' DEFAULT FOR PER_WORKER_ASSIGNMENT_NORMAL_HOURS is 0.0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number), IV_ABS_START_DATE (date), IV_ABS_END_DATE (date),IV_ABS_START_DURATION (number), IV_ABS_END_DURATION (number), IV_UOM (text) l_asg_resource_type = 'ASSIGN' l_use_sch_asg_y = 'Y' l_use_sch_inh_y = 'Y' l_include_noshift_y = 'Y' l_include_calevents_y = 'Y' l_calc_units_d = 'H' l_debug_prefix_str = 'FrVacPlanDurationDiag: ' IF ((IV_START_DURATION=1 OR IV_START_DURATION=0.5) AND (IV_END_DURATION=1 OR IV_END_DURATION=0.5)) THEN ( l_time_or_elapsed = 'E' ) else ( l_time_or_elapsed = 'T' ) l_debug_str = l_debug_prefix_str || 'Plan Duration Start' l_dummy = ESS_LOG_WRITE(l_debug_str) l_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_asg_type_for_called_asg = PER_WORKER_ASSIGNMENT_TYPE l_effective_Date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_primary_asg_id = ORA_HRX_FR_ABS_PRIMARY_ASG_ID l_asg_fte = PER_ASG_FTE_VALUE l_start_of_day = to_date( to_char(trunc(IV_START_DATE),'DD/MM/RRRR')||' 00:00','DD/MM/RRRR HH24:MI') l_end_of_day = to_date( to_char(trunc(IV_END_DATE),'DD/MM/RRRR')||' 23:59','DD/MM/RRRR HH24:MI') l_any_asg_scheduled = 'N' l_time_or_elapsed = 'T' l_resource_type = 'ASSIGN' l_start_of_calc = l_start_of_day l_end_of_calc = l_end_of_day l_use_sch_asg = 'Y' l_use_sch_inh = 'Y' l_include_noshift = 'Y' l_include_calevents = 'Y' l_calc_units = 'H' l_day_classification = 'M' l_is_first_day = 'N' l_is_last_day = 'N' duration = 0 l_debug_str = l_debug_prefix_str || 'Invoked for : '|| 'AsgId : '|| to_char(l_hr_assignment_id)|| ' Schedule Type: '|| l_time_or_elapsed || ' on '|| to_char(trunc(IV_START_DATE), 'YYYYMMDD') l_dummy = ESS_LOG_WRITE(l_debug_str) l_debug_str = l_debug_prefix_str ||'IV_START_DURATION / IV_END_DURATION '|| to_char(IV_START_DURATION) || ' / ' || to_char(IV_END_DURATION) l_dummy = ESS_LOG_WRITE(l_debug_str) l_wsa_sch_prefix = 'FRVAC_SCH_FOR_AE_' l_wsa_abs_prefix = 'FRVAC_ABS_FOR_AE_' l_wsa_duration_prefix = 'FRVAC_DUR_FOR_AE_' l_wsa_duration_for_today = l_wsa_duration_prefix ||to_char(l_abs_entry_id)||'_ON_'||to_char(trunc(IV_START_DATE), 'YYYYMMDD') if ( l_asg_type_for_called_asg = 'ET') THEN ( duration = 0.0 l_debug_str = l_debug_prefix_str || 'Returning Duration on '|| TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - TermId : '||l_asg_type_for_called_asg ||', '|| to_char(l_hr_assignment_id) ||' is: '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) IF WSA_EXISTS(l_wsa_duration_for_today ,'NUMBER') THEN ( duration = WSA_GET(l_wsa_duration_for_today,0 ) l_debug_str = l_debug_prefix_str || 'Returning_From_WSA : '||'AsgId: '|| to_char(l_hr_assignment_id) || ' on '|| TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' : '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) RETURN duration ) if (trunc(IV_START_DATE) = trunc(IV_ABS_START_DATE)) THEN ( l_day_classification = 'F' if (l_time_or_elapsed = 'T' ) then ( l_start_of_calc = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI') ) ) else if (trunc(IV_END_DATE) = trunc(IV_ABS_END_DATE)) THEN ( l_day_classification = 'L' if (l_time_or_elapsed = 'T' ) then ( l_end_of_calc = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI') ) ) ELSE ( l_day_classification = 'M' ) l_debug_str = l_debug_prefix_str ||'Start of Calc/end of Calc' || to_char(l_start_of_calc,'DDMM-HH24:MI') || '/'||to_char(l_end_of_calc,'DDMM-HH24:MI') ||' / DayClassification: '|| l_day_classification l_dummy = ESS_LOG_WRITE(l_debug_str) l_asg_sch_hours = 0.0 l_asg_absent_hours = 0.0 l_grand_total_sch_hours = 0.0 l_grand_total_absent_hours = 0.0 l_grand_total_fte = 0.0 duration = 1.0 idx=1 l_debug_str = l_debug_prefix_str || 'Looping through all assignments' l_dummy = ESS_LOG_WRITE(l_debug_str) l_debug_str = l_debug_prefix_str || '----------------------------------------------' l_dummy = ESS_LOG_WRITE(l_debug_str) idx=ORA_HRX_FR_ABS_ALL_ASG_IDS.FIRST(-1) while ORA_HRX_FR_ABS_ALL_ASG_IDS.exists(idx) LOOP ( l_debug_str = l_debug_prefix_str || 'Iterating over AsgId['||to_char(idx)||']: ' || to_char(ORA_HRX_FR_ABS_ALL_ASG_IDS[idx]) l_dummy = ESS_LOG_WRITE(l_debug_str) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID=ORA_HRX_FR_ABS_ALL_ASG_IDS[idx]) ( l_asg_type = PER_WORKER_ASSIGNMENT_TYPE l_asg_sch_hours = 0.0 l_asg_absent_hours = 0.0 l_asg_id = ORA_HRX_FR_ABS_ALL_ASG_IDS[idx] l_wsa_asg_sch_hrs_for_today = l_wsa_sch_prefix ||to_char(l_abs_entry_id)||'_ASG_'||to_char(l_asg_id)||'_ON_'||to_char(trunc(IV_START_DATE), 'YYYYMMDD') l_wsa_asg_abs_hrs_for_today = l_wsa_abs_prefix ||to_char(l_abs_entry_id)||'_ASG_'||to_char(l_asg_id)||'_ON_'||to_char(trunc(IV_START_DATE), 'YYYYMMDD') if ( l_asg_type = 'E') then ( IF WSA_EXISTS( l_wsa_asg_sch_hrs_for_today,'NUMBER') THEN ( l_asg_sch_hours = WSA_GET(l_wsa_asg_sch_hrs_for_today , 0) l_debug_str = l_debug_prefix_str || 'WSA Already Exists: '|| l_wsa_asg_sch_hrs_for_today ||': '||to_char(l_asg_sch_hours) l_dummy = ESS_LOG_WRITE(l_debug_str) ) ELSE ( l_asg_sch_hours = GET_PAY_AVAILABILITY (l_asg_resource_type, l_start_of_day, l_end_of_day, l_use_sch_asg_y, l_use_sch_inh_y, l_include_noshift_y, l_include_calevents_y, l_calc_units_d) WSA_SET( l_wsa_asg_sch_hrs_for_today, l_asg_sch_hours) l_debug_str = l_debug_prefix_str || 'No WSA: '|| l_wsa_asg_sch_hrs_for_today|| ' Setting to: '|| to_char(l_asg_sch_hours) l_dummy = ESS_LOG_WRITE(l_debug_str) if ( l_asg_sch_hours > 0) THEN ( l_any_asg_scheduled = 'Y' l_debug_str = l_debug_prefix_str || 'Any assignment scheduled flag is set to Y now' l_dummy = ESS_LOG_WRITE(l_debug_str) ) l_grand_total_sch_hours = l_grand_total_sch_hours + l_asg_sch_hours ) if ( l_asg_sch_hours > 0 ) then ( if (( l_time_or_elapsed = 'E' AND l_day_classification = 'F') OR ( IV_START_DURATION > 0 AND l_day_classification = 'F')) then ( duration = IV_START_DURATION WSA_SET(l_wsa_duration_for_today, duration) l_debug_str = l_debug_prefix_str || 'Returning_E_F : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) else if (( l_time_or_elapsed = 'E' AND l_day_classification = 'L') OR ( IV_END_DURATION > 0 AND l_day_classification = 'L')) then ( duration = IV_END_DURATION WSA_SET(l_wsa_duration_for_today, duration) l_debug_str = l_debug_prefix_str || 'Returning_E_L : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) else if ( l_day_classification = 'M') then ( duration = 1.0 WSA_SET(l_wsa_duration_for_today, duration) l_debug_str = l_debug_prefix_str || 'Returning_E_or_T_M : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) ) else ( l_asg_absent_hours = 0 IF WSA_EXISTS( l_wsa_asg_abs_hrs_for_today,'NUMBER') THEN ( l_debug_str = l_debug_prefix_str || 'No Scheduled hours today set asg absent hours to 0' ) ELSE ( WSA_SET( l_wsa_asg_abs_hrs_for_today, l_asg_absent_hours) l_debug_str = l_debug_prefix_str || 'Scheduled hours present but no WSA so set '|| l_wsa_asg_abs_hrs_for_today|| ' to '|| to_char(l_asg_absent_hours) ) l_dummy = ESS_LOG_WRITE(l_debug_str) ) if (( l_day_classification = 'F') or ( l_day_classification = 'L')) then ( if ( l_asg_sch_hours > 0 ) then ( IF WSA_EXISTS( l_wsa_asg_abs_hrs_for_today,'NUMBER') THEN ( l_asg_absent_hours = WSA_GET(l_wsa_asg_abs_hrs_for_today , 0) l_debug_str = l_debug_prefix_str || 'WSA Exists, '|| l_wsa_asg_abs_hrs_for_today ||': '|| to_char(l_asg_absent_hours) l_dummy = ESS_LOG_WRITE(l_debug_str) ) ELSE ( l_asg_absent_hours = GET_PAY_AVAILABILITY (l_asg_resource_type, l_start_of_calc, l_end_of_calc, l_use_sch_asg_y, l_use_sch_inh_y, l_include_noshift_y, l_include_calevents_y, l_calc_units_d) l_grand_total_absent_hours = l_grand_total_absent_hours + l_asg_absent_hours WSA_SET( l_wsa_asg_abs_hrs_for_today, l_asg_absent_hours) l_debug_str = l_debug_prefix_str || 'WSA NOT Exist '|| l_wsa_asg_abs_hrs_for_today ||'being set: '|| to_char(l_asg_absent_hours) l_dummy = ESS_LOG_WRITE(l_debug_str) ) ) ) l_asg_fte = PER_ASG_FTE_VALUE if ( l_asg_sch_hours > 0 ) then ( l_grand_total_fte = l_grand_total_fte + l_asg_fte ) l_debug_str = l_debug_prefix_str || 'Ah:'||to_char(l_asg_sch_hours) || ' /Aa:' ||to_char(l_asg_absent_hours) ||' /Afte:'|| to_char(l_asg_fte) l_dummy = ESS_LOG_WRITE(l_debug_str) ) ) l_debug_str = l_debug_prefix_str || 'GtS:'||to_char(l_grand_total_sch_hours) || '/GtA:'||to_char(l_grand_total_absent_hours) || ' /GtF:'|| to_char(l_grand_total_fte) l_dummy = ESS_LOG_WRITE(l_debug_str) idx=ORA_HRX_FR_ABS_ALL_ASG_IDS.NEXT(idx,-1) ) if ( l_any_asg_scheduled = 'N') THEN ( duration = 0.0 l_debug_str = l_debug_prefix_str || 'Nothing Scheduled on '|| to_char(l_effective_Date,'DD-MON-YYYY')||' so returning 0' l_dummy = ESS_LOG_WRITE(l_debug_str) IF WSA_EXISTS(l_wsa_duration_for_today ,'NUMBER') THEN ( l_debug_str = 'Do nothing as WSA is already set' ) ELSE ( WSA_SET(l_wsa_duration_for_today, duration) ) l_debug_str = l_debug_prefix_str || 'Returning_No_Sch_Asg : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) return duration ) ELSE ( if ( l_grand_total_sch_hours > 0) then ( duration = l_grand_total_absent_hours / l_grand_total_sch_hours l_debug_str = l_debug_prefix_str || 'Returning_GrandSchHrs_MoreThan_0 : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) ) else ( duration = 0.0 l_debug_str = l_debug_prefix_str || 'Returning_GrandSchHrs_Equal_0 : '||TO_CHAR(l_effective_Date,'DD-MON-YYYY')||' - '|| to_char(duration) ) ) l_dummy = ESS_LOG_WRITE(l_debug_str) IF WSA_EXISTS(l_wsa_duration_for_today ,'NUMBER') THEN ( l_debug_str = 'Do nothing as WSA is already set' ) ELSE ( l_debug_str = 'Set WSA '|| l_wsa_duration_for_today ||' to: '|| to_char(duration) l_dummy = ESS_LOG_WRITE(l_debug_str) WSA_SET(l_wsa_duration_for_today, duration) ) RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_HD_ALLOWED_8HRS_DAY_Plan",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug = ess_log_write('L_ASSIGNMENT_ID: ' + to_char(L_ASSIGNMENT_ID)) l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(L_ASSIGNMENT_ID)||''''||'|EFF_DATE='''||to_char(ld_period_start_date,'DD-MM-YYYY')||'''') l_debug = ess_log_write('l_schedule: ' + l_schedule) l_debug = ess_log_write('*****Start of Plan Duration*****') l_debug = ess_log_write('Start Date'||to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME) l_debug = ess_log_write('End Date'||to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') l_debug = ess_log_write('ln_entry_duration_d '||to_char(ln_entry_duration_d)) If l_schedule = 'New Afghanistan General Work Schedule Summer with 1 Hour break' then ( IF (ln_entry_duration_d>0 AND ln_entry_duration_d<=4.5) THEN (ln_entry_duration_d = 4) IF (ln_entry_duration_d>4.5) THEN (ln_entry_duration_d =8)) else if l_schedule = 'New Afghanistan Cleaners Work Schedule Summer with 1 Hour Break' then ( IF (ln_entry_duration_d>0 AND ln_entry_duration_d<=6.5) THEN (ln_entry_duration_d = 4) IF (ln_entry_duration_d>6.5) THEN (ln_entry_duration_d =8)) Else ( IF (ln_entry_duration_d>0 AND ln_entry_duration_d<=4) THEN (ln_entry_duration_d = 4) IF (ln_entry_duration_d>4) THEN (ln_entry_duration_d =8)) l_debug = ess_log_write('ln_entry_duration_d After condition '||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Plan Duration*****') DURATION = ln_entry_duration_d l_debug = ess_log_write('DURATION '||to_char(DURATION)) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BC Officers Duration Formula",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR IV_ABS_START_DURATION IS 0 DEFAULT FOR IV_ABS_END_DURATION IS 0 DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_MEANING IS 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE IS 'Y' INPUTS ARE IV_START_DATE (date) , IV_END_DATE (date) , IV_START_TIME(text) , IV_END_TIME(text) , IV_ABS_START_DURATION , IV_ABS_END_DURATION , IV_ABS_START_DATE (date) , IV_ABS_END_DATE (date) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' l_debug = ess_log_write('IV_ABS_START_DURATION - ' +to_char(IV_ABS_START_DURATION)) l_debug = ess_log_write('PER_ASG_MEANING - ' +(PER_ASG_ASSIGNMENT_STATUS_TYPE_MEANING)) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_STATUS_TYPE - ' +(PER_ASG_ASSIGNMENT_STATUS_TYPE)) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') IF PER_ASG_ASSIGNMENT_STATUS_TYPE = 'ACTIVE' THEN ( l_hr_asg_id = ASG_HR_ASG_ID l_debug = ess_log_write('l_hr_asg_id - ' +to_char(l_hr_asg_id)) l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF IV_START_DATE = IV_ABS_START_DATE THEN ( ln_entry_duration_d = IV_ABS_START_DURATION ) ELSE ( ln_entry_duration_d = 1 ) ) ELSE ( ln_entry_duration_d=0 ) if l_primary_flag ='N' THEN ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) ) ELSE DURATION = 0 RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC SSP Plan Duration",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR PAY_PAYROLL_ASG_ASSIGNMENT_ID IS -1 DEFAULT FOR l_assignment_detail IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 IV_TOTALDURATION=0 Assignment=0 l_assignment_detail=0 i=1 j=0 l_person_id=0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') start=to_char(IV_START_DATE,'DD') end=to_char(IV_END_DATE,'DD') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') l_person_id=GET_CONTEXT(PERSON_ID,0) l_debug = ess_log_write('l_person_id= '+ to_char(l_person_id)) l_debug = ess_log_write('start= '+ start) l_debug = ess_log_write('end= '+ end) ln_entry_duration_d=1 DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BC Teachers Duration Formula",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR IV_ABS_START_DURATION IS 0 DEFAULT FOR IV_ABS_END_DURATION IS 0 DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '1900/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_END_TIME(text), IV_ABS_START_DURATION, IV_ABS_END_DURATION, IV_ABS_START_DATE (date), IV_ABS_END_DATE (date) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') l_debug = ess_log_write('Inside Teachers Duration Formula') l_debug = ess_log_write('IV_ABS_START_DURATION - ' +to_char(IV_ABS_START_DURATION)) l_hr_asg_id = ASG_HR_ASG_ID l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('P_DAY= '+ to_char(ld_period_start_date,'DD-MM-YYYY')) Term_off = GET_VALUE_SET('BC_PAY_TEACHERS_TERM_OFF_DAYS','|=P_DAY='''||to_char(ld_period_start_date,'DD-MM-YYYY')||'''') Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Term_off='Y' THEN ( ln_entry_duration_d=0 ) ELSE ( IF IV_START_DATE = IV_ABS_START_DATE THEN ( ln_entry_duration_d = IV_ABS_START_DURATION ) ELSE ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) If l_primary_flag ='N' THEN ( ln_entry_duration_d=0 ) l_debug = ess_log_write('IV_START_DATE - ' + to_char(IV_START_DATE)) l_debug = ess_log_write('IV_ABS_START_DATE - ' +to_char(IV_ABS_START_DATE)) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('Term_off - ' + (Term_off)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "CIMB_SG_HALFDAY_DUR_CAL_PL",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT FOR IV_ABS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION (NUMBER), IV_END_TIME(text), IV_ABS_START_DATE (DATE), IV_ABS_END_DATE (DATE) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_time_entered = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_time_entered = get_measure_from_time(IV_START_DATE,IV_END_DATE) IF l_date = l_end_date OR (ADD_DAYS(l_date,1) = l_end_date AND IV_END_TIME = '00:00' AND l_time_entered > 8) THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_DATA = ESS_LOG_WRITE('SG_DUR_CAL PLAN ANC_PUBLISHED_SHIFT_DETAILS_ARR'||ANC_PUBLISHED_SHIFT_DETAILS_ARR[i]) L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND l_date = IV_ABS_END_DATE AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'DD-MM-YYYY')||' '||IV_END_TIME,'DD-MM-YYYY HH24:MI') AND TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY')||' '||IV_START_TIME,'DD-MM-YYYY HH24:MI') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('SG_DUR_CAL PLAN 1:1:1 IN') ) ELSE IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'DD-MM-YYYY')||' '||IV_END_TIME,'DD-MM-YYYY HH24:MI') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_ABS_START_DATE,'DD-MM-YYYY HH24:MI'),'DD-MM-YYYY HH24:MI') OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD HH24:MI')) THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('SG_DUR_CAL PLAN 1:1:2 IN') ) i = i + 1 l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/L_tot_asg_hours) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('PLAN ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 IF IV_START_TIME = '00:00' AND IV_END_TIME = SUBSTR(l_asg_shift_end_date_CHAR,12,5) THEN ln_unrounded_duration_d = 1 ) ) ) DURATION = ln_unrounded_duration_d return DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_MY_HALFDAY_DUR_CAL_PL",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text), IV_ABS_START_DATE (DATE), IV_ABS_END_DATE (DATE) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_day = 0 L_half_shift = 0 L_half_shift_DUR = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 L_tot_asg_hours_DAY = 0 l_entry_duration_DAY=0 l_new_st_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD HH24_MI') l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 l_pb_oh = 0 l_hours = 0 L_exc = 'X' L_DNP = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date L_FULL_DAY = 0 IF (IV_START_TIME = '00:00' AND IV_END_TIME = '23:59') THEN L_exc = 'Y' l_date = l_start_date L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN l_new_st_date:'|| TO_CHAR(IV_START_DATE,'YYYY/MM/DD HH24:MI')||'l_new_END_date:'||TO_CHAR(IV_END_DATE,'YYYY/MM/DD HH24:MI')||'IV_START_DATE'||TO_CHAR(IV_START_DATE,'yyyy-mm-dd')||'IV_START_TIME'||IV_START_TIME||'IV_END_DATE'||TO_CHAR(IV_END_DATE,'yyyy-mm-dd')||'IV_END_TIME'||IV_END_TIME||'IV_ABS_START_DATE'||TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD HH24:MI')||'IV_ABS_END_DATE'||TO_CHAR(IV_ABS_END_DATE,'YYYY/MM/DD HH24:MI')) L_count = 0 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN'||'v_person_id:'||TO_CHAR(v_person_id)||'v_assignment_id'||TO_CHAR(v_assignment_id)) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN l_date'||TO_CHAR(l_date,'yyyy-mm-dd')||'l_end_date'||TO_CHAR(l_end_date,'yyyy-mm-dd')||'L_exc'||L_exc) IF (l_date = l_end_date) THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL NEW LOOP l_date'||TO_CHAR(l_date,'yyyy-mm-dd')) l_day = 0 L_tot_asg_hours = 0 L_asg_hours = 0 L_half_shift = 0 IF l_date = l_end_date AND TO_CHAR(IV_START_DATE,'YYYY/MM/DD HH24:MI') != TO_CHAR(IV_END_DATE,'YYYY/MM/DD HH24:MI') THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_h = get_measure_from_time(IV_START_DATE,IV_END_DATE) l_entry_duration_DAY=get_measure_from_time(IV_ABS_START_DATE,IV_ABS_END_DATE) l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') L_DATA = ESS_LOG_WRITE('MY_DUR_CAL l_duration_char:'||l_duration_char) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_PUBLISHED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_PUBLISHED_SHIFT_DETAILS_ARR l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)||'shift end time:'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)) IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1:1') IF SUBSTR(l_asg_shift_end_date_CHAR,12,5) != '00:00' AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1 L_tot_asg_hours IN :'||TO_CHAR(L_tot_asg_hours)) ) IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND ROUND(l_entry_duration_h,0) = 24 THEN ( l_day = 1 ) ) ELSE IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,1),'DD-MM-YYYY') AND ( SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1 L_tot_asg_hours IN 5 :'||TO_CHAR(L_tot_asg_hours)) l_pb_oh = 1 ) i = i + 1 ) IF l_entry_duration_h < 5 THEN L_half_shift_DUR = 1 IF ((L_half_shift_DUR = 1 AND l_entry_duration_h = L_tot_asg_hours) OR (l_entry_duration_h > 0 AND l_entry_duration_h < L_tot_asg_hours AND (L_half_shift_DUR = 1 OR L_half_shift = 1))) THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1:1') ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY') AND IV_END_TIME = SUBSTR(l_asg_shift_end_date_CHAR,12,5) THEN ln_unrounded_duration_d = 1 ) ELSE IF L_half_shift_DUR = 0 AND l_entry_duration_h = L_tot_asg_hours THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ELSE IF l_pb_oh = 1 THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1:2') IF L_half_shift_DUR = 1 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF l_day = 1 THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1:3') IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF L_tot_asg_hours > 3 AND ROUND(l_entry_duration_h,0) = 24 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF l_duration_char = '1' AND L_exc <> 'Y' AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('PLAN ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_ASSIGNED_SHIFT_DETAILS_ARR l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)) l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL INSIDE LOOP l_end_time:'||l_end_time||'shift_end_date_CHAR'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)||'l_start_time'||l_start_time ||'shift_st_date_CHAR'||SUBSTR(l_asg_shift_st_date_CHAR,12,5)||'l_duration_char'||l_duration_char) IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_count = 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1 L_tot_asg_hours IN:') ) ELSE IF l_end_time = SUBSTR(l_asg_shift_end_date_CHAR,12,5) OR l_start_time = SUBSTR(l_asg_shift_st_date_CHAR,12,5) THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_tot_asg_hours_DAY = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:2 L_tot_asg_hours IN:'||TO_CHAR(L_tot_asg_hours)) L_half_shift = 1 IF L_tot_asg_hours >= 7 THEN L_count = 1 ELSE L_count = 0 ) ELSE( L_tot_asg_hours_DAY = L_tot_asg_hours_DAY + L_asg_hours ) ) ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL checknew INSIDE LOOP L_count:'|| TO_CHAR(L_count)||'l_entry_duration_h:'||TO_CHAR(l_entry_duration_h)||'L_tot_asg_hours'||TO_CHAR(L_tot_asg_hours)|| 'L_tot_asg_hours_DAY'||TO_CHAR(L_tot_asg_hours_DAY)||'l_entry_duration_DAY' ||TO_CHAR(l_entry_duration_DAY)||'IV_ABS_END_DATE'||TO_CHAR(IV_ABS_END_DATE,'YYYY/MM/DD HH24:MI')||'IV_END_DATE'||TO_CHAR(IV_END_DATE,'YYYY/MM/DD HH24:MI')) IF L_count = 1 THEN ( IF SUBSTR(l_asg_shift_end_date_CHAR,12,5) = l_end_time THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:1 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) ELSE ( IF l_entry_duration_h = 0 or (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:2 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) ) ELSE IF l_entry_duration_h = L_tot_asg_hours OR (l_entry_duration_h > 0 AND l_entry_duration_h < L_tot_asg_hours) THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:3 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) ELSE IF l_entry_duration_h > 0 AND l_entry_duration_h >= L_tot_asg_hours AND L_tot_asg_hours > 0 THEN ( IF L_tot_asg_hours < 5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:4 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) IF TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD') = TO_CHAR(IV_ABS_END_DATE,'YYYY/MM/DD') THEN ( IF l_entry_duration_h < l_entry_duration_DAY AND (ROUND((l_entry_duration_DAY/(L_tot_asg_hours_DAY+1)),2) <= 0.55 AND (l_entry_duration_h <= 2)) AND IV_START_TIME < '14:00' THEN ln_unrounded_duration_d = 0 ELSE IF IV_START_TIME = '14:00' AND l_entry_duration_h < 0.5 AND l_entry_duration_DAY > 2 AND TO_DATE(TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD HH24:MI')) < TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD HH24:MI')) THEN ln_unrounded_duration_d = 0 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:5 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) ELSE IF TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD') = TO_CHAR(l_date,'YYYY/MM/DD') AND TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD') != TO_CHAR(IV_ABS_END_DATE,'YYYY/MM/DD')THEN ( IF l_entry_duration_h < 0.5 AND IV_END_TIME = '13:00' THEN ln_unrounded_duration_d = 0 ) ) ) ) ) DURATION = ln_unrounded_duration_d L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN DURATION:'||TO_CHAR(DURATION)) return DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ABSCONVERSION_PL_FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION lc_use_sch_asg_y = 'N' lc_use_sch_inh_y = 'N' lc_include_noshift_y = 'N' lc_include_calevents_y = 'Y' lc_calc_units_d = 'D' l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') l_date = l_start_date l_ph = 'X' l_date_st = 'X' ln_unrounded_duration_d = GET_PAY_AVAILABILITY (lc_asg_resource_type, ld_period_start_date, ld_period_end_date, lc_use_sch_asg_y, lc_use_sch_inh_y, lc_include_noshift_y, lc_include_calevents_y, lc_calc_units_d) IF ln_unrounded_duration_d = 0 THEN ( WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) ) IF ln_unrounded_duration_d < 0.5 AND ln_unrounded_duration_d > 0 THEN ln_unrounded_duration_d = 0.5 IF IV_START_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_TH_HALFDAY_DUR_CAL_PL",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT FOR IV_ABS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION (NUMBER), IV_END_TIME(text), IV_ABS_START_DATE (DATE), IV_ABS_END_DATE (DATE) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_time_entered = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_time_entered = get_measure_from_time(IV_START_DATE,IV_END_DATE) IF l_date = l_end_date OR (ADD_DAYS(l_date,1) = l_end_date AND IV_END_TIME = '00:00' AND l_time_entered > 8) THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND l_date = IV_ABS_END_DATE AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'DD-MM-YYYY')||' '||IV_END_TIME,'DD-MM-YYYY HH24:MI') AND TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY')||' '||IV_START_TIME,'DD-MM-YYYY HH24:MI') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('TH_DUR_CAL PLAN 1:1:1 IN') ) ELSE IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'DD-MM-YYYY')||' '||IV_END_TIME,'DD-MM-YYYY HH24:MI') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_ABS_START_DATE,'DD-MM-YYYY HH24:MI'),'DD-MM-YYYY HH24:MI') OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD HH24:MI')) THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('TH_DUR_CAL PLAN 1:1:2 IN') ) i = i + 1 l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 IF IV_START_TIME = '00:00' AND IV_END_TIME = SUBSTR(l_asg_shift_end_date_CHAR,12,5) THEN ln_unrounded_duration_d = 1 ) ) ) DURATION = ln_unrounded_duration_d return DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_HK_ABSPLAN_DURATION_EX_PH_FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_ph = 'X' l_date_st = 'X' WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH_HK','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) IF ln_start_duration = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Hong Kong"
    },
    {
        "FORMULA_NAME": "CIMB_VN_ABS_PLAN_DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 ln_floor_duration_d = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ln_unrounded_duration_d = ln_entry_duration_d * PER_ASG_FTE_VALUE IF (ln_unrounded_duration_d - FLOOR(ln_unrounded_duration_d) <> 0 AND ln_unrounded_duration_d - FLOOR(ln_unrounded_duration_d) <> 0.5) THEN ln_floor_duration_d = FLOOR(ln_unrounded_duration_d) + 0.5 ELSE ln_floor_duration_d = ln_unrounded_duration_d DURATION = ln_floor_duration_d RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "Leicester City Support Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_TIME(text),IV_END_TIME(text) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 l_column='LCC' Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') OR (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Industrial Action Teachers Conversion",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text),IV_START_DURATION(number),IV_END_DURATION(number) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('IV_START_DURATION - ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('IV_END_DURATION - ' + to_char(IV_END_DURATION)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) l_debug = ess_log_write('DAY: ' + (DAY)) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 l_debug = ess_log_write('ln_entry_duration_d_0 - ' + to_char(ln_entry_duration_d)) ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Notice Period Absence Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_TIME(text),IV_END_TIME(text) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') or (DAY='SAT') or (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "INDUSTRIAL ACTION SUPPORT CONVERSION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text),IV_START_DURATION(number),IV_END_DURATION(number) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('IV_START_DURATION - ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('IV_END_DURATION - ' + to_char(IV_END_DURATION)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) l_debug = ess_log_write('DAY: ' + (DAY)) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 l_debug = ess_log_write('ln_entry_duration_d_0 - ' + to_char(ln_entry_duration_d)) ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Leic City Teachers Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_ORG_ATTRIBUTE1 is 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PAYROLL_NAME is 'X' INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_TIME(text),IV_END_TIME(text) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) l_sub_date = substr(to_char(IV_START_DATE),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) ln_entry_duration_d = 0 l_column='HOLIDAYS' l_dept = 'X' l_attrib = 'X' if PER_ASG_ORG_DEPARTMENT_NAME='X' then ( l_cutoff_date1 = to_date(GET_TABLE_VALUE('EMG_MIGRATION_CUTOFF_DATE','DATE',PAYROLL_NAME)) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_cutoff_date1) ( l_dept = PER_ASG_ORG_DEPARTMENT_NAME l_attrib = PER_ASG_ORG_ATTRIBUTE1 ) ) else ( l_dept = PER_ASG_ORG_DEPARTMENT_NAME l_attrib = PER_ASG_ORG_ATTRIBUTE1 ) Teach_off = GET_VALUE_SET('GET_TEACHERS_CALENDAR','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_attrib|| '''') l_debug = ess_log_write('Date - ' + to_char(ld_period_start_date,'DD-Mon-YYYY')) l_debug = ess_log_write('Teach_off - ' + (Teach_off)) l_debug = ess_log_write('Department: '+ l_dept) l_debug = ess_log_write('Dept Attribute: ' + l_attrib) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') OR (DAY='SUN') THEN ( IF Teach_off='Y' THEN ( ln_entry_duration_d=0 ) ELSE ( ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Fire Support Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_TIME(text),IV_END_TIME(text) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Industrial Injury Teachers Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_DURATION(number),IV_END_DURATION(number) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') OR (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) If ln_entry_duration_d=1 AND (IV_START_DURATION=.5 OR IV_END_DURATION=.5) THEN ( ln_entry_duration_d=.5 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "NHS OSP Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS 'X' INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_TIME(text),IV_END_TIME(text) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "N Support Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_DURATION(number),IV_END_DURATION(number) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') OR (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) If ln_entry_duration_d=1 AND (IV_START_DURATION=.5 OR IV_END_DURATION=.5) THEN ( ln_entry_duration_d=.5 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "TRCH Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_DURATION(number),IV_END_DURATION(number) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') OR (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) If ln_entry_duration_d=1 AND (IV_START_DURATION=.5 OR IV_END_DURATION=.5) THEN ( ln_entry_duration_d=.5 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Fire Operational Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_TIME(text),IV_END_TIME(text) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') OR (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Teachers OSP Plan Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_ORG_ATTRIBUTE1 is 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PAYROLL_NAME is 'X' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_DURATION(number),IV_END_DURATION(number) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) l_sub_date = substr(to_char(IV_START_DATE),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) ln_entry_duration_d = 0 l_column='HOLIDAYS' l_dept = 'X' l_attrib = 'X' if PER_ASG_ORG_DEPARTMENT_NAME='X' then ( l_cutoff_date1 = to_date(GET_TABLE_VALUE('EMG_MIGRATION_CUTOFF_DATE','DATE',PAYROLL_NAME)) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_cutoff_date1) ( l_dept = PER_ASG_ORG_DEPARTMENT_NAME l_attrib = PER_ASG_ORG_ATTRIBUTE1 ) ) else ( l_dept = PER_ASG_ORG_DEPARTMENT_NAME l_attrib = PER_ASG_ORG_ATTRIBUTE1 ) Teach_off = GET_VALUE_SET('GET_TEACHERS_CALENDAR','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_attrib|| '''') l_debug = ess_log_write('Teach_off - ' + (Teach_off)) l_debug = ess_log_write('Department: '+ l_dept) l_debug = ess_log_write('Dept Attribute: ' + l_attrib) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Teach_off='Y' THEN ( ln_entry_duration_d=0 ) ELSE ( ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) If ln_entry_duration_d=1 AND (IV_START_DURATION=.5 OR IV_END_DURATION=.5) THEN ( ln_entry_duration_d=.5 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "L Support Duration Conversion Formula",
        "answer": "DEFAULT FOR ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_AVAILABILITY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_DURATION_ARR is 0 DEFAULT FOR ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ORA_HRX_GB_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'X' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS 'X' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE),IV_START_DURATION(number),IV_END_DURATION(number) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) input_start_date=IV_START_DATE input_end_date=IV_END_DATE input_end_date_EOD=add_days(input_end_date,1) input_start_date_minus=add_days(input_start_date,-1) input_end_date_plus=add_days(input_end_date,1) type_of_shift=' ' duration=0 type_of_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) first_shift_day=trunc(IV_START_DATE) first_shift_seen='N' if (type_of_shift='TIME') then ( ni4=-2 CHANGE_CONTEXTS( START_DATE=input_start_date_minus, END_DATE=input_end_date_plus, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.FIRST(-1) duration=0 while (ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.exists(ni4)) loop ( r_start=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR[ni4] r_end=ORA_HRX_GB_AVAILABILITY_END_DATE_TIME_ARR[ni4] if (r_start >= input_start_date and r_start < input_end_date and duration=0) then ( if (first_shift_seen='N') then( duration=1 ) else ( l_log1='duration: first shift already seen' ) first_shift_seen='Y' ) else ( if first_shift_day=trunc(r_start) then ( if (first_shift_seen='N') then( first_shift_seen='Y' ) ) ) ni4=ORA_HRX_GB_AVAILABILITY_START_DATE_TIME_ARR.NEXT(ni4,-1) ) ) ) else ( thisdate=trunc(IV_START_DATE) duration=GET_PAY_AVAILABILITY('ASSIGN',thisdate,add_days(thisdate,1),'Y','Y','Y','R','D' ,'N','N',8,'N','N','Y','SSP') ) if duration>0 then ( ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ln_entry_duration_d = 0 Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) If ln_entry_duration_d=1 AND (IV_START_DURATION=.5 OR IV_END_DURATION=.5) THEN ( ln_entry_duration_d=.5 ) duration = ln_entry_duration_d ) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Kaneka Paternity Plan Conversion",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'ANC_ABS_TYP_NAME' DEFAULT FOR PER_PER_LEGISLATION_CODE IS 'XX' DEFAULT FOR PER_ASG_LEGISLATIVE_DATA_GROUP_NAME IS 'XX' DEFAULT FOR PER_ASG_PERSON_NUMBER IS '0' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME IS '-Y' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is '-x' DEFAULT FOR PER_ASG_LEGAL_ENTITY_ID IS 0 DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_NAME IS '-X' DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_COVERAGE_NODE is '-X' DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_START_DATE_TIME IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_END_DATE_TIME IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_final_duration = 0 l_absence_start_date = to_date(to_char(IV_START_DATE,'DD/MM/YYYY')) l_absence_end_date = to_date(to_char(IV_END_DATE,'DD/MM/YYYY')) l_absence_duration = days_between(l_absence_end_date, l_absence_start_date) + 1 L_LEGISLATION_CODE = PER_PER_LEGISLATION_CODE LDG_NAME = PER_ASG_LEGISLATIVE_DATA_GROUP_NAME C_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,0) L_ABSENCE_NAME = 'Annual Leave' L_ABSENCE_TYPE_ID = TO_NUMBER(GET_VALUE_SET('XX_GET_ABSENCE_TYPE_ID','|=ABSENCE_NAME='||''''||L_ABSENCE_NAME||''''||'|LEGISLATION_CODE='||''''||L_LEGISLATION_CODE||''''||'|LDG_NAME='||''''||LDG_NAME||''''||'|')) IF C_ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID THEN ( L_Log =ESS_LOG_WRITE(' Evosys Debugging : DAM_ANNUAL_LEAVE_DURATION') l_public_holiday = 'N' L_Emp_Asg_BU = PER_ASG_BUSINESS_UNIT_NAME L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_absence_start_date : '||to_char(l_absence_start_date) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_absence_end_date : '||to_char(l_absence_end_date) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->IV_START_DURATION : '||to_char(IV_START_DURATION) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->IV_END_DURATION : '||to_char(IV_END_DURATION) ) l_ph_count = 0 l_start_index = PER_EXT_CAL_COVERAGE_START_DATE_TIME.FIRST(-1234) WHILE PER_EXT_CAL_COVERAGE_START_DATE_TIME.EXISTS(l_start_index) LOOP ( IF (L_Emp_Asg_BU = PER_EXT_CAL_COVERAGE_COVERAGE_NODE[l_start_index]) THEN ( L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->PER_EXT_CAL_COVERAGE_START_DATE_TIME : '||to_char(PER_EXT_CAL_COVERAGE_START_DATE_TIME[l_start_index]) ) l_cal_event_start_date = TO_DATE(TO_CHAR(PER_EXT_CAL_COVERAGE_START_DATE_TIME[l_start_index],'dd/mm/yyyy'),'dd/mm/yyyy') l_cal_event_end_date = TO_DATE(TO_CHAR(PER_EXT_CAL_COVERAGE_END_DATE_TIME[l_start_index],'dd/mm/yyyy'),'dd/mm/yyyy') L_Cal_event_Cov_Node = PER_EXT_CAL_COVERAGE_COVERAGE_NODE[l_start_index] l_Cal_event_duration = days_between(l_cal_event_end_date, l_cal_event_start_date) +1 L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_cal_event_start_date : '||to_char(l_cal_event_start_date) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_cal_event_end_date : '||to_char(l_cal_event_end_date) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->L_Cal_event_Cov_Node : '||L_Cal_event_Cov_Node ) l_increment_absence_days = l_absence_start_date while (l_increment_absence_days <= l_absence_end_date) loop ( IF (l_increment_absence_days >= l_cal_event_start_date AND l_increment_absence_days <= l_cal_event_end_date AND L_Emp_Asg_BU = L_Cal_event_Cov_Node) Then ( L_Log =ESS_LOG_WRITE(' '||PER_ASG_PERSON_NUMBER||'->Public Holiday date in current Period : '||to_char(l_increment_absence_days)||' Holiday Name: '||PER_EXT_CAL_COVERAGE_NAME[l_start_index] ) l_ph_count = l_ph_count +1 ) l_increment_absence_days = ADD_DAYS(l_increment_absence_days, 1) ) ) l_start_index = PER_EXT_CAL_COVERAGE_START_DATE_TIME.NEXT(l_start_index,-1234) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_absence_duration : '||to_char(l_absence_duration) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_ph_count : '||to_char(l_ph_count) ) IF l_ph_count > l_absence_duration THEN ( l_final_duration = 0 ) ELSE l_final_duration = l_absence_duration - l_ph_count ) DURATION = l_final_duration l_log = ess_log_write('abs_duration value is:'||to_char(DURATION)) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LBN Absence 7 Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') l_hr_asg_id = ASG_HR_ASG_ID l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') l_debug = ess_log_write('ln_entry_duration_d- First - ' + to_char(ln_entry_duration_d)) ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ld_period_end_date - ' + to_char(ld_period_end_date)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') or (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) l_debug = ess_log_write('DURATION - ' + to_char(DURATION)) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Absence 6 Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') l_hr_asg_id = ASG_HR_ASG_ID l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') l_debug = ess_log_write('ln_entry_duration_d- First - ' + to_char(ln_entry_duration_d)) ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ld_period_end_date - ' + to_char(ld_period_end_date)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) l_debug = ess_log_write('DURATION - ' + to_char(DURATION)) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Absence 5 Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') l_hr_asg_id = ASG_HR_ASG_ID l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) Term_off = GET_VALUE_SET('GET_TEACHERS_TERM_OFF_DAYS','|=P_DAY='''||to_char(ld_period_start_date,'DD-MM-YYYY')||'''') Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Term_off='Y' THEN ( ln_entry_duration_d=0 ) ELSE ( ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('Term_off - ' + (Term_off)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "NCC_TEACHERS_PLAN_DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) Term_off = GET_VALUE_SET('GET_TEACHERS_TERM_OFF_DAYS','|=P_DAY='''||to_char(ld_period_start_date,'YYYY-MM-DD')||'''') l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('Term_off - ' + (Term_off)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Term_off='Y' THEN ( ln_entry_duration_d=0 ) ELSE ( ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ADMIN_PLAN_DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "WC SICKNESS PLAN DURATION FOR TCH_NTCH",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text),IV_START_DURATION(number),IV_END_DURATION(number) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_debug = ess_log_write('Assignment Number: '+PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Employee Group: '+PER_ASG_PEOPLE_GROUP_SEGMENT1) l_debug = ess_log_write('Employee Sub - Group: '+PER_ASG_PEOPLE_GROUP_SEGMENT2) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) l_sub_date = substr(to_char(IV_START_DATE),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_column='HOLIDAYS' l_attrib='TEACHERS_CALENDAR' ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) Term_off = GET_VALUE_SET('GET_TEACHERS_CALENDAR','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_attrib|| '''') l_debug = ess_log_write('Term_off - ' + (Term_off)) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('IV_START_DURATION - ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('IV_END_DURATION - ' + to_char(IV_END_DURATION)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) l_debug = ess_log_write('DAY - ' + (DAY)) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) Employee_Group = PER_ASG_PEOPLE_GROUP_SEGMENT1 IF((upper(Employee_Group) <> 'TEACHER') ) THEN ( IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') OR (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 l_debug = ess_log_write('ln_entry_duration_d_0 - ' + to_char(ln_entry_duration_d)) ) ) ELSE ( IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Term_off='Y' THEN ( ln_entry_duration_d=0 ) else ( ln_entry_duration_d=1 l_debug = ess_log_write('ln_entry_duration_d_1 - ' + to_char(ln_entry_duration_d)) ) ) ELSE ( ln_entry_duration_d=0 l_debug = ess_log_write('ln_entry_duration_d_0 - ' + to_char(ln_entry_duration_d)) ) ) If ln_entry_duration_d=1 AND (IV_START_DURATION=.5 OR IV_END_DURATION=.5) THEN ( ln_entry_duration_d=.5 ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LBH Absence 7 Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') l_hr_asg_id = ASG_HR_ASG_ID l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') l_debug = ess_log_write('ln_entry_duration_d- First - ' + to_char(ln_entry_duration_d)) ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ld_period_end_date - ' + to_char(ld_period_end_date)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') or (DAY='SUN') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) l_debug = ess_log_write('DURATION - ' + to_char(DURATION)) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Absence 6 Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') l_hr_asg_id = ASG_HR_ASG_ID l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') l_debug = ess_log_write('ln_entry_duration_d- First - ' + to_char(ln_entry_duration_d)) ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ld_period_end_date - ' + to_char(ld_period_end_date)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) l_debug = ess_log_write('DURATION - ' + to_char(DURATION)) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Absence 5 Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') l_hr_asg_id = ASG_HR_ASG_ID l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) Term_off = GET_VALUE_SET('GET_TEACHERS_TERM_OFF_DAYS','|=P_DAY='''||to_char(ld_period_start_date,'DD-MM-YYYY')||'''') Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Term_off='Y' THEN ( ln_entry_duration_d=0 ) ELSE ( ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('Term_off - ' + (Term_off)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBL Officers Plan Duration",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') THEN ( ln_entry_duration_d=1 ) ELSE ( ln_entry_duration_d=0 ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Teachers Plan Duration",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) Term_off = GET_VALUE_SET('GET_TEACHERS_TERM_OFF_DAYS','|=P_DAY='''||to_char(ld_period_start_date,'DD-MM-YYYY')||'''') l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('Term_off - ' + (Term_off)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Term_off='Y' THEN ( ln_entry_duration_d=0 ) ELSE ( ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL SSP Calendar Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR PAY_PAYROLL_ASG_ASSIGNMENT_ID IS -1 DEFAULT FOR l_assignment_detail IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 IV_TOTALDURATION=0 Assignment=0 l_assignment_detail=0 i=1 j=0 l_person_id=0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') start=to_char(IV_START_DATE,'DD') end=to_char(IV_END_DATE,'DD') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') l_person_id=GET_CONTEXT(PERSON_ID,0) l_debug = ess_log_write('l_person_id= '+ to_char(l_person_id)) l_debug = ess_log_write('start= '+ start) l_debug = ess_log_write('end= '+ end) ln_entry_duration_d=1 DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "SSP PLAN DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE), IV_START_TIME(TEXT), IV_END_TIME(TEXT) CUSTOM_MESSAGE = 'X' CUSTOM_MESSAGE = ESS_LOG_WRITE('******************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* SSP PLAN DURATION *') CUSTOM_MESSAGE = ESS_LOG_WRITE('******************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') ENTRY_DURATION = 0 DURATION = 0 PRIMARY_FLAG = 'X' HR_ASG_ID = ASG_HR_ASG_ID PERIOD_START_DATE = TO_DATE(TO_CHAR(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') EFF_DATE = PERIOD_START_DATE SET_INPUT ('hr_id', HR_ASG_ID) SET_INPUT ('eff_date', EFF_DATE) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') PRIMARY_FLAG = GET_OUTPUT('X_OUTPUT_TEXT', PRIMARY_FLAG ) CUSTOM_MESSAGE = ESS_LOG_WRITE('PRIMARY_FLAG = ' || (PRIMARY_FLAG)) PERIOD_END_DATE = TO_DATE(TO_CHAR(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ENTRY_DURATION = GET_PAY_AVAILABILITY ('ASSIGN', PERIOD_START_DATE, PERIOD_END_DATE, 'Y', 'Y', 'Y', 'Y', 'D') PERIOD_START_DATE = TO_DATE(TO_CHAR(IV_START_DATE,'DD/MM/RRRR')) PERIOD_END_DATE = TO_DATE(TO_CHAR(IV_END_DATE,'DD/MM/RRRR')) IF PRIMARY_FLAG ='N' THEN ( ENTRY_DURATION = 0 ) ELSE ( ENTRY_DURATION = 1 ) CUSTOM_MESSAGE = ESS_LOG_WRITE('PERIOD_START_DATE = ' || TO_CHAR(PERIOD_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('ENTRY_DURATION || ' || TO_CHAR(ENTRY_DURATION)) DURATION = ROUND(ENTRY_DURATION,2) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SIX DAY PLAN DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) ENTRY_DURATION = 0 DURATION = 0 PERIOD_START_DATE = TO_DATE(TO_CHAR(IV_START_DATE,'DD/MM/RRRR')) ld_period_start_char = To_char(PERIOD_START_DATE,'YYYY/MM/DD') l_eff_date = get_context(EFFECTIVE_DATE, '1900/01/01 00:00:00'(date)) Bank_off = 'X' Bank_off = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||(ld_period_start_char)||'''') Contract = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME SCHEME_TYPE = GET_TABLE_VALUE('SICKNESS_SCHEME_TYPE','SICKNESS_SCHEME',contract,l_eff_date) Day = GET_DATE_DAY_OF_WEEK(PERIOD_START_DATE) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') THEN ( IF Bank_off='PH' THEN ( ENTRY_DURATION = 0 ) else ( ENTRY_DURATION = 1 ) ) ELSE ( ENTRY_DURATION = 0 ) If ENTRY_DURATION=1 AND (IV_START_DURATION=.5 OR IV_END_DURATION=.5) THEN ( ENTRY_DURATION=.5 ) if (SCHEME_TYPE = 'Fire Standard') then ( IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') OR (DAY='SAT') OR (DAY='SUN')THEN ( ENTRY_DURATION = 1 ) ) DURATION = ROUND(ENTRY_DURATION,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "FIVE DAY PLAN DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR IV_START_DURATION IS 100 DEFAULT FOR IV_END_DURATION IS 200 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) ld_period_start_char = To_char(ld_period_start_date,'YYYY/MM/DD') Term_off = GET_VALUE_SET('SCC_SCHOOL_HOLIDAYS_VS','|=P_DATE='''||(ld_period_start_char)||'''') Bank_off = GET_VALUE_SET('SCC_BANK_HOLIDAYS_VS','|=P_DATE='''||(ld_period_start_char)||'''') l_debug = ess_log_write('ld_period_start_date - ' + (ld_period_start_char)) l_debug = ess_log_write('Term_off - ' + (Term_off)) l_debug = ess_log_write('Bank_off - ' + (Bank_off)) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Term_off='SH' THEN ( ln_entry_duration_d=0 ) ELSE ( ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) If ln_entry_duration_d=1 AND (IV_START_DURATION=.5 OR IV_END_DURATION=.5) THEN ( ln_entry_duration_d=.5 ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "PATERNITY_LEAVE_ADDITIONAL_PLAN_DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_START_DATE (DATE), IV_END_DATE (DATE), IV_START_TIME(TEXT), IV_END_TIME(TEXT) CUSTOM_MESSAGE = 'X' CUSTOM_MESSAGE = ESS_LOG_WRITE('*********************************') CUSTOM_MESSAGE = ESS_LOG_WRITE('* PAT LEAVE ADDL PLAN DURATION *') CUSTOM_MESSAGE = ESS_LOG_WRITE('*********************************') CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') ENTRY_DURATION = 0 DURATION = 0 PRIMARY_FLAG = 'X' HR_ASG_ID = ASG_HR_ASG_ID PERIOD_START_DATE = TO_DATE(TO_CHAR(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') EFF_DATE = PERIOD_START_DATE SET_INPUT ('hr_id', HR_ASG_ID) SET_INPUT ('eff_date', EFF_DATE) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') PRIMARY_FLAG = GET_OUTPUT('X_OUTPUT_TEXT', PRIMARY_FLAG ) CUSTOM_MESSAGE = ESS_LOG_WRITE('PRIMARY_FLAG = ' || (PRIMARY_FLAG)) PERIOD_END_DATE = TO_DATE(TO_CHAR(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ENTRY_DURATION = GET_PAY_AVAILABILITY ('ASSIGN', PERIOD_START_DATE, PERIOD_END_DATE, 'Y', 'Y', 'Y', 'Y', 'D') PERIOD_START_DATE = TO_DATE(TO_CHAR(IV_START_DATE,'DD/MM/RRRR')) PERIOD_END_DATE = TO_DATE(TO_CHAR(IV_END_DATE,'DD/MM/RRRR')) IF PRIMARY_FLAG ='N' THEN ( ENTRY_DURATION = 0 ) ELSE ( ENTRY_DURATION = 1 ) CUSTOM_MESSAGE = ESS_LOG_WRITE('PERIOD_START_DATE = ' || TO_CHAR(PERIOD_START_DATE)) CUSTOM_MESSAGE = ESS_LOG_WRITE('ENTRY_DURATION || ' || TO_CHAR(ENTRY_DURATION)) DURATION = ROUND(ENTRY_DURATION,2) CUSTOM_MESSAGE = ESS_LOG_WRITE(' ') RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Plan Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    }
]