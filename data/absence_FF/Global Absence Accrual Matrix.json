[
    {
        "FORMULA_NAME": "ORA_HRX_FR_VACATION_ACCRUAL",
        "answer": "DEFAULT FOR ANC_ABS_PLN_CALENDAR_START_MONTH is '06' DEFAULT FOR ANC_ABS_PLN_NAME is 'Unknown' DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_ACR_END_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_ABS_DURATION IS 0 DEFAULT FOR ORA_HRX_FR_ABS_ACR_CURRENT_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_CP1_DURATION IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION1 IS 'N' DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER1 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER3 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER4 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER5 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER6 IS 0 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE) ret = ess_log_write ( '-- Start of Formula ------') l_start_date = '4712/12/31 00:00:00' (DATE) l_date = '2030/05/31 00:00:00' (DATE) l_end_date = '4712/12/31 00:00:00' (DATE) accrual =0.0 adjustmentvalues[1] = 0.0 adjustmentdates[1] = '2018/05/31 00:00:00' (DATE) adjustmenttypes[1] = 'Compensatory' l_consumed_cp1 = 0 l_seniority_days = 0 l_seniority =0 l_seniority_unrounded =0 if ANC_ABS_PLN_INFORMATION_NUMBER1 WAS NOT DEFAULTED THEN accrual_plan_cp1 =ANC_ABS_PLN_INFORMATION_NUMBER1 if ANC_ABS_PLN_INFORMATION_NUMBER2 WAS NOT DEFAULTED THEN accrual_plan_cp2 =ANC_ABS_PLN_INFORMATION_NUMBER2 IF GET_CONTEXT(ACCRUAL_PLAN_ID,0) = accrual_plan_cp2 THEN ( lc_variable_to_be_logged = ' Start Adjustment cp2: ' lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF to_char(IV_ACCRUALPERIODENDDATE, 'mm') = ANC_ABS_PLN_CALENDAR_START_MONTH THEN ( CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = accrual_plan_cp1) ( IF ANC_ABS_PLN_CALENDAR_START_MONTH = '01' THEN ( l_year= SUBSTRING(to_char((TO_NUMBER(to_char(IV_ACCRUALPERIODENDDATE, 'YYYY')) -1)),3,2) l_month ='12' ) ELSE ( l_year= to_char(IV_ACCRUALPERIODENDDATE, 'yy') l_month= SUBSTRING(to_char((TO_NUMBER(to_char(IV_ACCRUALPERIODENDDATE, 'mm')) -1)),1,2) ) l_date = LAST_DAY(TO_DATE('01' || '/' || l_month || '/' || l_year, 'dd/mm/yy')) lc_variable_to_be_logged = ' Date used for getting balance cp1: '|| to_char(l_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_date) ( accrual = ROUNDUP(get_plan_balance(ANC_ABS_PLN_NAME)) lc_variable_to_be_logged = ' Date used for balance cp1: '|| to_char(l_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' balance cp1 to be transfered: '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) adjustmentvalues[1] = accrual adjustmentdates[1] = IV_ACCRUALPERIODSTARTDATE adjustmenttypes[1] = 'Compensatory' accrual = 0 lc_variable_to_be_logged = ' Adjustement date: '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' Adjustment amount: '|| to_char(adjustmentvalues[1]) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) ) ) ) IF GET_CONTEXT(ACCRUAL_PLAN_ID,0) = accrual_plan_cp1 THEN ( lc_variable_to_be_logged = ' Start Accrual cp1: ' lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') != 0 THEN ( accrual = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') lc_variable_to_be_logged = 'Accrual already computed for the period so let accrual as it is : '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) return accrual ) IF to_char(IV_ACCRUALPERIODENDDATE, 'mm') = to_char(PER_TERM_REL_DATE_START, 'mm') THEN IF to_char(IV_ACCRUALPERIODENDDATE, 'yy') = to_char(PER_TERM_REL_DATE_START, 'yy') THEN ( accrual = IV_ACCRUAL * (days_BETWEEN(IV_ACCRUALPERIODENDDATE, PER_TERM_REL_DATE_START)+1) lc_variable_to_be_logged = ' days between: '|| to_char((days_BETWEEN(IV_ACCRUALPERIODENDDATE, PER_TERM_REL_DATE_START)+1)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) accrual = accrual / to_number(to_char(LAST_DAY(IV_ACCRUALPERIODENDDATE),'DD')) lc_variable_to_be_logged = ' nuumber days of the month: '|| to_char(LAST_DAY(IV_ACCRUALPERIODENDDATE),'DD') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) accrual = roundup(accrual,2) lc_variable_to_be_logged = 'Accrual hired person: '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) return accrual ) l_month=to_char(IV_ACCRUALPERIODENDDATE, 'mm') IF to_number(l_month) >= TO_NUMBER(ANC_ABS_PLN_CALENDAR_START_MONTH) THEN l_year= to_char(IV_ACCRUALPERIODENDDATE, 'yy') ELSE l_year= SUBSTRING(to_char((TO_NUMBER(to_char(IV_ACCRUALPERIODENDDATE, 'YYYY')) -1)),3,2) lc_variable_to_be_logged = 'The year is : '|| l_year lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_start_date_plan = TO_DATE('01/'|| ANC_ABS_PLN_CALENDAR_START_MONTH || '/' || l_year, 'dd/mm/yy') lc_variable_to_be_logged = 'The start date plan is : '|| to_char(l_start_date_plan,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_start_date = GREATEST(l_start_date_plan , PER_TERM_REL_DATE_START) lc_variable_to_be_logged = 'The start date is : '|| to_char(l_start_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_end_date = LEAST (IV_ACCRUALPERIODENDDATE,PER_TRM_REL_ACTUAL_TERMINATION_DATE) lc_variable_to_be_logged = 'The end date is : '|| to_char(l_end_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_ACCRUALPERIODENDDATE) ( l_no_of_days=days_BETWEEN(l_end_date, l_start_date) + 1 - ORA_HRX_FR_ABS_TOT_ABS_DURATION lc_variable_to_be_logged = 'The number of days is : '|| to_char(l_no_of_days) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (PER_TRM_REL_ACTUAL_TERMINATION_DATE was not DEFAULTED) THEN l_no_of_month=l_no_of_days/28 ELSE l_no_of_month=TRUNC(l_no_of_days/28,0) lc_variable_to_be_logged = 'The number of 28 days is : '|| to_char(l_no_of_month) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_total_accrual_uncapped = IV_ACCRUAL* l_no_of_month l_total_accrual = LEAST(l_total_accrual_uncapped,25) lc_variable_to_be_logged = 'The total accrual is : '|| to_char(l_total_accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF to_char(IV_ACCRUALPERIODENDDATE, 'mm') = ANC_ABS_PLN_CALENDAR_START_MONTH THEN current_balance = 0 ELSE current_balance = get_plan_balance(ANC_ABS_PLN_NAME) lc_variable_to_be_logged = 'Previous balance is : '|| to_char(current_balance) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) IF to_char(IV_ACCRUALPERIODENDDATE, 'mm') = ANC_ABS_PLN_CALENDAR_START_MONTH THEN l_consumed_cp1 = ORA_HRX_FR_ABS_TOT_CP1_DURATION ELSE l_consumed_cp1 = ORA_HRX_FR_ABS_TOT_CP1_DURATION lc_variable_to_be_logged = 'Consumed cp1 : '|| to_char(l_consumed_cp1) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF ANC_ABS_PLN_INFORMATION1 = 'Y' THEN ( l_day= to_char(PER_TERM_REL_DATE_START, 'dd') l_month=to_char(PER_TERM_REL_DATE_START, 'mm') l_year =to_char(l_start_date_plan, 'yy') l_anniversary_hire_date= TO_DATE(l_day || '/' || l_month || '/' || l_year, 'dd/mm/yy') l_day= to_char(LAST_DAY(l_anniversary_hire_date),'dd') if l_day = '29' then l_day='28' l_anniversary_hire_date= TO_DATE(l_day || '/' || l_month || '/' || l_year, 'dd/mm/yy') IF l_anniversary_hire_date < l_start_date_plan THEN ( l_year= SUBSTRING(to_char((TO_NUMBER(to_char(l_anniversary_hire_date, 'YYYY')) +1)),3,2) l_anniversary_hire_date= TO_DATE(l_day || '/' || l_month || '/' || l_year, 'dd/mm/yy') ) lc_variable_to_be_logged = 'The anniversary year is : '|| l_year lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'The anniversary hire date is : '|| to_char(l_anniversary_hire_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF IV_ACCRUALPERIODENDDATE >= l_anniversary_hire_date THEN ( l_seniority_unrounded= days_BETWEEN(IV_ACCRUALPERIODENDDATE, PER_TERM_REL_DATE_START)/365 l_seniority= trunc(l_seniority_unrounded,0) IF l_seniority >= 4 THEN l_seniority_days= 2 lc_variable_to_be_logged = 'Accrual Seniority day: '|| to_char(l_seniority_days) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) ) accrual =l_total_accrual - current_balance + l_consumed_cp1 + l_seniority_days IF (PER_TRM_REL_ACTUAL_TERMINATION_DATE was not DEFAULTED) THEN ( adjustmentvalues[1] = TRUNC(accrual,2) adjustmentdates[1] = PER_TRM_REL_ACTUAL_TERMINATION_DATE adjustmenttypes[1] = 'Compensatory' accrual = 0 lc_variable_to_be_logged = ' Adjustement date: '|| to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' Adjustment amount: '|| to_char(adjustmentvalues[1]) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) lc_variable_to_be_logged = 'The accrual cp1 is : '||to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) lc_variable_to_be_logged = 'Accrual : '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "write a  formula calculates the number of service days for an employee and determines their pay factors and entitlements based on their length of service. It adjusts the expected childbirth date to the nearest Monday and calculates the total service days. If the employee has more than 26 weeks of service, they receive a pay factor of 100 and an entitlement of 7 days for Band 1, while Bands 2 and 3 have no entitlements.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "ORA_HRX_IT_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT FOR ANC_ABS_PLN_NAME is 'Unknown' DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_IT_ABS_TOT_ABS_DURATION IS 0 DEFAULT FOR ANC_ABS_PLN_LEG_GROUPING_CD IS 'UNKNOWN' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE) ret = ess_log_write ( '-- Start of Formula ------') l_start_date = '4712/12/31 00:00:00' (DATE) l_date = '2030/05/31 00:00:00' (DATE) l_end_date = '4712/12/31 00:00:00' (DATE) accrual =0.0 l_employment_days = 0.0 adjustmentvalues[1] = 0.0 adjustmentdates[1] = '2018/05/31 00:00:00' (DATE) adjustmenttypes[1] = 'Compensatory' lc_variable_to_be_logged = ' vacation accrual: ' || ANC_ABS_PLN_LEG_GROUPING_CD lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') != 0 THEN ( accrual = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') lc_variable_to_be_logged = 'Accrual already computed for the period so let accrual as it is : '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) return accrual ) l_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE , PER_TERM_REL_DATE_START) l_end_date = LEAST (IV_ACCRUALPERIODENDDATE,PER_TRM_REL_ACTUAL_TERMINATION_DATE) lc_variable_to_be_logged = ' days between start date and en date: '|| to_char((days_BETWEEN(l_end_date, l_start_date)+1)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_employment_days = days_BETWEEN(l_end_date, l_start_date) +1 CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_ACCRUALPERIODENDDATE) ( l_employment_days= l_employment_days - ORA_HRX_IT_ABS_TOT_ABS_DURATION lc_variable_to_be_logged = 'The number of days after taking in account not usefull absence is : '|| to_char(l_employment_days) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) IF l_employment_days >= 15 THEN accrual = IV_ACCRUAL IF (ANC_ABS_PLN_LEG_GROUPING_CD = 'ORA_HRX_IT_ADD_LEA') THEN ( lc_variable_to_be_logged = 'EMPLOYMENT CATEGORY : ' || PER_ASG_EMPLOYMENT_CATEGORY || ' FTE ' || to_char(PER_ASG_FTE_VALUE) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (PER_ASG_EMPLOYMENT_CATEGORY = 'PT' OR PER_ASG_EMPLOYMENT_CATEGORY = 'IT_FIXED_HORIZ' OR PER_ASG_EMPLOYMENT_CATEGORY = 'IT_TEMP_HORIZ' OR PER_ASG_EMPLOYMENT_CATEGORY = 'IT_TEMP_VERT' OR PER_ASG_EMPLOYMENT_CATEGORY ='PR' ) THEN ( accrual = accrual * PER_ASG_FTE_VALUE ) ) ELSE ( IF (PER_ASG_EMPLOYMENT_CATEGORY = 'IT_TEMP_VERT' ) THEN ( accrual = accrual * PER_ASG_FTE_VALUE ) ) IF (PER_TRM_REL_ACTUAL_TERMINATION_DATE was not DEFAULTED) THEN ( adjustmentvalues[1] = accrual adjustmentdates[1] = PER_TRM_REL_ACTUAL_TERMINATION_DATE adjustmenttypes[1] = 'Compensatory' accrual = 0 lc_variable_to_be_logged = ' Adjustement date: '|| to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' Adjustment amount: '|| to_char(adjustmentvalues[1]) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) lc_variable_to_be_logged = 'Accrual : '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "Calculates prorated annual leave accrual for contractors in Thailand based on band changes. Determines the number of band changes within the accrual period, assigns accrual rates before and after each change, and restricts accrual during unpaid, maternity, emergency, or Hajj leave. Adjusts accrual based on absence days and returns the final prorated accrual value.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "ORA_HRX_DE_ANNUAL_LEAVE",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_NOTIFIED_TERMINATION_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_NOTIFIED_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_TRM_NORMAL_HOURS IS 0 DEFAULT FOR PER_PER_DATE_OF_BIRTH IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_DATE_PROBATION_END IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_INFORMATION_NUMBER2 IS 0 DEFAULT FOR PER_ASG_INFORMATION4 IS ' ' DEFAULT FOR PER_ASG_INFORMATION_DATE1 IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_INFORMATION_NUMBER3 IS 0 DEFAULT FOR PER_ASG_INFORMATION5 IS ' ' DEFAULT FOR PER_ASG_INFORMATION6 IS ' ' DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER3 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION1 IS ' ' DEFAULT FOR ANC_ABS_PLN_INFORMATION2 IS ' ' DEFAULT FOR PER_PERSON_DISABILITY_LEG_DDF_DE_HRX_DE_DIS_DEGREE is ' ' DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PROCD_DATE IS '1900/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_TYPE is ' ' DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_VALUE is 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PL_ID is ' ' l_hire_date = '0001/01/01 00:00:00' (DATE) l_termination_date = '4712/12/31 00:00:00' (DATE) l_termination_announced_date = '4712/12/31 00:00:00' (DATE) l_birth_date = '0001/01/01 00:00:00' (DATE) l_annual_vacation = 0.0 l_disability_degree = ' ' l_work_days_per_week = 0.0 l_company_work_days_per_week = 0.0 l_prorata_temporis = 'Y' l_waiting_months = 0.0 l_waiting_period_start_date = '0001/01/01 00:00:00' (DATE) l_accrue_vacation = 'N' l_accrual_pct = 0.0 l_normal_hours = 40.0 l_effective_date = '0001/01/01 00:00:00' (DATE) l_null_date = '0001/01/01 00:00:00' (DATE) l_accrue_vacation = 'N' l_accrual_pct = 0.0 l_disability_degree = '0' IF PER_TERM_REL_DATE_START WAS NOT DEFAULTED THEN l_hire_date = PER_TERM_REL_DATE_START IF PER_TRM_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE IF PER_TRM_REL_NOTIFIED_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_announced_date = PER_TRM_REL_NOTIFIED_TERMINATION_DATE IF PER_TRM_NORMAL_HOURS WAS NOT DEFAULTED THEN l_normal_hours = PER_TRM_NORMAL_HOURS if (to_text(l_hire_date,'YYYY')= '0001') then ( IF PER_ASG_REL_DATE_START WAS NOT DEFAULTED THEN l_hire_date = PER_ASG_REL_DATE_START IF PER_ASG_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE IF PER_ASG_REL_NOTIFIED_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_announced_date = PER_ASG_REL_NOTIFIED_TERMINATION_DATE IF PER_ASG_NORMAL_HOURS WAS NOT DEFAULTED THEN l_normal_hours = PER_ASG_NORMAL_HOURS ) IF PER_PER_DATE_OF_BIRTH WAS NOT DEFAULTED THEN l_birth_date = PER_PER_DATE_OF_BIRTH IF PER_PERSON_DISABILITY_LEG_DDF_DE_HRX_DE_DIS_DEGREE WAS NOT DEFAULTED THEN l_disability_degree = PER_PERSON_DISABILITY_LEG_DDF_DE_HRX_DE_DIS_DEGREE l_effective_date = GET_CONTEXT( EFFECTIVE_DATE, to_date('0001-01-01','YYYY-MM-DD')) l_waiting_period_start_date = l_null_date l_annual_vacation = 0.0 l_work_days_per_week = 0.0 l_company_work_days_per_week = 0.0 l_prorata_temporis = ' ' l_emp_annual_leave_days = 0 l_emp_work_days_per_week = 0 l_emp_irregular_wt_distribution = 'N' l_waiting_period_start_date = '0001/01/01 00:00:00' (DATE) l_emp_waiting_period = -1 l_emp_waiting_units = 'X' l_emp_prorata_temporis = ' ' l_pln_annual_leave_days = 0 l_pln_work_days_per_week = 0 l_pln_waiting_period = -1 l_pln_waiting_units = 'X' l_pln_prorata_temporis = ' ' l_term_id = 0 l_assignment_id = 0 l_term_id = GET_CONTEXT( HR_TERM_ID, 0) l_assignment_id = GET_CONTEXT( HR_ASSIGNMENT_ID, 0) l_level_id = 0 IF PER_ASG_INFORMATION_NUMBER1 WAS NOT DEFAULTED OR PER_ASG_INFORMATION_NUMBER2 WAS NOT DEFAULTED OR PER_ASG_INFORMATION_NUMBER3 WAS NOT DEFAULTED OR PER_ASG_INFORMATION_DATE1 WAS NOT DEFAULTED THEN ( l_level_id = l_assignment_id ) ELSE ( l_level_id = l_term_id ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_level_id) ( IF PER_ASG_INFORMATION_NUMBER1 WAS NOT DEFAULTED THEN ( l_emp_annual_leave_days = PER_ASG_INFORMATION_NUMBER1 l_annual_vacation = l_emp_annual_leave_days ) ELSE ( IF ANC_ABS_PLN_INFORMATION_NUMBER1 WAS NOT DEFAULTED THEN l_pln_annual_leave_days = ANC_ABS_PLN_INFORMATION_NUMBER1 l_annual_vacation = l_pln_annual_leave_days ) IF PER_ASG_INFORMATION_NUMBER2 WAS NOT DEFAULTED THEN ( l_emp_work_days_per_week = PER_ASG_INFORMATION_NUMBER2 l_work_days_per_week = l_emp_work_days_per_week ) IF PER_ASG_INFORMATION4 WAS NOT DEFAULTED THEN l_emp_irregular_wt_distribution = PER_ASG_INFORMATION4 IF PER_ASG_INFORMATION_DATE1 WAS NOT DEFAULTED THEN l_waiting_period_start_date = PER_ASG_INFORMATION_DATE1 Else l_waiting_period_start_date = l_hire_date IF PER_ASG_INFORMATION_NUMBER3 WAS NOT DEFAULTED THEN l_emp_waiting_period = PER_ASG_INFORMATION_NUMBER3 IF PER_ASG_INFORMATION5 WAS NOT DEFAULTED THEN l_emp_waiting_units = PER_ASG_INFORMATION5 IF PER_ASG_INFORMATION6 WAS NOT DEFAULTED THEN ( l_emp_prorata_temporis = PER_ASG_INFORMATION6 l_prorata_temporis = l_emp_prorata_temporis ) ELSE IF ANC_ABS_PLN_INFORMATION2 WAS NOT DEFAULTED THEN ( l_pln_prorata_temporis = ANC_ABS_PLN_INFORMATION2 l_prorata_temporis = l_pln_prorata_temporis ) ELSE l_prorata_temporis = 'N' ) IF ANC_ABS_PLN_INFORMATION_NUMBER2 WAS NOT DEFAULTED THEN ( l_pln_work_days_per_week = ANC_ABS_PLN_INFORMATION_NUMBER2 l_company_work_days_per_week = l_pln_work_days_per_week ) if (l_work_days_per_week=0.0) then l_work_days_per_week = l_company_work_days_per_week IF ANC_ABS_PLN_INFORMATION_NUMBER3 WAS NOT DEFAULTED THEN l_pln_waiting_period = ANC_ABS_PLN_INFORMATION_NUMBER3 IF ANC_ABS_PLN_INFORMATION1 WAS NOT DEFAULTED THEN l_pln_waiting_units = ANC_ABS_PLN_INFORMATION1 l_final_waiting_period = 0 l_final_waiting_units = ' ' if l_emp_waiting_period >= 0 then ( l_final_waiting_period = l_emp_waiting_period l_final_waiting_units = l_pln_waiting_units ) else ( l_final_waiting_period = l_pln_waiting_period l_final_waiting_units = l_pln_waiting_units ) if (l_final_waiting_units = 'M') then ( l_waiting_months = l_final_waiting_period ) if (l_final_waiting_units = 'W') then ( l_waiting_months = ROUND (l_final_waiting_period / 4.25 ) ) if (l_final_waiting_units = 'D') then ( l_waiting_months = ROUND (l_final_waiting_period / 30 ) ) hire_date = l_hire_date termination_date = l_termination_date termination_announced_date = l_termination_announced_date birth_date = l_birth_date annual_vacation = l_annual_vacation disability_degree = l_disability_degree work_days_per_week = l_work_days_per_week company_work_days_per_week = l_company_work_days_per_week prorata_temporis = l_prorata_temporis waiting_months = l_waiting_months waiting_period_start_date = l_waiting_period_start_date accrue_vacation = l_accrue_vacation accrual_pct = l_accrual_pct irregular_worktime = l_emp_irregular_wt_distribution weekly_normal_hours = l_normal_hours c_min_vacation_days = 20 c_min_vacation_days_lt16 = 30 c_min_vacation_days_lt17 = 25 c_min_vacation_days_lt18 = 23 c_disabled_extra_vacation_days = 5 vacation_days = 0.0 l_vacation_days = 0.0 l_zero = 0.0 l_emp_age = 0 l_reference_date = '0001/01/01 00:00:00' (DATE) l_end_date = '0001/01/01 00:00:00' (DATE) l_months_since_hire = 0 l_months_since_waiting_start = 0 l_months_in_current_year = 0 l_workday_factor = 1 l_already_granted = 0 l_leg_vacation_days = 0 if (l_pln_work_days_per_week = 0) then ( temp = ESS_LOG_WRITE('Plan setup is missing company number of weekly work days') return l_zero ) if (termination_date < l_effective_date) then return l_zero l_begin_of_current_year = to_date( to_text(l_effective_date,'YYYY') || '0101' , 'YYYYMMDD') months_unrounded = months_between(l_begin_of_current_year, birth_date) years = months_unrounded / 12 l_emp_age = trunc(years) l_reference_date = GREATEST(hire_date, to_date( to_text(l_effective_date,'YYYY') || '0101' , 'YYYYMMDD')) l_end_date = LEAST (termination_date, to_date( to_text(l_effective_date,'YYYY') || '1231' , 'YYYYMMDD')) l_months_since_hire = trunc(MONTHS_BETWEEN (ADD_DAYS(l_effective_date,1), hire_date)) l_months_since_waiting_start = trunc(MONTHS_BETWEEN (ADD_DAYS(l_effective_date,1), waiting_period_start_date)) l_months_in_current_year = trunc(MONTHS_BETWEEN (ADD_DAYS(l_effective_date,1), l_reference_date)) l_months_between_reference_and_end = trunc(MONTHS_BETWEEN (ADD_DAYS(l_end_date,1), l_reference_date)) l_months_to_year_end = trunc(MONTHS_BETWEEN(ADD_DAYS(to_date( to_text(l_effective_date,'YYYY') || '1231' , 'YYYYMMDD'),1), l_reference_date)) if l_emp_age < 16 then l_vacation_days = c_min_vacation_days_lt16 else if l_emp_age < 17 then l_vacation_days = c_min_vacation_days_lt17 else if l_emp_age < 18 then l_vacation_days = c_min_vacation_days_lt18 else l_vacation_days = c_min_vacation_days l_leg_vacation_days = l_vacation_days l_vacation_days = GREATEST(annual_vacation, l_vacation_days) if to_num(disability_degree) >= 50 then ( l_vacation_days = l_vacation_days + c_disabled_extra_vacation_days l_leg_vacation_days = l_leg_vacation_days + c_disabled_extra_vacation_days ) l_workday_factor = work_days_per_week / company_work_days_per_week l_wd_index = 1 l_asg_effective_date = '4712/12/31 00:00:00' (DATE) l_asg_days_per_week = 0.0 l_interval_start = '4712/12/31 00:00:00' (DATE) l_interval1_end = '4712/12/31 00:00:00' (DATE) l_interval2_end = '4712/12/31 00:00:00' (DATE) l_prev_asg_days_per_week = 0.0 interval_workday_factor = 1.0 l_interval1 = 0.0 l_interval2 = 0.0 l_vacation1 = 0.0 l_vacation1min = 0.0 l_vacation2 = 0.0 l_vacation3 = 0.0 l_context_date = l_end_date l_temp_workday_factor = 0.0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_level_id) ( WHILE (l_context_date > l_reference_date) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_context_date) ( IF PER_ASG_EFFECTIVE_START_DATE WAS NOT DEFAULTED THEN ( l_asg_effective_date = PER_ASG_EFFECTIVE_START_DATE ) ELSE exit IF PER_ASG_INFORMATION_NUMBER2 WAS NOT DEFAULTED THEN l_asg_days_per_week = PER_ASG_INFORMATION_NUMBER2 ELSE l_asg_days_per_week = l_company_work_days_per_week if (l_wd_index = 1) then ( l_interval_start = l_asg_effective_date l_interval1_end = ADD_DAYS(l_context_date,1) l_interval2_end = ADD_DAYS(to_date( to_text(l_context_date,'YYYY') || '1231' , 'YYYYMMDD'),1) l_prev_asg_days_per_week = l_asg_days_per_week ) if (l_prev_asg_days_per_week <> l_asg_days_per_week) then ( if (irregular_worktime='Y') then interval_workday_factor = 1.0 else interval_workday_factor = l_prev_asg_days_per_week / company_work_days_per_week l_interval1 = TRUNC(MONTHS_BETWEEN (l_interval1_end, ADD_DAYS(l_context_date,1))) l_interval2 = TRUNC(MONTHS_BETWEEN (l_interval2_end, ADD_DAYS(l_context_date,1))) l_vacation1 = l_vacation1 + (ROUND(l_vacation_days * interval_workday_factor * l_interval1/12)) l_vacation2 = l_vacation2 + (ROUND(l_vacation_days * interval_workday_factor * l_interval2/12)) l_vacation1min = l_vacation1min + (ROUND(c_min_vacation_days * interval_workday_factor * l_interval1/12)) l_vacation3 = l_vacation3 + (ROUND ((l_leg_vacation_days * interval_workday_factor * l_interval2/12) + ((l_vacation_days - l_leg_vacation_days) * interval_workday_factor * l_interval1/12))) l_interval1_end = ADD_DAYS(l_context_date,1) l_interval2_end = l_interval1_end l_prev_asg_days_per_week = l_asg_days_per_week ) if (l_asg_effective_date <= l_reference_date) then ( if (irregular_worktime='Y') then interval_workday_factor = 1.0 else interval_workday_factor = l_asg_days_per_week / company_work_days_per_week l_interval1 = TRUNC(MONTHS_BETWEEN (l_interval1_end, l_reference_date)) l_interval2 = TRUNC(MONTHS_BETWEEN (l_interval2_end, l_reference_date)) l_vacation1 = l_vacation1 + (ROUND(l_vacation_days * interval_workday_factor * l_interval1/12)) l_vacation2 = l_vacation2 + (ROUND(l_vacation_days * interval_workday_factor * l_interval2/12)) l_vacation1min = l_vacation1min + (ROUND(c_min_vacation_days * interval_workday_factor * l_interval1/12)) l_vacation3 = l_vacation3 + (ROUND ((l_leg_vacation_days * interval_workday_factor * l_interval2/12) + ((l_vacation_days - l_leg_vacation_days) * interval_workday_factor * l_interval1/12))) ) ) l_wd_index = l_wd_index + 1 l_context_date = ADD_DAYS(l_asg_effective_date,-1) if (l_wd_index > 100) then exit ) ) if (irregular_worktime='Y') then l_workday_factor = 1.0 b_january = 0 b_no_waiting = 0 b_last_waiting_month = 0 b_six_months_passed = 0 b_grant_minimum = 0 b_year_end_in_waiting = 0 b_term_in_waiting = 0 b_term_in_current_year = 0 b_uncommitted_data = 0 if to_num(to_text(l_effective_date,'MM'))= 1 then b_january = 1 if ((waiting_months = 0) and (to_text(waiting_period_start_date,'YYYY') = to_text(l_effective_date,'YYYY')) and (to_text(waiting_period_start_date,'MM') = to_text(l_effective_date,'MM')) and (to_num(to_text(waiting_period_start_date,'MM')) > 1)) then ( b_no_waiting = 1 ) if ((l_months_since_hire = waiting_months) and (termination_date > ADD_MONTHS (waiting_period_start_date, waiting_months))) then ( b_last_waiting_month = 1 ) if ((l_months_since_hire = 6) and (waiting_months > 6)) then ( temp = PAY_INTERNAL_LOG_WRITE('HRX_DE > setting b_six_months_passed') b_six_months_passed = 1 ) if ((waiting_months > 6) and (l_months_since_hire > 6) and (l_months_since_hire < waiting_months) and (b_january =1)) then ( b_grant_minimum = 1 ) if (trunc(MONTHS_BETWEEN (ADD_DAYS(to_date( to_text(l_effective_date,'YYYY') || '1231' , 'YYYYMMDD'),1),waiting_period_start_date)) < waiting_months) then b_year_end_in_waiting = 1 if trunc(MONTHS_BETWEEN (termination_date, waiting_period_start_date)) < waiting_months then b_term_in_waiting = 1 if trunc(MONTHS_BETWEEN (termination_date, waiting_period_start_date)) < waiting_months and b_january = 1 then b_term_in_waiting = 1 if (to_text(l_effective_date, 'YYYY') = to_text(l_termination_date, 'YYYY')) then b_term_in_current_year = 1 l_accrued_ytd= 0 l_accrued_current_month = 0 l_accrual_plan_id = GET_CONTEXT( ACCRUAL_PLAN_ID, 0) l_number_of_month_stored = 0 l_expected_months = 0 index = ABS_EXT_ACR_ENT_PROCD_DATE.FIRST(-1) WHILE (ABS_EXT_ACR_ENT_PROCD_DATE.EXISTS(index)) LOOP ( l_proc_date = ABS_EXT_ACR_ENT_PROCD_DATE[index] l_plan_id = ABS_EXT_ACR_ENT_PL_ID[index] l_acrl_type = ABS_EXT_ACR_ENT_TYPE[index] l_acrl_value = ABS_EXT_ACR_ENT_VALUE[index] if (to_num(l_plan_id) = l_accrual_plan_id AND l_proc_date >= to_date( to_text(l_effective_date,'YYYY') || '0101' , 'YYYYMMDD') AND l_proc_date < l_effective_date AND l_acrl_type = 'ACRL') then ( l_accrued_ytd = l_accrued_ytd + l_acrl_value l_number_of_month_stored = l_number_of_month_stored + 1 ) index = ABS_EXT_ACR_ENT_PROCD_DATE.NEXT(index ,-1) ) l_expected_months = TRUNC(MONTHS_BETWEEN(ADD_DAYS(l_effective_date,1),TO_DATE((to_text(l_reference_date,'YYYYMM')||'01'),'YYYYMMDD') )) -1 if (l_number_of_month_stored < l_expected_months) then b_uncommitted_data = 1 if termination_date < l_effective_date then vacation_days = 0.0 else if (l_months_since_waiting_start > waiting_months) then ( vacation_days = l_vacation2 if (to_text(termination_date,'YYYY') = to_text(l_effective_date,'YYYY')) then ( if (to_num(to_text(termination_date,'MM')) <= 6) then vacation_days = l_vacation1 else if (prorata_temporis = 'Y') then vacation_days = l_vacation3 ) vacation_days = vacation_days - l_accrued_ytd if (b_term_in_current_year =1 and b_uncommitted_data = 1) then ( vacation_days = 0 ) ) else if (b_no_waiting = 1) then ( vacation_days = l_vacation1 ) else if (b_term_in_waiting = 1) then ( vacation_days = l_vacation1 vacation_days = vacation_days - l_accrued_ytd if b_uncommitted_data = 1 then ( vacation_days = 0 ) ) else if (b_year_end_in_waiting = 1 and (DAYS_BETWEEN(l_effective_date, hire_date) < 31 )) then ( vacation_days = l_vacation1 if ((waiting_months > 6) and (l_months_since_hire > 6)) then ( vacation_days = vacation_days - l_accrued_ytd ) ) else if ((b_six_months_passed = 1 and b_year_end_in_waiting = 0) or (b_grant_minimum = 1)) then ( vacation_days = l_vacation1min - l_accrued_ytd ) else if (b_last_waiting_month = 1) then ( if (waiting_months > 6) then ( vacation_days = l_vacation1 - l_accrued_ytd ) else ( vacation_days = l_vacation1 - l_accrued_ytd ) ) else ( if b_term_in_current_year = 0 then ( if b_year_end_in_waiting = 1 then vacation_days = l_vacation1 - l_accrued_ytd else if (waiting_months > 6) and (l_months_since_hire > 6) and (l_months_since_hire <= waiting_months) then vacation_days = l_vacation1min - l_accrued_ytd ) ) if (l_workday_factor <> 1.0) then ( l_average_minutes_per_day = (weekly_normal_hours / work_days_per_week) * 60 l_precision = 1 / l_average_minutes_per_day vacation_days = ROUND ( (ROUND (vacation_days/l_precision) * l_precision), 3 ) ) accrual = vacation_days return accrual",
        "question": "Calculates prorated annual leave accrual for employees in Vietnam based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF KG Accrual Matrix",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL L_WORKING_DAYS = 20 IF IV_PLANENROLLMENTSTARTDATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_WORKING_DAYS = 20 )ELSE ( L_WORKING_DAYS = GET_PAY_AVAILABILITY ('ASSIGN', IV_PLANENROLLMENTSTARTDATE, IV_ACCRUALPERIODENDDATE, 'Y', 'Y', 'Y', 'Y', 'D') ) IF L_WORKING_DAYS <13 THEN (L_ACCRUAL = 0) accrual = L_ACCRUAL return accrual",
        "question": "Calculates prorated medical parental leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies for medical parental leave. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "KG Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF Accrual Matrix",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 L_ACCRUAL = L_ACCRUAL*L_DAYS/L_TOTAL ) accrual = L_ACCRUAL return accrual",
        "question": "Calculates prorated sick leave accrual for employees in China based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF AF Accrual Matrix",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_HRS = 8 hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DATE = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'DD')) IF L_DATE < 15 THEN ( L_ACCRUAL = 2 )ELSE ( L_ACCRUAL = 1 ) IF L_DATE> 25 THEN ( L_ACCRUAL = 0 ) L_MM = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'MM')) L_ACCRUAL = L_ACCRUAL + (12-L_MM)*2 L_ACCRUAL = L_ACCRUAL*L_HRS ) accrual = L_ACCRUAL return accrual",
        "question": "Calculates prorated partial period accrual for employees in Hong Kong based on band changes or partial employment periods. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "AF Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF BD Accrual Matrix",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_HRS = 8 hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DATE = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'DD')) L_PD = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODENDDATE, 'DD')) L_PRORATE = (L_PD-L_DATE+1)/L_PD L_ACCRUAL = IV_ACCRUAL*L_PRORATE ) accrual = L_ACCRUAL return accrual",
        "question": "Validates paternity working days leave applications in the UK. Ensures the duration complies with local policies, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "BD Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF IN Accrual Matrix",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 L_ACCRUAL = L_ACCRUAL*L_DAYS/L_TOTAL ) accrual = L_ACCRUAL return accrual",
        "question": "write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service and the accrual plan they are enrolled in. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.  The formula checks if the employee's citizenship code is not 'SA'. If the employee's grade is between 1 and 6 and their length of service is more than 2 years, or if the grade is 7 or 8 and the length of service is more than 1 year, or if the grade is 9A, 9B, 9C, 10, 11, or 12, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.  The formula then counts the number of dependents (infants, children, and others) and calculates the total accrual based on the number of dependents. It also checks for any dependent exit re-entry tickets and adjusts the accrual accordingly.  Finally, the formula iterates through the employee's absence entries and adjusts the accrual if the absence type is 'Annual Leave' and the absence status is not 'ORA_WITHDRAWN'. If the absence attribute is 'Both', it further adjusts the accrual based on the number of tickets for adults, children, and infants.  The final accrual and carryover values are returned.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "IN Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF PK AKRSP PAK Accrual Matrix",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 8 INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_DATE = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00'(DATE)) L_RETURN = IV_ACCRUAL hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_PLAN_ID = GET_CONTEXT(ACCRUAL_PLAN_ID,0) IF IV_PLANENROLLMENTSTARTDATE > IV_ACCRUALPERIODSTARTDATE THEN ( L_MM = TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'MM')) L_TOTAL_MONTH = 12-L_MM L_DD = TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'MM')) IF L_DD>=15 THEN (L_TOTAL_MONTH = L_TOTAL_MONTH+1) L_PRORATE = L_TOTAL_MONTH/12 L_RETURN = IV_ACCRUAL*L_PRORATE ) accrual = L_RETURN return accrual",
        "question": "write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service, grade, and citizenship. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.  The formula checks the employee's grade and citizenship to determine the accrual rate, ceiling, and carryover. For grades 1 to 6, if the employee is a Saudi citizen with less than 5 years of service, the accrual is 28 days per year. If the service is more than 5 years, the accrual is 30 days per year. For non-Saudi citizens, the accrual is 21 days per year for less than 5 years of service and 30 days per year for more than 5 years of service. The ceiling and carryover are set to 10000 and 5000, respectively, for less than 5 years of service, and 12000 and 6000 for more than 5 years of service.  For grades 7 and 8, the accrual is 28 days per year for less than 5 years of service and 30 days per year for more than 5 years of service, with the same ceiling and carryover values as above.  For grades 9A, 9B, and 9C, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 30 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 30 days per year. The ceiling and carryover are set to 12000 and 6000, respectively.  For grades 10A, 10B, 10C, 11, and 12, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 40 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 40 days per year for grades 10A, 10B, and 10C, and 44 days per year for grades 11 and 12. The ceiling and carryover are set to 12000 and 6000, respectively.  If the employee has a specific attribute or grade 'RS', the accrual is set to 30 days per year, with a ceiling of 12000 and carryover of 6000.  If the accrual exceeds 2.5 days per month and the employee does not have an exception flag, the accrual is capped at 2.5 days per month, with a ceiling of 12000 and carryover of 6000.  The final accrual, ceiling, and carryover values are returned.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "PK Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_UK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_AVAILABILITY_WORKDAY_PATTERN IS 'XX' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'XX' DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_FTE_VALUE is 1 DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_ACCRUAL = 0 L_ACCRUAL1 = 24 L_Hours = 7 l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE: '+to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('IV_ACCRUAL: '+to_char(IV_ACCRUAL)) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE: '+to_char(IV_ACCRUALPERIODENDDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE: '+to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE: '+to_char(IV_PLANENROLLMENTENDDATE)) IF IV_PLANENROLLMENTSTARTDATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL )ELSE ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 L_ACCRUAL = (L_ACCRUAL1/L_TOTAL)*L_DAYS l_int = Floor(L_ACCRUAL) l_fraction = L_ACCRUAL - L_INT IF l_fraction > 0.5 then (l_fraction =1) else (l_fraction = 0.5) l_accrual = (l_int + l_fraction)*L_Hours ) l_debug = ess_log_write('L_ACCRUAL: '+to_char(L_ACCRUAL)) L_LAST_YEAR = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODENDDATE,'YYYY'))-1 L_CHECK_DATE = TO_DATE('3112'||TO_CHAR(L_LAST_YEAR)) IF IV_PLANENROLLMENTSTARTDATE>=L_CHECK_DATE THEN ( L_MATERNITY = 'N' I=1 l_start_date = ADD_DAYS(L_CHECK_DATE,-1) l_end_date = ADD_DAYS(L_CHECK_DATE, 1) CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = 'Maternity Leave' THEN ( L_MATERNITY = 'Y' ) ) ) ) ) IF L_MATERNITY = 'Y' THEN ( l_balance = 0 L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = L_CHECK_DATE ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) L_ACCRUAL = L_ACCRUAL + L_BALANCE ) ) L_schedule_evaluate_date = IV_ACCRUALPERIODSTARTDATE L_PATTERN = PER_ASG_AVAILABILITY_WORKDAY_PATTERN i=1 l_accrual_end = IV_ACCRUALPERIODENDDATE l_start_date = IV_ACCRUALPERIODSTARTDATE l_days_in_year = days_between(l_accrual_end,l_start_date) + 1 FTE_Accrual = 0 l_total_FTE = 0 L_FTE = 0 l_hr_asg_id = ASG_HR_ASG_ID WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('l_start_date: ' + to_char(l_start_date)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_fte ='||to_char(l_fte)) l_debug = ess_log_write('l_start_date: ' + to_char(l_start_date)) l_debug = ess_log_write('l_total_FTE: ' + to_char(l_total_FTE)) l_debug = ess_log_write('L_PATTERN: '+ L_PATTERN) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_ACCRUALPERIODENDDATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_start_date'||TO_CHAR(l_start_date)||'l_end_date'||TO_CHAR(l_end_date)) l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) l_debug = ess_log_write('l_days_in_year: '||TO_CHAR(l_days_in_year)) FTE_Accrual=l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('l_total_FTE '||to_char(l_total_FTE)) l_total_FTE = l_total_FTE + FTE_Accrual If l_total_FTE >= 1 then l_total_FTE = 1 l_debug = ess_log_write('l_total_FTE '||to_char(l_total_FTE)) if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (l_total_FTE = 0) l_debug = ess_log_write('HR Status is: ' + PER_ASG_ASSIGNMENT_STATUS_TYPE) IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_ACCRUALPERIODENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('l_total_FTE: '+to_char(l_total_FTE)) l_debug = ess_log_write('L_ACCRUAL: '+to_char(L_ACCRUAL)) L_ACCRUAL = ROUND(L_ACCRUAL*l_total_FTE,2) l_debug = ess_log_write('L_PATTERN: '+ L_PATTERN) l_debug = ess_log_write('L_FTE: '+to_char(L_FTE)) l_debug = ess_log_write('L_ACCRUAL: '+to_char(L_ACCRUAL)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE: '+to_char(IV_PLANENROLLMENTENDDATE)) l_int = Floor(L_ACCRUAL) l_fraction = L_ACCRUAL - L_INT IF l_fraction > 0 AND l_fraction <= 0.5 then (l_fraction = 0.5) ELSE IF l_fraction > 0.5 then (l_fraction = 1) l_accrual = (l_int + l_fraction) accrual = L_ACCRUAL l_debug = ess_log_write('L_ACCRUAL: '+to_char(L_ACCRUAL)) return accrual",
        "question": "write a  formula validates whether the leave dates fall within specific holiday periods. It checks if the start and end dates of the leave overlap with any of the predefined holidays. If the leave dates do not fall within the holiday periods, the formula sets the validation status to 'N' (not valid) and provides an error message indicating that the leave cannot be applied as it is not a holiday. If the leave dates fall within the holiday periods, the validation status is set to 'Y' (valid).",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF PT Annual Leave Accrual",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'XX' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_WD = 7.5 IF (PER_ASG_NORMAL_HOURS =35) THEN ( L_WD = 7 ) L_ACCRUAL = IV_ACCRUAL * L_WD IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL * L_WD ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_ACCRUAL = IV_ACCRUAL*L_DAYS*L_WD/365 ) L_ECD = PER_ASG_EMPLOYMENT_CATEGORY IF (L_ECD = 'AKF_PT_ECD' OR L_ECD = 'AKF_PT_ECD_CIOS') THEN ( L_ECD = 'Y' ) L_LAST_YEAR = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODENDDATE,'YYYY'))-1 l_start_date = TO_DATE('0101'||TO_CHAR(L_LAST_YEAR),'DDMMYYYY') l_end_date = TO_DATE('3112'||TO_CHAR((L_LAST_YEAR)),'DDMMYYYY') IF L_ECD = 'Y' THEN ( L_DURATION = 0 I=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE != 'Maternity Leave' OR L_ABSENCE_TYPE != 'Paternity Leave' OR L_ABSENCE_TYPE != 'Strikes' OR L_ABSENCE_TYPE != 'School Support' OR L_ABSENCE_TYPE != 'Legal Commitment' OR L_ABSENCE_TYPE != 'Work Accidents' THEN ( L_DURATION = L_DURATION + ANC_ABS_ENTRS_DURATION ) ) ) ) L_DURATION = L_DURATION/L_WD IF L_DURATION = 0 THEN (L_ACCRUAL = L_ACCRUAL + (3*L_WD)) IF L_DURATION > 0 AND L_DURATION <=1 THEN (L_ACCRUAL = L_ACCRUAL+ (2*L_WD)) IF L_DURATION>1 AND L_DURATION <=2 THEN (L_ACCRUAL = L_ACCRUAL + L_WD) ) ) l_end_date = TO_DATE('3112'||TO_CHAR((L_LAST_YEAR+2)),'DDMMYYYY') L_CHECK_DATE = TO_DATE('0101'||TO_CHAR((L_LAST_YEAR+1)),'DDMMYYYY') I=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = 'Sick Leave' THEN ( IF L_CHECK_DATE >= ANC_ABS_ENTRS_START_DATE THEN ( IF L_CHECK_DATE <= ANC_ABS_ENTRS_END_DATE THEN ( IF ANC_ABS_ENTRS_DURATION>=30 THEN ( L_ACCRUAL = 0 ) ) ) ) ) ) ) ) accrual = L_ACCRUAL return accrual",
        "question": "write a  formula calculates the accrual, ceiling, and carryover of leave for employees based on their length of service, grade, and any exceptions. Here's the precise business logic:  Length of Service:  The formula calculates the length of service by determining the number of days between the employee's hire date and the current date, then dividing by 365 to get the number of years. Grade-Based Accrual:  For grades E1, E2, M1, M2, and CEO, the accrual is 3, the ceiling is 3, and the carryover is 0. For grades M3 and M4, the accrual is 2, the ceiling is 2, and the carryover is 0. For grades S1, S2, I1, and I2, the accrual is 0, the ceiling is 0, and the carryover is 0. Unpaid Leave Adjustment:  If there are unpaid leave days, the formula adjusts the accrual by subtracting the unpaid leave days from the total days and multiplying by the daily accrual rate. Exceptions:  If there are specific exceptions for the employee, the formula retrieves the exception flag and value from a table and applies the exception value to the accrual.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "PT Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF SY Accrual Matrix",
        "answer": "DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL L_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_PERIOD >10 THEN ( L_ACCRUAL = 240 ) IF L_PERIOD <=10 AND L_PERIOD>= 2 THEN ( L_ACCRUAL = 168 ) IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( accrual = L_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 L_ACCRUAL = L_ACCRUAL*L_DAYS/L_TOTAL ) accrual = L_ACCRUAL return accrual",
        "question": "write a  formula determines the start date of the calendar leave year for an employee's anniversary year based on their employment dates. It checks various dates such as the bonus vacation date, adjusted service date, and hire date to find the earliest relevant date. write a  date is then used as the anniversary date for the leave year.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF US Accrual Matrix",
        "answer": "DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL L_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_PERIOD<2 THEN ( L_ACCRUAL = 10 ) IF L_PERIOD >=2 AND L_PERIOD < 3 THEN ( L_ACCRUAL = 10.64 ) IF L_PERIOD >=3 AND L_PERIOD < 4 THEN ( L_ACCRUAL = 11.36 ) IF L_PERIOD >=4 AND L_PERIOD < 5 THEN ( L_ACCRUAL = 12 ) IF L_PERIOD >=5 THEN ( L_ACCRUAL = 13.36 ) accrual = L_ACCRUAL return accrual",
        "question": "write a  formula calculates sick leave accrual based on the employee's bargaining unit code, employment category, and years of service. It determines the employee's start date and calculates the number of years they have been employed. Based on the number of years of service, it assigns different accrual amounts:  1 year of service: 16 hours of sick leave 2 years of service: 24 hours of sick leave 3 years of service: 32 hours of sick leave 4 or more years of service: 40 hours of sick leave",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF CA Vacation Leave",
        "answer": "DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL L_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_HRS = 7 IF L_PERIOD<=4 THEN ( L_ACCRUAL = 1.25*L_HRS ) IF L_PERIOD >4 AND L_PERIOD <= 10 THEN ( L_ACCRUAL = 1.67*L_HRS ) IF L_PERIOD >10 THEN ( L_ACCRUAL = 2.083*L_HRS ) accrual = L_ACCRUAL return accrual",
        "question": "write a  formula validates absence entries to ensure that employees cannot request Workers' Compensation leave if their employment status does not match specific categories. It checks the duration of the requested leave and the employee's employment category. If the employment category is not one of the allowed categories for Workers' Compensation (such as full-time, part-time, or seasonal Workers' Compensation), and the leave duration is greater than zero, the formula sets the validation status to invalid and returns an error message indicating that Workers' Compensation cannot be requested with the current employment status.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF CA Accrual Matrix",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_HRS = 7 hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_MM = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'MM')) L_ACCRUAL = (12-L_MM +1 ) L_ACCRUAL = IV_ACCRUAL*(L_ACCRUAL/12) ) accrual = L_ACCRUAL return accrual",
        "question": "write a  formula calculates sick leave accrual for Connecticut Sick Leave based on the total hours worked during the accrual period. Here's the calculation logic:  Determine Hours Worked: The formula checks if the employee has worked more than 680 hours since their hire date or the cutoff date. If the employee has worked more than 680 hours, it calculates the total hours worked during the accrual period.  Calculate Accrual: The formula calculates the accrual by dividing the total hours worked by 40 and rounding the result to two decimal places. If the employee has not yet completed 680 hours, it includes hours worked in the previous accrual period to determine if the threshold is met.  Adjust for Previous Hours: If the employee has completed 680 hours before the cutoff date, the formula includes these hours in the total calculation and adjusts the accrual accordingly. the formula calculates sick leave accrual by dividing the total hours worked during the accrual period by 40 and rounding the result. It ensures that employees meet the 680-hour threshold before accruing sick leave",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF TZ Accrual Matrix",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DATE = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'DD')) L_PD = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODENDDATE, 'DD')) L_PRORATE = (L_PD-L_DATE+1)/L_PD L_ACCRUAL = ROUND(IV_ACCRUAL*L_PRORATE,1) ) accrual = L_ACCRUAL return accrual",
        "question": "write a  formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:  It initializes the total hours worked to zero. For each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked. After summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "TZ Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_KE_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) l_month = to_char(IV_ACCRUALPERIODENDDATE,'MM') l_log = ess_log_write('l_month.:'||(l_month)) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF (L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE) THEN ( L_ACCRUAL = IV_ACCRUAL If (l_month = '01') then (L_ACCRUAL = L_ACCRUAL + 8) ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 If (l_month = '01') then (L_ACCRUAL = L_ACCRUAL + 8) L_ACCRUAL = L_ACCRUAL*L_DAYS/L_TOTAL ) accrual = L_ACCRUAL return accrual",
        "question": "write a  formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees do not exceed the allowed sick leave hours.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "KE Legislative Data Group"
    },
    {
        "FORMULA_NAME": "France Vacation Accrual Matrix",
        "answer": "DEFAULT FOR ANC_ABS_PLN_CALENDAR_START_MONTH is '06' DEFAULT FOR ANC_ABS_PLN_NAME is 'Unknown' DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_ACR_END_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_ABS_DURATION IS 0 DEFAULT FOR ORA_HRX_FR_ABS_ACR_CURRENT_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_CP1_DURATION IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER3 IS 25.0 DEFAULT FOR ANC_ABS_PLN_INFORMATION1 IS 'N' DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER1 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER3 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER4 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER5 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER6 IS 0 DEFAULT FOR ORA_HRX_FR_SENIORITY_IN_YEARS IS 0 DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CALEDARSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CALEDARENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CARRYOVER IS 0 DEFAULT FOR IV_CEILING IS 0 DEFAULT FOR IV_ACCRUAL_CEILING IS 0 DEFAULT FOR ORA_HRX_FR_ABS_PRIMARY_ASG_ID is -1 DEFAULT FOR ORA_HRX_FR_PLAN_ENRT_ID IS 0 DEFAULT FOR l_addional_sen_accrual is 0 INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE),IV_EVENT_DATES,IV_ACCRUAL_VALUES, IV_CARRYOVER,IV_CEILING,IV_ACCRUAL_CEILING, IV_CALEDARSTARTDATE (DATE),IV_CALEDARENDDATE (DATE),IV_PLANENROLLMENTSTARTDATE (DATE),IV_PLANENROLLMENTENDDATE (DATE) l_debug_prefix_str = 'FrAccrDiag: ' l_debug_str = CHR(10)|| l_debug_prefix_str || '--------------------Start of Formula -----------------------' l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || '-----------------------------------------------------------' l_dummy = ess_log_write( l_debug_str ) l_carryover = 0 l_plan_enrt_id = 0 Adjustmentdates=EMPTY_DATE_NUMBER Adjustmentvalues=EMPTY_NUMBER_NUMBER Adjustmenttypes=EMPTY_TEXT_NUMBER UPPER_LIMIT_OF_ACCRUAL = 25.0 l_start_date = '4712/12/31 00:00:00' (DATE) l_date = '2030/05/31 00:00:00' (DATE) l_end_date = '4712/12/31 00:00:00' (DATE) accrual =0.0 l_adj_idx=1 l_sen_acr_valdef_name_prefix = 'VAC_FR_SEN_' l_sen_spl_valdef_name_prefix = 'VAC_FR_SPL_' l_vs_name = 'ORA_HRX_FR_VALUE_FROM_VALDEFN' l_ldgid = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID, -1) l_hrasgid = GET_CONTEXT(HR_ASSIGNMENT_ID, -1) l_plan_year_start_Date = IV_CALEDARSTARTDATE l_plan_year_end_Date = IV_CALEDARENDDATE l_no_of_28day_blocks = 0.0 L_REGULAR_CALC_INTERVAL = 28.0 l_accrual_balance_before_this_period = 0.0 l_hire_anniversary_passed = 'N' l_hire_anniversary_this_month = 'N' l_hire_date = PER_TERM_REL_DATE_START IF ( ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE was NOT DEFAULTED) THEN ( l_hire_date = ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE l_debug_str = l_debug_prefix_str || 'Considering Override Hire Date' l_dummy = ess_log_write( l_debug_str ) ) l_debug_str = l_debug_prefix_str || 'Hire Date is : '|| to_char(l_hire_date,'DD-MON-YYYY') l_dummy = ess_log_write( l_debug_str ) l_accrual_for_this_period = 0.0 l_accrual_for_this_period = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') l_debug_str = l_debug_prefix_str || 'Accrual Period: '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY')|| ' AsgId: '|| to_char(l_hrasgid) l_dummy = ess_log_write( l_debug_str ) l_day_of_hire= to_number(to_char(l_hire_date, 'dd')) l_month_of_hire=to_number(to_char(l_hire_date, 'mm')) l_month_of_hire_calc = l_month_of_hire l_current_month = to_number(to_char(IV_ACCRUALPERIODENDDATE, 'mm')) l_current_month_calc = l_current_month if (l_current_month < 6) THEN ( l_current_month_calc = l_current_month + 6 ) if (l_month_of_hire < 6) THEN ( l_month_of_hire_calc = l_month_of_hire + 6 ) if ( l_current_month_calc >= l_month_of_hire_calc) THEN (l_hire_anniversary_passed = 'Y') l_accrual_plan_name = ANC_ABS_PLN_NAME if( l_month_of_hire = l_current_month) then ( l_hire_anniversary_this_month = 'Y' l_years_since_hire_unrounded = ORA_HRX_FR_SENIORITY_IN_YEARS l_years_since_hire= trunc(l_years_since_hire_unrounded,0) l_accrual_plan_id = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_sen_acr_valdef_name = l_sen_acr_valdef_name_prefix || l_accrual_plan_name l_addional_sen_accrual_from_VS = GET_VALUE_SET( l_vs_name ,'|=EFF_DATE='''||to_char(IV_ACCRUALPERIODENDDATE,'DD-MM-YYYY') ||'''|RNG_VAL_TO_CHECK='||to_char(l_years_since_hire)||'|VD_NAME='''|| l_sen_acr_valdef_name ||'''') l_debug_str = l_debug_prefix_str || 'Get From Value Definition |=EFF_DATE='''||to_char(IV_ACCRUALPERIODENDDATE,'DD-MM-YYYY') ||'''|RNG_VAL_TO_CHECK='||to_char(l_years_since_hire)||'|VD_NAME='''|| l_sen_acr_valdef_name ||'''' l_dummy = ess_log_write( l_debug_str ) if(l_addional_sen_accrual_from_VS||'A' = 'A') THEN ( l_addional_sen_accrual_from_VS = '0.0' l_debug_str = l_debug_prefix_str || 'Additional Seniority Accrual Not Specified setting l_addional_sen_accrual_from_VS to 0.0' l_dummy = ess_log_write( l_debug_str ) ) adjustmenttypes[l_adj_idx] = 'Seniority' adjustmentdates[l_adj_idx] = IV_ACCRUALPERIODENDDATE adjustmentvalues[l_adj_idx] =to_number(l_addional_sen_accrual_from_VS) l_adj_idx=l_adj_idx + 1 l_debug_str = l_debug_prefix_str || 'Hired this month, Seniority Years : ' || to_char(l_years_since_hire) || ' / Extra Seniority Accrual : ' || l_addional_sen_accrual_from_VS l_dummy = ess_log_write( l_debug_str ) ) if ( l_accrual_for_this_period > 0 ) then ( l_debug_str = l_debug_prefix_str || 'Accrual already calculated for : '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') ||' returning : ' || to_char(l_accrual_for_this_period) l_dummy = ess_log_write( l_debug_str ) accrual = l_accrual_for_this_period l_array_index=adjustmenttypes.FIRST(-1) while (adjustmenttypes.exists(l_array_index)) loop ( l_debug_str = l_debug_prefix_str || 'Adjustment['||to_char(l_array_index)||'] for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(Adjustmentdates[l_array_index],'DD-MON-YYYY') ||' / '|| Adjustmenttypes[l_array_index] || ' : '|| to_char(Adjustmentvalues[l_array_index]) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.NEXT(l_array_index,-1) ) return accrual, Adjustmentdates, Adjustmentvalues, Adjustmenttypes ) l_debug_str = l_debug_prefix_str || 'Already Calculated for this period : ' || to_char(l_accrual_for_this_period) l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || 'Default UpperLimit of Accrual : ' || to_char(UPPER_LIMIT_OF_ACCRUAL) l_dummy = ess_log_write( l_debug_str ) IF ( ANC_ABS_PLN_INFORMATION_NUMBER3 WAS NOT DEFAULTED) THEN ( IF ( ANC_ABS_PLN_INFORMATION_NUMBER3 > 0 ) THEN ( UPPER_LIMIT_OF_ACCRUAL = ANC_ABS_PLN_INFORMATION_NUMBER3 l_debug_str = l_debug_prefix_str || 'UpperLimit of Accrual Specified on Plan : ' || to_char(UPPER_LIMIT_OF_ACCRUAL) l_dummy = ess_log_write( l_debug_str ) ) ) l_years_since_hire = 0 l_calendar_years_since_hire = 0.0 l_extra_seniority_accrual = 0 l_accrual_calc_start_point_intermediate = GREATEST( trunc(l_hire_date), trunc(IV_CALEDARSTARTDATE)) l_accrual_calc_start_point = GREATEST( l_accrual_calc_start_point_intermediate, trunc(IV_PLANENROLLMENTSTARTDATE)) l_accrual_calc_end_point_intermediate = LEAST (trunc(IV_ACCRUALPERIODENDDATE),trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_accrual_calc_end_point = LEAST( l_accrual_calc_end_point_intermediate, trunc(IV_PLANENROLLMENTENDDATE)) l_debug_str = l_debug_prefix_str || 'l_accrual_calc_start_point : ' || to_char(l_accrual_calc_start_point,'DD-MON-YYYY') || ' l_accrual_calc_end_point: '|| to_char(l_accrual_calc_end_point,'DD-MON-YYYY') l_dummy = ess_log_write( l_debug_str ) l_days_between_accrual_points = days_between ( l_accrual_calc_end_point, l_accrual_calc_start_point) + 1 l_hired_in_current_period = 'N' l_terminated_in_current_period = 'N' if ( trunc(l_hire_date) > trunc(IV_ACCRUALPERIODSTARTDATE) ) then ( l_hired_in_current_period = 'Y' ) if ( trunc(IV_PLANENROLLMENTSTARTDATE) > trunc(IV_ACCRUALPERIODSTARTDATE) ) then ( l_hired_in_current_period = 'Y' ) if ( trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE) >= trunc(IV_ACCRUALPERIODSTARTDATE) ) and ( trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE) <= trunc(IV_ACCRUALPERIODENDDATE) ) then ( l_terminated_in_current_period = 'Y' ) if ( trunc(IV_PLANENROLLMENTENDDATE) < trunc(IV_ACCRUALPERIODENDDATE) ) then ( l_terminated_in_current_period = 'Y' ) l_debug_str = l_debug_prefix_str || 'l_days_between_accrual_points : ' || to_char(l_days_between_accrual_points) || ' HiredThisPeriod: '|| l_hired_in_current_period || ' TerminatedThisPeriod: '||l_terminated_in_current_period l_dummy = ess_log_write( l_debug_str ) l_no_of_28day_blocks = l_days_between_accrual_points / L_REGULAR_CALC_INTERVAL l_accrual_balance_before_this_period = 0.0 change_contexts(effective_Date=trunc(IV_ACCRUALPERIODSTARTDATE)) ( l_debug_str = l_debug_prefix_str || 'l_ldgid: :'|| to_char(l_ldgid) ||' / l_hrasgid: '||to_char(l_hrasgid) l_dummy = ess_log_write( l_debug_str ) l_ctx_HR_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID ,-1) l_ctx_effective_Date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_ctx_ldgID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID ,-1) l_ctx_HR_TERM_ID = GET_CONTEXT(HR_TERM_ID ,-1) l_debug_str = l_debug_prefix_str || 'CONTEXTS: l_ctx_HR_ASSIGNMENT_ID: ' || to_char(l_ctx_HR_ASSIGNMENT_ID)|| ' / l_ctx_effective_Date: '||to_char(l_ctx_effective_Date,'DD-MON-YYYY') || ' / l_ctx_ldgID: '|| to_char(l_ctx_ldgID) || ' / l_ctx_HR_TERM_ID: '|| to_char(l_ctx_HR_TERM_ID) l_dummy = ess_log_write( l_debug_str ) l_accrual_balance_before_this_period = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,l_accrual_calc_start_point,trunc(IV_ACCRUALPERIODSTARTDATE),'ACRL',' ') l_debug_str = l_debug_prefix_str || 'Balance Before: ' || to_char(trunc(IV_ACCRUALPERIODSTARTDATE),'DD-MON-YYYY')||' is: '||to_char(l_accrual_balance_before_this_period) l_dummy = ess_log_write( l_debug_str ) ) if ( l_hired_in_current_period = 'N') and ( l_terminated_in_current_period = 'N') then ( l_no_of_28day_blocks = trunc(l_no_of_28day_blocks) ) l_cumulative_accrual = 0.0 l_cumulative_accrual = l_no_of_28day_blocks * IV_ACCRUAL l_debug_str = l_debug_prefix_str || '(B)l_no_of_28day_blocks : ' || to_char(l_no_of_28day_blocks) || ' / l_accrual_balance_before_this_period: '|| to_char(l_accrual_balance_before_this_period) l_dummy = ess_log_write( l_debug_str ) l_additional_accrual_to_check_limit = 0.0 IF ( l_cumulative_accrual > (UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit)) THEN ( l_debug_str = l_debug_prefix_str || 'l_cumulative_accrual: ' || to_char(l_cumulative_accrual) || ' Exceeds:'|| to_char((UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit))||' resetting it back' l_cumulative_accrual = UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit l_dummy = ess_log_write( l_debug_str ) ) l_current_month_accrual = l_cumulative_accrual - l_accrual_balance_before_this_period l_debug_str = l_debug_prefix_str || 'Accrual Period: '|| to_char(IV_ACCRUALPERIODENDDATE,'MON-YYYY')|| ' l_cumulative_accrual : ' || to_char(l_cumulative_accrual) || ' / l_current_month_accrual: '|| to_char(l_current_month_accrual) l_dummy = ess_log_write( l_debug_str ) accrual = l_current_month_accrual l_debug_str = l_debug_prefix_str || 'Returning Accrual for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(accrual) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.FIRST(-1) while (adjustmenttypes.exists(l_array_index)) loop ( l_debug_str = l_debug_prefix_str || 'Adjustment['||to_char(l_array_index)||'] for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(Adjustmentdates[l_array_index],'DD-MON-YYYY') ||' / '|| Adjustmenttypes[l_array_index] || ' : '|| to_char(Adjustmentvalues[l_array_index]) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.NEXT(l_array_index,-1) ) return accrual, Adjustmentdates, Adjustmentvalues, Adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "France - Cong\u00e9s - Grille d'acquisition",
        "answer": "DEFAULT FOR ANC_ABS_PLN_CALENDAR_START_MONTH is '06' DEFAULT FOR ANC_ABS_PLN_NAME is 'Unknown' DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_ACR_END_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_ABS_DURATION IS 0 DEFAULT FOR ORA_HRX_FR_ABS_ACR_CURRENT_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_CP1_DURATION IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER3 IS 25.0 DEFAULT FOR ANC_ABS_PLN_INFORMATION1 IS 'N' DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER1 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER3 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER4 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER5 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER6 IS 0 DEFAULT FOR ORA_HRX_FR_SENIORITY_IN_YEARS IS 0 DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CALEDARSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CALEDARENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CARRYOVER IS 0 DEFAULT FOR IV_CEILING IS 0 DEFAULT FOR IV_ACCRUAL_CEILING IS 0 DEFAULT FOR ORA_HRX_FR_ABS_PRIMARY_ASG_ID is -1 DEFAULT FOR ORA_HRX_FR_PLAN_ENRT_ID IS 0 DEFAULT FOR l_addional_sen_accrual is 0 INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE),IV_EVENT_DATES,IV_ACCRUAL_VALUES, IV_CARRYOVER,IV_CEILING,IV_ACCRUAL_CEILING, IV_CALEDARSTARTDATE (DATE),IV_CALEDARENDDATE (DATE),IV_PLANENROLLMENTSTARTDATE (DATE),IV_PLANENROLLMENTENDDATE (DATE) l_debug_prefix_str = 'FrAccrDiag: ' l_debug_str = CHR(10)|| l_debug_prefix_str || '--------------------Start of Formula -----------------------' l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || '-----------------------------------------------------------' l_dummy = ess_log_write( l_debug_str ) l_carryover = 0 l_plan_enrt_id = 0 Adjustmentdates=EMPTY_DATE_NUMBER Adjustmentvalues=EMPTY_NUMBER_NUMBER Adjustmenttypes=EMPTY_TEXT_NUMBER UPPER_LIMIT_OF_ACCRUAL = 25.0 l_start_date = '4712/12/31 00:00:00' (DATE) l_date = '2030/05/31 00:00:00' (DATE) l_end_date = '4712/12/31 00:00:00' (DATE) accrual =0.0 l_adj_idx=1 l_sen_acr_valdef_name_prefix = 'VAC_FR_SEN_' l_sen_spl_valdef_name_prefix = 'VAC_FR_SPL_' l_vs_name = 'ORA_HRX_FR_VALUE_FROM_VALDEFN' l_ldgid = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID, -1) l_hrasgid = GET_CONTEXT(HR_ASSIGNMENT_ID, -1) l_plan_year_start_Date = IV_CALEDARSTARTDATE l_plan_year_end_Date = IV_CALEDARENDDATE l_no_of_28day_blocks = 0.0 L_REGULAR_CALC_INTERVAL = 28.0 l_accrual_balance_before_this_period = 0.0 l_hire_anniversary_passed = 'N' l_hire_anniversary_this_month = 'N' l_hire_date = PER_TERM_REL_DATE_START IF ( ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE was NOT DEFAULTED) THEN ( l_hire_date = ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE l_debug_str = l_debug_prefix_str || 'Considering Override Hire Date' l_dummy = ess_log_write( l_debug_str ) ) l_debug_str = l_debug_prefix_str || 'Hire Date is : '|| to_char(l_hire_date,'DD-MON-YYYY') l_dummy = ess_log_write( l_debug_str ) l_accrual_for_this_period = 0.0 l_accrual_for_this_period = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') l_debug_str = l_debug_prefix_str || 'Accrual Period: '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY')|| ' AsgId: '|| to_char(l_hrasgid) l_dummy = ess_log_write( l_debug_str ) l_day_of_hire= to_number(to_char(l_hire_date, 'dd')) l_month_of_hire=to_number(to_char(l_hire_date, 'mm')) l_month_of_hire_calc = l_month_of_hire l_current_month = to_number(to_char(IV_ACCRUALPERIODENDDATE, 'mm')) l_current_month_calc = l_current_month if (l_current_month < 6) THEN ( l_current_month_calc = l_current_month + 6 ) if (l_month_of_hire < 6) THEN ( l_month_of_hire_calc = l_month_of_hire + 6 ) if ( l_current_month_calc >= l_month_of_hire_calc) THEN (l_hire_anniversary_passed = 'Y') l_accrual_plan_name = ANC_ABS_PLN_NAME if( l_month_of_hire = l_current_month) then ( l_hire_anniversary_this_month = 'Y' l_years_since_hire_unrounded = ORA_HRX_FR_SENIORITY_IN_YEARS l_years_since_hire= trunc(l_years_since_hire_unrounded,0) l_accrual_plan_id = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_sen_acr_valdef_name = l_sen_acr_valdef_name_prefix || l_accrual_plan_name l_addional_sen_accrual_from_VS = GET_VALUE_SET( l_vs_name ,'|=EFF_DATE='''||to_char(IV_ACCRUALPERIODENDDATE,'DD-MM-YYYY') ||'''|RNG_VAL_TO_CHECK='||to_char(l_years_since_hire)||'|VD_NAME='''|| l_sen_acr_valdef_name ||'''') l_debug_str = l_debug_prefix_str || 'Get From Value Definition |=EFF_DATE='''||to_char(IV_ACCRUALPERIODENDDATE,'DD-MM-YYYY') ||'''|RNG_VAL_TO_CHECK='||to_char(l_years_since_hire)||'|VD_NAME='''|| l_sen_acr_valdef_name ||'''' l_dummy = ess_log_write( l_debug_str ) if(l_addional_sen_accrual_from_VS||'A' = 'A') THEN ( l_addional_sen_accrual_from_VS = '0.0' l_debug_str = l_debug_prefix_str || 'Additional Seniority Accrual Not Specified setting l_addional_sen_accrual_from_VS to 0.0' l_dummy = ess_log_write( l_debug_str ) ) adjustmenttypes[l_adj_idx] = 'Seniority' adjustmentdates[l_adj_idx] = IV_ACCRUALPERIODENDDATE adjustmentvalues[l_adj_idx] =to_number(l_addional_sen_accrual_from_VS) l_adj_idx=l_adj_idx + 1 l_debug_str = l_debug_prefix_str || 'Hired this month, Seniority Years : ' || to_char(l_years_since_hire) || ' / Extra Seniority Accrual : ' || l_addional_sen_accrual_from_VS l_dummy = ess_log_write( l_debug_str ) ) if ( l_accrual_for_this_period > 0 ) then ( l_debug_str = l_debug_prefix_str || 'Accrual already calculated for : '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') ||' returning : ' || to_char(l_accrual_for_this_period) l_dummy = ess_log_write( l_debug_str ) accrual = l_accrual_for_this_period l_array_index=adjustmenttypes.FIRST(-1) while (adjustmenttypes.exists(l_array_index)) loop ( l_debug_str = l_debug_prefix_str || 'Adjustment['||to_char(l_array_index)||'] for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(Adjustmentdates[l_array_index],'DD-MON-YYYY') ||' / '|| Adjustmenttypes[l_array_index] || ' : '|| to_char(Adjustmentvalues[l_array_index]) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.NEXT(l_array_index,-1) ) return accrual, Adjustmentdates, Adjustmentvalues, Adjustmenttypes ) l_debug_str = l_debug_prefix_str || 'Already Calculated for this period : ' || to_char(l_accrual_for_this_period) l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || 'Default UpperLimit of Accrual : ' || to_char(UPPER_LIMIT_OF_ACCRUAL) l_dummy = ess_log_write( l_debug_str ) IF ( ANC_ABS_PLN_INFORMATION_NUMBER3 WAS NOT DEFAULTED) THEN ( IF ( ANC_ABS_PLN_INFORMATION_NUMBER3 > 0 ) THEN ( UPPER_LIMIT_OF_ACCRUAL = ANC_ABS_PLN_INFORMATION_NUMBER3 l_debug_str = l_debug_prefix_str || 'UpperLimit of Accrual Specified on Plan : ' || to_char(UPPER_LIMIT_OF_ACCRUAL) l_dummy = ess_log_write( l_debug_str ) ) ) l_years_since_hire = 0 l_calendar_years_since_hire = 0.0 l_extra_seniority_accrual = 0 l_accrual_calc_start_point_intermediate = GREATEST( trunc(l_hire_date), trunc(IV_CALEDARSTARTDATE)) l_accrual_calc_start_point = GREATEST( l_accrual_calc_start_point_intermediate, trunc(IV_PLANENROLLMENTSTARTDATE)) l_accrual_calc_end_point_intermediate = LEAST (trunc(IV_ACCRUALPERIODENDDATE),trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_accrual_calc_end_point = LEAST( l_accrual_calc_end_point_intermediate, trunc(IV_PLANENROLLMENTENDDATE)) l_debug_str = l_debug_prefix_str || 'l_accrual_calc_start_point : ' || to_char(l_accrual_calc_start_point,'DD-MON-YYYY') || ' l_accrual_calc_end_point: '|| to_char(l_accrual_calc_end_point,'DD-MON-YYYY') l_dummy = ess_log_write( l_debug_str ) l_days_between_accrual_points = days_between ( l_accrual_calc_end_point, l_accrual_calc_start_point) + 1 l_hired_in_current_period = 'N' l_terminated_in_current_period = 'N' if ( trunc(l_hire_date) > trunc(IV_ACCRUALPERIODSTARTDATE) ) then ( l_hired_in_current_period = 'Y' ) if ( trunc(IV_PLANENROLLMENTSTARTDATE) > trunc(IV_ACCRUALPERIODSTARTDATE) ) then ( l_hired_in_current_period = 'Y' ) if ( trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE) >= trunc(IV_ACCRUALPERIODSTARTDATE) ) and ( trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE) <= trunc(IV_ACCRUALPERIODENDDATE) ) then ( l_terminated_in_current_period = 'Y' ) if ( trunc(IV_PLANENROLLMENTENDDATE) < trunc(IV_ACCRUALPERIODENDDATE) ) then ( l_terminated_in_current_period = 'Y' ) l_debug_str = l_debug_prefix_str || 'l_days_between_accrual_points : ' || to_char(l_days_between_accrual_points) || ' HiredThisPeriod: '|| l_hired_in_current_period || ' TerminatedThisPeriod: '||l_terminated_in_current_period l_dummy = ess_log_write( l_debug_str ) l_no_of_28day_blocks = l_days_between_accrual_points / L_REGULAR_CALC_INTERVAL l_accrual_balance_before_this_period = 0.0 change_contexts(effective_Date=trunc(IV_ACCRUALPERIODSTARTDATE)) ( l_debug_str = l_debug_prefix_str || 'l_ldgid: :'|| to_char(l_ldgid) ||' / l_hrasgid: '||to_char(l_hrasgid) l_dummy = ess_log_write( l_debug_str ) l_ctx_HR_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID ,-1) l_ctx_effective_Date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_ctx_ldgID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID ,-1) l_ctx_HR_TERM_ID = GET_CONTEXT(HR_TERM_ID ,-1) l_debug_str = l_debug_prefix_str || 'CONTEXTS: l_ctx_HR_ASSIGNMENT_ID: ' || to_char(l_ctx_HR_ASSIGNMENT_ID)|| ' / l_ctx_effective_Date: '||to_char(l_ctx_effective_Date,'DD-MON-YYYY') || ' / l_ctx_ldgID: '|| to_char(l_ctx_ldgID) || ' / l_ctx_HR_TERM_ID: '|| to_char(l_ctx_HR_TERM_ID) l_dummy = ess_log_write( l_debug_str ) l_accrual_balance_before_this_period = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,l_accrual_calc_start_point,trunc(IV_ACCRUALPERIODSTARTDATE),'ACRL',' ') l_debug_str = l_debug_prefix_str || 'Balance Before: ' || to_char(trunc(IV_ACCRUALPERIODSTARTDATE),'DD-MON-YYYY')||' is: '||to_char(l_accrual_balance_before_this_period) l_dummy = ess_log_write( l_debug_str ) ) if ( l_hired_in_current_period = 'N') and ( l_terminated_in_current_period = 'N') then ( l_no_of_28day_blocks = trunc(l_no_of_28day_blocks) ) l_cumulative_accrual = 0.0 l_cumulative_accrual = l_no_of_28day_blocks * IV_ACCRUAL l_debug_str = l_debug_prefix_str || '(B)l_no_of_28day_blocks : ' || to_char(l_no_of_28day_blocks) || ' / l_accrual_balance_before_this_period: '|| to_char(l_accrual_balance_before_this_period) l_dummy = ess_log_write( l_debug_str ) l_additional_accrual_to_check_limit = 0.0 IF ( l_cumulative_accrual > (UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit)) THEN ( l_debug_str = l_debug_prefix_str || 'l_cumulative_accrual: ' || to_char(l_cumulative_accrual) || ' Exceeds:'|| to_char((UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit))||' resetting it back' l_cumulative_accrual = UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit l_dummy = ess_log_write( l_debug_str ) ) l_current_month_accrual = l_cumulative_accrual - l_accrual_balance_before_this_period l_debug_str = l_debug_prefix_str || 'Accrual Period: '|| to_char(IV_ACCRUALPERIODENDDATE,'MON-YYYY')|| ' l_cumulative_accrual : ' || to_char(l_cumulative_accrual) || ' / l_current_month_accrual: '|| to_char(l_current_month_accrual) l_dummy = ess_log_write( l_debug_str ) accrual = l_current_month_accrual l_debug_str = l_debug_prefix_str || 'Returning Accrual for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(accrual) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.FIRST(-1) while (adjustmenttypes.exists(l_array_index)) loop ( l_debug_str = l_debug_prefix_str || 'Adjustment['||to_char(l_array_index)||'] for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(Adjustmentdates[l_array_index],'DD-MON-YYYY') ||' / '|| Adjustmenttypes[l_array_index] || ' : '|| to_char(Adjustmentvalues[l_array_index]) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.NEXT(l_array_index,-1) ) return accrual, Adjustmentdates, Adjustmentvalues, Adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "France RTT Accrual Matrix",
        "answer": "DEFAULT FOR ANC_ABS_PLN_CALENDAR_START_MONTH is '06' DEFAULT FOR ANC_ABS_PLN_NAME is 'Unknown' DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_ACR_END_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_ABS_DURATION IS 0 DEFAULT FOR ORA_HRX_FR_ABS_ACR_CURRENT_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_CP1_DURATION IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER2 IS 10.0 DEFAULT FOR ANC_ABS_PLN_INFORMATION1 IS 'N' DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER1 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER3 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER4 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER5 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER6 IS 0 DEFAULT FOR ORA_HRX_FR_SENIORITY_IN_YEARS IS 0 DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CALEDARSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CALEDARENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CARRYOVER IS 0 DEFAULT FOR IV_CEILING IS 0 DEFAULT FOR IV_ACCRUAL_CEILING IS 0 DEFAULT FOR ORA_HRX_FR_ABS_RTT_ACCR_NOT_USEFUL_DAYS is 0 INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE),IV_EVENT_DATES,IV_ACCRUAL_VALUES, IV_CARRYOVER,IV_CEILING,IV_ACCRUAL_CEILING, IV_CALEDARSTARTDATE (DATE),IV_CALEDARENDDATE (DATE),IV_PLANENROLLMENTSTARTDATE (DATE),IV_PLANENROLLMENTENDDATE (DATE) l_debug_prefix_str = 'FrRttDiag: ' l_debug_str = CHR(10)|| l_debug_prefix_str || '--------------------Start of Formula -----------------------' l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || '-----------------------------------------------------------' l_dummy = ess_log_write( l_debug_str ) l_carryover = 0 l_plan_enrt_id = 0 UPPER_LIMIT_OF_RTT = 10.0 l_start_date = '4712/12/31 00:00:00' (DATE) l_end_date = '4712/12/31 00:00:00' (DATE) accrual =0.0 l_hrasgid = GET_CONTEXT(HR_ASSIGNMENT_ID, -1) l_plan_year_start_Date = IV_CALEDARSTARTDATE l_plan_year_end_Date = IV_CALEDARENDDATE l_hire_date = PER_TERM_REL_DATE_START IF ( ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE was NOT DEFAULTED) THEN ( l_hire_date = ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE l_debug_str = l_debug_prefix_str || 'Considering Override Hire Date' l_dummy = ess_log_write( l_debug_str ) ) l_debug_str = l_debug_prefix_str || 'Hire Date is : '|| to_char(l_hire_date,'DD-MON-YYYY') l_dummy = ess_log_write( l_debug_str ) l_accrual_for_this_period = 0.0 l_accrual_for_this_period = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') l_debug_str = l_debug_prefix_str || 'Accrual Period: '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY')|| ' AsgId: '|| to_char(l_hrasgid) l_dummy = ess_log_write( l_debug_str ) if ( l_accrual_for_this_period > 0 ) then ( l_debug_str = l_debug_prefix_str || 'Accrual already calculated for : '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') ||' returning : ' || to_char(l_accrual_for_this_period) l_dummy = ess_log_write( l_debug_str ) accrual = l_accrual_for_this_period return accrual ) IF ( ANC_ABS_PLN_INFORMATION_NUMBER2 WAS NOT DEFAULTED) THEN ( IF ( ANC_ABS_PLN_INFORMATION_NUMBER2 > 0 ) THEN ( UPPER_LIMIT_OF_RTT = ANC_ABS_PLN_INFORMATION_NUMBER2 l_debug_str = l_debug_prefix_str || 'UpperLimit of Accrual Specified on Plan : ' || to_char(UPPER_LIMIT_OF_RTT) l_dummy = ess_log_write( l_debug_str ) ) ) l_debug_str = CHR(10)|| l_debug_prefix_str || 'Accrual Upper Limit is '|| to_char(UPPER_LIMIT_OF_RTT) l_dummy = ess_log_write( l_debug_str ) l_days_in_current_month = DAYS_BETWEEN( IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_accrual_calc_start_point_intermediate = GREATEST( trunc(l_hire_date), trunc(IV_ACCRUALPERIODSTARTDATE)) l_accrual_calc_start_point = GREATEST( l_accrual_calc_start_point_intermediate, trunc(IV_PLANENROLLMENTSTARTDATE)) l_accrual_calc_end_point_intermediate = LEAST (trunc(IV_ACCRUALPERIODENDDATE),trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_accrual_calc_end_point = LEAST( l_accrual_calc_end_point_intermediate, trunc(IV_PLANENROLLMENTENDDATE)) l_debug_str = l_debug_prefix_str || 'l_accrual_calc_start_point : ' || to_char(l_accrual_calc_start_point,'DD-MON-YYYY') || ' l_accrual_calc_end_point: '|| to_char(l_accrual_calc_end_point,'DD-MON-YYYY') l_dummy = ess_log_write( l_debug_str ) l_days_between_accrual_points = days_between ( l_accrual_calc_end_point, l_accrual_calc_start_point) + 1 l_debug_str = l_debug_prefix_str || 'l_days_between_accrual_points Before Not USeful days : ' || to_char(l_days_between_accrual_points) l_dummy = ess_log_write( l_debug_str ) l_rtt_accrual_balance_before_this_period = 0.0 l_rtt_accrual_balance_before_this_period = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,l_plan_year_start_Date,trunc(IV_ACCRUALPERIODSTARTDATE),'ACRL',' ') l_debug_str = l_debug_prefix_str || 'l_rtt_accrual_balance_before_this_period is : ' || to_char(l_rtt_accrual_balance_before_this_period) l_dummy = ess_log_write( l_debug_str ) if ( l_rtt_accrual_balance_before_this_period >= UPPER_LIMIT_OF_RTT ) THEN ( accrual = 0.0 l_debug_str = l_debug_prefix_str || 'Maximum accrual already achieved previously , so returning ZERO, l_rtt_accrual_balance_before_this_period : ' || to_char(l_rtt_accrual_balance_before_this_period) l_dummy = ess_log_write( l_debug_str ) return accrual ) l_not_useful_days_for_rtt = 0 CHANGE_CONTEXTS(START_DATE=l_accrual_calc_start_point, END_DATE=l_accrual_calc_end_point) ( l_not_useful_days_for_rtt = ORA_HRX_FR_ABS_RTT_ACCR_NOT_USEFUL_DAYS ) l_debug_str = l_debug_prefix_str || 'l_not_useful_days_for_rtt : ' || to_char(l_not_useful_days_for_rtt) l_dummy = ess_log_write( l_debug_str ) l_days_between_accrual_points = l_days_between_accrual_points - l_not_useful_days_for_rtt if (l_days_between_accrual_points <= 0) THEN ( l_days_between_accrual_points = 0 ) l_debug_str = l_debug_prefix_str || 'l_days_between_accrual_points After Not USeful days : ' || to_char(l_days_between_accrual_points) l_dummy = ess_log_write( l_debug_str ) l_rtt_accrual = 0 l_rtt_accrual = (l_days_between_accrual_points / l_days_in_current_month ) * IV_ACCRUAL l_debug_str = l_debug_prefix_str || 'Calculated Accrual for current month : ' || to_char(l_rtt_accrual) l_dummy = ess_log_write( l_debug_str ) l_rtt_accrual_balance_after_current_period = l_rtt_accrual + l_rtt_accrual_balance_before_this_period if ( l_rtt_accrual_balance_after_current_period >= UPPER_LIMIT_OF_RTT ) THEN ( accrual = UPPER_LIMIT_OF_RTT - l_rtt_accrual_balance_before_this_period l_debug_str = l_debug_prefix_str || 'Accrual Exceeds Maximum after current period so adjusting from : '||to_char(l_rtt_accrual )|| ' to :' || to_char(accrual) l_dummy = ess_log_write( l_debug_str ) return accrual ) accrual = l_rtt_accrual l_debug_str = l_debug_prefix_str || 'Current Month RTT Accrual : '||to_char(accrual ) l_dummy = ess_log_write( l_debug_str ) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "France Vacation Accrual Matrix",
        "answer": "DEFAULT FOR ANC_ABS_PLN_CALENDAR_START_MONTH is '06' DEFAULT FOR ANC_ABS_PLN_NAME is 'Unknown' DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_ACR_END_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_ABS_DURATION IS 0 DEFAULT FOR ORA_HRX_FR_ABS_ACR_CURRENT_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_CP1_DURATION IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER3 IS 25.0 DEFAULT FOR ANC_ABS_PLN_INFORMATION1 IS 'N' DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER1 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER3 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER4 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER5 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER6 IS 0 DEFAULT FOR ORA_HRX_FR_SENIORITY_IN_YEARS IS 0 DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CALEDARSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CALEDARENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_CARRYOVER IS 0 DEFAULT FOR IV_CEILING IS 0 DEFAULT FOR IV_ACCRUAL_CEILING IS 0 DEFAULT FOR ORA_HRX_FR_ABS_PRIMARY_ASG_ID is -1 DEFAULT FOR ORA_HRX_FR_PLAN_ENRT_ID IS 0 DEFAULT FOR l_addional_sen_accrual is 0 DEFAULT FOR ORA_HRX_FR_ABS_VAC_CP1_COVR_VALUE IS 0 DEFAULT FOR ORA_HRX_FR_ABS_VAC_ACCR_NOT_USEFUL_DAYS is 0 INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE),IV_EVENT_DATES,IV_ACCRUAL_VALUES, IV_CARRYOVER,IV_CEILING,IV_ACCRUAL_CEILING, IV_CALEDARSTARTDATE (DATE),IV_CALEDARENDDATE (DATE),IV_PLANENROLLMENTSTARTDATE (DATE),IV_PLANENROLLMENTENDDATE (DATE) l_debug_prefix_str = 'FrAccrDiag: ' l_debug_str = CHR(10)|| l_debug_prefix_str || '--------------------Start of Formula -----------------------' l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || '-----------------------------------------------------------' l_dummy = ess_log_write( l_debug_str ) l_carryover = 0 l_plan_enrt_id = 0 Adjustmentdates=EMPTY_DATE_NUMBER Adjustmentvalues=EMPTY_NUMBER_NUMBER Adjustmenttypes=EMPTY_TEXT_NUMBER UPPER_LIMIT_OF_ACCRUAL = 25.0 l_start_date = '4712/12/31 00:00:00' (DATE) l_date = '2030/05/31 00:00:00' (DATE) l_end_date = '4712/12/31 00:00:00' (DATE) accrual =0.0 l_adj_idx=1 l_sen_acr_valdef_name_prefix = 'VAC_FR_SEN_' l_sen_spl_valdef_name_prefix = 'VAC_FR_SPL_' l_vs_name = 'ORA_HRX_FR_VALUE_FROM_VALDEFN' l_ldgid = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID, -1) l_hrasgid = GET_CONTEXT(HR_ASSIGNMENT_ID, -1) l_plan_year_start_Date = IV_CALEDARSTARTDATE l_plan_year_end_Date = IV_CALEDARENDDATE l_no_of_28day_blocks = 0.0 L_REGULAR_CALC_INTERVAL = 28.0 l_accrual_balance_before_this_period = 0.0 l_hire_anniversary_passed = 'N' l_hire_anniversary_this_month = 'N' l_hire_date = PER_TERM_REL_DATE_START IF ( ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE was NOT DEFAULTED) THEN ( l_hire_date = ORA_HRX_FR_ABS_SENIORITY_OVERRIDE_DATE l_debug_str = l_debug_prefix_str || 'Considering Override Hire Date' l_dummy = ess_log_write( l_debug_str ) ) l_debug_str = l_debug_prefix_str || 'Hire Date is : '|| to_char(l_hire_date,'DD-MON-YYYY') l_dummy = ess_log_write( l_debug_str ) l_accrual_for_this_period = 0.0 l_accrual_for_this_period = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') l_debug_str = l_debug_prefix_str || 'Accrual Period: '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY')|| ' AsgId: '|| to_char(l_hrasgid) l_dummy = ess_log_write( l_debug_str ) l_day_of_hire= to_number(to_char(l_hire_date, 'dd')) l_month_of_hire=to_number(to_char(l_hire_date, 'mm')) l_month_of_hire_calc = l_month_of_hire l_current_month = to_number(to_char(IV_ACCRUALPERIODENDDATE, 'mm')) l_current_month_calc = l_current_month if (l_current_month < 6) THEN ( l_current_month_calc = l_current_month + 6 ) if (l_month_of_hire < 6) THEN ( l_month_of_hire_calc = l_month_of_hire + 6 ) if ( l_current_month_calc >= l_month_of_hire_calc) THEN (l_hire_anniversary_passed = 'Y') l_accrual_plan_name = ANC_ABS_PLN_NAME if( l_month_of_hire = l_current_month) then ( l_hire_anniversary_this_month = 'Y' l_years_since_hire_unrounded = ORA_HRX_FR_SENIORITY_IN_YEARS l_years_since_hire= trunc(l_years_since_hire_unrounded,0) l_accrual_plan_id = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_sen_acr_valdef_name = l_sen_acr_valdef_name_prefix || l_accrual_plan_name l_addional_sen_accrual_from_VS = GET_VALUE_SET( l_vs_name ,'|=EFF_DATE='''||to_char(IV_ACCRUALPERIODENDDATE,'DD-MM-YYYY') ||'''|RNG_VAL_TO_CHECK='||to_char(l_years_since_hire)||'|VD_NAME='''|| l_sen_acr_valdef_name ||'''') l_debug_str = l_debug_prefix_str || 'Get From Value Definition |=EFF_DATE='''||to_char(IV_ACCRUALPERIODENDDATE,'DD-MM-YYYY') ||'''|RNG_VAL_TO_CHECK='||to_char(l_years_since_hire)||'|VD_NAME='''|| l_sen_acr_valdef_name ||'''' l_dummy = ess_log_write( l_debug_str ) if(l_addional_sen_accrual_from_VS||'A' = 'A') THEN ( l_addional_sen_accrual_from_VS = '0.0' l_debug_str = l_debug_prefix_str || 'Additional Seniority Accrual Not Specified setting l_addional_sen_accrual_from_VS to 0.0' l_dummy = ess_log_write( l_debug_str ) ) adjustmenttypes[l_adj_idx] = 'ORA_HRX_FR_SEN' adjustmentdates[l_adj_idx] = IV_ACCRUALPERIODENDDATE adjustmentvalues[l_adj_idx] =to_number(l_addional_sen_accrual_from_VS) l_adj_idx=l_adj_idx + 1 l_debug_str = l_debug_prefix_str || 'Hired this month, Seniority Years : ' || to_char(l_years_since_hire) || ' / Extra Seniority Accrual : ' || l_addional_sen_accrual_from_VS l_dummy = ess_log_write( l_debug_str ) ) CHANGE_CONTEXTS(effective_Date=trunc(IV_ACCRUALPERIODSTARTDATE)) ( l_current_accrual_calc_month = to_number(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'MM')) if ( l_current_accrual_calc_month = 11 ) THEN ( l_c1 = GET_CONTEXT(PERSON_ID,-1) l_c2 = GET_CONTEXT(HR_TERM_ID,-1) l_c3 = GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_c4 = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_debug_str = l_debug_prefix_str || 'Getting EnrtId: Contexts 1 to 4 are ' || to_char(l_c1) || ' / ' || to_char(l_c2) || ' / ' || to_char(l_c3) || ' / ' || to_char(l_c4) l_dummy = ess_log_write( l_debug_str ) l_plan_enrt_id = ORA_HRX_FR_PLAN_ENRT_ID l_debug_str = l_debug_prefix_str || 'l_plan_enrt_id is :'|| to_char(l_plan_enrt_id) l_dummy = ess_log_write( l_debug_str ) l_curr_plan_year = to_number(to_char(IV_CALEDARSTARTDATE,'YYYY')) l_carryover_year = l_curr_plan_year - 1 CHANGE_CONTEXTS(ORGANIZATION_ID = l_plan_enrt_id, JOB_ID=l_carryover_year) ( l_c1 = GET_CONTEXT(PERSON_ID,-1) l_c2 = GET_CONTEXT(ORGANIZATION_ID,-1) l_c3 = GET_CONTEXT(JOB_ID, -1) l_debug_str = l_debug_prefix_str || 'Getting EnrtId: Contexts 1 to 3 are ' || to_char(l_c1) || ' / ' || to_char(l_c2) || ' / ' || to_char(l_c3) l_dummy = ess_log_write( l_debug_str ) l_carryover = ORA_HRX_FR_ABS_VAC_CP1_COVR_VALUE ) l_debug_str = l_debug_prefix_str || 'Carryover Balance Period Ending: ' || to_char(trunc(IV_ACCRUALPERIODENDDATE),'DD-MON-YYYY')||' is: '||to_char(l_carryover) l_dummy = ess_log_write( l_debug_str ) l_sen_spl_valdef_name = l_sen_spl_valdef_name_prefix || l_accrual_plan_name l_addional_splitting_days_from_VS = '0.0' l_dummy = ess_log_write( l_debug_str ) l_addional_splitting_days_from_VS = GET_VALUE_SET( l_vs_name ,'|=EFF_DATE='''||to_char(IV_ACCRUALPERIODENDDATE,'DD-MM-YYYY') ||'''|RNG_VAL_TO_CHECK='||to_char(l_carryover)||'|VD_NAME='''|| l_sen_spl_valdef_name ||'''') l_debug_str = l_debug_prefix_str || 'Carryover Balance Period Ending: ' || to_char(trunc(IV_ACCRUALPERIODENDDATE),'DD-MON-YYYY')||' is: '||to_char(l_carryover) l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || 'ValueSet Call ' || l_vs_name || '|=EFF_DATE='''||to_char(IV_ACCRUALPERIODENDDATE,'DD-MM-YYYY') ||'''|RNG_VAL_TO_CHECK='||to_char(l_carryover)||'|VD_NAME='''|| l_sen_spl_valdef_name ||'''' l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || 'Carryover Balance Period Ending: Split Days ' || l_addional_splitting_days_from_VS l_dummy = ess_log_write( l_debug_str ) if ( l_addional_splitting_days_from_VS||'A' = 'A') then ( l_addional_splitting_days_from_VS = '0.0') l_debug_str = l_debug_prefix_str || 'Carryover Balance Period Ending: Split Days After null check ' || l_addional_splitting_days_from_VS l_dummy = ess_log_write( l_debug_str ) adjustmenttypes[l_adj_idx] = 'ORA_HRX_FR_SPL' adjustmentdates[l_adj_idx] = IV_ACCRUALPERIODENDDATE adjustmentvalues[l_adj_idx] = to_number(l_addional_splitting_days_from_VS) l_adj_idx=l_adj_idx+1 ) ) if ( l_accrual_for_this_period > 0 ) then ( l_debug_str = l_debug_prefix_str || 'Accrual already calculated for : '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') ||' returning : ' || to_char(l_accrual_for_this_period) l_dummy = ess_log_write( l_debug_str ) accrual = l_accrual_for_this_period l_array_index=adjustmenttypes.FIRST(-1) while (adjustmenttypes.exists(l_array_index)) loop ( l_debug_str = l_debug_prefix_str || 'Adjustment['||to_char(l_array_index)||'] for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(Adjustmentdates[l_array_index],'DD-MON-YYYY') ||' / '|| Adjustmenttypes[l_array_index] || ' : '|| to_char(Adjustmentvalues[l_array_index]) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.NEXT(l_array_index,-1) ) return accrual, Adjustmentdates, Adjustmentvalues, Adjustmenttypes ) l_debug_str = l_debug_prefix_str || 'Already Calculated for this period : ' || to_char(l_accrual_for_this_period) l_dummy = ess_log_write( l_debug_str ) l_debug_str = l_debug_prefix_str || 'Default UpperLimit of Accrual : ' || to_char(UPPER_LIMIT_OF_ACCRUAL) l_dummy = ess_log_write( l_debug_str ) IF ( ANC_ABS_PLN_INFORMATION_NUMBER3 WAS NOT DEFAULTED) THEN ( IF ( ANC_ABS_PLN_INFORMATION_NUMBER3 > 0 ) THEN ( UPPER_LIMIT_OF_ACCRUAL = ANC_ABS_PLN_INFORMATION_NUMBER3 l_debug_str = l_debug_prefix_str || 'UpperLimit of Accrual Specified on Plan : ' || to_char(UPPER_LIMIT_OF_ACCRUAL) l_dummy = ess_log_write( l_debug_str ) ) ) l_years_since_hire = 0 l_calendar_years_since_hire = 0.0 l_extra_seniority_accrual = 0 l_accrual_calc_start_point_intermediate = GREATEST( trunc(l_hire_date), trunc(IV_CALEDARSTARTDATE)) l_accrual_calc_start_point = GREATEST( l_accrual_calc_start_point_intermediate, trunc(IV_PLANENROLLMENTSTARTDATE)) l_accrual_calc_end_point_intermediate = LEAST (trunc(IV_ACCRUALPERIODENDDATE),trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_accrual_calc_end_point = LEAST( l_accrual_calc_end_point_intermediate, trunc(IV_PLANENROLLMENTENDDATE)) l_debug_str = l_debug_prefix_str || 'l_accrual_calc_start_point : ' || to_char(l_accrual_calc_start_point,'DD-MON-YYYY') || ' l_accrual_calc_end_point: '|| to_char(l_accrual_calc_end_point,'DD-MON-YYYY') l_dummy = ess_log_write( l_debug_str ) l_days_between_accrual_points = days_between ( l_accrual_calc_end_point, l_accrual_calc_start_point) + 1 l_debug_str = l_debug_prefix_str || 'l_days_between_accrual_points Before Not USeful days : ' || to_char(l_days_between_accrual_points) l_dummy = ess_log_write( l_debug_str ) CHANGE_CONTEXTS(START_DATE=l_accrual_calc_start_point, END_DATE=l_accrual_calc_end_point) ( l_not_useful_days = ORA_HRX_FR_ABS_VAC_ACCR_NOT_USEFUL_DAYS ) l_debug_str = l_debug_prefix_str || 'l_not_useful_days : ' || to_char(l_not_useful_days) l_dummy = ess_log_write( l_debug_str ) l_days_between_accrual_points = l_days_between_accrual_points - l_not_useful_days if (l_days_between_accrual_points <= 0) THEN ( l_days_between_accrual_points = 0 ) l_debug_str = l_debug_prefix_str || 'l_days_between_accrual_points After Not USeful days : ' || to_char(l_days_between_accrual_points) l_dummy = ess_log_write( l_debug_str ) l_hired_in_current_period = 'N' l_terminated_in_current_period = 'N' if ( trunc(l_hire_date) > trunc(IV_ACCRUALPERIODSTARTDATE) ) then ( l_hired_in_current_period = 'Y' ) if ( trunc(IV_PLANENROLLMENTSTARTDATE) > trunc(IV_ACCRUALPERIODSTARTDATE) ) then ( l_hired_in_current_period = 'Y' ) if ( trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE) >= trunc(IV_ACCRUALPERIODSTARTDATE) ) and ( trunc(PER_TRM_REL_ACTUAL_TERMINATION_DATE) <= trunc(IV_ACCRUALPERIODENDDATE) ) then ( l_terminated_in_current_period = 'Y' ) if ( trunc(IV_PLANENROLLMENTENDDATE) < trunc(IV_ACCRUALPERIODENDDATE) ) then ( l_terminated_in_current_period = 'Y' ) l_debug_str = l_debug_prefix_str || 'l_days_between_accrual_points : ' || to_char(l_days_between_accrual_points) || ' HiredThisPeriod: '|| l_hired_in_current_period || ' TerminatedThisPeriod: '||l_terminated_in_current_period l_dummy = ess_log_write( l_debug_str ) l_no_of_28day_blocks = l_days_between_accrual_points / L_REGULAR_CALC_INTERVAL l_accrual_balance_before_this_period = 0.0 change_contexts(effective_Date=trunc(IV_ACCRUALPERIODSTARTDATE)) ( l_debug_str = l_debug_prefix_str || 'l_ldgid: :'|| to_char(l_ldgid) ||' / l_hrasgid: '||to_char(l_hrasgid) l_dummy = ess_log_write( l_debug_str ) l_ctx_HR_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID ,-1) l_ctx_effective_Date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_ctx_ldgID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID ,-1) l_ctx_HR_TERM_ID = GET_CONTEXT(HR_TERM_ID ,-1) l_debug_str = l_debug_prefix_str || 'CONTEXTS: l_ctx_HR_ASSIGNMENT_ID: ' || to_char(l_ctx_HR_ASSIGNMENT_ID)|| ' / l_ctx_effective_Date: '||to_char(l_ctx_effective_Date,'DD-MON-YYYY') || ' / l_ctx_ldgID: '|| to_char(l_ctx_ldgID) || ' / l_ctx_HR_TERM_ID: '|| to_char(l_ctx_HR_TERM_ID) l_dummy = ess_log_write( l_debug_str ) l_accrual_balance_before_this_period = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,l_accrual_calc_start_point,trunc(IV_ACCRUALPERIODSTARTDATE),'ACRL',' ') l_debug_str = l_debug_prefix_str || 'Balance Before: ' || to_char(trunc(IV_ACCRUALPERIODSTARTDATE),'DD-MON-YYYY')||' is: '||to_char(l_accrual_balance_before_this_period) l_dummy = ess_log_write( l_debug_str ) ) if ( l_hired_in_current_period = 'N') and ( l_terminated_in_current_period = 'N') then ( l_no_of_28day_blocks = trunc(l_no_of_28day_blocks) ) l_cumulative_accrual = 0.0 l_cumulative_accrual = l_no_of_28day_blocks * IV_ACCRUAL l_debug_str = l_debug_prefix_str || '(B)l_no_of_28day_blocks : ' || to_char(l_no_of_28day_blocks) || ' / l_accrual_balance_before_this_period: '|| to_char(l_accrual_balance_before_this_period) l_dummy = ess_log_write( l_debug_str ) l_additional_accrual_to_check_limit = 0.0 IF ( l_cumulative_accrual > (UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit)) THEN ( l_debug_str = l_debug_prefix_str || 'l_cumulative_accrual: ' || to_char(l_cumulative_accrual) || ' Exceeds:'|| to_char((UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit))||' resetting it back' l_cumulative_accrual = UPPER_LIMIT_OF_ACCRUAL + l_additional_accrual_to_check_limit l_dummy = ess_log_write( l_debug_str ) ) l_current_month_accrual = l_cumulative_accrual - l_accrual_balance_before_this_period l_debug_str = l_debug_prefix_str || 'Accrual Period: '|| to_char(IV_ACCRUALPERIODENDDATE,'MON-YYYY')|| ' l_cumulative_accrual : ' || to_char(l_cumulative_accrual) || ' / l_current_month_accrual: '|| to_char(l_current_month_accrual) l_dummy = ess_log_write( l_debug_str ) accrual = l_current_month_accrual l_debug_str = l_debug_prefix_str || 'Returning Accrual for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(accrual) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.FIRST(-1) while (adjustmenttypes.exists(l_array_index)) loop ( l_debug_str = l_debug_prefix_str || 'Adjustment['||to_char(l_array_index)||'] for : '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') ||' to '|| to_char(IV_ACCRUALPERIODENDDATE,'DD-MON-YYYY') || ' : '|| to_char(Adjustmentdates[l_array_index],'DD-MON-YYYY') ||' / '|| Adjustmenttypes[l_array_index] || ' : '|| to_char(Adjustmentvalues[l_array_index]) l_dummy = ess_log_write( l_debug_str ) l_array_index=adjustmenttypes.NEXT(l_array_index,-1) ) return accrual, Adjustmentdates, Adjustmentvalues, Adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "ORA_HRX_FR_VACATION_ACCRUAL",
        "answer": "DEFAULT FOR ANC_ABS_PLN_CALENDAR_START_MONTH is '06' DEFAULT FOR ANC_ABS_PLN_NAME is 'Unknown' DEFAULT FOR PER_TERM_REL_DATE_START IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_FR_ABS_ACR_END_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_ABS_DURATION IS 0 DEFAULT FOR ORA_HRX_FR_ABS_ACR_CURRENT_BAL IS 0 DEFAULT FOR ORA_HRX_FR_ABS_TOT_CP1_DURATION IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER1 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_INFORMATION1 IS 'N' DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER1 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER2 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER3 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER4 IS 0 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER5 IS 99 DEFAULT FOR ANC_ABS_PLN_ATTRIBUTE_NUMBER6 IS 0 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE) ret = ess_log_write ( '-- Start of Formula ------') l_start_date = '4712/12/31 00:00:00' (DATE) l_date = '2030/05/31 00:00:00' (DATE) l_end_date = '4712/12/31 00:00:00' (DATE) accrual =0.0 adjustmentvalues[1] = 0.0 adjustmentdates[1] = '2018/05/31 00:00:00' (DATE) adjustmenttypes[1] = 'Compensatory' l_consumed_cp1 = 0 l_seniority_days = 0 l_seniority =0 l_seniority_unrounded =0 if ANC_ABS_PLN_INFORMATION_NUMBER1 WAS NOT DEFAULTED THEN accrual_plan_cp1 =ANC_ABS_PLN_INFORMATION_NUMBER1 if ANC_ABS_PLN_INFORMATION_NUMBER2 WAS NOT DEFAULTED THEN accrual_plan_cp2 =ANC_ABS_PLN_INFORMATION_NUMBER2 IF GET_CONTEXT(ACCRUAL_PLAN_ID,0) = accrual_plan_cp2 THEN ( lc_variable_to_be_logged = ' Start Adjustment cp2: ' lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF to_char(IV_ACCRUALPERIODENDDATE, 'mm') = ANC_ABS_PLN_CALENDAR_START_MONTH THEN ( CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = accrual_plan_cp1) ( IF ANC_ABS_PLN_CALENDAR_START_MONTH = '01' THEN ( l_year= SUBSTRING(to_char((TO_NUMBER(to_char(IV_ACCRUALPERIODENDDATE, 'YYYY')) -1)),3,2) l_month ='12' ) ELSE ( l_year= to_char(IV_ACCRUALPERIODENDDATE, 'yy') l_month= SUBSTRING(to_char((TO_NUMBER(to_char(IV_ACCRUALPERIODENDDATE, 'mm')) -1)),1,2) ) l_date = LAST_DAY(TO_DATE('01' || '/' || l_month || '/' || l_year, 'dd/mm/yy')) lc_variable_to_be_logged = ' Date used for getting balance cp1: '|| to_char(l_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_date) ( accrual = ROUNDUP(get_plan_balance(ANC_ABS_PLN_NAME)) lc_variable_to_be_logged = ' Date used for balance cp1: '|| to_char(l_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' balance cp1 to be transfered: '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) adjustmentvalues[1] = accrual adjustmentdates[1] = IV_ACCRUALPERIODSTARTDATE adjustmenttypes[1] = 'Compensatory' accrual = 0 lc_variable_to_be_logged = ' Adjustement date: '|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' Adjustment amount: '|| to_char(adjustmentvalues[1]) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) ) ) ) IF GET_CONTEXT(ACCRUAL_PLAN_ID,0) = accrual_plan_cp1 THEN ( lc_variable_to_be_logged = ' Start Accrual cp1: ' lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') != 0 THEN ( accrual = GET_BAL_COMP_VAL(ANC_ABS_PLN_NAME,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE,'ACRL',' ') lc_variable_to_be_logged = 'Accrual already computed for the period so let accrual as it is : '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) return accrual ) IF to_char(IV_ACCRUALPERIODENDDATE, 'mm') = to_char(PER_TERM_REL_DATE_START, 'mm') THEN IF to_char(IV_ACCRUALPERIODENDDATE, 'yy') = to_char(PER_TERM_REL_DATE_START, 'yy') THEN ( accrual = IV_ACCRUAL * (days_BETWEEN(IV_ACCRUALPERIODENDDATE, PER_TERM_REL_DATE_START)+1) lc_variable_to_be_logged = ' days between: '|| to_char((days_BETWEEN(IV_ACCRUALPERIODENDDATE, PER_TERM_REL_DATE_START)+1)) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) accrual = accrual / to_number(to_char(LAST_DAY(IV_ACCRUALPERIODENDDATE),'DD')) lc_variable_to_be_logged = ' nuumber days of the month: '|| to_char(LAST_DAY(IV_ACCRUALPERIODENDDATE),'DD') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) accrual = roundup(accrual,2) lc_variable_to_be_logged = 'Accrual hired person: '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) return accrual ) l_month=to_char(IV_ACCRUALPERIODENDDATE, 'mm') IF to_number(l_month) >= TO_NUMBER(ANC_ABS_PLN_CALENDAR_START_MONTH) THEN l_year= to_char(IV_ACCRUALPERIODENDDATE, 'yy') ELSE l_year= SUBSTRING(to_char((TO_NUMBER(to_char(IV_ACCRUALPERIODENDDATE, 'YYYY')) -1)),3,2) lc_variable_to_be_logged = 'The year is : '|| l_year lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_start_date_plan = TO_DATE('01/'|| ANC_ABS_PLN_CALENDAR_START_MONTH || '/' || l_year, 'dd/mm/yy') lc_variable_to_be_logged = 'The start date plan is : '|| to_char(l_start_date_plan,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_start_date = GREATEST(l_start_date_plan , PER_TERM_REL_DATE_START) lc_variable_to_be_logged = 'The start date is : '|| to_char(l_start_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_end_date = LEAST (IV_ACCRUALPERIODENDDATE,PER_TRM_REL_ACTUAL_TERMINATION_DATE) lc_variable_to_be_logged = 'The end date is : '|| to_char(l_end_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_ACCRUALPERIODENDDATE) ( l_no_of_days=days_BETWEEN(l_end_date, l_start_date) + 1 - ORA_HRX_FR_ABS_TOT_ABS_DURATION lc_variable_to_be_logged = 'The number of days is : '|| to_char(l_no_of_days) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF (PER_TRM_REL_ACTUAL_TERMINATION_DATE was not DEFAULTED) THEN l_no_of_month=l_no_of_days/28 ELSE l_no_of_month=TRUNC(l_no_of_days/28,0) lc_variable_to_be_logged = 'The number of 28 days is : '|| to_char(l_no_of_month) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) l_total_accrual_uncapped = IV_ACCRUAL* l_no_of_month l_total_accrual = LEAST(l_total_accrual_uncapped,25) lc_variable_to_be_logged = 'The total accrual is : '|| to_char(l_total_accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF to_char(IV_ACCRUALPERIODENDDATE, 'mm') = ANC_ABS_PLN_CALENDAR_START_MONTH THEN current_balance = 0 ELSE current_balance = get_plan_balance(ANC_ABS_PLN_NAME) lc_variable_to_be_logged = 'Previous balance is : '|| to_char(current_balance) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) IF to_char(IV_ACCRUALPERIODENDDATE, 'mm') = ANC_ABS_PLN_CALENDAR_START_MONTH THEN l_consumed_cp1 = ORA_HRX_FR_ABS_TOT_CP1_DURATION ELSE l_consumed_cp1 = ORA_HRX_FR_ABS_TOT_CP1_DURATION lc_variable_to_be_logged = 'Consumed cp1 : '|| to_char(l_consumed_cp1) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF ANC_ABS_PLN_INFORMATION1 = 'Y' THEN ( l_day= to_char(PER_TERM_REL_DATE_START, 'dd') l_month=to_char(PER_TERM_REL_DATE_START, 'mm') l_year =to_char(l_start_date_plan, 'yy') l_anniversary_hire_date= TO_DATE(l_day || '/' || l_month || '/' || l_year, 'dd/mm/yy') l_day= to_char(LAST_DAY(l_anniversary_hire_date),'dd') if l_day = '29' then l_day='28' l_anniversary_hire_date= TO_DATE(l_day || '/' || l_month || '/' || l_year, 'dd/mm/yy') IF l_anniversary_hire_date < l_start_date_plan THEN ( l_year= SUBSTRING(to_char((TO_NUMBER(to_char(l_anniversary_hire_date, 'YYYY')) +1)),3,2) l_anniversary_hire_date= TO_DATE(l_day || '/' || l_month || '/' || l_year, 'dd/mm/yy') ) lc_variable_to_be_logged = 'The anniversary year is : '|| l_year lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = 'The anniversary hire date is : '|| to_char(l_anniversary_hire_date,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) IF IV_ACCRUALPERIODENDDATE >= l_anniversary_hire_date THEN ( l_seniority_unrounded= days_BETWEEN(IV_ACCRUALPERIODENDDATE, PER_TERM_REL_DATE_START)/365 l_seniority= trunc(l_seniority_unrounded,0) IF l_seniority >= 4 THEN l_seniority_days= 2 lc_variable_to_be_logged = 'Accrual Seniority day: '|| to_char(l_seniority_days) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) ) accrual =l_total_accrual - current_balance + l_consumed_cp1 + l_seniority_days IF (PER_TRM_REL_ACTUAL_TERMINATION_DATE was not DEFAULTED) THEN ( adjustmentvalues[1] = TRUNC(accrual,2) adjustmentdates[1] = PER_TRM_REL_ACTUAL_TERMINATION_DATE adjustmenttypes[1] = 'Compensatory' accrual = 0 lc_variable_to_be_logged = ' Adjustement date: '|| to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE,'DD-MON-YYYY') lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) lc_variable_to_be_logged = ' Adjustment amount: '|| to_char(adjustmentvalues[1]) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) lc_variable_to_be_logged = 'The accrual cp1 is : '||to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) ) lc_variable_to_be_logged = 'Accrual : '|| to_char(accrual) lc_dummy_variable = ESS_LOG_WRITE(lc_variable_to_be_logged) return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "CIMB_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_PLANENROLLMENTENDDATE , IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_PLANENROLLMENTENDDATE , IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ) ) mn=mn+1 ) ) ELSE( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) + 1 l_no_of_days2 = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, l_band_chg_dt1) + 1 ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_KH_BFL_3YRS_EXP_YEAR_1",
        "answer": "DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_ann_plan_name = 'Annual Leave Plan' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) accrual = 0 l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) l_acrl_balance_year = 0 change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_ann_plan_name) ) l_log =ess_log_write('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)) accrual = LEAST(6,l_acrl_balance_year) l_log =ess_log_write('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)||'ACCRUAL'||TO_CHAR(accrual)) Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_ID_ANNUAL_LEAVE_ACCRUAL_MATR",
        "answer": "DEFAULT FOR PER_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR BASE_SENIORITY_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for PER_SENDT_F_V3_SENIORITY_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for PER_SENDT_F_V3_SENIORITY_DATE_CODE IS ' ' DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_PERSON_NUMBER IS ' ' DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PER_ACCRUAL_ENTRY_ID IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_TYPE IS ' ' DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PROCD_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_VALUE IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PL_ID IS ' ' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS ' ' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' INPUTS ARE IV_ACCRUAL,IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date),IV_ACCRUALPERIODSTARTDATE (date),IV_ACCRUALPERIODENDDATE (date) l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') accrual_x=0 final_accrual=0 l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_current_date = IV_ACCRUALPERIODENDDATE l_term_date = PER_REL_ACTUAL_TERMINATION_DATE l_current_date = to_date('31/12/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') l_grade_name = 'X' l_prev_grade_name ='bb' l_prev_year_band = 'x' l_approved_abs_days=0 l_accrual_prev = 0 L_prv_Ann_Acrl_Balance=0 l_exp_amount = 0 l_covr = 0 l_adj = 0 l_jan_abs_ent = 0 l_feb_june_abs_ent = 0 l_half_exp_amount = 0 l_total_exp_amount = 0 L_prv_year_end_date=to_date('31/12/' || to_char(ADD_YEARS(IV_CALEDARSTARTDATE,-1),'YYYY'),'dd/mm/yyyy') L_prv_year_start_date = to_date('01/01/' || to_char(ADD_YEARS(IV_CALEDARSTARTDATE,-1),'YYYY'),'dd/mm/yyyy') accrual = 0 l_hire_date = '1951/01/01 00:00:00' (date) l_svc_date= '4712/12/31 00:00:00' (date) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_termination= PER_REL_ACTUAL_TERMINATION_DATE l_asg_cat = PER_ASG_EMPLOYMENT_CATEGORY l_contract_end=PER_ASG_PROJECTED_ASSIGNMENT_END_DATE ) i_sen=1 CHANGE_CONTEXTS(PERSON_ID=l_person_id,EFFECTIVE_DATE= l_current_date) ( WHILE PER_SENDT_F_V3_SENIORITY_DATE.exists(i_sen) LOOP ( IF (PER_SENDT_F_V3_SENIORITY_DATE_CODE[i_sen]='CIMB_LE_SENIORITY_RULE') THEN ( l_svc_date=PER_SENDT_F_V3_SENIORITY_DATE[i_sen] ) i_sen=i_sen+1 ) ) l_hire_year= to_number(to_char(l_hire_date,'YYYY')) l_acc_year = to_number(to_char(IV_ACCRUALPERIODSTARTDATE,'YYYY')) l_prev_year = to_number(to_char(L_prv_year_start_date,'YYYY')) Actual_Accrual_Start_Date=GREATEST(IV_CALEDARSTARTDATE,l_hire_date, IV_ACCRUALPERIODSTARTDATE) Actual_Accrual_End_Date=LEAST(IV_CALEDARENDDATE,l_termination,IV_ACCRUALPERIODENDDATE) Accrual_Probation_Start_Date=ADD_MONTHS(l_hire_date,3) l_year_band = 'X' L_Ann_accrual_char='X' L_Ann_accrual=0 l_covr_flag = 'N' l_prev_serv_mon = 0 l_prev_per_month_acc = 0 l_service_months = 0 L_DEBUG = ess_log_write('Data:' ||l_asg_cat || '.contract:'|| to_char(l_contract_end) ||'.l_svc_date:' || to_char(l_svc_date)||'.l_hire_date='||to_char(l_hire_date)) L_DEBUG = ess_log_write('Dates Accrual:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD') || ','||to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')||'.Calendar:'|| TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD') || ','||to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')||'.Planned:'||to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')||','||to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) IF (to_char(IV_CALEDARSTARTDATE,'YYYY')='2020' and l_hire_date<to_date('01/10/2020','DD/MM/YYYY')) THEN ( accrual=IV_ACCRUAL return accrual ) if ( l_asg_cat = 'CIMB_DP' OR l_asg_cat = 'CIMB_OTH_DP') then ( l_row = l_asg_cat if (l_asg_cat = 'CIMB_DP' OR l_asg_cat = 'CIMB_OTH_DP') then ( l_row = 'MT_OTHERS' ) L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_ID_ANNUAL_LEAVE','Entitlement',l_row,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_per_mon_acc = L_Ann_accrual/12 l_service_months = MONTHS_BETWEEN(Actual_Accrual_End_Date,Actual_Accrual_Start_Date) accrual_x = l_per_mon_acc * l_service_months floored_accrual = floor(accrual_x) decimal_accrual = accrual_x - floored_accrual IF (decimal_accrual = 0) THEN ( final_accrual = floored_accrual ) IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN ( final_accrual = floored_accrual + 1 ) IF (decimal_accrual > 0.5) THEN ( final_accrual = floored_accrual + 1 ) accrual = final_accrual RETURN accrual ) else if (l_asg_cat = 'PERMANENT' OR l_asg_cat = 'CONTRACT') THEN ( IF(l_asg_cat='CONTRACT' AND to_char(IV_ACCRUALPERIODENDDATE,'YYYY')=to_char(l_contract_end,'YYYY')) THEN ( Actual_Accrual_End_Date=LEAST(IV_CALEDARENDDATE,l_termination,IV_ACCRUALPERIODENDDATE,l_contract_end) L_DEBUG = ess_log_write('Override:'|| TO_CHAR(Actual_Accrual_End_Date)) ) IF(l_hire_year+10 <=to_number(to_char(IV_ACCRUALPERIODSTARTDATE,'YYYY'))) THEN ( l_year_band='ENT_10' ) ELSE IF(l_hire_year+4 <=to_number(to_char(IV_ACCRUALPERIODSTARTDATE,'YYYY'))) THEN ( l_year_band='ENT_4_10' ) ELSE ( l_year_band='ENT_1_4' ) L_DEBUG = ess_log_write('Grade Name Current Year:'||l_grade_name||'Current Year Band :'||l_year_band) L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_ID_ANNUAL_LEAVE',l_grade_name,l_year_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF(l_grade_name='MT') THEN ( IF(l_sys_date <to_date(to_char(ADD_YEARS(l_hire_date,1),'YYYY') ||'/'|| to_char(l_hire_date,'MM/DD'),'YYYY/MM/DD')) THEN ( accrual = 0 RETURN accrual ) ELSE ( L_Ann_accrual=12 ) ) l_per_mon_acc = L_Ann_accrual/12 IF(l_hire_year = l_acc_year) THEN ( l_service_months=to_number(to_char(Actual_Accrual_End_Date,'MM'))-to_number(to_char(Actual_Accrual_Start_Date,'MM'))+1 accrual_x = l_per_mon_acc * l_service_months ) ELSE IF (l_hire_year != l_acc_year) THEN ( IF (PER_REL_ACTUAL_TERMINATION_DATE WAS DEFAULTED) then ( IF(l_asg_cat='CONTRACT' AND to_char(IV_ACCRUALPERIODENDDATE,'YYYY')=to_char(l_contract_end,'YYYY')) THEN ( l_service_months=to_number(to_char(Actual_Accrual_End_Date,'MM'))-to_number(to_char(Actual_Accrual_Start_Date,'MM'))+1 accrual_x = l_per_mon_acc * l_service_months ) ELSE ( accrual_x=L_Ann_accrual ) ) ELSE ( l_service_months=to_number(to_char(Actual_Accrual_End_Date,'MM'))-to_number(to_char(Actual_Accrual_Start_Date,'MM'))+1 accrual_x = l_per_mon_acc * l_service_months ) ) floored_accrual = floor(accrual_x) decimal_accrual = accrual_x - floored_accrual IF (decimal_accrual = 0) THEN ( final_accrual = floored_accrual ) IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN ( final_accrual = floored_accrual + 1 ) IF (decimal_accrual > 0.5) THEN ( final_accrual = floored_accrual + 1 ) accrual = final_accrual L_DEBUG = ess_log_write('Balance:'|| to_char(accrual) || '.month_between:'|| to_char(l_service_months)) IF(l_hire_year=to_number(to_char(IV_CALEDARSTARTDATE,'YYYY'))) THEN ( L_DEBUG = ess_log_write('return') return accrual ) if (l_hire_year <= l_prev_year) then ( l_covr_flag = 'Y' IF(l_hire_year+10 <=to_number(to_char(L_prv_year_start_date,'YYYY'))) THEN ( l_prev_year_band='ENT_10' ) ELSE IF(l_hire_year+4 <=to_number(to_char(L_prv_year_start_date,'YYYY'))) THEN ( l_prev_year_band='ENT_4_10' ) ELSE ( l_prev_year_band='ENT_1_4' ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = L_prv_year_end_date) ( l_prev_grade_name = PER_ASG_GRADE_NAME ) L_prev_Ann_accrual = TO_NUMBER(GET_TABLE_VALUE('CIMB_ID_ANNUAL_LEAVE',l_prev_grade_name,l_prev_year_band,'0')) l_prev_per_month_acc = L_prev_Ann_accrual/12 if (l_hire_year = l_prev_year) THEN ( l_prev_serv_mon = MONTHS_BETWEEN(L_prv_year_end_date,l_hire_date) l_accrual_prev=l_prev_per_month_acc * l_prev_serv_mon l_accrual_prev = L_prev_Ann_accrual ) else ( l_accrual_prev = L_prev_Ann_accrual ) floored_accrual = floor(l_accrual_prev) decimal_accrual = l_accrual_prev - floored_accrual IF (decimal_accrual = 0) THEN ( final_accrual = floored_accrual ) IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN ( final_accrual = floored_accrual + 1 ) IF (decimal_accrual > 0.5) THEN ( final_accrual = floored_accrual + 1 ) l_accrual_prev = final_accrual L_DEBUG = ess_log_write('Grade Name Previous Year:'||l_prev_grade_name||'Previous Year Band :'||l_prev_year_band) L_DEBUG = ess_log_write('Previous Year Annual Accrual: '||to_char(l_accrual_prev)) ) if (l_covr_flag = 'Y') then ( L_DEBUG = ess_log_write('Carryover Loop') l_start_date = to_date('01/01/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') l_end_date = to_date('30/06/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/01/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') L_Accrual_id = GET_CONTEXT(ACCRUAL_PLAN_ID, 0) l_abs_ent = 0 l_entry_value = 0 l_entry_type = 'abc' l_proc_date = TO_DATE('1951/1/1','YYYY/MM/DD') o=1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date, PERSON_ID = l_person_id) ( WHILE ABS_EXT_ACR_ENT_PER_ACCRUAL_ENTRY_ID.exists(o) LOOP ( CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = L_Accrual_id) ( l_proc_date = ABS_EXT_ACR_ENT_PROCD_DATE[o] l_entry_type = ABS_EXT_ACR_ENT_TYPE[o] l_entry_value = ABS_EXT_ACR_ENT_VALUE[o] IF (l_proc_date >= l_start_date) AND (l_proc_date <= l_end_date) THEN ( IF (l_entry_type = 'COVR') THEN ( l_covr = l_entry_value ) ELSE IF (l_entry_type = 'ADJOTH') THEN ( l_adj = l_adj + l_entry_value ) ELSE IF (l_entry_type = 'ABS') then ( IF (l_proc_date <= ld_end_date) then ( l_jan_abs_ent = l_jan_abs_ent + l_entry_value ) else ( l_feb_june_abs_ent = l_feb_june_abs_ent + l_entry_value ) ) ) ) o=o+1 ) ) ) l_jan_abs_ent = l_jan_abs_ent * -1 l_feb_june_abs_ent = l_feb_june_abs_ent * -1 l_half_acc_amount = floor(l_accrual_prev/2) l_jan_bal = l_covr - l_jan_abs_ent l_log = ess_log_write('l_covr: '||to_char(l_covr)) l_log = ess_log_write('l_jan_abs_ent: '||to_char(l_jan_abs_ent)) l_log = ess_log_write('l_feb_june_abs_ent: '||to_char(l_feb_june_abs_ent)) l_log = ess_log_write('l_half_acc_amount: '||to_char(l_half_acc_amount)) q=1 j=0 l_total_exp_date = to_date('01/07/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') l_half_exp_date = to_date('01/02/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') j=j+1 while(q < 4) Loop ( L_DEBUG = ess_log_write('Adjustment Main Loop') if(q=1 AND l_current_date >= l_half_exp_date) THEN ( l_total_exp_amount = l_covr - (l_jan_abs_ent + l_feb_june_abs_ent) ) if ((q=1) and (l_covr > l_half_acc_amount) AND l_current_date >= l_half_exp_date) then ( l_total_exp_amount=l_covr- (l_jan_abs_ent + l_feb_june_abs_ent) IF(l_jan_abs_ent<l_half_acc_amount) THEN ( L_DEBUG = ess_log_write('Feb Adjustment Loop') l_carryover_bal_red = l_covr - l_half_acc_amount - l_jan_abs_ent IF (l_carryover_bal_red < 0) THEN ( l_carryover_bal_red = 0 ) l_total_exp_amount = l_covr - (l_carryover_bal_red + l_jan_abs_ent + l_feb_june_abs_ent) p_half_exp_reason = 'CIMB_COVR_LV_RIGHT' adjustmentvalues[j] = l_carryover_bal_red * -1 adjustmentdates[j] = l_half_exp_date adjustmenttypes[j] = p_half_exp_reason l_log = ess_log_write('Half Expiry Value: '|| to_char(adjustmentvalues[j])) l_log = ess_log_write('Half Expiry Date: '||to_char(j)||': '||to_char(adjustmentdates[j])) j=j+1 ) ) else if ((q=2) and (l_total_exp_amount > 0 AND l_current_date >= l_total_exp_date)) then ( L_DEBUG = ess_log_write('Total expiry Loop') p_tot_exp_reason = 'CIMB_COVR_EXP' adjustmentvalues[j] = l_total_exp_amount * -1 adjustmentdates[j] = l_total_exp_date adjustmenttypes[j] = p_tot_exp_reason l_log = ess_log_write('Full Expiry Value: '|| to_char(adjustmentvalues[j])) l_log = ess_log_write('Full Expiry Date: '||to_char(j)||': '||to_char(adjustmentdates[j])) j=j+1 ) else if (q=3) then ( l_year='YEAR_'||TO_CHAR(IV_ACCRUALPERIODENDDATE,'YYYY') l_attribute_date1='1951/01/01' l_attribute_date2='1951/01/01' l_attribute_date3='1951/01/01' l_attribute_date4='1951/01/01' l_attribute_date5='1951/01/01' l_attribute_date6='1951/01/01' l_attribute_date7='1951/01/01' l_attribute_date8='1951/01/01' l_attribute_date1 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE1','1951/01/01') l_attribute_date2 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE2','1951/01/01') l_attribute_date3 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE3','1951/01/01') l_attribute_date4 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE4','1951/01/01') l_attribute_date5 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE5','1951/01/01') l_attribute_date6 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE6','1951/01/01') l_attribute_date7 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE7','1951/01/01') l_attribute_date8 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE8','1951/01/01') l_log = ess_log_write('l_attribute_date: '|| l_attribute_date1||'.'||l_attribute_date2||'.'||l_attribute_date3||'.'||l_attribute_date4) l_validate=0 IF(l_attribute_date1 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date1,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date2 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date2,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date3 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date3,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date4 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date4,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date5 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date5,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date6 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date6,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date7 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date7,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date8 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date8,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF l_validate >0 THEN ( adjustmentvalues[j] = (-1* l_validate) l_total_exp_date = to_date('01/01/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') adjustmentdates[j] = l_total_exp_date adjustmenttypes[j] = 'CIMB_SPECIAL_ADJ' j=j+1 ) ) q=q+1 ) ) return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Indonesia"
    },
    {
        "FORMULA_NAME": "CIMB_KH_AL_ACC_MTRX",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ) ) mn=mn+1 ) ) ELSE( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) + 1 l_no_of_days2 = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, l_band_chg_dt1) + 1 ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_TH_DM_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/05 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL L_DATA = ESS_LOG_WRITE('HOS IV_ACCRUALPERIODSTARTDATE::'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')|| 'IV_CALEDARSTARTDATE:'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')||'IV_CALEDARENDDATE:'||TO_CHAR(IV_CALEDARENDDATE,'YYYY/MM/DD')) RETURN ACCRUAL",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_KH_BFL_3YRS_EXP_YEAR_2",
        "answer": "DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_bfl_acrl_balance = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 1' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) accrual = 0 l_acrl_balance_year = 0 change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_bfl_plan_name) ) accrual = l_acrl_balance_year l_log =ess_log_write('L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)||'l_prv_year_end_date'||TO_CHAR(l_prv_year_end_date)) Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_KH_BFL_3YRS_EXP_YEAR_3",
        "answer": "DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_bfl_acrl_balance = 0 l_bfl_acrl_balance_carry = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 2' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_bfl_plan_name) ) accrual = l_acrl_balance_year Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_TH_AL_CONTR_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_9_yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_grade_band = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_hire_date = PER_ASG_REL_DATE_START l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ann_year_start_dt = '4712/12/31 00:00:00' (date) L_ann_year_end_dt = '1951/01/01 00:00:00' (date) l_worked_days = 0 l_total_days = 0 L_Accrual_Prd_Strt_Dt = IV_ACCRUALPERIODSTARTDATE L_Accrual_Prd_End_Dt = IV_ACCRUALPERIODENDDATE l_adj_value = 0 accrual1 = 0 l_dm_date = '2019/09/05 00:00:00' (date) L_ann_year_start_dt = TO_DATE(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')) L_ann_year_end_dt = ADD_DAYS(TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY'))+1)||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')),-1) L_Accrual_Prd_Strt_Dt = L_ann_year_start_dt L_Accrual_Prd_End_Dt = L_ann_year_end_dt IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ACCRUAL = 0 ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) l_hire_date = PER_ASG_REL_DATE_START r = ess_log_write('l_hire_date:'||to_char(l_hire_date)) r = ess_log_write('L_ann_year_start_dt:'||to_char(L_ann_year_start_dt)) r = ess_log_write('L_ann_year_end_dt:'||to_char(L_ann_year_end_dt)) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = TO_DATE(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY')||'-'||TO_CHAR(PER_ASG_REL_DATE_START,'MM')||'-'||TO_CHAR(PER_ASG_REL_DATE_START,'DD')) period_end_date = LEAST(PER_ASG_REL_ACTUAL_TERMINATION_DATE , ADD_DAYS(ADD_MONTHS(period_start_date,12),-1)) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Contractor Annual Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan') THEN ( CHANGE_CONTEXTS(START_DATE = IV_CALEDARSTARTDATE,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Training Leave') THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('period_end_date: '|| TO_CHAR(period_end_date)||'period_start_date'||TO_CHAR(period_start_date)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, period_start_date) l_no_of_days2 = DAYS_BETWEEN(period_end_date, l_band_chg_dt1) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) ) IF ( L_Accrual_Prd_Strt_Dt < l_band_chg_dt2 AND L_Accrual_Prd_End_Dt > l_band_chg_dt2) THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, period_start_date) l_no_of_days2 = DAYS_BETWEEN(l_band_chg_dt2, l_band_chg_dt1) l_no_of_days3 = DAYS_BETWEEN(period_end_date, l_band_chg_dt2) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) l_accrued_period3 = ROUND(((l_accrued_period3 * (l_no_of_days3 - l_approved_abs_days3))/ l_acrl_per_duration), 3) ) ACCRUAL = l_accrued_period1 + l_accrued_period2 + l_accrued_period3 l_log = ESS_LOG_WRITE('l_no_of_days1: '|| TO_CHAR(l_no_of_days1)) l_log = ESS_LOG_WRITE('l_no_of_days2: '|| TO_CHAR(l_no_of_days2)) l_log = ESS_LOG_WRITE('l_no_of_days3: '|| TO_CHAR(l_no_of_days3)) l_log = ESS_LOG_WRITE('Total Absences: '|| TO_CHAR(l_approved_abs_days1 + l_approved_abs_days2 + l_approved_abs_days3)) l_log = ESS_LOG_WRITE('l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('Accrual: '|| TO_CHAR(Accrual)) ) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual <= 0.25) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.25 and decimal_accrual <= 0.75) THEN final_accrual = floored_accrual+ 0.5 IF (decimal_accrual > 0.75) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN ACCRUAL",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_GET_COMP_DATA",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 ,check_start_date (date) ,check_end_date (date) ,comp_limit (number) ,CURR_YR_ST_date (date) ,CURR_YR_END_date (date) l_abs_typ_name_check = 'X' I = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_start_date = check_start_date L_end_date = check_end_date Z = 1 l_abs_start_dt = '4712/12/31 00:00:00' (date) l_abs_end_dt = '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_job_name = PER_ASG_JOB_NAME L_RETURN_VALUE ='N' l_comp_limit_ch = 'X' l_comp_limit = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_curr_yr_st_dt = CURR_YR_ST_date l_curr_yr_END_dt = CURR_YR_END_date L_nxt_working_st_day = '4712/12/31 00:00:00' (date) L_nxt_working_day = '4712/12/31 00:00:00' (date) Annual[1] = '4712/12/31 00:00:00' (date) BFL[1] = '4712/12/31 00:00:00' (date) L_prv_duration = 0 l_log =ESS_LOG_WRITE('[GET COMP DATE] l_person_id'||TO_CHAR(l_person_id)||'L_start_date:'||TO_CHAR(L_start_date)||'L_END_DATE:'||TO_CHAR(L_END_DATE)||'comp_limit:'||TO_CHAR(comp_limit)) CHANGE_CONTEXTS (START_DATE= L_start_date , END_DATE= L_END_DATE) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND (ANC_ABS_ENTRS_END_DATE > l_curr_yr_st_dt AND ANC_ABS_ENTRS_START_DATE < l_curr_yr_END_dt) THEN ( l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside l_abs_typ_name_check:'||l_abs_typ_name_check||'ANC_ABS_ENTRS_START_DATE'||TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD')||'ANC_ABS_ENTRS_END_DATE'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE,'YYYY/MM/DD')||'DUR:'||TO_CHAR(ANC_ABS_ENTRS_DURATION)) IF ((l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Hajj Leave' OR l_abs_typ_name_check = 'Monkhood Leave') AND ( ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000021047780 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300004155060729 OR ANC_ABS_ENTRS_ATTRIBUTE1 like 'Block Leave%')) OR ( ANC_ABS_ENTRS_ATTRIBUTE1 like 'Block Leave%') THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 1') EXIT ) ) ) ) i = i + 1 ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] L_RETURN_VALUE'||L_RETURN_VALUE) RETURN L_RETURN_VALUE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_TH_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_dm_date = '2019/09/05 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' THEN l_grade_band = 'U1_TO_U2' ELSE IF l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' THEN l_grade_band = 'U3_TO_U6' ELSE IF l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'U10.' OR l_grade_name = 'U11.' THEN l_grade_band = 'U7_TO_U11' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'ENTITLEMENT','0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Training Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual adjustmentvalues[1] = l_reduced_days * -1 adjustmenttypes [1] = 'CIMB_NEG_BAL_OFFSET' adjustmentdates[1] = TO_DATE('2018/05/02','YYYY/DD/MM') l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = 0 ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_AFTVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 l_accrual_rate3 = IV_ACCRUAL ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Annual Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = IV_CALEDARSTARTDATE,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Training Leave') THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) l_no_of_days2 = DAYS_BETWEEN(period_end_date, l_band_chg_dt1) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) l_no_of_days2 = DAYS_BETWEEN(l_band_chg_dt2, l_band_chg_dt1) l_no_of_days3 = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, l_band_chg_dt2) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) l_accrued_period3 = ROUND(((l_accrued_period3 * (l_no_of_days3 - l_approved_abs_days3))/ l_acrl_per_duration), 3) ) ACCRUAL = ROUND(l_accrued_period1 + l_accrued_period2 + l_accrued_period3,2) l_log = ESS_LOG_WRITE('l_no_of_days1: '|| TO_CHAR(l_no_of_days1)) l_log = ESS_LOG_WRITE('l_no_of_days2: '|| TO_CHAR(l_no_of_days2)) l_log = ESS_LOG_WRITE('l_no_of_days3: '|| TO_CHAR(l_no_of_days3)) l_log = ESS_LOG_WRITE('Total Absences: '|| TO_CHAR(l_approved_abs_days1 + l_approved_abs_days2 + l_approved_abs_days3)) l_log = ESS_LOG_WRITE('l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('Accrual: '|| TO_CHAR(Accrual)) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual ) change_contexts(effective_date = L_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_prv_Ann_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ) IF L_prv_Ann_Acrl_Balance <0 THEN ( adjustmentvalues[z] = L_prv_Ann_Acrl_Balance * -1 adjustmenttypes [z] = 'CIMB_NEG_BAL_OFFSET' adjustmentdates[z] = IV_ACCRUALPERIODSTARTDATE ) RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('Line 147 - l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START,IV_PLANENROLLMENTSTARTDATE) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE,IV_PLANENROLLMENTENDDATE) l_log =ESS_LOG_WRITE('Line 152 - fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('Line 160 - fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_BFL_NOEXP_LEAVE_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave Plan No Expiry' l_acrl_days_char = 'X' l_acrl_days = 0 l_init_days_char = 'X' l_init_days = 0 L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_PERSON_ENTERPRISE_HIRE_DATE l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) L_udt_row = 'X' l_carryover_limit = 0 l_grade_name = PER_ASG_GRADE_NAME l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_avl_days = 0 accrual = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_BFL_Acrl_Balance = GET_PLAN_BALANCE(l_bfl_plan_name) ) L_DATA = ESS_LOG_WRITE('CIMB_MY_BFL_NOEXP_LEAVE_ACCRUAL L_Acrl_Balance_Year:'||TO_CHAR(L_Acrl_Balance_Year)||'L_BFL_Acrl_Balance'||TO_CHAR(L_BFL_Acrl_Balance)) IF (l_grade_name = 'EQ.1' OR l_grade_name = 'EQ.2' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.4') THEN ( l_avl_days = GREATEST(L_Acrl_Balance_Year,0) accrual = GREATEST(L_BFL_Acrl_Balance,0) IF accrual < 0 THEN accrual = 0 ) IF (l_grade_name = '35' OR l_grade_name = '36') THEN ( IF l_los_in_months <= 60 THEN l_carryover_limit = 12 ELSE IF l_los_in_months > 60 THEN l_carryover_limit = 15 l_avl_days = LEAST(l_carryover_limit,GREATEST(L_Acrl_Balance_Year,0)) accrual = LEAST(30,GREATEST(L_BFL_Acrl_Balance,0) + l_avl_days) ) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_BFL_3YEARS_EXP_LEAVE_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 L_BFL_Acrl_Balance_carry = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry' l_acrl_days_char = 'X' l_acrl_days = 0 l_init_days_char = 'X' l_init_days = 0 L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) L_udt_row = 'X' l_carryover_limit = 0 l_grade_name = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_avl_days = 0 l_carry_limit_3yr = 0 l_los_in_months_3yr = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_BFL_Acrl_Balance = GET_PLAN_BALANCE(l_bfl_plan_name) ) change_contexts(effective_date = ADD_MONTHS(l_prv_year_end_date,-24), LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_BFL_Acrl_Balance_carry = GET_PLAN_BALANCE(l_bfl_plan_name) IF ADD_MONTHS(l_prv_year_end_date,-36) > L_hire_date THEN l_los_in_months_3yr = MONTHS_BETWEEN(ADD_MONTHS(l_prv_year_end_date,-36),L_hire_date) IF l_los_in_months_3yr > 0 AND l_los_in_months_3yr <= 24 THEN l_carry_limit_3yr = 6 ELSE IF l_los_in_months_3yr > 24 AND l_los_in_months_3yr <= 48 THEN l_carry_limit_3yr = 4 ELSE IF l_los_in_months_3yr > 48 AND l_los_in_months_3yr <= 180 THEN l_carry_limit_3yr = 7 ELSE IF l_los_in_months_3yr > 180 THEN l_carry_limit_3yr = 10 ) ACCRUAL = L_BFL_Acrl_Balance - LEAST(L_BFL_Acrl_Balance,LEAST(L_BFL_Acrl_Balance_carry,l_carry_limit_3yr)) IF L_los_in_months <= 24 THEN ACCRUAL = ACCRUAL + LEAST(6,L_Acrl_Balance_Year) ELSE IF L_los_in_months > 24 AND L_los_in_months <= 48 THEN ACCRUAL = ACCRUAL + LEAST(4,L_Acrl_Balance_Year) ELSE IF L_los_in_months > 48 AND L_los_in_months <= 180 THEN ACCRUAL = ACCRUAL + LEAST(7,L_Acrl_Balance_Year) ELSE IF L_los_in_months > 180 THEN ACCRUAL = ACCRUAL + LEAST(10,L_Acrl_Balance_Year) adjustmentvalues[1] = ACCRUAL adjustmenttypes [1] = 'CIMB_CF_CARRYOVER' adjustmentdates[1] = TO_DATE(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'dd/mm/yyyy'),'dd/mm/yyyy') ACCRUAL = 0 Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_SG_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_9_yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_grade_band = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_hire_date = PER_ASG_REL_DATE_START l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) final_accrual = 0 l_svc_period = 0 l_dm_date = '2019/09/23 00:00:00' (date) z = 1 l_reduced_days = 0 l_approved_abs_days = 0 l_grade_band = 'X' l_grade_name = PER_ASG_GRADE_NAME L_seniority_date_char = 'X' l_person_id = GET_CONTEXT(PERSON_ID,0) adjustmentvalues[1] = 1 adjustmenttypes [1] = 'XXX' adjustmentdates[1] = TO_DATE('1951/01/01','YYYY/DD/MM') l_log =ESS_LOG_WRITE('l_ann_rate_1_char'||l_ann_rate_1_char||'l_ann_rate_2_char'||l_ann_rate_2_char||'l_yr_ann_date'||TO_CHAR(l_yr_ann_date)) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF L_svc_months <= 60 THEN L_svc_band = 'LT_5' ELSE IF L_svc_months > 60 AND L_svc_months <= 120 THEN L_svc_band = 'GT_5_LT_10' ELSE L_svc_band = 'GT_10' IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' OR l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'S10' OR l_grade_name = 'S11' OR l_grade_name = 'S12' OR l_grade_name = 'U5.' OR l_grade_name = 'S6' OR l_grade_name = 'S7' OR l_grade_name = 'S8' OR l_grade_name = 'S9' THEN l_grade_band = 'U1_TO_U5' ELSE IF l_grade_name = 'U6.' OR l_grade_name = 'S4' OR l_grade_name = 'S5' THEN l_grade_band = 'U6' ELSE IF l_grade_name = 'MA.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3' THEN l_grade_band = 'U7_TO_U9' ELSE IF l_grade_name = 'U10.' OR l_grade_name = 'U11.' THEN l_grade_band = 'U10_TO_U11' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,L_svc_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual adjustmentvalues[1] = l_reduced_days * -1 adjustmenttypes [1] = 'CIMB_NEG_BAL_OFFSET' adjustmentdates[1] = TO_DATE('2018/05/02','YYYY/DD/MM') l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = l_reduced_days * -1 RETURN ACCRUAL ) ELSE( L_seniority_date_char = GET_VALUE_SET('CIMB_GET_SENIORITY_DATE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''|| TO_CHAR(LEAST(IV_ACCRUALPERIODENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE),'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('L_seniority_date_char'||L_seniority_date_char) IF ISNULL(L_seniority_date_char) = 'N' THEN L_seniority_date = L_hire_date ELSE L_seniority_date = TO_DATE(L_seniority_date_char,'YYYY/MM/DD') l_5yr_ann_date = ADD_MONTHS(L_seniority_date,60) l_9_yr_ann_date = ADD_MONTHS(L_seniority_date,108) l_10_yr_ann_date = ADD_MONTHS(L_seniority_date,108) l_log =ESS_LOG_WRITE('l_5yr_ann_date'||TO_CHAR(l_5yr_ann_date)) l_log =ESS_LOG_WRITE('l_10_yr_ann_date'||TO_CHAR(l_10_yr_ann_date)) IF (l_5yr_ann_date > IV_ACCRUALPERIODSTARTDATE AND l_5yr_ann_date < IV_ACCRUALPERIODENDDATE) THEN ( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_5yr_ann_date) ( L_grade_anniv = PER_ASG_GRADE_NAME ) l_log =ESS_LOG_WRITE('l_5yr_ann_date::L_grade_anniv'||L_grade_anniv) IF L_grade_anniv = 'G1.' OR L_grade_anniv = 'G2.' OR L_grade_anniv = 'G3.' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name = 'U1.' OR L_grade_anniv = 'U1.' OR l_grade_name = 'U2.' OR L_grade_anniv = 'U2.' OR l_grade_name = 'U3.' OR L_grade_anniv = 'U3.' OR l_grade_name = 'U4.' OR L_grade_anniv = 'U4.' OR l_grade_name = 'U5.' OR L_grade_anniv = 'U5.' OR l_grade_name = 'S6' OR l_grade_anniv = 'S6' OR l_grade_name = 'S7' OR L_grade_anniv = 'S7' OR l_grade_name = 'S8' OR L_grade_anniv = 'S8' OR l_grade_name = 'S9' OR L_grade_anniv = 'S9' OR l_grade_name = 'S10' OR L_grade_anniv = 'S10' OR l_grade_name = 'S11' OR L_grade_anniv = 'S11' OR l_grade_name = 'S12' OR L_grade_anniv = 'S12' THEN l_grade_band = 'U1_TO_U5' ELSE IF l_grade_name = 'U6.' OR l_grade_anniv = 'U6.' OR l_grade_name = 'S4' OR l_grade_anniv = 'S4' OR l_grade_name = 'S5' OR l_grade_anniv = 'S5' OR l_grade_name = 'S6' OR l_grade_anniv = 'S6' THEN l_grade_band = 'U6' ELSE IF l_grade_name = 'MA.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S2' OR l_grade_name = 'S3' OR l_grade_anniv = 'U7.' OR l_grade_anniv = 'U8.' OR l_grade_anniv = 'U9.' OR l_grade_anniv = 'S1' OR l_grade_anniv = 'S1a' OR l_grade_anniv = 'S1b' OR l_grade_anniv = 'S2' OR l_grade_anniv = 'S3' THEN l_grade_band = 'U7_TO_U9' ELSE IF L_grade_anniv = 'U10.' OR L_grade_anniv = 'U11.' THEN l_grade_band = 'U10_TO_U11' l_ann_rate_1_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'LT_5',IV_ACCRUALPERIODSTARTDATE) l_ann_rate_1 = TO_NUMBER(l_ann_rate_1_char) l_ann_rate_2_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'GT_5_LT_10',IV_ACCRUALPERIODSTARTDATE) l_ann_rate_2 = TO_NUMBER(l_ann_rate_2_char) l_yr_ann_date = l_5yr_ann_date ) ELSE IF (l_10_yr_ann_date > IV_ACCRUALPERIODSTARTDATE AND l_10_yr_ann_date < IV_ACCRUALPERIODENDDATE) THEN ( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = GREATEST(l_10_yr_ann_date, IV_PLANENROLLMENTSTARTDATE)) ( L_grade_anniv = PER_ASG_GRADE_NAME ) l_log =ESS_LOG_WRITE('l_10_yr_ann_date::L_grade_anniv'||L_grade_anniv) IF L_grade_anniv = 'G1.' OR L_grade_anniv = 'G2.' OR L_grade_anniv = 'G3.' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name = 'U1.' OR L_grade_anniv = 'U1.' OR l_grade_name = 'U2.' OR L_grade_anniv = 'U2.' OR l_grade_name = 'U3.' OR L_grade_anniv = 'U3.' OR l_grade_name = 'U4.' OR L_grade_anniv = 'U4.' OR l_grade_name = 'U5.' OR L_grade_anniv = 'U5.' OR l_grade_name = 'S7' OR L_grade_anniv = 'S7' OR l_grade_name = 'S8' OR L_grade_anniv = 'S8' OR l_grade_name = 'S9' OR L_grade_anniv = 'S9' OR l_grade_name = 'S10' OR L_grade_anniv = 'S10' OR l_grade_name = 'S11' OR L_grade_anniv = 'S11' OR l_grade_name = 'S12' OR L_grade_anniv = 'S12' THEN l_grade_band = 'U1_TO_U5' ELSE IF l_grade_name = 'U6.' OR l_grade_name = 'S4' OR l_grade_name = 'S5' OR l_grade_name = 'S6' THEN l_grade_band = 'U6' ELSE IF l_grade_name = 'MA.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3' THEN l_grade_band = 'U7_TO_U9' ELSE IF L_grade_anniv = 'U10.' OR L_grade_anniv = 'U11.' THEN l_grade_band = 'U10_TO_U11' l_log =ESS_LOG_WRITE('l_10_yr_ann_date:'||l_grade_band) l_ann_rate_1_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'GT_5_LT_10',IV_ACCRUALPERIODSTARTDATE) l_ann_rate_1 = TO_NUMBER(l_ann_rate_1_char) l_ann_rate_2_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'GT_10',IV_ACCRUALPERIODSTARTDATE) l_ann_rate_2 = TO_NUMBER(l_ann_rate_2_char) l_yr_ann_date = l_10_yr_ann_date ) l_log =ESS_LOG_WRITE('l_ann_rate_1_char'||l_ann_rate_1_char||'l_ann_rate_2_char'||l_ann_rate_2_char||'l_yr_ann_date'||TO_CHAR(l_yr_ann_date)) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_yr_ann_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') AND l_band_chg_dt1 <> l_yr_ann_date AND l_band_chg_dt2 <> l_yr_ann_date THEN ( IF l_band_chg_dt1 > l_yr_ann_date THEN ( l_band_chg_dt2 = l_band_chg_dt1 l_band_chg_dt1 = l_yr_ann_date l_accrued_period3 = l_accrued_period2 l_accrued_period2 = l_ann_rate_2 l_accrued_period1 = l_ann_rate_1 l_log =ESS_LOG_WRITE('BAND 1') ) ELSE IF l_band_chg_dt1 < l_yr_ann_date AND l_band_chg_dt1 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt2 = l_yr_ann_date l_accrued_period3 = l_ann_rate_2 l_log =ESS_LOG_WRITE('BAND 2') ) ELSE IF l_band_chg_dt1 < IV_ACCRUALPERIODSTARTDATE AND l_yr_ann_date > IV_ACCRUALPERIODSTARTDATE THEN ( l_log =ESS_LOG_WRITE('BAND 3') l_band_chg_dt1 = l_yr_ann_date l_accrued_period1 = l_ann_rate_1 l_accrued_period2 = l_ann_rate_2 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Annual Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( l_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,0) i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( IF (l_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave') THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration _x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_AL_CONTR_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_9_yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_grade_band = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_hire_date = PER_ASG_REL_DATE_START l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ann_year_start_dt = '4712/12/31 00:00:00' (date) L_ann_year_end_dt = '1951/01/01 00:00:00' (date) l_worked_days = 0 l_total_days = 0 L_Accrual_Prd_Strt_Dt = IV_ACCRUALPERIODSTARTDATE L_Accrual_Prd_End_Dt = IV_ACCRUALPERIODENDDATE l_adj_value = 0 accrual1 = 0 l_dm_date = '2019/09/23 00:00:00' (date) l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_grade_name = PER_ASG_GRADE_NAME L_ann_year_start_dt = TO_DATE(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')) L_ann_year_end_dt = ADD_DAYS(TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY'))+1)||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')),-1) L_Accrual_Prd_Strt_Dt = L_ann_year_start_dt L_Accrual_Prd_End_Dt = L_ann_year_end_dt IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' THEN l_grade_band = 'U1_TO_U2' ELSE IF l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' OR l_grade_name = 'S4' OR l_grade_name = 'S5' OR l_grade_name = 'S6' OR l_grade_name = 'S7' OR l_grade_name = 'S8' OR l_grade_name = 'S9' OR l_grade_name = 'S10' OR l_grade_name = 'S11' OR l_grade_name = 'S12' THEN l_grade_band = 'U3_TO_U6' ELSE IF l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'U10.' OR l_grade_name = 'U11.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3'THEN l_grade_band = 'U7_TO_U11' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'ENTITLEMENT','0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = L_ann_year_end_dt) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = l_reduced_days * -1 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) l_hire_date = PER_ASG_REL_DATE_START r = ess_log_write('l_hire_date:'||to_char(l_hire_date)) r = ess_log_write('L_ann_year_start_dt:'||to_char(L_ann_year_start_dt)) r = ess_log_write('L_ann_year_end_dt:'||to_char(L_ann_year_end_dt)) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = TO_DATE(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY')||'-'||TO_CHAR(PER_ASG_REL_DATE_START,'MM')||'-'||TO_CHAR(PER_ASG_REL_DATE_START,'DD')) period_end_date = ADD_DAYS(ADD_MONTHS(period_start_date,12),-1) period_end_date = LEAST(ADD_DAYS(ADD_MONTHS(period_start_date,12),-1), iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Annual Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan') THEN ( CHANGE_CONTEXTS(START_DATE = IV_CALEDARSTARTDATE,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave') THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('period_end_date: '|| TO_CHAR(period_end_date)||'period_start_date'||TO_CHAR(period_start_date)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, period_start_date) l_no_of_days2 = DAYS_BETWEEN(period_end_date, l_band_chg_dt1) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) ) IF ( L_Accrual_Prd_Strt_Dt < l_band_chg_dt2 AND L_Accrual_Prd_End_Dt > l_band_chg_dt2) THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, period_start_date) l_no_of_days2 = DAYS_BETWEEN(l_band_chg_dt2, l_band_chg_dt1) l_no_of_days3 = DAYS_BETWEEN(period_end_date, l_band_chg_dt2) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) l_accrued_period3 = ROUND(((l_accrued_period3 * (l_no_of_days3 - l_approved_abs_days3))/ l_acrl_per_duration), 3) ) ACCRUAL = l_accrued_period1 + l_accrued_period2 + l_accrued_period3 l_log = ESS_LOG_WRITE('l_no_of_days1: '|| TO_CHAR(l_no_of_days1)) l_log = ESS_LOG_WRITE('l_no_of_days2: '|| TO_CHAR(l_no_of_days2)) l_log = ESS_LOG_WRITE('l_no_of_days3: '|| TO_CHAR(l_no_of_days3)) l_log = ESS_LOG_WRITE('Total Absences: '|| TO_CHAR(l_approved_abs_days1 + l_approved_abs_days2 + l_approved_abs_days3)) l_log = ESS_LOG_WRITE('l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('Accrual: '|| TO_CHAR(Accrual)) IF PER_ASG_PROJECTED_ASSIGNMENT_END_DATE > period_start_date AND PER_ASG_PROJECTED_ASSIGNMENT_END_DATE < period_end_date THEN ( ACCRUAL = ACCRUAL * (MONTHS_BETWEEN(PER_ASG_PROJECTED_ASSIGNMENT_END_DATE,period_start_date)+1)/(MONTHS_BETWEEN(period_end_date,period_start_date)+1) ) ) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN ACCRUAL",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_MY_AL_CONTR_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_2yr_ann_date = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_15_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' L_ann_year_start_dt = '4712/12/31 00:00:00' (date) L_ann_year_end_dt = '1951/01/01 00:00:00' (date) L_Accrual_Prd_Strt_Dt = IV_ACCRUALPERIODSTARTDATE L_Accrual_Prd_End_Dt = IV_ACCRUALPERIODENDDATE l_dm_date = '2019/09/23 00:00:00' (date) L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_grade_name = PER_ASG_GRADE_NAME l_year_band = 'X' l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) l_prv_year_st_date = '1951/01/01 00:00:00' (date) L_init_acrl = 0 L_act_acrl = 0 L_ann_year_start_dt = TO_DATE(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')) L_ann_year_end_dt = ADD_DAYS(TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY'))+1)||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')),-1) L_Accrual_Prd_Strt_Dt = L_ann_year_start_dt L_Accrual_Prd_End_Dt = L_ann_year_end_dt CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT.' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA.' THEN l_grade_band = 'MA' ELSE IF l_grade_name LIKE '80.%' OR l_grade_name LIKE '79.%' OR l_grade_name LIKE '78.%' OR l_grade_name LIKE '77.%' OR l_grade_name LIKE '76.%' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name LIKE '75.%' OR l_grade_name LIKE '74.%' OR l_grade_name LIKE '73.%' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name LIKE '72.%' THEN l_grade_band = 'G_72' ELSE IF l_grade_name LIKE '71.%' OR l_grade_name LIKE '70.%' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_81D_TO_73D' ELSE IF l_grade_name = '72D.' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'G32_TO_G33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = l_reduced_days * -1 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( l_log =ESS_LOG_WRITE('l_ann_rate_1_char'||l_ann_rate_1_char||'l_ann_rate_2_char'||l_ann_rate_2_char||'l_yr_ann_date'||TO_CHAR(l_yr_ann_date)) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = IV_CALEDARSTARTDATE period_end_date = IV_CALEDARENDDATE period_end_date_term = LEAST(period_end_date, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Period Start Date: '|| to_char(period_start_date,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Period End Date: '|| to_char(period_end_date,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_AL_CONTR_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_2yr_ann_date = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_15_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' L_ann_year_start_dt = '4712/12/31 00:00:00' (date) L_ann_year_end_dt = '1951/01/01 00:00:00' (date) L_Accrual_Prd_Strt_Dt = IV_ACCRUALPERIODSTARTDATE L_Accrual_Prd_End_Dt = IV_ACCRUALPERIODENDDATE l_dm_date = '2019/09/23 00:00:00' (date) L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_grade_name = PER_ASG_GRADE_NAME l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_year_band = 'X' l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) l_prv_year_st_date = '1951/01/01 00:00:00' (date) L_init_acrl = 0 L_act_acrl = 0 l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_ann_year_start_dt = TO_DATE(TO_CHAR(IV_CALEDARSTARTDATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')) L_ann_year_end_dt = ADD_DAYS(TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY'))+1)||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')),-1) L_Accrual_Prd_Strt_Dt = L_ann_year_start_dt l_log =ESS_LOG_WRITE('Line 149 L_Accrual_Prd_Strt_Dt : '||TO_CHAR(L_Accrual_Prd_Strt_Dt)) L_Accrual_Prd_End_Dt = L_ann_year_end_dt l_log =ESS_LOG_WRITE('Line 149 L_Accrual_Prd_End_Dt : '||TO_CHAR(L_Accrual_Prd_End_Dt)) CHANGE_CONTEXTS(EFFECTIVE_DATE = L_ann_year_start_dt) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('Line 155 l_prv_fte : '||TO_CHAR(l_prv_fte)||' IV_CALEDARSTARTDATE : '||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE, IV_PLANENROLLMENTSTARTDATE) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE, IV_ACCRUALPERIODENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('Line 159 fte_start_date[mn] : '||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||' fte_value[mn] : '||TO_CHAR(fte_value[mn])||' MN : '||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('Line 167 fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE, PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('Line 195 fte_end_date[mn-1] - IV_PLANENROLLMENTENDDATE'||TO_CHAR(IV_PLANENROLLMENTENDDATE)) l_log =ESS_LOG_WRITE('Line 196 fte_end_date[mn-1] - IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODENDDATE)) l_log =ESS_LOG_WRITE('Line 197 fte_end_date[mn-1] - PER_ASG_REL_ACTUAL_TERMINATION_DATE'||TO_CHAR(PER_ASG_REL_ACTUAL_TERMINATION_DATE)) l_log =ESS_LOG_WRITE('Line 198 fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1])) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF l_grade_name LIKE 'GCEO.%' OR l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' OR l_grade_name LIKE 'C11.%' THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT.' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA.' THEN l_grade_band = 'MA' ELSE IF l_grade_name LIKE 'C%' THEN l_grade_band = 'C' ELSE IF l_grade_name LIKE '80.%' OR l_grade_name LIKE '79.%' OR l_grade_name LIKE '78.%' OR l_grade_name LIKE '77.%' OR l_grade_name LIKE '76.%' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name LIKE '75.%' OR l_grade_name LIKE '74.%' OR l_grade_name LIKE '73.%' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name LIKE '72.%' THEN l_grade_band = 'G_72' ELSE IF l_grade_name LIKE '71.%' OR l_grade_name LIKE '70.%' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_81D_TO_73D' ELSE IF l_grade_name = '72D.' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'G32_TO_G33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'C' OR l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = l_reduced_days * -1 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( l_log =ESS_LOG_WRITE('l_ann_rate_1_char'||l_ann_rate_1_char||'l_ann_rate_2_char'||l_ann_rate_2_char||'l_yr_ann_date'||TO_CHAR(l_yr_ann_date)) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = IV_CALEDARSTARTDATE period_end_date = IV_CALEDARENDDATE period_end_date_term = LEAST(period_end_date, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Period Start Date: '|| to_char(period_start_date,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Period End Date: '|| to_char(period_end_date,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('L_year_start_date : '|| to_char(L_ann_year_start_dt,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF _x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_BFL_3YRS_EXP_LEAVE_ACCRUAL_YEAR_1",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) ACCRUAL = 0 l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) L_Acrl_Balance_Year = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) ) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)) IF L_los_in_months <= 24 THEN ACCRUAL = ACCRUAL + LEAST(7,GREATEST(L_Acrl_Balance_Year,0)) ELSE IF L_los_in_months > 24 AND L_los_in_months <= 48 THEN ACCRUAL = ACCRUAL + LEAST(5,GREATEST(L_Acrl_Balance_Year,0)) ELSE IF L_los_in_months > 48 AND L_los_in_months <= 180 THEN ACCRUAL = ACCRUAL + LEAST(8,GREATEST(L_Acrl_Balance_Year,0)) ELSE IF L_los_in_months > 180 THEN ACCRUAL = ACCRUAL + LEAST(11,GREATEST(L_Acrl_Balance_Year,0)) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)||'ACCRUAL'||TO_CHAR(ACCRUAL)) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_BFL_3YRS_EXP_LEAVE_ACCRUAL_YEAR_2",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 1' L_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 ) ELSE ( change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_bfl_plan_name) ) ACCRUAL = L_Acrl_Balance_Year l_log =ESS_LOG_WRITE('L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)||'l_prv_year_end_date'||TO_CHAR(l_prv_year_end_date)) ) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_BFL_3YRS_EXP_LEAVE_ACCRUAL_YEAR_3",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 L_BFL_Acrl_Balance_carry = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 2' L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 ) ELSE ( change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_bfl_plan_name) ) ACCRUAL = L_Acrl_Balance_Year ) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_HOS_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL L_DATA = ESS_LOG_WRITE('HOS IV_ACCRUALPERIODSTARTDATE::'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')|| 'IV_CALEDARSTARTDATE:'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')||'IV_CALEDARENDDATE:'||TO_CHAR(IV_CALEDARENDDATE,'YYYY/MM/DD')) RETURN ACCRUAL",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_MY_GET_COMP_DATA",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 ,check_start_date (date) ,check_end_date (date) ,comp_limit (number) ,CURR_YR_ST_date (date) ,CURR_YR_END_date (date) l_abs_typ_name_check = 'X' I = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_start_date = check_start_date L_end_date = check_end_date Z = 1 l_abs_start_dt = '4712/12/31 00:00:00' (date) l_abs_end_dt = '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_job_name = PER_ASG_JOB_NAME L_RETURN_VALUE ='N' l_comp_limit_ch = 'X' l_comp_limit = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_curr_yr_st_dt = CURR_YR_ST_date l_curr_yr_END_dt = CURR_YR_END_date L_nxt_working_st_day = '4712/12/31 00:00:00' (date) L_nxt_working_day = '4712/12/31 00:00:00' (date) Annual[1] = '4712/12/31 00:00:00' (date) j = 1 l_duration = 0 BFL[1] = '4712/12/31 00:00:00' (date) L_prv_duration = 0 l_log =ESS_LOG_WRITE('[GET COMP DATE] l_person_id'||TO_CHAR(l_person_id)||'L_start_date:'||TO_CHAR(L_start_date)||'L_END_DATE:'||TO_CHAR(L_END_DATE)||'comp_limit:'||TO_CHAR(comp_limit)) CHANGE_CONTEXTS (START_DATE= L_start_date , END_DATE= L_END_DATE) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND (ANC_ABS_ENTRS_END_DATE > l_curr_yr_st_dt AND ANC_ABS_ENTRS_START_DATE < l_curr_yr_END_dt) THEN ( l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside l_abs_typ_name_check:'||l_abs_typ_name_check||'ANC_ABS_ENTRS_START_DATE'||TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD')||'ANC_ABS_ENTRS_END_DATE'||TO_CHAR(ANC_ABS_ENTRS_END_DATE,'YYYY/MM/DD')||'DUR:'||TO_CHAR(ANC_ABS_ENTRS_DURATION)) IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Brought Forward Leave') AND ( ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755045 OR ANC_ABS_ENTRS_DURATION => comp_limit) THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 1') EXIT ) ELSE IF ((( l_abs_typ_name_check = 'Paternity Leave - 1st Time Father' OR l_abs_typ_name_check = 'Hajj Leave' OR l_abs_typ_name_check = 'Hajj Leave (Calendar Days)' OR l_abs_typ_name_check = 'Hajj Leave (Days)' OR l_abs_typ_name_check = 'Marriage Leave' OR l_abs_typ_name_check = 'Volunteerism Leave') AND ANC_ABS_ENTRS_DURATION => comp_limit) OR l_abs_typ_name_check = 'Staff Rejuvenation Leave' OR l_abs_typ_name_check = 'Sabbatical Leave' OR l_abs_typ_name_check LIKE 'Prolonged Illness Leave%' OR l_abs_typ_name_check = 'Maternity Leave' OR l_abs_typ_name_check = 'Maternity Leave - 1st Time Mothers' OR l_abs_typ_name_check = 'Pilgrimage Leave or Umrah Leave') THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 2') EXIT ) ELSE IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Brought Forward Leave') THEN ( l_duration = ANC_ABS_ENTRS_DURATION l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3'||'ANC_ABS_ENTRS_ABSENCE_REASON_ID'||TO_CHAR(ANC_ABS_ENTRS_ABSENCE_REASON_ID)) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') = TO_DATE(TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') AND (L_prv_duration + ANC_ABS_ENTRS_DURATION) => comp_limit THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:1') ) ELSE( l_msg = 'In' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:2') L_prv_duration = ANC_ABS_ENTRS_DURATION L_nxt_working_day = ADD_DAYS(ANC_ABS_ENTRS_END_DATE,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', L_nxt_working_day, ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', L_nxt_working_day, ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:2 L_nxt_working_day'||TO_CHAR(L_nxt_working_day)) ) j = 1 l_log =ESS_LOG_WRITE('[GET COMP DATE] L_comp_limit'||TO_CHAR(L_comp_limit)) CHANGE_CONTEXTS (START_DATE= ANC_ABS_ENTRS_START_DATE , END_DATE= L_nxt_working_day) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF ((ANC_ABS_TYP_NAME = 'Annual Leave' AND l_abs_typ_name_check = 'Brought Forward Leave') OR (ANC_ABS_TYP_NAME = 'Brought Forward Leave' AND l_abs_typ_name_check = 'Annual Leave') OR (ANC_ABS_TYP_NAME = 'Annual Leave' AND l_abs_typ_name_check = 'Unpaid Leave')) AND L_nxt_working_day = ANC_ABS_ENTRS_START_DATE AND (l_duration + ANC_ABS_ENTRS_DURATION => comp_limit) THEN ( L_RETURN_VALUE = 'Y' EXIT ) ) ) j = j + 1 ) ) IF L_RETURN_VALUE = 'Y' THEN EXIT ) ) ) i = i + 1 ) ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] L_RETURN_VALUE'||L_RETURN_VALUE) RETURN L_RETURN_VALUE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_SG_HOS_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL IF l_grade_name = 'INTERN' THEN ACCRUAL = ACCRUAL * ((DAYS_BETWEEN(IV_PLANENROLLMENTENDDATE, IV_PLANENROLLMENTSTARTDATE)+1)/(DAYS_BETWEEN (IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1)) RETURN ACCRUAL",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_SG_GET_COMP_DATA",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 ,check_start_date (date) ,check_end_date (date) ,comp_limit (number) ,CURR_YR_ST_date (date) ,CURR_YR_END_date (date) l_abs_typ_name_check = 'X' I = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_start_date = check_start_date L_end_date = check_end_date Z = 1 l_abs_start_dt = '4712/12/31 00:00:00' (date) l_abs_end_dt = '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_job_name = PER_ASG_JOB_NAME L_RETURN_VALUE ='N' l_comp_limit_ch = 'X' l_comp_limit = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_curr_yr_st_dt = CURR_YR_ST_date l_curr_yr_END_dt = CURR_YR_END_date L_nxt_working_st_day = '4712/12/31 00:00:00' (date) L_nxt_working_day = '4712/12/31 00:00:00' (date) Annual[1] = '4712/12/31 00:00:00' (date) BFL[1] = '4712/12/31 00:00:00' (date) L_prv_duration = 0 l_log =ESS_LOG_WRITE('[GET COMP DATE] l_person_id'||TO_CHAR(l_person_id)||'L_start_date:'||TO_CHAR(L_start_date)||'L_END_DATE:'||TO_CHAR(L_END_DATE)||'comp_limit:'||TO_CHAR(comp_limit)) CHANGE_CONTEXTS (START_DATE= L_start_date , END_DATE= L_END_DATE) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND (ANC_ABS_ENTRS_END_DATE > l_curr_yr_st_dt AND ANC_ABS_ENTRS_START_DATE < l_curr_yr_END_dt) THEN ( l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside l_abs_typ_name_check:'||l_abs_typ_name_check||'ANC_ABS_ENTRS_START_DATE'||TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD')||'ANC_ABS_ENTRS_END_DATE'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE,'YYYY/MM/DD')||'DUR:'||TO_CHAR(ANC_ABS_ENTRS_DURATION)) IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Maternity Leave' OR l_abs_typ_name_check = 'Extended Maternity Leave' OR l_abs_typ_name_check = 'Marriage Leave' OR l_abs_typ_name_check = 'Paternity Leave' OR l_abs_typ_name_check = 'Shared Parental Leave' OR l_abs_typ_name_check = 'National Service Leave') AND ( ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003790259) THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 1') EXIT ) ) ) ) i = i + 1 ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] L_RETURN_VALUE'||L_RETURN_VALUE) RETURN L_RETURN_VALUE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_MY_HOS_CONTR_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL L_DATA = ESS_LOG_WRITE('HOS IV_ACCRUALPERIODSTARTDATE::'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')|| 'IV_CALEDARSTARTDATE:'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')||'IV_CALEDARENDDATE:'||TO_CHAR(IV_CALEDARENDDATE,'YYYY/MM/DD')) RETURN ACCRUAL",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_HK_ABS_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE '%Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Hong Kong"
    },
    {
        "FORMULA_NAME": "CIMB_MY_AL_GEXCO_ACCR_MATRIX",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 accrual = 24 carryover = 7 prorationFactor = 1 carryOverProration = 1 IF IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( accrual = (accrual/365) * (DAYS_BETWEEN(IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE) + 1) ) IF IV_CALEDARENDDATE > IV_PLANENROLLMENTENDDATE THEN ( accrual = (accrual/365) * (DAYS_BETWEEN(IV_PLANENROLLMENTENDDATE, IV_CALEDARSTARTDATE) + 1) ) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual accrual = accrual * PER_ASG_FTE_VALUE carryover = carryover RETURN accrual, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_VN_AnnualAccrualLeave",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ) ) mn=mn+1 ) ) ELSE( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) + 1 l_no_of_days2 = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, l_band_chg_dt1) + 1 ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_ab_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_MY_BFL_6MONTHS_EXPIRY_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_CARRYOVER_VALUES ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave Plan 6 Months Expiry' l_acrl_days_char = 'X' l_acrl_days = 0 l_init_days_char = 'X' l_init_days = 0 L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) L_udt_row = 'X' l_carryover_limit = 0 l_grade_name = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_avl_days = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_BFL_Acrl_Balance = GET_PLAN_BALANCE(l_bfl_plan_name) ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_prv_year_end_date, HR_ASSIGNMENT_ID = l_hr_assign_id) ( l_grade_name = PER_ASG_GRADE_NAME ) l_carryover_limit = 7 L_DATA = ESS_LOG_WRITE('Brought Forward Leave Plan 6 Months Expiry L_Acrl_Balance_Year:'||TO_CHAR(L_Acrl_Balance_Year)||'L_BFL_Acrl_Balance'||TO_CHAR(L_BFL_Acrl_Balance)) IF L_Acrl_Balance_Year = 0 THEN accrual = 0 ELSE IF L_Acrl_Balance_Year >= 7 THEN accrual = 7 ELSE accrual = L_Acrl_Balance_Year Return ACCRUAL",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_UK_BFL_2YRS_EXPIRY",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave 2 Years Expiry' L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) ACCRUAL = 0 l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) L_Acrl_Balance_Year = 0 L_Acrl_Plan_Balance_Year = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_Acrl_Plan_Balance_Year = GET_PLAN_BALANCE(l_bfl_plan_name) ) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)) ACCRUAL = GREATEST(L_Acrl_Plan_Balance_Year,0) + GREATEST(L_Acrl_Balance_Year,0) IF ACCRUAL > 20 THEN ACCRUAL = 20 ELSE ACCRUAL = ACCRUAL l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)||'ACCRUAL'||TO_CHAR(ACCRUAL)) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_UK_BFL_2YRS_EXPIRY",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave 2 Years Expiry' L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) ACCRUAL = 0 l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) L_Acrl_Balance_Year = 0 L_Acrl_Plan_Balance_Year = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_Acrl_Plan_Balance_Year = GET_PLAN_BALANCE(l_bfl_plan_name) ) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)) ACCRUAL = GREATEST(L_Acrl_Balance_Year,0) IF ACCRUAL > 14 THEN ACCRUAL = 14 ELSE ACCRUAL = ACCRUAL l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)||'ACCRUAL'||TO_CHAR(ACCRUAL)) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_CN_ABS_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE '%Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| _x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB China"
    },
    {
        "FORMULA_NAME": "CIMB_IN_ANNUAL_ACCRUAL",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date) i = 1 j = 2 ln_accrual_total = 0 WHILE IV_EVENT_DATES.EXISTS(j) LOOP ( ln_accrual_total = ln_accrual_total + ( (DAYS_BETWEEN(IV_EVENT_DATES[j], IV_EVENT_DATES[i]) + 1) * IV_ACCRUAL_VALUES[i] ) i = i+1 j = j+1 ) ln_term_duration = DAYS_BETWEEN(IV_CALEDARENDDATE, IV_CALEDARSTARTDATE) + 1 ln_accrual = PER_ASG_FTE_VALUE * (ln_accrual_total / ln_term_duration) accrual = ROUND(ln_accrual, 2) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB India"
    },
    {
        "FORMULA_NAME": "CIMB_UK_GET_COMP_DATA",
        "answer": "DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 ,check_start_date (date) ,check_end_date (date) ,comp_limit (number) ,CURR_YR_ST_date (date) ,CURR_YR_END_date (date) l_abs_typ_name_check = 'X' I = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_start_date = check_start_date L_end_date = check_end_date Z = 1 l_abs_start_dt = '4712/12/31 00:00:00' (date) l_abs_end_dt = '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_job_name = PER_ASG_JOB_NAME L_RETURN_VALUE ='N' l_comp_limit_ch = 'X' l_comp_limit = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_curr_yr_st_dt = CURR_YR_ST_date l_curr_yr_END_dt = CURR_YR_END_date L_nxt_working_st_day = '4712/12/31 00:00:00' (date) L_nxt_working_day = '4712/12/31 00:00:00' (date) Annual[1] = '4712/12/31 00:00:00' (date) j = 1 l_duration = 0 BFL[1] = '4712/12/31 00:00:00' (date) L_prv_duration = 0 l_log =ESS_LOG_WRITE('[GET COMP DATE] l_person_id'||TO_CHAR(l_person_id)||'L_start_date:'||TO_CHAR(L_start_date)||'L_END_DATE:'||TO_CHAR(L_END_DATE)||'comp_limit:'||TO_CHAR(comp_limit)) CHANGE_CONTEXTS (START_DATE= L_start_date , END_DATE= L_END_DATE) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND (ANC_ABS_ENTRS_END_DATE > l_curr_yr_st_dt AND ANC_ABS_ENTRS_START_DATE < l_curr_yr_END_dt) THEN ( l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside l_abs_typ_name_check:'||l_abs_typ_name_check||'ANC_ABS_ENTRS_START_DATE'||TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD')||'ANC_ABS_ENTRS_END_DATE'||TO_CHAR(ANC_ABS_ENTRS_END_DATE,'YYYY/MM/DD')||'DUR:'||TO_CHAR(ANC_ABS_ENTRS_DURATION)) IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Brought Forward Leave') AND ( ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000118874119 OR ANC_ABS_ENTRS_DURATION => comp_limit) THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 1') EXIT ) ELSE IF ((( l_abs_typ_name_check = 'Hajj Leave' OR l_abs_typ_name_check = 'Hajj Leave' OR l_abs_typ_name_check = 'Marriage Leave' ) AND ANC_ABS_ENTRS_DURATION => comp_limit) OR l_abs_typ_name_check = 'Staff Rejuvenation Leave' OR l_abs_typ_name_check = 'Sabbatical Leave' OR l_abs_typ_name_check LIKE 'Prolonged Illness Leave%' OR l_abs_typ_name_check = 'Maternity Leave' ) THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 2') EXIT ) ELSE IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Brought Forward Leave') THEN ( l_duration = ANC_ABS_ENTRS_DURATION l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3'||'ANC_ABS_ENTRS_ABSENCE_REASON_ID'||TO_CHAR(ANC_ABS_ENTRS_ABSENCE_REASON_ID)) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') = TO_DATE(TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') AND (L_prv_duration + ANC_ABS_ENTRS_DURATION) => comp_limit THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:1') ) ELSE( l_msg = 'In' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:2') L_prv_duration = ANC_ABS_ENTRS_DURATION L_nxt_working_day = ADD_DAYS(ANC_ABS_ENTRS_END_DATE,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', L_nxt_working_day, ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', L_nxt_working_day, ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:2 L_nxt_working_day'||TO_CHAR(L_nxt_working_day)) ) j = 1 l_log =ESS_LOG_WRITE('[GET COMP DATE] L_comp_limit'||TO_CHAR(L_comp_limit)) CHANGE_CONTEXTS (START_DATE= ANC_ABS_ENTRS_START_DATE , END_DATE= L_nxt_working_day) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF ((ANC_ABS_TYP_NAME = 'Annual Leave' AND l_abs_typ_name_check = 'Brought Forward Leave') OR (ANC_ABS_TYP_NAME = 'Brought Forward Leave' AND l_abs_typ_name_check = 'Annual Leave') OR (ANC_ABS_TYP_NAME = 'Annual Leave' AND l_abs_typ_name_check = 'Unpaid Leave')) AND L_nxt_working_day = ANC_ABS_ENTRS_START_DATE AND (l_duration + ANC_ABS_ENTRS_DURATION => comp_limit) THEN ( L_RETURN_VALUE = 'Y' EXIT ) ) ) j = j + 1 ) ) IF L_RETURN_VALUE = 'Y' THEN EXIT ) ) ) i = i + 1 ) ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] L_RETURN_VALUE'||L_RETURN_VALUE) RETURN L_RETURN_VALUE",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_MY_SICK_ACCRUAL",
        "answer": "DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL RETURN ACCRUAL",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_CN_SL_ACCRUAL_MATRIX",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00' (date) Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00' (date) DEFAULT for IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 15 Default for IV_BAND_CHG_AFTVAL1 is 18 Default for IV_BAND_CHG_AFTVAL2 is 21 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' Default for IV_CEILING is 0 Default for IV_CARRYOVER is 0 Inputs are IV_ACCRUAL,IV_BAND_CHG_DT1,IV_BAND_CHG_DT2,IV_BAND_CHG_BEFVAL1,IV_BAND_CHG_AFTVAL1,IV_BAND_CHG_BEFVAL2,IV_BAND_CHG_AFTVAL2,IV_CARRYOVER,IV_CEILING,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE ld_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) ld_term_start_date = TO_DATE('01-01-'||TO_CHAR(ld_effective_date, 'rrrr'),'dd-mm-rrrr') ld_term_end_date = TO_DATE('31-12-'||TO_CHAR(ld_effective_date, 'rrrr'),'dd-mm-rrrr') ld_band1_end_date = ADD_YEARS(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,3) ld_band2_end_date = ADD_YEARS(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,6) accrual = IV_ACCRUAL l_log = ess_log_write('***********************START********************************') l_log = ess_log_write('PERSON_NUMBER : '|| PER_ASG_PERSON_NUMBER) l_log = ess_log_write('ld_effective_date : '|| TO_CHAR(ld_effective_date,'DD-MM-YYYY')) l_log = ess_log_write('ld_band1_end_date : '|| TO_CHAR(ld_band1_end_date,'DD-MM-YYYY')) l_log = ess_log_write('ld_band2_end_date : '|| TO_CHAR(ld_band2_end_date,'DD-MM-YYYY')) l_log = ess_log_write('IV_BAND_CHG_BEFVAL1 : '|| TO_CHAR(IV_BAND_CHG_BEFVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL1 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL2 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL2)) l_log = ess_log_write('Initial Accrual : '|| TO_CHAR(IV_ACCRUAL)) l_log = ess_log_write('Accrual Period Start Date : '|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'DD-MON-RRRR')) l_log = ess_log_write('Accrual Period End Date : '|| TO_CHAR(IV_ACCRUALPERIODENDDATE,'DD-MON-RRRR')) l_log = ess_log_write('***********************END********************************') IF (TO_CHAR(ld_effective_date,'YYYY') = TO_CHAR(ld_band1_end_date,'YYYY')) THEN ( l_log = ess_log_write('Within Band 1') l_no_of_ds1 = DAYS_BETWEEN(ld_band1_end_date,ld_term_start_date) + 1 l_log = ess_log_write('l_no_of_ds1 : '|| TO_CHAR(l_no_of_ds1)) l_no_of_ds2 = DAYS_BETWEEN(ld_term_end_date,ld_band1_end_date) + 1 l_log = ess_log_write('l_no_of_ds2 : '|| TO_CHAR(l_no_of_ds2)) l_no_of_ds3 = 0 l_log = ess_log_write('IV_BAND_CHG_BEFVAL1 : '|| TO_CHAR(IV_BAND_CHG_BEFVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL1 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL2 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL2)) accrual=(l_no_of_ds1*IV_BAND_CHG_BEFVAL1 + l_no_of_ds2 * IV_BAND_CHG_AFTVAL1 + l_no_of_ds3*IV_BAND_CHG_AFTVAL2)/ 365 l_log = ess_log_write('Accrual : '|| TO_CHAR(accrual)) ) IF (TO_CHAR(ld_effective_date,'YYYY') = TO_CHAR(ld_band2_end_date,'YYYY')) THEN ( l_log = ess_log_write('Within Band 2') l_no_of_ds1 = 0 l_no_of_ds2 = DAYS_BETWEEN(ld_band2_end_date,ld_term_start_date) + 1 l_log = ess_log_write('l_no_of_ds2 : '|| TO_CHAR(l_no_of_ds2)) l_no_of_ds3 = DAYS_BETWEEN(ld_term_end_date,ld_band2_end_date) + 1 l_log = ess_log_write('l_no_of_ds3 : '|| TO_CHAR(l_no_of_ds3)) l_log = ess_log_write('IV_BAND_CHG_BEFVAL1 : '|| TO_CHAR(IV_BAND_CHG_BEFVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL1 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL2 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL2)) accrual=(l_no_of_ds1*IV_BAND_CHG_BEFVAL1 + l_no_of_ds2 * IV_BAND_CHG_AFTVAL1 + l_no_of_ds3*IV_BAND_CHG_AFTVAL2)/ 365 l_log = ess_log_write('Accrual : '|| TO_CHAR(accrual)) ) l_log = ess_log_write(' Prorated Accrual considered : '|| TO_CHAR(accrual)) floored_accrual = FLOOR(accrual) decimal_accrual = accrual - floored_accrual IF (decimal_accrual < 0.5 ) THEN accrual = floored_accrual IF (decimal_accrual >= 0.5) THEN accrual = floored_accrual + 1 l_log = ess_log_write(' Final Accrual considered : '|| TO_CHAR(accrual)) carryover = IV_CARRYOVER ceiling = IV_CEILING l_log = ess_log_write(' Carryover : '|| TO_CHAR(IV_CARRYOVER)) l_log = ess_log_write(' Ceiling : '|| TO_CHAR(IV_CEILING)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "CIMB China"
    },
    {
        "FORMULA_NAME": "Annual Leave NCC MS Accrual Matrix",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_GRADE_STEP_NAME is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE(date), IV_CARRYOVER (number) assignment_id = 0 l_migration_date = '2020/04/01 00:00:00' (date) l_fy_date = '2020/04/01 00:00:00' (date) l_debug = ess_log_write(' ***** formula = EMG Annual Leave - NCC_MS_BU Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PER_BASIC_ATTRIBUTE_DATE1,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (IV_CALEDARSTARTDATE < l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_days_in_year= 0 l_grade_step=' ' l_sub_date = substr(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('l_sub_date: '|| l_sub_date) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 l_continous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<l_migration_date and IV_PLANENROLLMENTSTARTDATE<= l_fy_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) l_grade_step = PER_GRADE_STEP_NAME l_column='NCC_MS_'||l_grade_step l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_MS_BU_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_MS_BU_ANNUAL_LEAVE',l_column,to_char(l_los_before_ann),'0')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_MS_BU_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_CALEDARENDDATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) FTE_Accrual=accrual_rate*l_days/365*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) ) accrual = least(accrual_rate,round(accrual,2)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Annual Leave Accrual Matrix",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_GRADE_STEP_NAME is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' DEFAULT FOR PER_ASG_REL_ATTRIBUTE_NUMBER1 is 0 inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_CARRYOVER (number) assignment_id = 0 l_migration_date = '2021/04/01 00:00:00' (date) l_fy_date = '2021/04/01 00:00:00' (date) l_prefix = 'SCP' l_UDT = 'AL_LCC_STANDARD' l_plan = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_plan_name = 'X' l_plan_name = GET_VALUE_SET('GET_ABSENCE_PLAN_NAME','|=P_PLAN_ID='''||to_char(l_plan)||'''') l_debug = ess_log_write('Plan Name: ' + l_plan_name) leap_year='n' agg_ser=PER_ASG_REL_ATTRIBUTE_NUMBER1 aggregate_months=0 negate_agg=0 l_ncc_agg_date_start='2023/04/01 00:00:00' (date) if l_plan_name = 'Annual Leave - LCC Standard' then ( l_UDT = 'AL_LCC_STANDARD' ) if l_plan_name = 'Annual Leave - LCC Soulbury and Leadership' then ( l_UDT = 'AL_LCC_SOULBURY_LEADERSHIP' ) if l_plan_name = 'Annual Leave NCC Schools/Pre 2017' then ( l_UDT = 'AL_NCC_SCH_PRE_2017' ) if l_plan_name = 'Annual Leave NCC T&C- 2017' then ( l_UDT = 'AL_NCC_TnC_2017' ) if l_plan_name = 'Annual Leave NCC Schools 2018 L30' then ( l_UDT = 'AL_NCC_SCHOOLS_2018_L_30' ) if l_plan_name = 'Annual Leave NHS' then ( l_UDT = 'AL_NCC_NHS' ) if l_plan_name = 'Annual Leave NCC Soulsbury' then ( l_UDT = 'AL_NCC_SOULSBURY' ) if l_plan_name = 'Annual Leave NCC TUPE- DCC' then ( l_UDT = 'AL_NCC_TUPE_DCC' ) if l_plan_name = 'Annual Leave NCC TUPE-NCH' then ( l_UDT = 'AL_NCC_TUPE_NCH' ) if l_plan_name = 'Annual Leave - NCH' then ( l_UDT = 'AL_NCH_STANDARD' ) l_debug = ess_log_write(' ***** In Annual Leave - LCC Standard Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Plan Id: ' +to_char(l_plan)) l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))<l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_days_in_year= 0 l_grade_step=' ' l_current_date = '4712/12/31 00:00:00' (date) l_end_date = '4712/12/31 00:00:00' (date) l_sub_date = substr(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('l_sub_date: '|| l_sub_date) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_ASG_BUSINESS_UNIT_NAME = 'NCC BU' or PER_ASG_BUSINESS_UNIT_NAME = 'NRB BU' then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) if((PER_ASG_REL_ATTRIBUTE_NUMBER1 was not defaulted) and (IV_ACCRUALPERIODSTARTDATE>=l_ncc_agg_date_start)) then ( negate_agg=-1*PER_ASG_REL_ATTRIBUTE_NUMBER1*12 l_continous_date=ADD_MONTHS(l_continous_date, negate_agg) l_start_dt=l_continous_date l_debug = ess_log_write('Original HD: '+ to_char(l_continous_date)) ) ) else ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_continous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<=l_migration_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) l_leap_yr = substr(to_char(IV_CALEDARENDDATE),1,10) l_leap_yy = substr(l_leap_yr,1,4) l_leap_yyyy=TO_NUMBER(l_leap_yy) if(((MOD(l_leap_yyyy,4)=0) AND ((MOD(l_leap_yyyy,400)=0) OR (MOD(l_leap_yyyy,100)!=0)))) then leap_year='y' l_debug=ess_log_write('Leap Year:'+leap_year) CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_fixed_term_contract_end_date = PER_ASG_ATTRIBUTE_DATE3 ) l_debug = ess_log_write('l_fixed_term_contract_end_date ps: ' + to_char(l_fixed_term_contract_end_date)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) if l_fixed_term_contract_end_date < PER_ASG_EFFECTIVE_START_DATE then (exit) if PER_ASG_ATTRIBUTE_DATE3 was not defaulted then ( if ((l_fixed_term_contract_end_date>=PER_ASG_EFFECTIVE_START_DATE) AND (l_fixed_term_contract_end_date<=PER_ASG_EFFECTIVE_END_DATE) AND (l_fixed_term_contract_end_date<=IV_CALEDARENDDATE)) then ( l_end_date = l_fixed_term_contract_end_date l_debug = ess_log_write('l_end_date from contract: ' + to_char(l_end_date)) ) else ( l_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('l_end_date else of contract: ' + to_char(l_end_date)) ) ) else ( l_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('l_end_date else of not default contrac: ' + to_char(l_end_date)) ) l_debug = ess_log_write('l_end_date: ' + to_char(l_end_date,'DD-Mon-YYYY')) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) l_debug = ess_log_write('HR Status: ' + PER_ASG_ASSIGNMENT_STATUS_TYPE) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) IF ((PER_ASG_BUSINESS_UNIT_NAME = 'LCC BU') OR (PER_ASG_BUSINESS_UNIT_NAME = 'ESPO BU')) then ( IF (PER_GRADE_STEP_NAME = '01' or PER_GRADE_STEP_NAME = '02' or PER_GRADE_STEP_NAME = '03' or PER_GRADE_STEP_NAME = '04' or PER_GRADE_STEP_NAME = '05' or PER_GRADE_STEP_NAME = '09' or PER_GRADE_STEP_NAME = '08' or PER_GRADE_STEP_NAME = '07' or PER_GRADE_STEP_NAME = '06' ) THEN ( l_grade_step = SUBSTR(PER_GRADE_STEP_NAME,2,2) l_column=l_prefix||l_grade_step ) else ( l_grade_step = PER_GRADE_STEP_NAME l_column=l_prefix||l_grade_step ) ) else ( IF (PER_GRADE_STEP_NAME = 'D&G') then ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCPDG' ) ELSE IF (PER_GRADE_STEP_NAME = 'C&A 2') then ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCPCA2' ) ELSE IF (PER_GRADE_STEP_NAME = 'C&O') then ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCPCO' ) ELSE IF (PER_GRADE_STEP_NAME = '01') AND (l_grade='CX-1') then ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP01' ) ELSE IF (PER_GRADE_STEP_NAME = 'G&CD') then ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCPGCD' ) ELSE IF (PER_GRADE_STEP_NAME = 'S01.5') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCPS015' ) ELSE IF (l_UDT = 'AL_NCC_TnC_2017') and (PER_GRADE_STEP_NAME = 'F&R') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCPFR' ) ELSE IF (l_UDT = 'AL_NCC_TnC_2017') and (PER_GRADE_STEP_NAME = 'ASCH 1') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCPH1' ) ELSE IF (l_UDT = 'AL_NCC_TnC_2017') and (PER_GRADE_STEP_NAME = 'C&E 1') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCPC1' ) ELSE IF (l_UDT = 'AL_NCC_SCHOOLS_2018_L_30') and (PER_GRADE_STEP_NAME = '01.5') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP01P5' ) ELSE IF (l_UDT = 'AL_NCC_SCHOOLS_2018_L_30') and (PER_GRADE_STEP_NAME = '02.5') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP02P5' ) ELSE IF (l_UDT = 'AL_NCC_SCHOOLS_2018_L_30') and (PER_GRADE_STEP_NAME = '03.5') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP03P5' ) ELSE IF (l_UDT = 'AL_NCC_SCHOOLS_2018_L_30') and (PER_GRADE_STEP_NAME = '04.5') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP04P5' ) ELSE IF (l_UDT = 'AL_NCC_SCHOOLS_2018_L_30') and (PER_GRADE_STEP_NAME = '05.5') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP05P5' ) ELSE IF (l_UDT = 'AL_NCC_TUPE_DCC') and (PER_GRADE_STEP_NAME = 'SCP 1') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP1' ) ELSE IF (l_UDT = 'AL_NCC_TUPE_DCC') and (PER_GRADE_STEP_NAME = 'SCP 2') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP2' ) ELSE IF (l_UDT = 'AL_NCC_TUPE_DCC') and (PER_GRADE_STEP_NAME = 'SCP 3') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP3' ) ELSE IF (l_UDT = 'AL_NCC_TUPE_DCC') and (PER_GRADE_STEP_NAME = 'SCP 4') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP4' ) ELSE IF (l_UDT = 'AL_NCC_TUPE_DCC') and (PER_GRADE_STEP_NAME = 'SCP 5') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP5' ) ELSE IF (l_UDT = 'AL_NCC_TUPE_DCC') and (PER_GRADE_STEP_NAME = 'SCP 6') THEN ( l_grade_step=PER_GRADE_STEP_NAME l_column='SCP6' ) ELSE ( l_grade_step = PER_GRADE_STEP_NAME l_column=l_prefix||l_grade_step ) ) l_debug = ess_log_write('Grade Step ='||(l_grade_step)) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) accrual_rate= TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 if leap_year='y' then ( l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/366 ) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > l_end_date) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate= TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) IF TO_CHAR(l_end_date,'YYYYMMDD')='47121231' OR (l_end_date>IV_CALEDARENDDATE) THEN ( l_end_date=IV_CALEDARENDDATE ) l_debug = ess_log_write('l_start_date1: ' + to_char(l_start_date)) l_debug = ess_log_write('l_end_date1: ' + to_char(l_end_date)) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) If leap_year='n' then FTE_Accrual=accrual_rate*l_days/365*L_Fte ELSE FTE_Accrual=accrual_rate*l_days/366*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) l_debug = ess_log_write('l_start_date b4 exit '||to_char(l_start_date)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE '||to_char(PER_ASG_EFFECTIVE_START_DATE)) IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (l_start_date>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended WHEN TERMINATION DATE EQUALS TO:'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) ) ) ) accrual = round(accrual,2) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) l_debug = ess_log_write(' final accrual '||to_char(accrual)) return accrual , carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Annual Leave LCC Accrual Matrix",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_GRADE_STEP_NAME is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_CARRYOVER (number) assignment_id = 0 l_migration_date = '2020/04/01 00:00:00' (date) l_fy_date = '2020/04/01 00:00:00' (date) l_debug = ess_log_write(' ***** In EMG Annual Leave - LCC Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PER_BASIC_ATTRIBUTE_DATE1,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))<l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_days_in_year= 0 l_grade_step=' ' l_current_date = '4712/12/31 00:00:00' (date) l_sub_date = substr(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('l_sub_date: '|| l_sub_date) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 l_continous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<l_migration_date and IV_PLANENROLLMENTSTARTDATE<= l_fy_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) l_debug = ess_log_write('HR Status: ' + PER_ASG_ASSIGNMENT_STATUS_TYPE) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) if l_employer = 'Leicestershire County Council' then ( l_column = 'LCC' ) l_grade_step = PER_GRADE_STEP_NAME l_column='LCC'||l_grade_step l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) accrual_rate= TO_NUMBER(GET_TABLE_VALUE('EMG_LCC_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('EMG_LCC_ANNUAL_LEAVE',l_column,to_char(l_los_before_ann),PER_ASG_EFFECTIVE_START_DATE)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate= TO_NUMBER(GET_TABLE_VALUE('EMG_LCC_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),PER_ASG_EFFECTIVE_START_DATE)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_CALEDARENDDATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) FTE_Accrual=accrual_rate*l_days/365*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) ) accrual = least(accrual_rate,round(accrual,2)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) l_debug = ess_log_write(' final accrual '||to_char(accrual)) return accrual , carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Annual Leave NCH Accrual Matrix",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_GRADE_LADDER_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_GRADE_STEP_NAME is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_CARRYOVER (number) assignment_id = 0 l_migration_date = '2020/04/01 00:00:00' (date) l_fy_date = '2020/04/01 00:00:00' (date) l_debug = ess_log_write(' ***** formula = EMG Annual Leave - NCH Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PER_BASIC_ATTRIBUTE_DATE1,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (IV_CALEDARSTARTDATE < l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_days_in_year= 0 l_grade_step=' ' l_sub_date = substr(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('l_sub_date: '|| l_sub_date) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 l_continous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<l_migration_date and IV_PLANENROLLMENTSTARTDATE<= l_fy_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) l_grade_step = PER_GRADE_STEP_NAME if PER_ASG_GRADE_LADDER_NAME = 'SMB' then l_column='N'||'_'||l_grade_step else l_column=l_grade_step l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NCH_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('EMG_NCH_ANNUAL_LEAVE',l_column,to_char(l_los_before_ann),'0')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NCH_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_CALEDARENDDATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) FTE_Accrual=accrual_rate*l_days/365*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) ) accrual = least(accrual_rate,round(accrual,2)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Annual Leave NCH",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_GRADE_STEP_NAME is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' DEFAULT FOR PER_ASG_REL_ATTRIBUTE_NUMBER1 is 0 inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_CARRYOVER (number) assignment_id = 0 t_no_of_months = 0 total_aggregate_months = 0 total_aggregate_days = 0 agg_ser=PER_ASG_REL_ATTRIBUTE_NUMBER1 aggregate_months=0 negate_agg=0 l_migration_date = '2021/04/01 00:00:00' (date) l_fy_date = '2021/04/01 00:00:00' (date) l_prefix = 'SCP' l_UDT = 'AL_LCC_STANDARD' l_plan = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_plan_name = 'X' l_plan_name = GET_VALUE_SET('GET_ABSENCE_PLAN_NAME','|=P_PLAN_ID='''||to_char(l_plan)||'''') l_debug = ess_log_write('Plan Name: ' + l_plan_name) if l_plan_name = 'Annual Leave - LCC Standard' then ( l_UDT = 'AL_LCC_STANDARD' ) if l_plan_name = 'Annual Leave - LCC Soulbury and Leadership' then ( l_UDT = 'AL_LCC_SOULBURY_LEADERSHIP' ) if l_plan_name = 'Annual Leave NCC Schools/Pre 2017' then ( l_UDT = 'AL_NCC_SCH_PRE_2017' ) if l_plan_name = 'Annual Leave NCC T&C- 2017' then ( l_UDT = 'AL_NCC_TnC_2017' ) if l_plan_name = 'Annual Leave NCC Schools 2018 L30' then ( l_UDT = 'AL_NCC_SCHOOLS_2018_L_30' ) if l_plan_name = 'Annual Leave NHS' then ( l_UDT = 'AL_NCC_NHS' ) if l_plan_name = 'Annual Leave NCC Soulsbury' then ( l_UDT = 'AL_NCC_SOULSBURY' ) if l_plan_name = 'Annual Leave NCC TUPE- DCC' then ( l_UDT = 'AL_NCC_TUPE_DCC' ) if l_plan_name = 'Annual Leave NCC TUPE-NCH' then ( l_UDT = 'AL_NCC_TUPE_NCH' ) if l_plan_name = 'Annual Leave - NCH' then ( l_UDT = 'AL_NCH_STANDARD' ) l_debug = ess_log_write(' ***** In Annual Leave - NCH Standard Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Plan Id: ' +to_char(l_plan)) l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Plan enrollment end date: ' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))<l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_days_in_year= 0 l_grade_step=' ' l_current_date = '4712/12/31 00:00:00' (date) l_end_date = '4712/12/31 00:00:00' (date) l_sub_date = substr(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('l_sub_date: '|| l_sub_date) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_ASG_BUSINESS_UNIT_NAME = 'NCC BU' or PER_ASG_BUSINESS_UNIT_NAME = 'NRB BU' then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_continous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) if(PER_ASG_REL_ATTRIBUTE_NUMBER1 was not defaulted) then ( negate_agg=-1*PER_ASG_REL_ATTRIBUTE_NUMBER1*12 l_continous_date=ADD_MONTHS(l_continous_date, negate_agg) l_start_dt=l_continous_date l_debug = ess_log_write('Original HD: '+ to_char(l_continous_date)) ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<=l_migration_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_fixed_term_contract_end_date = PER_ASG_ATTRIBUTE_DATE3 ) i=0 WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) if l_fixed_term_contract_end_date < PER_ASG_EFFECTIVE_START_DATE then (exit) if PER_ASG_ATTRIBUTE_DATE3 was not defaulted then ( if ((l_fixed_term_contract_end_date>=PER_ASG_EFFECTIVE_START_DATE) AND (l_fixed_term_contract_end_date<=PER_ASG_EFFECTIVE_END_DATE) AND (l_fixed_term_contract_end_date<=IV_CALEDARENDDATE)) then ( l_end_date = l_fixed_term_contract_end_date ) else ( l_end_date = PER_ASG_EFFECTIVE_END_DATE ) ) else ( l_end_date = PER_ASG_EFFECTIVE_END_DATE ) l_debug = ess_log_write('l_end_date: ' + to_char(l_end_date,'DD-Mon-YYYY')) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) l_debug = ess_log_write('HR Status: ' + PER_ASG_ASSIGNMENT_STATUS_TYPE) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) IF ((PER_ASG_BUSINESS_UNIT_NAME = 'LCC BU') OR (PER_ASG_BUSINESS_UNIT_NAME = 'ESPO BU')) then ( IF (PER_GRADE_STEP_NAME = '01' or PER_GRADE_STEP_NAME = '02' or PER_GRADE_STEP_NAME = '03' or PER_GRADE_STEP_NAME = '04' or PER_GRADE_STEP_NAME = '05' or PER_GRADE_STEP_NAME = '09' or PER_GRADE_STEP_NAME = '08' or PER_GRADE_STEP_NAME = '07' or PER_GRADE_STEP_NAME = '06' ) THEN ( l_grade_step = SUBSTR(PER_GRADE_STEP_NAME,2,2) l_column=l_prefix||l_grade_step ) else ( l_grade_step = PER_GRADE_STEP_NAME l_column=l_prefix||l_grade_step ) ) else ( l_grade_step = PER_GRADE_STEP_NAME l_column=l_prefix||l_grade_step ) l_debug = ess_log_write('Grade Step ='||(l_grade_step)) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) accrual_rate= TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_length_of_service),PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_los_before_ann),PER_ASG_EFFECTIVE_START_DATE)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > l_end_date) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate= TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_length_of_service),PER_ASG_EFFECTIVE_START_DATE)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) current_effective_end_date=l_end_date IF TO_CHAR(l_end_date,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_CALEDARENDDATE ) l_debug = ess_log_write('l_start_date1: ' + to_char(l_start_date)) l_debug = ess_log_write('l_end_date1: ' + to_char(l_end_date)) l_days=(DAYS_BETWEEN(l_end_date,l_start_date))+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) FTE_Accrual=accrual_rate*l_days/365*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) ) accrual = least(accrual_rate,round(accrual,2)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) l_debug = ess_log_write(' final accrual '||to_char(accrual)) return accrual , carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Annual Leave NCH",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_GRADE_STEP_NAME is 'X' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' DEFAULT FOR PER_ASG_REL_ATTRIBUTE_NUMBER1 is 0 inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_CARRYOVER (number) assignment_id = 0 t_no_of_months = 0 total_aggregate_months = 0 total_aggregate_days = 0 agg_ser=PER_ASG_REL_ATTRIBUTE_NUMBER1 aggregate_months=0 negate_agg=0 accrual_rate = 0 l_migration_date = '2022/12/01 00:00:00' (date) l_fy_date = '2022/04/01 00:00:00' (date) l_prefix = 'SCP' l_UDT = 'AL_NCH_STANDARD' l_plan = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_plan_name = 'X' l_plan_name = GET_VALUE_SET('GET_ABSENCE_PLAN_NAME','|=P_PLAN_ID='''||to_char(l_plan)||'''') l_debug = ess_log_write('Plan Name: ' + l_plan_name) l_debug = ess_log_write(' ***** In Annual Leave - NCH Standard Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Plan Id: ' +to_char(l_plan)) l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))<l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_days_in_year= 0 l_grade_step=' ' l_current_date = '4712/12/31 00:00:00' (date) l_end_date = '4712/12/31 00:00:00' (date) l_sub_date = substr(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('l_sub_date: '|| l_sub_date) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_ASG_BUSINESS_UNIT_NAME = 'NCC BU' or PER_ASG_BUSINESS_UNIT_NAME = 'NRB BU' then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_continous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) ) if(PER_ASG_REL_ATTRIBUTE_NUMBER1 was not defaulted) then ( negate_agg=-1*PER_ASG_REL_ATTRIBUTE_NUMBER1*12 l_continous_date=ADD_MONTHS(l_continous_date, negate_agg) l_start_dt=l_continous_date l_debug = ess_log_write('Original HD: '+ to_char(l_continous_date)) ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<=l_migration_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_fixed_term_contract_end_date = PER_ASG_ATTRIBUTE_DATE3 ) i=0 WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) if l_fixed_term_contract_end_date < PER_ASG_EFFECTIVE_START_DATE then (exit) if PER_ASG_ATTRIBUTE_DATE3 was not defaulted then ( if ((l_fixed_term_contract_end_date>=PER_ASG_EFFECTIVE_START_DATE) AND (l_fixed_term_contract_end_date<=PER_ASG_EFFECTIVE_END_DATE) AND (l_fixed_term_contract_end_date<=IV_CALEDARENDDATE)) then ( l_end_date = l_fixed_term_contract_end_date ) else ( l_end_date = PER_ASG_EFFECTIVE_END_DATE ) ) else ( l_end_date = PER_ASG_EFFECTIVE_END_DATE ) l_debug = ess_log_write('l_end_date: ' + to_char(l_end_date,'DD-Mon-YYYY')) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) l_debug = ess_log_write('HR Status: ' + PER_ASG_ASSIGNMENT_STATUS_TYPE) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) IF ((PER_ASG_BUSINESS_UNIT_NAME = 'LCC BU') OR (PER_ASG_BUSINESS_UNIT_NAME = 'ESPO BU')) then ( IF (PER_GRADE_STEP_NAME = '01' or PER_GRADE_STEP_NAME = '02' or PER_GRADE_STEP_NAME = '03' or PER_GRADE_STEP_NAME = '04' or PER_GRADE_STEP_NAME = '05' or PER_GRADE_STEP_NAME = '09' or PER_GRADE_STEP_NAME = '08' or PER_GRADE_STEP_NAME = '07' or PER_GRADE_STEP_NAME = '06' ) THEN ( l_grade_step = SUBSTR(PER_GRADE_STEP_NAME,2,2) l_column=l_prefix||l_grade_step ) else ( l_grade_step = PER_GRADE_STEP_NAME l_column=l_prefix||l_grade_step ) ) else ( l_grade_step = PER_GRADE_STEP_NAME l_column=l_prefix||l_grade_step ) l_debug = ess_log_write('Grade Step ='||(l_grade_step)) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) l_debug = ess_log_write('l_UDT: '+ l_UDT) l_debug = ess_log_write('l_length_of_service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE: '+ to_char(PER_ASG_EFFECTIVE_START_DATE)) accrual_rate= TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_length_of_service),PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_los_before_ann),PER_ASG_EFFECTIVE_START_DATE)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > l_end_date) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate= TO_NUMBER(GET_TABLE_VALUE(l_UDT,l_column,to_char(l_length_of_service),PER_ASG_EFFECTIVE_START_DATE)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) current_effective_end_date=l_end_date IF TO_CHAR(l_end_date,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_CALEDARENDDATE ) l_debug = ess_log_write('l_start_date1: ' + to_char(l_start_date)) l_debug = ess_log_write('l_end_date1: ' + to_char(l_end_date)) l_days=(DAYS_BETWEEN(l_end_date,l_start_date))+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) FTE_Accrual=accrual_rate*l_days/365*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) ) accrual = least(accrual_rate,round(accrual,2)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) l_debug = ess_log_write(' final accrual '||to_char(accrual)) return accrual , carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Annual Leave NRB Accrual Matrix",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_PER_ATTRIBUTE_DATE1 is '1951/01/01 00:00:00' (date) DEFAULT FOR PER_GRADE_STEP_NAME is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_CARRYOVER (number) assignment_id = 0 l_migration_date = '2020/04/01 00:00:00' (date) l_fy_date = '2020/04/01 00:00:00' (date) l_debug = ess_log_write(' ***** formula = EMG Annual Leave - NRB Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PER_BASIC_ATTRIBUTE_DATE1,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))<l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 l_continous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<l_migration_date and IV_PLANENROLLMENTSTARTDATE<= l_fy_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) if l_employer = 'Nottingham Revenues and Benefits Limited' then ( l_column = 'NRB' ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NRB_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('EMG_NRB_ANNUAL_LEAVE',l_column,to_char(l_los_before_ann),'0')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NRB_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_CALEDARENDDATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) FTE_Accrual=accrual_rate*l_days/365*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) ) accrual = least(accrual_rate,round(accrual,2)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Annual Leave NCC Accrual Matrix",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_CARRYOVER (number) assignment_id = 0 l_migration_date = '2020/04/01 00:00:00' (date) l_fy_date = '2020/04/01 00:00:00' (date) l_debug = ess_log_write(' ***** formula = EMG Annual Leave - NCC Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PER_BASIC_ATTRIBUTE_DATE1,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))<l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 l_continous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('Effective Date:' + to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)))) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<l_migration_date and IV_PLANENROLLMENTSTARTDATE<= l_fy_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) if l_employer = 'Nottingham City Council' then ( l_column = 'NCC' ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_ANNUAL_LEAVE',l_column,to_char(l_los_before_ann),'0')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_CALEDARENDDATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) FTE_Accrual=accrual_rate*l_days/365*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) ) accrual = least(accrual_rate,round(accrual,2)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 36) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 36) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 56) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 56) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 80) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 80) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 88) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 88) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 56) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 56) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 36) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 36) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 80) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 80) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 88) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 88) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 80) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 80) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 36) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 36) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 56) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 56) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_25_SM_ann_accural = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_25_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,25) l_26_addng_yrs = ADD_YEARS(PER_ASG_REL_ADJUSTED_SVC_DATE,26) l_fte_25_planstartdate = 0 IF ((PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers')AND((l_25_addng_yrs <= IV_CALEDARSTARTDATE) AND (l_26_addng_yrs > IV_CALEDARSTARTDATE))) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_CALEDARENDDATE) ( l_debug = ess_log_write('in 25 year condition') l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_fte_25_planstartdate =round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte_25_planstartdate' + to_char(l_fte_25_planstartdate)) l_25_SM_ann_accural = 14.4 * l_fte_25_planstartdate l_debug = ess_log_write('l_25_SM_ann_accural' + to_char(l_25_SM_ann_accural)) ) ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN APT&C LGS' THEN ( PPG_VALUE = 'LBN_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Craft' THEN( PPG_VALUE = 'LBN_Craft' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NPW APT&C LGS' THEN( PPG_VALUE = 'NPW_APT_and_C_LGS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Senior Managers & Chief Officers' THEN( PPG_VALUE = 'LBN_Senior_Managers_and_Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Youth & Community' THEN( PPG_VALUE = 'LBN_Youth_and_Community' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham' THEN( PPG_VALUE = 'Active_Newham' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Active Newham GLL' THEN( PPG_VALUE = 'Active_Newham_GLL' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Members' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Election' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Nursery Nurse' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'LBN Supply Teachers' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioner' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional LG' THEN( PPG_VALUE = 'LBN_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Sessional TCH' THEN( PPG_VALUE = 'LBN_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 88) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF (PPG_VALUE != 'LBN_Senior_Managers_and_Chief_Officers') THEN( IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.2 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.2 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 88) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + l_25_SM_ann_accural l_debug = ess_log_write('l_25_SM_ann_accural'||to_char(l_25_SM_ann_accural)) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN NHS Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' l_data = ESS_LOG_WRITE('chs') IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) l_data = ESS_LOG_WRITE('PPG_VALUE+'+PPG_VALUE) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 29) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_NHS_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.5 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) WHILE(i < 29) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_NHS_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.5 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN NHS Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' l_data = ESS_LOG_WRITE('chs') IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) l_data = ESS_LOG_WRITE('PPG_VALUE+'+PPG_VALUE) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 12) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_NHS_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.5 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) WHILE(i < 12) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_NHS_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.5 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "LBN NHS Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LBN Officers Nonsch 36hrs/52wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE is '4712/12/31 00:00:00' INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' l_data = ESS_LOG_WRITE('chs') IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) l_data = ESS_LOG_WRITE('PPG_VALUE+'+PPG_VALUE) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID BASE_LOS=0 LOS_PERMITABLE = 0 LOS = 0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_BASE_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 ann_accrual = 0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service <= 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service > 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service>=10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) SYSDT = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE) l_debug = ess_log_write('SYSDT'||to_char(SYSDT)) l_no_of_days_ann = 0 l_length_of_service_ann = 0 l_csd_newham = '4712/12/31 00:00:00' (date) IF (PER_ASG_REL_ADJUSTED_SVC_DATE < ACP_HIRE_DATE) THEN l_csd_newham = PER_ASG_REL_ADJUSTED_SVC_DATE ELSE l_csd_newham = ACP_HIRE_DATE l_debug = ess_log_write('l_csd_newham'||to_char(l_csd_newham)) l_no_of_days_ann=DAYS_BETWEEN(SYSDT, l_csd_newham) l_debug = ess_log_write('l_no_of_days_ann ' || to_char(l_no_of_days_ann)) l_length_of_service_ann=ROUND((l_no_of_days_ann/365),2) l_debug = ess_log_write('l_length_of_service_ann ' || to_char(l_length_of_service_ann)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) BASE_LOS = TO_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Base Accrual Value=' + to_char(BASE_LOS)) l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('Ann + Base Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_BASE_LOS_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_BASE_LOS_before_ann '||to_char(l_BASE_LOS_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) BASE_LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_BASE_LOS_before_ann))) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual LOS_PERMITABLE = BASE_LOS_PERMITABLE + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 37) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_NHS_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.5 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_BASE_LOS_before_ann '|| TO_CHAR(l_BASE_LOS_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' BASE_LOS_PERMITABLE '||to_char(BASE_LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop - Else'||to_char(l_length_of_service_in_loop)) BASE_LOS = To_NUMBER(GET_TABLE_VALUE('LBN_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) IF(l_length_of_service_ann > 5) THEN (ann_accrual = 7.5 l_debug = ess_log_write('ann_accrual_5 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 7) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_7 ' || to_char(ann_accrual))) IF(l_length_of_service_ann > 10) THEN (ann_accrual = ann_accrual + 7.5 l_debug = ess_log_write('ann_accrual_10 ' || to_char(ann_accrual))) ELSE( ann_accural = 0) LOS = BASE_LOS + ann_accrual l_debug = ess_log_write('Ann accrual' + to_char(ann_accrual)) l_debug = ess_log_write('BASE_LOS in Else '||to_char(BASE_LOS)) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days- ' || TO_CHAR(l_days)) last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR '||TO_CHAR(l_days_in_year)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('BASE_LOS '||TO_CHAR(BASE_LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_DAYS_IN_YEAR ELSE BLOCK '||TO_CHAR(l_days_in_year)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) WHILE(i < 37) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBN_NHS_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.5 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('BASE_LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(BASE_LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(BASE_LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/' + to_char(l_days_in_year)) l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Newham"
    },
    {
        "FORMULA_NAME": "NCC_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 10 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '1900/01/01 00:00:00' (date) DEFAULT FOR PAY_ASG_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE14 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE15 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE_DATE4 IS '4712/12/31' (date) l_debug = ess_log_write('********************************Start **********************************') l_debug = ess_log_write('Assignment Number - '|| PER_ASG_ASSIGNMENT_NUMBER || ' ' ||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) assignment_id = 0 l_anniversary_date = '1951/01/01 00:00:00' (date) l_context_effective_date = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( l_debug = ess_log_write('No Termination found') YEAR_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_START_DATE = ADD_YEARS(YEAR_START_DATE,-1) YEAR_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) ELSE ( l_debug = ess_log_write('Termination found') YEAR_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_START_DATE = ADD_YEARS(YEAR_START_DATE,-1) YEAR_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('context_effective_date= '+ to_char(l_context_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('YEAR_START_DATE - '||to_char(YEAR_START_DATE, 'dd-mon-yyyy') ||' YEAR_END_DATE - '||to_char(YEAR_END_DATE, 'dd-mon-yyyy')) l_person_id=GET_CONTEXT(PERSON_ID,0) adj_service_start_date = to_date(GET_VALUE_SET('NCC_ADJ_SERVICE_START_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) if(adj_service_start_date < '4712/12/31 00:00:00' (date)) then ( l_con_start_dt = adj_service_start_date ) else ( l_con_start_dt = Hire_date ) l_debug = ess_log_write('Use Hire Date or Adjusted Service Date? '||'Hire_date = '||to_char(Hire_date, 'dd-mon-yyyy')||' adj_service_start_date '||to_char(adj_service_start_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_con_start_dt '||to_char(l_con_start_dt, 'dd-mon-yyyy')) l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 ann_l_days = 0 ann_no_of_days = 0 l_anniversary_top_up= 0 accrual=0 l_length_of_service = 0 FTE=0 UDT_Entry[0]= '4712/12/31 00:00:00' (date) FTE_Accrual=0 BH_hours = 0 BH = 0 BH1= '2023/04/07 00:00:00' (date) BH2= '2023/04/10 00:00:00' (date) BH3= '2023/05/01 00:00:00' (date) BH4= '2023/05/08 00:00:00' (date) BH5= '2023/05/29 00:00:00' (date) BH6= '2023/08/28 00:00:00' (date) BH7= '2023/12/25 00:00:00' (date) BH8= '2023/12/26 00:00:00' (date) BH9= '2024/01/01 00:00:00' (date) BH10= '2024/03/29 00:00:00' (date) t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_con_start_dt) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = l_con_start_dt l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_hr_asg_id = ASG_HR_ASG_ID l_ASG_START_DATE = '0001/01/01 00:00:00' (Date) l_ASG_START_DATE = TO_DATE(GET_VALUE_SET('NCC_ACTUAL_ASSIGNMENT_START_DATE','|=P_ASSIGNMENT_ID='''||TO_CHAR(L_HR_ASG_ID))) If (l_ASG_START_DATE > YEAR_START_DATE) THEN ( l_debug = ess_log_write('Asg Started after Year Start Date, so use asg start date' + to_char(l_ASG_START_DATE,'dd-mon-yyyy')) l_start_date=l_ASG_START_DATE ) ELSE ( l_debug = ess_log_write('Asg Started before Period start Date, so use period start date '+ to_char(YEAR_START_DATE,'dd-mon-yyyy')) l_start_date=YEAR_START_DATE ) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('JW Loop - Period = l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| '*****************' ) If (PER_ASG_EFFECTIVE_END_DATE > YEAR_END_DATE) THEN ( l_debug = ess_log_write('Asg End Date after Year Start Date, so use year end date' + to_char(YEAR_END_DATE,'dd-mon-yyyy')) l_end_date=YEAR_END_DATE ) ELSE ( l_debug = ess_log_write('Asg Started before Period start Date, so use asg end date '+ to_char(PER_ASG_EFFECTIVE_END_DATE,'dd-mon-yyyy')) l_end_date=PER_ASG_EFFECTIVE_END_DATE ) l_debug = ess_log_write('JW Loop - Period = l_end_date - '||to_char(l_end_date, 'dd-mon-yyyy')|| ' PER_ASG_EFFECTIVE_END_DATE '||to_char(PER_ASG_EFFECTIVE_END_DATE, 'dd-mon-yyyy')|| '*****************' ) ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_REST' IF PER_ASG_ATTRIBUTE14 = 'NCC Ts and Cs of Employment' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NCC Senior MGMT' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'APPRENTICE' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NJC for Local Govt Services' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' IF PER_ASG_ATTRIBUTE14 = 'JNC YOUTH LEADERS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' IF PER_ASG_ATTRIBUTE14 = 'Active Northumberland' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_AN' IF PER_ASG_ATTRIBUTE14 = 'SOULSBURY INSPECTORS ADVISORS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' l_debug = ess_log_write('JW Loop - Contract '|| PER_ASG_ATTRIBUTE14 || ' ' ||ALB_TABLE) BH = 0 BH1= '2023/04/07 00:00:00' (date) BH2= '2023/04/10 00:00:00' (date) BH3= '2023/05/01 00:00:00' (date) BH4= '2023/05/08 00:00:00' (date) BH5= '2023/05/29 00:00:00' (date) BH6= '2023/08/28 00:00:00' (date) BH7= '2023/12/25 00:00:00' (date) BH8= '2023/12/26 00:00:00' (date) BH9= '2024/01/01 00:00:00' (date) BH10= '2024/03/29 00:00:00' (date) IF (BH1 >= l_start_date and BH1 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH2 >= l_start_date and BH2 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH3 >= l_start_date and BH3 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH4 >= l_start_date and BH4 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH5 >= l_start_date and BH5 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH6 >= l_start_date and BH6 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH7 >= l_start_date and BH7 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH8 >= l_start_date and BH8 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH9 >= l_start_date and BH9 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH10 >= l_start_date and BH10 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) l_debug = ess_log_write('JW Loop - No of Bank Holiday in the Period '||to_char(BH)) l_debug = ess_log_write('50 - l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| ' l_end_date '||to_char(l_end_date, 'dd-mon-yyyy') ) l_debug = ess_log_write('50 - context_effective_date= '+ to_char(l_context_effective_date, 'dd-mon-yyyy')) t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_con_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('50 - l_length_of_service = '+ to_char(l_length_of_service)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) IF l_length_of_service < 0 THEN l_length_of_service = 0.00 l_debug = ess_log_write('50 - l_length_of_service = '+ to_char(l_length_of_service)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) LOS=TO_NUMBER(GET_TABLE_VALUE(ALB_TABLE,'LOS',to_char(l_length_of_service),'01/01/1951')) l_debug = ess_log_write('50 - FTE Annual Leave Balance Days '||to_char(LOS)) IF PER_ASG_ATTRIBUTE14 = 'JNC CHIEF EXECUTIVES' THEN LOS = 31 l_debug = ess_log_write('50 - Annual Accrual Days = '+ to_char(LOS)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (LOS = LOS * 7.5) ELSE (LOS = LOS * 7.4) l_debug = ess_log_write('50 - Annual Accrual Hours '||to_char(LOS)) l_anniversary_top_up = 0 ann_no_of_days= 0 l_anniversary_date = '1951/01/01 00:00:00' (date) IF ( (ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_REST' ) AND(l_length_of_service> 4 and l_length_of_service < 5)) THEN ( l_anniversary_date = ADD_YEARS(l_continous_date,5) l_debug = ess_log_write('70 - 5 Year Anniversay is in this Year '||to_char(l_anniversary_date,'dd-mon-yyyy')) ) IF ( (ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_AN' ) AND(l_length_of_service> 9 and l_length_of_service < 10)) THEN ( l_anniversary_date = ADD_YEARS(l_continous_date,10) l_debug = ess_log_write('70 - 10 Year Anniversay is in this Year '||to_char(l_anniversary_date,'dd-mon-yyyy')) ) IF (l_anniversary_date >= l_start_date and l_anniversary_date < l_end_date) THEN ( l_debug = ess_log_write('70 - Anniversay is in this Period '||to_char(l_anniversary_date,'dd-mon-yyyy')) l_debug = ess_log_write('70 - Anniversay LOS = '||to_char(l_length_of_service) || ' '||PER_ASG_ATTRIBUTE14|| ' / '||ALB_TABLE|| ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) l_debug = ess_log_write('70 - Anniversay l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| ' l_end_date '||to_char(l_end_date, 'dd-mon-yyyy') ) ann_no_of_days=DAYS_BETWEEN(l_end_date, l_anniversary_date) l_debug = ess_log_write('70 - Anniversay No of Days after Anniversary '||to_char(ann_no_of_days)) l_anniversary_top_up= ROUND(5 *ann_no_of_days/365, 4) l_debug = ess_log_write('70 - Anniversay_No of Extra Days '||to_char(l_anniversary_top_up)) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (l_anniversary_top_up= l_anniversary_top_up* 7.5) ELSE (l_anniversary_top_up= l_anniversary_top_up* 7.4) l_debug = ess_log_write('70 - Anniversay_No of Extra Hours '||to_char(l_anniversary_top_up)) l_debug = ess_log_write('70 - Anniversay top up '|| to_char(l_anniversary_top_up)) ) l_days=0 l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('50 -l_days ' || to_char(l_days) ||' l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy') || ' l_end_date - '||to_char(l_end_date, 'dd-mon-yyyy') ) l_leap_year = '2024/02/29 00:00:00' (date) IF ( l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN (l_days = l_days -1 l_debug = ess_log_write('80 - Leap Year Adjustment ' || to_char(l_days)) ) l_debug = ess_log_write('JW 90 Prorate on the Period '||to_char(l_days)||'/365 *'||to_char(LOS)) FTE_Accrual= ROUND(LOS*l_days/365, 4) l_debug = ess_log_write('90 Prorate on the Period FTE_Accrual = '|| to_char(FTE_Accrual)) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (BH_hours= BH * 7.5) ELSE (BH_hours= BH * 7.4) l_debug = ess_log_write('90 Plus Bank Holiday Days = '||to_char(BH) ||' hours = ' || to_char(BH_hours)) FTE_Accrual= FTE_Accrual + BH_hours l_debug = ess_log_write('90 Plus Bank Holiday FTE_Accrual = '|| to_char(FTE_Accrual)) FTE_Accrual= FTE_Accrual + l_anniversary_top_up l_debug = ess_log_write('90 Anniversay top up '|| to_char(l_anniversary_top_up)) l_debug = ess_log_write('90 Plus Anniversary Top Up FTE_Accrual = '|| to_char(FTE_Accrual)) l_debug = ess_log_write('95 Prorate on FTE '||to_char(l_fte)) FTE_Accrual = FTE_Accrual * l_fte l_debug = ess_log_write('95 Prorate on FTE FTE_Accrual = '|| to_char(FTE_Accrual)) l_debug = ess_log_write('99 Start - End '|| TO_CHAR(l_start_date, 'dd-mon-yyyy')|| ' - ' || TO_CHAR(l_end_date, 'dd-mon-yyyy') || ' Days ' || to_char(l_days)) l_debug = ess_log_write('99 prev accrual ' + to_char(accrual)|| ' + ' ) l_debug = ess_log_write('99 this Accrual ' + to_char(FTE_Accrual)|| ' = ' ) accrual= (accrual+FTE_Accrual) l_debug = ess_log_write('99 Total Accrual ' + to_char(accrual)|| ' ***** ' ) FTE_Accrual=0 IF ( TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR PER_ASG_EFFECTIVE_END_DATE > YEAR_END_DATE )THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = round(accrual,2) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 10 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '1900/01/01 00:00:00' (date) DEFAULT FOR PAY_ASG_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE14 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE15 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE_DATE4 IS '4712/12/31' (date) l_debug = ess_log_write('********************************Excluded Weekend**********************************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) assignment_id = 0 l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( l_debug = ess_log_write('line 65') BH_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_START_DATE = ADD_YEARS(BH_START_DATE,-1) BH_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) ELSE ( l_debug = ess_log_write('line 72') l_debug = ess_log_write('Termination found') BH_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = ADD_YEARS(BH_END_DATE,1) ) BH_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_START_DATE = ADD_YEARS(BH_START_DATE,-1) BH_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') l_person_id=GET_CONTEXT(PERSON_ID,0) adj_service_start_date = to_date(GET_VALUE_SET('NCC_ADJ_SERVICE_START_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) if(adj_service_start_date < '4712/12/31 00:00:00' (date)) then ( l_debug = ess_log_write('line 90') l_start_dt = adj_service_start_date ) else ( l_debug = ess_log_write('line 95') l_start_dt = Hire_date ) l_debug = ess_log_write(' l_start_dt '||to_char(l_start_dt)) l_debug = ess_log_write(' adj_service_start_date '||to_char(adj_service_start_date)) l_debug = ess_log_write(' Hire_date '||to_char(Hire_date)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('line 138') l_debug = ess_log_write('l_length_of_service1= '+ to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write(' l_continous_date '||to_char(l_continous_date)) IF(l_length_of_service>=5) THEN ( l_debug = ess_log_write('line 147') l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_contract_end_date= '+ to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('l_continous_date= '+ to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) l_debug = ess_log_write('l_length_of_service= '+ to_char(l_length_of_service)) l_hr_asg_id = ASG_HR_ASG_ID l_ASG_START_DATE = '0001/01/01 00:00:00' (Date) l_ASG_START_DATE = TO_DATE(GET_VALUE_SET('NCC_ACTUAL_ASSIGNMENT_START_DATE','|=P_ASSIGNMENT_ID='''||TO_CHAR(L_HR_ASG_ID))) If (l_ASG_START_DATE > BH_START_DATE) THEN ( l_debug = ess_log_write('line 167') l_start_date=l_ASG_START_DATE ) ELSE ( l_debug = ess_log_write('line 172') l_start_date=BH_START_DATE ) l_debug = ess_log_write(' l_start_date '||to_char(l_start_date)||' PER_PERSON_ENTERPRISE_HIRE_DATE '||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||' ACP_HIRE_DATE '||to_char(ACP_HIRE_DATE)||' PER_PER_ENTERPRISE_TERMINATION_DATE '||PER_TRM__EFFECTIVE_END_DATE) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) LOS=TO_NUMBER(GET_TABLE_VALUE('NCC_ANNUAL_LEAVE_BALANCE','LOS',to_char(l_length_of_service),'01/01/1951')) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('line 189') l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('NCC_ANNUAL_LEAVE_BALANCE','LOS',to_char(l_length_of_service),'01/01/1951')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( l_debug = ess_log_write('line 204') IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('NCC_ANNUAL_LEAVE_BALANCE','LOS',to_char(l_length_of_service),'01/01/1951')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_debug = ess_log_write('Line 252 - LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')||'Asg End Date Ongoing') l_end_date=BH_END_DATE ) IF PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE THEN ( l_debug = ess_log_write('Line 260 - LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')||'Asg End After Period End') l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year = '2020/02/29 00:00:00' (date) IF ( l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN (l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days -1 ) l_days_final = l_days IF l_fte=1 THEN ( l_debug = ess_log_write('line 260') Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('line 266') FTE_Accrual= ROUND(LOS*l_days_final/365*L_Fte, 2) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Contract '|| PER_ASG_ATTRIBUTE14) l_debug = ess_log_write('Tupe From '|| PER_ASG_ATTRIBUTE15) l_debug = ess_log_write('Tupe Date '|| to_char(PER_ASG_ATTRIBUTE_DATE4,'dd/mm/yyyy')) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' OR ((PER_ASG_ATTRIBUTE14 = 'NCC Ts and Cs of Employment' OR PER_ASG_ATTRIBUTE14 = 'NCC Senior MGMT') AND PER_ASG_ATTRIBUTE15 = 'NHS' AND to_char(PER_ASG_ATTRIBUTE_DATE4,'dd/mm/yyyy') = '01/10/2021') THEN ( accrual=accrual l_debug = ess_log_write('JW 99 NHS') ) ELSE ( accrual=accrual+Full_accrual+FTE_Accrual+Full_accrual_again) l_debug = ess_log_write('JW 99 accrual ' + to_char(accrual)|| ' = ' ) l_debug = ess_log_write('JW 99 Full_accrual ' + to_char(Full_accrual)) l_debug = ess_log_write('JW 99 FTE_Accrual ' + to_char(FTE_Accrual) ) l_debug = ess_log_write('JW 99 Full_accrual_again ' + to_char(Full_accrual_again) ) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF ( TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE )THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 11 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 l_debug = ess_log_write('********************************Excluded Weekend**********************************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) assignment_id = 0 l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_START_DATE = ADD_YEARS(BH_START_DATE,-1) BH_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = ADD_YEARS(BH_END_DATE,1) ) l_person_id=GET_CONTEXT(PERSON_ID,0) adj_service_start_date = to_date(GET_VALUE_SET('NCC_ADJ_SERVICE_START_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) if(adj_service_start_date < '4712/12/31 00:00:00' (date)) then ( l_start_dt = adj_service_start_date ) else ( l_start_dt = Hire_date ) l_debug = ess_log_write(' l_start_dt '||to_char(l_start_dt)) l_debug = ess_log_write(' adj_service_start_date '||to_char(adj_service_start_date)) l_debug = ess_log_write(' Hire_date '||to_char(Hire_date)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('l_length_of_service1= '+ to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write(' l_continous_date '||to_char(l_continous_date)) IF(l_length_of_service>=5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_contract_end_date= '+ to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('l_continous_date= '+ to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) l_debug = ess_log_write('l_length_of_service= '+ to_char(l_length_of_service)) If (ACP_HIRE_DATE > BH_START_DATE) THEN ( l_start_date=ACP_HIRE_DATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write(' l_start_date '||to_char(l_start_date)||' PER_PERSON_ENTERPRISE_HIRE_DATE '||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||' ACP_HIRE_DATE '||to_char(ACP_HIRE_DATE)||' PER_PER_ENTERPRISE_TERMINATION_DATE '||PER_TRM__EFFECTIVE_END_DATE) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) LOS=TO_NUMBER(GET_TABLE_VALUE('NCC_ANNUAL_LEAVE_BALANCE','LOS',to_char(l_length_of_service),'01/01/1951')) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('NCC_ANNUAL_LEAVE_BALANCE','LOS',to_char(l_length_of_service),'01/01/1951')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('NCC_ANNUAL_LEAVE_BALANCE','LOS',to_char(l_length_of_service),'01/01/1951')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year = '2020/02/29 00:00:00' (date) IF ( l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN (l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days -1 ) l_days_final = l_days IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( FTE_Accrual= ROUND(LOS*l_days_final/365*L_Fte, 2) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF ( TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE )THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 10 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '1900/01/01 00:00:00' (date) DEFAULT FOR PAY_ASG_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE14 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE15 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE_DATE4 IS '4712/12/31' (date) DEFAULT FOR PER_ASG_ATTRIBUTE21 IS 'XX' l_debug = ess_log_write('********************************Start **********************************') l_debug = ess_log_write('Assignment Number - '|| PER_ASG_ASSIGNMENT_NUMBER || ' ' ||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) assignment_id = 0 l_anniversary_date = '1951/01/01 00:00:00' (date) l_context_effective_date = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( l_debug = ess_log_write('No Termination found') YEAR_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_START_DATE = ADD_YEARS(YEAR_START_DATE,-1) YEAR_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) ELSE ( l_debug = ess_log_write('Termination found') IF to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'MM') < '04' THEN ( YEAR_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_START_DATE = ADD_YEARS(YEAR_START_DATE,-1) YEAR_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) IF to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'MM') >'03' THEN ( YEAR_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_END_DATE = ADD_YEARS(YEAR_END_DATE,1) ) ) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('context_effective_date= '+ to_char(l_context_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('YEAR_START_DATE - '||to_char(YEAR_START_DATE, 'dd-mon-yyyy') ||' YEAR_END_DATE - '||to_char(YEAR_END_DATE, 'dd-mon-yyyy')) l_person_id=GET_CONTEXT(PERSON_ID,0) adj_service_start_date = to_date(GET_VALUE_SET('NCC_ADJ_SERVICE_START_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) if(adj_service_start_date < '4712/12/31 00:00:00' (date)) then ( l_con_start_dt = adj_service_start_date ) else ( l_con_start_dt = Hire_date ) l_debug = ess_log_write('Use Hire Date or Adjusted Service Date? '||'Hire_date = '||to_char(Hire_date, 'dd-mon-yyyy')||' adj_service_start_date '||to_char(adj_service_start_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_con_start_dt '||to_char(l_con_start_dt, 'dd-mon-yyyy')) l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 ann_l_days = 0 ann_no_of_days = 0 l_anniversary_top_up= 0 accrual=0 l_length_of_service = 0 FTE=0 UDT_Entry[0]= '4712/12/31 00:00:00' (date) FTE_Accrual=0 BH_hours = 0 BH = 0 BH1= '2024/04/01 00:00:00' (date) BH2= '2024/05/06 00:00:00' (date) BH3= '2024/05/27 00:00:00' (date) BH4= '2024/08/26 00:00:00' (date) BH5= '2024/12/25 00:00:00' (date) BH6= '2024/12/26 00:00:00' (date) BH7= '2025/01/01 00:00:00' (date) t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_con_start_dt) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = l_con_start_dt l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_hr_asg_id = ASG_HR_ASG_ID l_ASG_START_DATE = '0001/01/01 00:00:00' (Date) l_ASG_START_DATE = TO_DATE(GET_VALUE_SET('NCC_ACTUAL_ASSIGNMENT_START_DATE','|=P_ASSIGNMENT_ID='''||TO_CHAR(L_HR_ASG_ID))) If (l_ASG_START_DATE > YEAR_START_DATE) THEN ( l_debug = ess_log_write('Asg Started after Year Start Date, so use asg start date' + to_char(l_ASG_START_DATE,'dd-mon-yyyy')) l_start_date=l_ASG_START_DATE ) ELSE ( l_debug = ess_log_write('Asg Started before Period start Date, so use period start date '+ to_char(YEAR_START_DATE,'dd-mon-yyyy')) l_start_date=YEAR_START_DATE ) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('JW Loop - Period = l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| '*****************' ) If (PER_ASG_EFFECTIVE_END_DATE > YEAR_END_DATE) THEN ( l_debug = ess_log_write('Asg End Date after Year Start Date, so use year end date' + to_char(YEAR_END_DATE,'dd-mon-yyyy')) l_end_date=YEAR_END_DATE ) ELSE ( l_debug = ess_log_write('Asg End Date before Period start Date, so use asg end date '+ to_char(PER_ASG_EFFECTIVE_END_DATE,'dd-mon-yyyy')) l_end_date=PER_ASG_EFFECTIVE_END_DATE ) l_debug = ess_log_write('JW Loop - Period = l_end_date - '||to_char(l_end_date, 'dd-mon-yyyy')|| ' PER_ASG_EFFECTIVE_END_DATE '||to_char(PER_ASG_EFFECTIVE_END_DATE, 'dd-mon-yyyy')|| '*****************' ) ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_REST' IF PER_ASG_ATTRIBUTE14 = 'NCC Ts and Cs of Employment' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NCC Senior MGMT' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'APPRENTICE' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NJC for Local Govt Services' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' IF PER_ASG_ATTRIBUTE14 = 'JNC YOUTH LEADERS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' IF PER_ASG_ATTRIBUTE14 = 'SOULSBURY INSPECTORS ADVISORS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'JNC CHIEF OFFICER' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_CO' l_debug = ess_log_write('JW Loop - Contract '|| PER_ASG_ATTRIBUTE14 || ' ' ||ALB_TABLE) BH = 0 BH1= '2024/04/01 00:00:00' (date) BH2= '2024/05/06 00:00:00' (date) BH3= '2024/05/27 00:00:00' (date) BH4= '2024/08/26 00:00:00' (date) BH5= '2024/12/25 00:00:00' (date) BH6= '2024/12/26 00:00:00' (date) BH7= '2025/01/01 00:00:00' (date) IF (BH1 >= l_start_date and BH1 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH2 >= l_start_date and BH2 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH3 >= l_start_date and BH3 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH4 >= l_start_date and BH4 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH5 >= l_start_date and BH5 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH6 >= l_start_date and BH6 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH7 >= l_start_date and BH7 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) l_debug = ess_log_write('JW Loop - No of Bank Holiday in the Period '||to_char(BH)) l_debug = ess_log_write('50 - l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| ' l_end_date '||to_char(l_end_date, 'dd-mon-yyyy') ) l_debug = ess_log_write('50 - context_effective_date= '+ to_char(l_context_effective_date, 'dd-mon-yyyy')) t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_con_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('50 - l_length_of_service = '+ to_char(l_length_of_service)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) IF l_length_of_service < 0 THEN l_length_of_service = 0.00 l_debug = ess_log_write('50 - l_length_of_service = '+ to_char(l_length_of_service)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) LOS=TO_NUMBER(GET_TABLE_VALUE(ALB_TABLE,'LOS',to_char(l_length_of_service),'01/01/1951')) l_debug = ess_log_write('50 - FTE Annual Leave Balance Days '||to_char(LOS)) IF PER_ASG_ATTRIBUTE14 = 'JNC CHIEF EXECUTIVES' THEN LOS = 31 IF PER_ASG_ATTRIBUTE21 = 'Extra 1 Day' THEN LOS = LOS + 1 IF PER_ASG_ATTRIBUTE21 = 'Extra 2 Days' THEN LOS = LOS + 2 IF PER_ASG_ATTRIBUTE21 = '34 Days (TUPE HFN)' THEN LOS = 34 l_debug = ess_log_write('55 - Additional Days = ' + PER_ASG_ATTRIBUTE21 + ' = LOS ' + to_char(LOS) ) l_debug = ess_log_write('50 - Annual Accrual Days = '+ to_char(LOS)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (LOS = LOS * 7.5) ELSE (LOS = LOS * 7.4) l_debug = ess_log_write('50 - Annual Accrual Hours '||to_char(LOS)) l_anniversary_top_up = 0 ann_no_of_days= 0 l_anniversary_date = '1951/01/01 00:00:00' (date) IF ( (ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_CO' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_REST' ) AND(l_length_of_service> 4 and l_length_of_service < 5)) THEN ( l_anniversary_date = ADD_YEARS(l_continous_date,5) l_debug = ess_log_write('70 - 5 Year Anniversay is in this Year '||to_char(l_anniversary_date,'dd-mon-yyyy')) ) IF ( (ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_AN' ) AND(l_length_of_service> 9 and l_length_of_service < 10)) THEN ( l_anniversary_date = ADD_YEARS(l_continous_date,10) l_debug = ess_log_write('70 - 10 Year Anniversay is in this Year '||to_char(l_anniversary_date,'dd-mon-yyyy')) ) IF (l_anniversary_date >= l_start_date and l_anniversary_date < l_end_date) THEN ( l_debug = ess_log_write('70 - Anniversay is in this Period '||to_char(l_anniversary_date,'dd-mon-yyyy')) l_debug = ess_log_write('70 - Anniversay LOS = '||to_char(l_length_of_service) || ' '||PER_ASG_ATTRIBUTE14|| ' / '||ALB_TABLE|| ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) l_debug = ess_log_write('70 - Anniversay l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| ' l_end_date '||to_char(l_end_date, 'dd-mon-yyyy') ) ann_no_of_days=DAYS_BETWEEN(l_end_date, l_anniversary_date) l_debug = ess_log_write('70 - Anniversay No of Days after Anniversary '||to_char(ann_no_of_days)) IF ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_CO' THEN( l_anniversary_top_up= ROUND(1 *ann_no_of_days/365, 4) l_debug = ess_log_write('70 - Anniversay_No of Extra Days 1 '||to_char(l_anniversary_top_up))) ELSE( l_anniversary_top_up= ROUND(5 *ann_no_of_days/365, 4) l_debug = ess_log_write('70 - Anniversay_No of Extra Days 5 '||to_char(l_anniversary_top_up))) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (l_anniversary_top_up= l_anniversary_top_up* 7.5) ELSE (l_anniversary_top_up= l_anniversary_top_up* 7.4) l_debug = ess_log_write('70 - Anniversay_No of Extra Hours '||to_char(l_anniversary_top_up)) l_debug = ess_log_write('70 - Anniversay top up '|| to_char(l_anniversary_top_up)) ) l_days=0 l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('50 -l_days ' || to_char(l_days) ||' l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy') || ' l_end_date - '||to_char(l_end_date, 'dd-mon-yyyy') ) l_leap_year = '2024/02/29 00:00:00' (date) IF ( l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN (l_days = l_days -1 l_debug = ess_log_write('80 - Leap Year Adjustment ' || to_char(l_days)) ) l_debug = ess_log_write('JW 90 Prorate on the Period '||to_char(l_days)||'/365 *'||to_char(LOS)) FTE_Accrual= ROUND(LOS*l_days/365, 4) l_debug = ess_log_write('90 Prorate on the Period FTE_Accrual = '|| to_char(FTE_Accrual)) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (BH_hours= BH * 7.5) ELSE (BH_hours= BH * 7.4) l_debug = ess_log_write('90 Plus Bank Holiday Days = '||to_char(BH) ||' hours = ' || to_char(BH_hours)) FTE_Accrual= FTE_Accrual + BH_hours l_debug = ess_log_write('90 Plus Bank Holiday FTE_Accrual = '|| to_char(FTE_Accrual)) FTE_Accrual= FTE_Accrual + l_anniversary_top_up l_debug = ess_log_write('90 Anniversay top up '|| to_char(l_anniversary_top_up)) l_debug = ess_log_write('90 Plus Anniversary Top Up FTE_Accrual = '|| to_char(FTE_Accrual)) l_debug = ess_log_write('95 Prorate on FTE '||to_char(l_fte)) FTE_Accrual = FTE_Accrual * l_fte l_debug = ess_log_write('95 Prorate on FTE FTE_Accrual = '|| to_char(FTE_Accrual)) l_debug = ess_log_write('99 Start - End '|| TO_CHAR(l_start_date, 'dd-mon-yyyy')|| ' - ' || TO_CHAR(l_end_date, 'dd-mon-yyyy') || ' Days ' || to_char(l_days)) l_debug = ess_log_write('99 prev accrual ' + to_char(accrual)|| ' + ' ) l_debug = ess_log_write('99 this Accrual ' + to_char(FTE_Accrual)|| ' = ' ) accrual= (accrual+FTE_Accrual) l_debug = ess_log_write('99 Total Accrual ' + to_char(accrual)|| ' ***** ' ) FTE_Accrual=0 IF ( TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR PER_ASG_EFFECTIVE_END_DATE > YEAR_END_DATE )THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = round(accrual,2) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 10 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '1900/01/01 00:00:00' (date) DEFAULT FOR PAY_ASG_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE14 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE15 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE_DATE4 IS '4712/12/31' (date) l_debug = ess_log_write('********************************Start **********************************') l_debug = ess_log_write('Assignment Number - '|| PER_ASG_ASSIGNMENT_NUMBER || ' ' ||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) assignment_id = 0 Anniversary_Date_5_Yrs = '1951/01/01 00:00:00' (date) l_context_effective_date = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( l_debug = ess_log_write('No Termination found') PERIOD_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') PERIOD_START_DATE = ADD_YEARS(PERIOD_START_DATE,-1) PERIOD_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) ELSE ( l_debug = ess_log_write('Termination found') PERIOD_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') PERIOD_START_DATE = ADD_YEARS(PERIOD_START_DATE,-1) PERIOD_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('context_effective_date= '+ to_char(l_context_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PERIOD_START_DATE - '||to_char(PERIOD_START_DATE)||' PERIOD_END_DATE - '||to_char(PERIOD_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) adj_service_start_date = to_date(GET_VALUE_SET('NCC_ADJ_SERVICE_START_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) if(adj_service_start_date < '4712/12/31 00:00:00' (date)) then ( l_start_dt = adj_service_start_date ) else ( l_start_dt = Hire_date ) l_debug = ess_log_write('Use Hire Date or Adjusted Service Date?') l_debug = ess_log_write('Hire_date '||to_char(Hire_date)) l_debug = ess_log_write('adj_service_start_date '||to_char(adj_service_start_date)) l_debug = ess_log_write('l_start_dt '||to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('Period Start DATE - '||TO_CHAR(PERIOD_START_DATE)||' Period End Date - '||TO_CHAR(PERIOD_END_DATE)) l_debug = ess_log_write(' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 FTE=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FTE=0 UDT_Entry[0]= '4712/12/31 00:00:00' (date) COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 BH_hours = 0 BH = 0 BH1= '2022/04/15 00:00:00' (date) BH2= '2022/04/18 00:00:00' (date) BH3= '2022/05/02 00:00:00' (date) BH4= '2022/06/02 00:00:00' (date) BH5= '2022/06/03 00:00:00' (date) BH6= '2022/08/29 00:00:00' (date) BH7= '2022/09/19 00:00:00' (date) BH8= '2022/12/26 00:00:00' (date) BH9= '2022/12/27 00:00:00' (date) BH10= '2023/01/02 00:00:00' (date) ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' IF PER_ASG_ATTRIBUTE14 = 'JNC YOUTH LEADERS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' l_debug = ess_log_write('JW Contract Type '|| PER_ASG_ATTRIBUTE14) l_debug = ess_log_write(' JW Annual Leave Balance Table Name - '||ALB_TABLE) t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('l_length_of_service = '+ to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write(' l_continous_date '||to_char(l_continous_date)) IF(l_length_of_service>=5) THEN ( Anniversary_Date_5_Yrs = ADD_YEARS(l_continous_date,5) ) l_debug = ess_log_write(' Anniversary_Date_5_Yrs '||to_char(Anniversary_Date_5_Yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_contract_end_date= '+ to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('l_continous_date= '+ to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) l_debug = ess_log_write('l_length_of_service= '+ to_char(l_length_of_service)) l_hr_asg_id = ASG_HR_ASG_ID l_ASG_START_DATE = '0001/01/01 00:00:00' (Date) l_ASG_START_DATE = TO_DATE(GET_VALUE_SET('NCC_ACTUAL_ASSIGNMENT_START_DATE','|=P_ASSIGNMENT_ID='''||TO_CHAR(L_HR_ASG_ID))) If (l_ASG_START_DATE > PERIOD_START_DATE) THEN ( l_debug = ess_log_write('Asg Started after Period Start Date, so use asg start date' + to_char(l_ASG_START_DATE)) l_start_date=l_ASG_START_DATE ) ELSE ( l_debug = ess_log_write('Asg Started before Period start Date, so use period start date'+ to_char(PERIOD_START_DATE)) l_start_date=PERIOD_START_DATE ) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('JW Loop - Contract '|| PER_ASG_ATTRIBUTE14) ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' IF PER_ASG_ATTRIBUTE14 = 'JNC YOUTH LEADERS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' LOS=TO_NUMBER(GET_TABLE_VALUE(ALB_TABLE,'LOS',to_char(l_length_of_service),'01/01/1951')) IF PER_ASG_ATTRIBUTE14 = 'JNC CHIEF EXECUTIVES' THEN LOS = 288.6 l_debug = ess_log_write('JW Loop - FTE Annual Leave Balance '||to_char(LOS)) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (BH_remove = 10 * 7.5) ELSE (BH_remove = 10 * 7.4) LOS = LOS - BH_remove l_debug = ess_log_write('JW Loop - 1FTE Annual Leave Balance with BH Removed '||to_char(LOS)) BH = 0 BH1= '2022/04/15 00:00:00' (date) BH2= '2022/04/18 00:00:00' (date) BH3= '2022/05/02 00:00:00' (date) BH4= '2022/06/02 00:00:00' (date) BH5= '2022/06/03 00:00:00' (date) BH6= '2022/08/29 00:00:00' (date) BH7= '2022/09/19 00:00:00' (date) BH8= '2022/12/26 00:00:00' (date) BH9= '2022/12/27 00:00:00' (date) BH10= '2023/01/02 00:00:00' (date) IF (BH1 >= l_start_date and BH1 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH2 >= l_start_date and BH2 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH3 >= l_start_date and BH3 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH4 >= l_start_date and BH4 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH5 >= l_start_date and BH5 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH6 >= l_start_date and BH6 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH7 >= l_start_date and BH7 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH8 >= l_start_date and BH8 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH9 >= l_start_date and BH9 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH10 >= l_start_date and BH10 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) l_debug = ess_log_write('JW Loop - 1 No of Bank Holiday in the Period '||to_char(BH)) IF(Anniversary_Date_5_Yrs>=l_start_date AND Anniversary_Date_5_Yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('line 189 - 5 Year Anniversary logic') l_debug = ess_log_write('Anniversary_Date_5_Yrs '|| TO_CHAR(Anniversary_Date_5_Yrs)) l_los_before_ann = ((DAYS_BETWEEN(Anniversary_Date_5_Yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(Anniversary_Date_5_Yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(Anniversary_Date_5_Yrs,l_start_date) ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' IF PER_ASG_ATTRIBUTE14 = 'JNC YOUTH LEADERS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE(ALB_TABLE,'LOS',to_char(l_length_of_service),'01/01/1951')) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (BH_remove = 10 * 7.5) ELSE (BH_remove = 10 * 7.4) LOS_PERMITABLE = LOS_PERMITABLE - BH_remove l_debug = ess_log_write('LOS_PERMITABLE with BH Removed '||to_char(LOS)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = Anniversary_Date_5_Yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( l_debug = ess_log_write('line 204') IF(Anniversary_Date_5_Yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' IF PER_ASG_ATTRIBUTE14 = 'JNC YOUTH LEADERS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' LOS=TO_NUMBER(GET_TABLE_VALUE(ALB_TABLE,'LOS',to_char(l_length_of_service),'01/01/1951')) l_debug = ess_log_write('JW Loop 2 - FTE Annual Leave Balance '||to_char(LOS)) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (BH_remove = 10 * 7.5) ELSE (BH_remove = 10 * 7.4) LOS = LOS - BH_remove l_debug = ess_log_write('JW Loop 2 - 1FTE Annual Leave Balance with BH Removed '||to_char(LOS)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_debug = ess_log_write('line 219') l_end_date=PERIOD_END_DATE ) IF PER_ASG_EFFECTIVE_END_DATE > PERIOD_END_DATE THEN ( l_debug = ess_log_write('line 219') l_end_date=PERIOD_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year = '2020/02/29 00:00:00' (date) IF ( l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN (l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days -1 ) l_days_final = l_days l_debug = ess_log_write('JW Prorate on the Period '||to_char(l_days_final)||'/365 *'||to_char(LOS)) FTE_Accrual= ROUND(LOS*l_days_final/365, 4) l_debug = ess_log_write('JW Prorate on the Period FTE_Accrual = '|| to_char(FTE_Accrual)) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (BH_hours= BH * 7.5) ELSE (BH_hours= BH * 7.4) l_debug = ess_log_write('JW Plus Bank Holiday Days = '||to_char(BH) ||' hours = ' || to_char(BH_hours)) FTE_Accrual= FTE_Accrual + BH_hours l_debug = ess_log_write('JW Plus Bank Holiday FTE_Accrual = '|| to_char(FTE_Accrual)) l_debug = ess_log_write('JW Prorate on FTE '||to_char(l_fte)) FTE_Accrual = FTE_Accrual * l_fte l_debug = ess_log_write('JW Prorate on FTE FTE_Accrual = '|| to_char(FTE_Accrual)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <PERIOD_START_DATE) THEN( COMP_DATE=PERIOD_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Contract '|| PER_ASG_ATTRIBUTE14) l_debug = ess_log_write('Tupe From '|| PER_ASG_ATTRIBUTE15) l_debug = ess_log_write('Tupe Date '|| to_char(PER_ASG_ATTRIBUTE_DATE4,'dd/mm/yyyy')) IF (to_char(PER_ASG_ATTRIBUTE_DATE4,'dd/mm/yyyy') = '01/10/2022' AND PER_ASG_ATTRIBUTE15 <> 'NHS' ) THEN ( accrual=accrual l_debug = ess_log_write('JW 99 TUPE') ) ELSE ( accrual= (accrual+Full_accrual+FTE_Accrual+Full_accrual_again)) l_debug = ess_log_write('JW 99 LOS '|| to_char(LOS)) l_debug = ess_log_write('JW 99 Start - End '|| TO_CHAR(l_start_date)|| ' - ' || TO_CHAR(l_end_date) || ' Days ' || to_char(l_days_final)) l_debug = ess_log_write('JW 99 accrual ' + to_char(accrual)|| ' = ' ) l_debug = ess_log_write('JW 99 Full_accrual ' + to_char(Full_accrual)) l_debug = ess_log_write('JW 99 FTE_Accrual ' + to_char(FTE_Accrual) ) l_debug = ess_log_write('JW 99 Full_accrual_again ' + to_char(Full_accrual_again) ) Full_accrual=0 FTE_Accrual=0 Full_accrual_again = 0 IF ( TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR PER_ASG_EFFECTIVE_END_DATE > PERIOD_END_DATE )THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = round(accrual,2) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_ANNUAL_LEAVE_ACCRUAL",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 10 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '1900/01/01 00:00:00' (date) DEFAULT FOR PAY_ASG_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE14 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE15 IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE_DATE4 IS '4712/12/31' (date) DEFAULT FOR PER_ASG_ATTRIBUTE21 IS 'XX' l_debug = ess_log_write('********************************Start **********************************') l_debug = ess_log_write('Assignment Number - '|| PER_ASG_ASSIGNMENT_NUMBER || ' ' ||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) assignment_id = 0 l_anniversary_date = '1951/01/01 00:00:00' (date) l_context_effective_date = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( l_debug = ess_log_write('No Termination found') YEAR_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_START_DATE = ADD_YEARS(YEAR_START_DATE,-1) YEAR_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) ELSE ( l_debug = ess_log_write('Termination found') IF to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'MM') < '04' THEN ( YEAR_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_START_DATE = ADD_YEARS(YEAR_START_DATE,-1) YEAR_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ) IF to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'MM') >'03' THEN ( YEAR_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') YEAR_END_DATE = ADD_YEARS(YEAR_END_DATE,1) ) ) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('context_effective_date= '+ to_char(l_context_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('YEAR_START_DATE - '||to_char(YEAR_START_DATE, 'dd-mon-yyyy') ||' YEAR_END_DATE - '||to_char(YEAR_END_DATE, 'dd-mon-yyyy')) l_person_id=GET_CONTEXT(PERSON_ID,0) adj_service_start_date = to_date(GET_VALUE_SET('NCC_ADJ_SERVICE_START_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) Hire_date = to_date(GET_VALUE_SET('NCC_HIRE_DATE','|=P_PERSON_ID=' || to_char(l_person_id))) if(adj_service_start_date < '4712/12/31 00:00:00' (date)) then ( l_con_start_dt = adj_service_start_date ) else ( l_con_start_dt = Hire_date ) l_debug = ess_log_write('Use Hire Date or Adjusted Service Date? '||'Hire_date = '||to_char(Hire_date, 'dd-mon-yyyy')||' adj_service_start_date '||to_char(adj_service_start_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_con_start_dt '||to_char(l_con_start_dt, 'dd-mon-yyyy')) l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 ann_l_days = 0 ann_no_of_days = 0 l_anniversary_top_up= 0 accrual=0 l_length_of_service = 0 FTE=0 UDT_Entry[0]= '4712/12/31 00:00:00' (date) FTE_Accrual=0 BH_hours = 0 BH = 0 BH1= '2024/04/01 00:00:00' (date) BH2= '2024/05/06 00:00:00' (date) BH3= '2024/05/27 00:00:00' (date) BH4= '2024/08/26 00:00:00' (date) BH5= '2024/12/25 00:00:00' (date) BH6= '2024/12/26 00:00:00' (date) BH7= '2025/01/01 00:00:00' (date) t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_con_start_dt) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = l_con_start_dt l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_hr_asg_id = ASG_HR_ASG_ID l_ASG_START_DATE = '0001/01/01 00:00:00' (Date) l_ASG_START_DATE = TO_DATE(GET_VALUE_SET('NCC_ACTUAL_ASSIGNMENT_START_DATE','|=P_ASSIGNMENT_ID='''||TO_CHAR(L_HR_ASG_ID))) If (l_ASG_START_DATE > YEAR_START_DATE) THEN ( l_debug = ess_log_write('Asg Started after Year Start Date, so use asg start date' + to_char(l_ASG_START_DATE,'dd-mon-yyyy')) l_start_date=l_ASG_START_DATE ) ELSE ( l_debug = ess_log_write('Asg Started before Period start Date, so use period start date '+ to_char(YEAR_START_DATE,'dd-mon-yyyy')) l_start_date=YEAR_START_DATE ) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('JW Loop - Period = l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| '*****************' ) If (PER_ASG_EFFECTIVE_END_DATE > YEAR_END_DATE) THEN ( l_debug = ess_log_write('Asg End Date after Year Start Date, so use year end date' + to_char(YEAR_END_DATE,'dd-mon-yyyy')) l_end_date=YEAR_END_DATE ) ELSE ( l_debug = ess_log_write('Asg End Date before Period start Date, so use asg end date '+ to_char(PER_ASG_EFFECTIVE_END_DATE,'dd-mon-yyyy')) l_end_date=PER_ASG_EFFECTIVE_END_DATE ) l_debug = ess_log_write('JW Loop - Period = l_end_date - '||to_char(l_end_date, 'dd-mon-yyyy')|| ' PER_ASG_EFFECTIVE_END_DATE '||to_char(PER_ASG_EFFECTIVE_END_DATE, 'dd-mon-yyyy')|| '*****************' ) ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_REST' IF PER_ASG_ATTRIBUTE14 = 'NCC Ts and Cs of Employment' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NCC Senior MGMT' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'APPRENTICE' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NJC for Local Govt Services' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' IF PER_ASG_ATTRIBUTE14 = 'JNC YOUTH LEADERS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' IF PER_ASG_ATTRIBUTE14 = 'SOULSBURY INSPECTORS ADVISORS' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' IF PER_ASG_ATTRIBUTE14 = 'JNC CHIEF OFFICER' THEN ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_CO' l_debug = ess_log_write('JW Loop - Contract '|| PER_ASG_ATTRIBUTE14 || ' ' ||ALB_TABLE) BH = 0 BH1= '2024/04/01 00:00:00' (date) BH2= '2024/05/06 00:00:00' (date) BH3= '2024/05/27 00:00:00' (date) BH4= '2024/08/26 00:00:00' (date) BH5= '2024/12/25 00:00:00' (date) BH6= '2024/12/26 00:00:00' (date) BH7= '2025/01/01 00:00:00' (date) IF (BH1 >= l_start_date and BH1 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH2 >= l_start_date and BH2 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH3 >= l_start_date and BH3 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH4 >= l_start_date and BH4 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH5 >= l_start_date and BH5 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH6 >= l_start_date and BH6 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) IF (BH7 >= l_start_date and BH7 <= PER_ASG_EFFECTIVE_END_DATE ) THEN (BH = BH + 1) l_debug = ess_log_write('JW Loop - No of Bank Holiday in the Period '||to_char(BH)) l_debug = ess_log_write('50 - l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| ' l_end_date '||to_char(l_end_date, 'dd-mon-yyyy') ) l_debug = ess_log_write('50 - context_effective_date= '+ to_char(l_context_effective_date, 'dd-mon-yyyy')) t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_con_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('50 - l_length_of_service = '+ to_char(l_length_of_service)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) IF l_length_of_service < 0 THEN l_length_of_service = 0.00 l_debug = ess_log_write('50 - l_length_of_service = '+ to_char(l_length_of_service)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) IF PER_ASG_ATTRIBUTE21 = 'Extra 5 Year Allowance' THEN ( l_length_of_service = l_length_of_service + 5.1 l_debug = ess_log_write('55 - Addition Years Added = ' + PER_ASG_ATTRIBUTE21 + ' = LoS ' + to_char(l_length_of_service) ) ) LOS=TO_NUMBER(GET_TABLE_VALUE(ALB_TABLE,'LOS',to_char(l_length_of_service),'01/01/1951')) l_debug = ess_log_write('50 - FTE Annual Leave Balance Days '||to_char(LOS)) IF PER_ASG_ATTRIBUTE14 = 'JNC CHIEF EXECUTIVES' THEN LOS = 31 IF PER_ASG_ATTRIBUTE21 = 'Extra 1 Day' THEN LOS = LOS + 1 IF PER_ASG_ATTRIBUTE21 = 'Extra 2 Days' THEN LOS = LOS + 2 IF PER_ASG_ATTRIBUTE21 = '34 Days (TUPE HFN)' THEN LOS = 34 l_debug = ess_log_write('55 - Additional Days = ' + PER_ASG_ATTRIBUTE21 + ' FTE Annual Leave Balance Days ' + to_char(LOS) ) l_debug = ess_log_write('50 - Annual Accrual Days = '+ to_char(LOS)+ ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (LOS = LOS * 7.5) ELSE (LOS = LOS * 7.4) l_debug = ess_log_write('50 - Annual Accrual Hours '||to_char(LOS)) l_anniversary_top_up = 0 ann_no_of_days= 0 l_anniversary_date = '1951/01/01 00:00:00' (date) IF ( (ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_JNC' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_CO' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_REST' ) AND(l_length_of_service> 4 and l_length_of_service < 5)) THEN ( l_anniversary_date = ADD_YEARS(l_continous_date,5) l_debug = ess_log_write('70 - 5 Year Anniversay is in this Year '||to_char(l_anniversary_date,'dd-mon-yyyy')) ) IF ( (ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_NHS' OR ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_AN' ) AND(l_length_of_service> 9 and l_length_of_service < 10)) THEN ( l_anniversary_date = ADD_YEARS(l_continous_date,10) l_debug = ess_log_write('70 - 10 Year Anniversay is in this Year '||to_char(l_anniversary_date,'dd-mon-yyyy')) ) IF (l_anniversary_date >= l_start_date and l_anniversary_date < l_end_date) THEN ( l_debug = ess_log_write('70 - Anniversay is in this Period '||to_char(l_anniversary_date,'dd-mon-yyyy')) l_debug = ess_log_write('70 - Anniversay LOS = '||to_char(l_length_of_service) || ' '||PER_ASG_ATTRIBUTE14|| ' / '||ALB_TABLE|| ' @ '||to_char(l_start_date, 'dd-mon-yyyy')) l_debug = ess_log_write('70 - Anniversay l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy')|| ' l_end_date '||to_char(l_end_date, 'dd-mon-yyyy') ) ann_no_of_days=DAYS_BETWEEN(l_end_date, l_anniversary_date) l_debug = ess_log_write('70 - Anniversay No of Days after Anniversary '||to_char(ann_no_of_days)) IF ALB_TABLE = 'NCC_ANNUAL_LEAVE_BALANCE_CO' THEN( l_anniversary_top_up= ROUND(1 *ann_no_of_days/365, 4) l_debug = ess_log_write('70 - Anniversay_No of Extra Days 1 '||to_char(l_anniversary_top_up))) ELSE( l_anniversary_top_up= ROUND(5 *ann_no_of_days/365, 4) l_debug = ess_log_write('70 - Anniversay_No of Extra Days 5 '||to_char(l_anniversary_top_up))) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (l_anniversary_top_up= l_anniversary_top_up* 7.5) ELSE (l_anniversary_top_up= l_anniversary_top_up* 7.4) l_debug = ess_log_write('70 - Anniversay_No of Extra Hours '||to_char(l_anniversary_top_up)) l_debug = ess_log_write('70 - Anniversay top up '|| to_char(l_anniversary_top_up)) ) l_days=0 l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('50 -l_days ' || to_char(l_days) ||' l_start_date - '||to_char(l_start_date, 'dd-mon-yyyy') || ' l_end_date - '||to_char(l_end_date, 'dd-mon-yyyy') ) l_leap_year = '2024/02/29 00:00:00' (date) IF ( l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN (l_days = l_days -1 l_debug = ess_log_write('80 - Leap Year Adjustment ' || to_char(l_days)) ) l_debug = ess_log_write('JW 90 Prorate on the Period '||to_char(l_days)||'/365 *'||to_char(LOS)) FTE_Accrual= ROUND(LOS*l_days/365, 4) l_debug = ess_log_write('90 Prorate on the Period FTE_Accrual = '|| to_char(FTE_Accrual)) IF PER_ASG_ATTRIBUTE14 = 'NHSAgenda for Change TUPE 37.5' THEN (BH_hours= BH * 7.5) ELSE (BH_hours= BH * 7.4) l_debug = ess_log_write('90 Plus Bank Holiday Days = '||to_char(BH) ||' hours = ' || to_char(BH_hours)) FTE_Accrual= FTE_Accrual + BH_hours l_debug = ess_log_write('90 Plus Bank Holiday FTE_Accrual = '|| to_char(FTE_Accrual)) FTE_Accrual= FTE_Accrual + l_anniversary_top_up l_debug = ess_log_write('90 Anniversay top up '|| to_char(l_anniversary_top_up)) l_debug = ess_log_write('90 Plus Anniversary Top Up FTE_Accrual = '|| to_char(FTE_Accrual)) l_debug = ess_log_write('95 Prorate on FTE '||to_char(l_fte)) FTE_Accrual = FTE_Accrual * l_fte l_debug = ess_log_write('95 Prorate on FTE FTE_Accrual = '|| to_char(FTE_Accrual)) l_debug = ess_log_write('99 Start - End '|| TO_CHAR(l_start_date, 'dd-mon-yyyy')|| ' - ' || TO_CHAR(l_end_date, 'dd-mon-yyyy') || ' Days ' || to_char(l_days)) l_debug = ess_log_write('99 prev accrual ' + to_char(accrual)|| ' + ' ) l_debug = ess_log_write('99 this Accrual ' + to_char(FTE_Accrual)|| ' = ' ) accrual= (accrual+FTE_Accrual) l_debug = ess_log_write('99 Total Accrual ' + to_char(accrual)|| ' ***** ' ) FTE_Accrual=0 IF ( TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR PER_ASG_EFFECTIVE_END_DATE > YEAR_END_DATE )THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = round(accrual,2) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "Rebisco Sick Leave Accrual Matrix FF",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_CARRY_OVER_AMT IS 0 DEFAULT FOR ACP_CARRY_OVER_AMOUNT IS 0 DEFAULT FOR IV_CARRYOVER IS 0 DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_LOCATION_CODE IS 'XX' DEFAULT FOR PER_ASG_LOCATION_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_ATTRIBUTE7 IS 'XX' INPUTS ARE IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE, IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date) accrual = 0 total_months = 0 ln_accrual = 0 prorated_unrounded_accrual = 0 prorated_rounded_accrual = 0 hire_date = ACP_HIRE_DATE hire_date_year = to_char(hire_date, 'YYYY') hire_date_month = TO_NUM(to_char(hire_date, 'mm')) hire_date_day = TO_NUM(to_char(hire_date, 'dd')) termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE termination_date_year = to_char(termination_date, 'YYYY') termination_date_month = TO_NUM(to_char(termination_date, 'mm')) termination_date_day = TO_NUM(to_char(termination_date, 'dd')) L_Effective_Date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) current_date_year = to_char(L_Effective_Date, 'YYYY') l_accrual_start_date = GREATEST(IV_PLANENROLLMENTSTARTDATE,IV_ACCRUALPERIODSTARTDATE) l_accrual_end_date = LEAST(IV_PLANENROLLMENTENDDATE, IV_ACCRUALPERIODENDDATE) l_cba_start_year = 2023 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ASG_HR_ASG_ID ,EFFECTIVE_DATE = L_Effective_Date) ( worker_LE = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_location_code = PER_ASG_LOCATION_CODE l_location_name = PER_ASG_LOCATION_NAME l_tranche = PER_WORKER_ASSIGNMENT_ATTRIBUTE7 If (worker_LE = 'Republic Biscuit Corporation Corporate')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 20 ) ) ELSE IF (worker_LE = 'Action Republic Corporation')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF (worker_LE = 'Omicron Trading Corporation')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF (worker_LE = 'RBC Retail Stores Corporation')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF (worker_LE = 'Suncrest Foods Inc.')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 19 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 19 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 19 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 20 ) ) ELSE IF (worker_LE = 'Agripacific Corporation')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 15 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 15 ) ) ELSE IF ((worker_LE = 'SPI Corporation') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 13 ) ) ELSE IF ((worker_LE = 'SPI Corporation') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 8 ) ) ELSE IF ((worker_LE = 'SFI Multimix Corporation') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'SFI Multimix Corporation') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF ((worker_LE = 'Omnipack Industrial Corporation') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 15 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 15 ) ) ELSE IF ((worker_LE = 'Omnipack Industrial Corporation') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 14 ) ) ELSE IF ((worker_LE = 'Republic Biscuit Corporation- BU(Business Unit)') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 20 ) ) ELSE IF ((worker_LE = 'Republic Biscuit Corporation- BU(Business Unit)') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 11 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 11 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 11 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 11 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 11 ) ) ELSE IF ((worker_LE = 'REPUBLIC BISCUIT CORPORATION - Bukidnon') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 13 ) ) ELSE IF ((worker_LE = 'REPUBLIC BISCUIT CORPORATION - Bukidnon') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'Multirich Food Corporation') AND (l_tranche = '1') AND (l_location_name = 'Multirich Foods Corporation Bulacan'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 16 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 16 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 16 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 17 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 17 ) ) ELSE IF ((worker_LE = 'Multirich Food Corporation') AND (l_tranche = '2') AND (l_location_name = 'Multirich Foods Corporation Bulacan'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 10 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 10 ) ) ELSE IF ((worker_LE = 'Multirich Food Corporation') AND (l_tranche = '1') AND (l_location_name = 'Multirich Foods Corporation Bukidnon'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 15 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 15 ) ) ELSE IF ((worker_LE = 'Multirich Food Corporation') AND (l_tranche = '2') AND (l_location_name = 'Multirich Foods Corporation Bukidnon'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 10 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 10 ) ) ELSE IF ((worker_LE = 'RBC Best Baker Food Incorporated') AND (l_tranche = '1') AND (l_location_name = 'RBC Best Baker Foods Incorporated Bulacan'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 10 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 10 ) ) ELSE IF ((worker_LE = 'RBC Best Baker Food Incorporated') AND (l_tranche = '2') AND (l_location_name = 'RBC Best Baker Foods Incorporated Bulacan'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF ((worker_LE = 'RBC Best Baker Food Incorporated') AND (l_tranche = '1') AND (l_location_name = 'RBC Best Baker Foods Incorporated Cavite'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'RBC Best Baker Food Incorporated') AND (l_tranche = '2') AND (l_location_name = 'RBC Best Baker Foods Incorporated Cavite'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 8 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '1') AND (l_location_name = 'SFI Fresh Bakers Corporation Cavite'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '2') AND (l_location_name = 'SFI Fresh Bakers Corporation Cavite'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 8 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '1') AND (l_location_name = 'SFI Fresh Bakers Corporation Valenzuela'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '2') AND (l_location_name = 'SFI Fresh Bakers Corporation Valenzuela'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 8 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '1') AND (l_location_name = 'SFI Fresh Bakers Corporation Bukidnon'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 14 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '2') AND (l_location_name = 'SFI Fresh Bakers Corporation Bukidnon'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 10 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 10 ) ) ) IF((hire_date_year = current_date_year) AND (termination_date_year <> current_date_year))THEN ( IF((hire_date_day >= 1) AND (hire_date_day <= 15))THEN ( total_months = (12 - (hire_date_month)) + 1 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ELSE ( total_months = (12 - (hire_date_month)) + 0.5 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ) ELSE IF((hire_date_year <> current_date_year) AND (termination_date_year = current_date_year))THEN ( IF((termination_date_day >= 1) AND (termination_date_day < 15))THEN ( total_months = termination_date_month - 0.5 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ELSE ( total_months = termination_date_month prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ) ELSE IF((hire_date_year = current_date_year) AND (termination_date_year = current_date_year))THEN ( IF(((hire_date_day >= 1) AND (hire_date_day <= 15)) AND ((termination_date_day >= 15) AND (termination_date_day <= 31)))THEN ( total_months = (termination_date_month - hire_date_month) + 1 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ELSE IF((((hire_date_day >= 1) AND (hire_date_day <= 15)) AND ((termination_date_day >= 1) AND (termination_date_day < 15))) OR (((hire_date_day > 15) AND (hire_date_day <= 31)) AND ((termination_date_day >= 15) AND (termination_date_day <= 31))))THEN ( total_months = (termination_date_month - hire_date_month) + 0.5 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ELSE ( total_months = (termination_date_month - hire_date_month) prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ) ELSE ( prorated_unrounded_accrual = ln_accrual ) accrual = ROUND(prorated_unrounded_accrual,2) l_log =ESS_LOG_WRITE('1. Worker LE-' + worker_LE) l_log =ESS_LOG_WRITE('2. accrual-' + to_char(accrual)) l_log =ESS_LOG_WRITE('3. Worker Location Code-' + l_location_code) l_log =ESS_LOG_WRITE('4. Worker Location Name-' + l_location_name) l_log =ESS_LOG_WRITE('5. Worker Tranche-' + l_tranche) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "PH Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Rebisco Vacation Leave Accrual Matrix FF",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_CARRY_OVER_AMT IS 0 DEFAULT FOR ACP_CARRY_OVER_AMOUNT IS 0 DEFAULT FOR IV_CARRYOVER IS 0 DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_LOCATION_CODE IS 'XX' DEFAULT FOR PER_ASG_LOCATION_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_ATTRIBUTE7 IS 'XX' INPUTS ARE IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE, IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date) accrual = 0 total_months = 0 ln_accrual = 0 prorated_unrounded_accrual = 0 prorated_rounded_accrual = 0 hire_date = ACP_HIRE_DATE hire_date_year = to_char(hire_date, 'YYYY') hire_date_month = TO_NUM(to_char(hire_date, 'mm')) hire_date_day = TO_NUM(to_char(hire_date, 'dd')) termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE termination_date_year = to_char(termination_date, 'YYYY') termination_date_month = TO_NUM(to_char(termination_date, 'mm')) termination_date_day = TO_NUM(to_char(termination_date, 'dd')) L_Effective_Date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) current_date_year = to_char(L_Effective_Date, 'YYYY') l_accrual_start_date = GREATEST(IV_PLANENROLLMENTSTARTDATE,IV_ACCRUALPERIODSTARTDATE) l_accrual_end_date = LEAST(IV_PLANENROLLMENTENDDATE, IV_ACCRUALPERIODENDDATE) l_cba_start_year = 2023 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ASG_HR_ASG_ID ,EFFECTIVE_DATE = L_Effective_Date) ( worker_LE = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_location_code = PER_ASG_LOCATION_CODE l_location_name = PER_ASG_LOCATION_NAME l_tranche = PER_WORKER_ASSIGNMENT_ATTRIBUTE7 If (worker_LE = 'Republic Biscuit Corporation Corporate')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 20 ) ) ELSE IF (worker_LE = 'Action Republic Corporation')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF (worker_LE = 'Omicron Trading Corporation')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF (worker_LE = 'RBC Retail Stores Corporation')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF (worker_LE = 'Suncrest Foods Inc.')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 19 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 19 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 19 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 20 ) ) ELSE IF (worker_LE = 'Agripacific Corporation')THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 15 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 15 ) ) ELSE IF ((worker_LE = 'SPI Corporation') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 13 ) ) ELSE IF ((worker_LE = 'SPI Corporation') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 8 ) ) ELSE IF ((worker_LE = 'SFI Multimix Corporation') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'SFI Multimix Corporation') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF ((worker_LE = 'Omnipack Industrial Corporation') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 15 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 15 ) ) ELSE IF ((worker_LE = 'Omnipack Industrial Corporation') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 14 ) ) ELSE IF ((worker_LE = 'Republic Biscuit Corporation- BU(Business Unit)') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 20 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 20 ) ) ELSE IF ((worker_LE = 'Republic Biscuit Corporation- BU(Business Unit)') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 11 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 11 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 11 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 11 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 11 ) ) ELSE IF ((worker_LE = 'REPUBLIC BISCUIT CORPORATION - Bukidnon') AND (l_tranche = '1'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 12 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 13 ) ) ELSE IF ((worker_LE = 'REPUBLIC BISCUIT CORPORATION - Bukidnon') AND (l_tranche = '2'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'Multirich Food Corporation') AND (l_tranche = '1') AND (l_location_name = 'Multirich Foods Corporation Bulacan'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 16 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 16 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 16 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 17 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 17 ) ) ELSE IF ((worker_LE = 'Multirich Food Corporation') AND (l_tranche = '2') AND (l_location_name = 'Multirich Foods Corporation Bulacan'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 10 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 10 ) ) ELSE IF ((worker_LE = 'Multirich Food Corporation') AND (l_tranche = '1') AND (l_location_name = 'Multirich Foods Corporation Bukidnon'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 15 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 15 ) ) ELSE IF ((worker_LE = 'Multirich Food Corporation') AND (l_tranche = '2') AND (l_location_name = 'Multirich Foods Corporation Bukidnon'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 10 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 10 ) ) ELSE IF ((worker_LE = 'RBC Best Baker Food Incorporated') AND (l_tranche = '1') AND (l_location_name = 'RBC Best Baker Foods Incorporated Bulacan'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 10 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 10 ) ) ELSE IF ((worker_LE = 'RBC Best Baker Food Incorporated') AND (l_tranche = '2') AND (l_location_name = 'RBC Best Baker Foods Incorporated Bulacan'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 6 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 7 ) ) ELSE IF ((worker_LE = 'RBC Best Baker Food Incorporated') AND (l_tranche = '1') AND (l_location_name = 'RBC Best Baker Foods Incorporated Cavite'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'RBC Best Baker Food Incorporated') AND (l_tranche = '2') AND (l_location_name = 'RBC Best Baker Foods Incorporated Cavite'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 8 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '1') AND (l_location_name = 'SFI Fresh Bakers Corporation Cavite'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '2') AND (l_location_name = 'SFI Fresh Bakers Corporation Cavite'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 8 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '1') AND (l_location_name = 'SFI Fresh Bakers Corporation Valenzuela'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 9 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '2') AND (l_location_name = 'SFI Fresh Bakers Corporation Valenzuela'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 7 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 8 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 8 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '1') AND (l_location_name = 'SFI Fresh Bakers Corporation Bukidnon'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 13 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 14 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 14 ) ) ELSE IF ((worker_LE = 'SFI Fresh Bakers Corporation') AND (l_tranche = '2') AND (l_location_name = 'SFI Fresh Bakers Corporation Bukidnon'))THEN ( If(current_date_year = to_char(l_cba_start_year))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+1))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+2))THEN ( ln_accrual = 9 ) ELSE If(current_date_year = to_char(l_cba_start_year+3))THEN ( ln_accrual = 10 ) ELSE If(current_date_year = to_char(l_cba_start_year+4))THEN ( ln_accrual = 10 ) ) ) IF((hire_date_year = current_date_year) AND (termination_date_year <> current_date_year))THEN ( IF((hire_date_day >= 1) AND (hire_date_day <= 15))THEN ( total_months = (12 - (hire_date_month)) + 1 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ELSE ( total_months = (12 - (hire_date_month)) + 0.5 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ) ELSE IF((hire_date_year <> current_date_year) AND (termination_date_year = current_date_year))THEN ( IF((termination_date_day >= 1) AND (termination_date_day < 15))THEN ( total_months = termination_date_month - 0.5 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ELSE ( total_months = termination_date_month prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ) ELSE IF((hire_date_year = current_date_year) AND (termination_date_year = current_date_year))THEN ( IF(((hire_date_day >= 1) AND (hire_date_day <= 15)) AND ((termination_date_day >= 15) AND (termination_date_day <= 31)))THEN ( total_months = (termination_date_month - hire_date_month) + 1 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ELSE IF((((hire_date_day >= 1) AND (hire_date_day <= 15)) AND ((termination_date_day >= 1) AND (termination_date_day < 15))) OR (((hire_date_day > 15) AND (hire_date_day <= 31)) AND ((termination_date_day >= 15) AND (termination_date_day <= 31))))THEN ( total_months = (termination_date_month - hire_date_month) + 0.5 prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ELSE ( total_months = (termination_date_month - hire_date_month) prorated_unrounded_accrual = ((ln_accrual)/12)*total_months ) ) ELSE ( prorated_unrounded_accrual = ln_accrual ) accrual = ROUND(prorated_unrounded_accrual,2) l_log =ESS_LOG_WRITE('1. Worker LE-' + worker_LE) l_log =ESS_LOG_WRITE('2. accrual-' + to_char(accrual)) l_log =ESS_LOG_WRITE('3. Worker Location Code-' + l_location_code) l_log =ESS_LOG_WRITE('4. Worker Location Name-' + l_location_name) l_log =ESS_LOG_WRITE('5. Worker Tranche-' + l_tranche) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "PH Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Rebisco New Vacation Leave FF",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS 'TEXT' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_FULL_PART_TIME IS 'X' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ACCRUAL_BAL_ACCRUAL_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ACCRUAL_BAL_ACCRUAL_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'xx' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'xx' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR BEN_ABS_ABSENCE_TYPE IS 'X' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_LOCATION_CODE IS 'XX' DEFAULT FOR PER_ASG_LOCATION_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_ATTRIBUTE7 IS 'XX' INPUTS ARE IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE, IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date) accrual = 0 ln_accrual = 0 prorated_unrounded_accrual = 0 hire_date = ACP_HIRE_DATE termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_Effective_Date = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) current_year = TO_NUMBER(TO_CHAR(L_Effective_Date, 'YYYY')) current_month = TO_NUMBER(TO_CHAR(L_Effective_Date, 'MM')) days_in_month = TO_NUMBER(TO_CHAR(LAST_DAY(L_Effective_Date), 'DD')) hire_year = TO_NUMBER(TO_CHAR(hire_date, 'YYYY')) hire_month = TO_NUMBER(TO_CHAR(hire_date, 'MM')) hire_day = TO_NUMBER(TO_CHAR(hire_date, 'DD')) termination_year = TO_NUMBER(TO_CHAR(termination_date, 'YYYY')) termination_month = TO_NUMBER(TO_CHAR(termination_date, 'MM')) termination_day = TO_NUMBER(TO_CHAR(termination_date, 'DD')) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ASG_HR_ASG_ID, EFFECTIVE_DATE = L_Effective_Date) ( worker_LE = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_location_code = PER_ASG_LOCATION_CODE l_location_name = PER_ASG_LOCATION_NAME l_tranche = PER_WORKER_ASSIGNMENT_ATTRIBUTE7 l_cba_start_year = 2025 IF worker_LE = 'Republic Biscuit Corporation Corporate' OR worker_LE = 'Action Republic Corporation' THEN ( IF current_year = l_cba_start_year AND current_month >= 1 AND current_month <= 11 THEN ln_accrual = 1.67 ELSE IF current_year = l_cba_start_year AND current_month = 12 THEN ln_accrual = 1.63 ELSE IF current_year = l_cba_start_year + 1 AND current_month >= 1 AND current_month <= 11 THEN ln_accrual = 1.67 ELSE IF current_year = l_cba_start_year + 1 AND current_month = 12 THEN ln_accrual = 1.63 ELSE IF current_year = l_cba_start_year + 2 AND current_month >= 1 AND current_month <= 11 THEN ln_accrual = 1.67 ELSE IF current_year = l_cba_start_year + 2 AND current_month = 12 THEN ln_accrual = 1.63 ELSE IF current_year = l_cba_start_year + 3 AND current_month >= 1 AND current_month <= 11 THEN ln_accrual = 1.67 ELSE IF current_year = l_cba_start_year + 3 AND current_month = 12 THEN ln_accrual = 1.63 ELSE IF current_year = l_cba_start_year + 4 AND current_month >= 1 AND current_month <= 11 THEN ln_accrual = 1.67 ELSE IF current_year = l_cba_start_year + 4 AND current_month = 12 THEN ln_accrual = 1.63 ) ) l_last_month_start = TRUNC(ADD_MONTHS(L_Effective_Date, -1), 'MM') l_last_month_end = LAST_DAY(l_last_month_start) leave_last_month = 0 CHANGE_CONTEXTS(START_DATE = l_last_month_start, END_DATE = l_last_month_end) ( i = 1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Leave Without Pay' OR l_abs_typ_name = 'Reserve Leave - Unpaid' OR l_abs_typ_name = 'Unpaid Personal/Carers Leave' OR l_abs_typ_name = 'Parental Leave - Unpaid' ) AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( leave_last_month = leave_last_month + ANC_ABS_ENTRS_DURATION ) ) ) i = i + 1 ) ) l_this_month_start = TRUNC(L_Effective_Date, 'MM') l_this_month_end = LAST_DAY(L_Effective_Date) leave_this_month = 0 CHANGE_CONTEXTS(START_DATE = l_this_month_start, END_DATE = l_this_month_end) ( i = 1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Leave Without Pay' OR l_abs_typ_name = 'Reserve Leave - Unpaid' OR l_abs_typ_name = 'Unpaid Personal/Carers Leave' OR l_abs_typ_name = 'Parental Leave - Unpaid' ) AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( leave_this_month = leave_this_month + ANC_ABS_ENTRS_DURATION ) ) ) i = i + 1 ) ) total_leave_taken = leave_last_month + leave_this_month IF total_leave_taken > 30 THEN m_accrual = 0 ELSE m_accrual = ln_accrual IF (hire_year = current_year AND hire_month = current_month AND hire_day >= 1 AND hire_day <= 15) THEN ( prorated_unrounded_accrual = m_accrual ) ELSE IF (termination_year = current_year AND termination_month = current_month AND termination_day >= 15 AND termination_day <= 31) THEN ( prorated_unrounded_accrual = m_accrual ) ELSE ( prorated_unrounded_accrual = 0 ) accrual = ROUND(prorated_unrounded_accrual, 2) l_log = ESS_LOG_WRITE('1. Hire Date - ' + TO_CHAR(hire_date, 'YYYY-MM-DD')) l_log = ESS_LOG_WRITE('2. Termination Date - ' + TO_CHAR(termination_date, 'YYYY-MM-DD')) l_log = ESS_LOG_WRITE('3. Monthly Accrual - ' + TO_CHAR(m_accrual)) l_log = ESS_LOG_WRITE('4. Prorated Accrual - ' + TO_CHAR(prorated_unrounded_accrual)) l_log = ESS_LOG_WRITE('5. Final Accrual - ' + TO_CHAR(accrual)) l_log = ESS_LOG_WRITE('6. Worker LE - ' + worker_LE) l_log = ESS_LOG_WRITE('7. Worker Location Code - ' + l_location_code) l_log = ESS_LOG_WRITE('8. Worker Location Name - ' + l_location_name) l_log = ESS_LOG_WRITE('9. Worker Tranche - ' + l_tranche) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "SC Annual Leave",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PERSON_ID,IV_TERM_ID l_debug = ess_log_write('********************************Start of the accrual plan **********************************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) Continuous_service_date = '1951/01/01 00:00:00' (date) assignment_start_date = '1951/01/01 00:00:00' (date) Full_accrual_again = 0 Accrual = 0 l_length_of_service = 0 FTE_Accrual = 0 FTE_Accrual_final = 0 l_fte = 0 accrual = 0 l_accrual = 0 l_days_in_year = 0 l_length_of_service = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_record_end_date = '4712/12/31 00:00:00' (date) L_UDT_ROW = '0' l_balance = 0 ln_count = 1 l_scheduled_units = 0 j=0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_debug = ess_log_write('l_person_id = '||TO_CHAR(l_person_id)) l_assignment_id = TO_CHAR(PER_ASG_ASSIGNMENT_ID) l_debug = ess_log_write('l_assignment_id = '||(l_assignment_id)) ld_start_date = TO_DATE('01/01/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ld_end_date = TO_DATE('31/12/'||to_char((to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY')))),'DD/MM/YYYY') l_debug = ess_log_write('ld_start_date= '+ to_char(ld_start_date)) l_debug = ess_log_write('ld_end_date= '+ to_char(ld_end_date)) l_debug = ess_log_write('ACP_HIRE_DATE= '+ to_char(ACP_HIRE_DATE)) if (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( l_start_dt= LEAST(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE, ACP_HIRE_DATE) ) ELSE ( l_start_dt= ACP_HIRE_DATE ) l_debug = ess_log_write('l_start_dt= '+ to_char(l_start_dt)) bh_start_date = greatest(l_start_dt, ld_start_date, IV_PLANENROLLMENTSTARTDATE) bh_end_date = least(PER_ASG_EFFECTIVE_END_DATE, ACP_TERMINATION_DATE, ld_end_date, IV_PLANENROLLMENTENDDATE) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = ' || to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('BH_START_DATE = ' || to_char(bh_start_date)) l_debug = ess_log_write('BH_END_DATE = ' || to_char(bh_end_date)) l_debug = ess_log_write('LD_START_OF_YEAR = ' || to_char(ld_start_date)) l_debug = ess_log_write('LD_END_OF_YEAR = ' || to_char(ld_end_date)) l_service_date = least(ACP_HIRE_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_days_in_year = DAYS_BETWEEN(ld_end_date, ld_start_date) + 1 l_no_of_days = DAYS_BETWEEN(least(ld_start_date, ACP_TERMINATION_DATE, GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))), l_service_date) l_length_of_service = ROUND((l_no_of_days/l_days_in_year),2) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ' || to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) l_debug = ess_log_write('Days in a year = ' || to_char(l_days_in_year)) l_debug = ess_log_write('No of days = ' || to_char(l_no_of_days)) l_debug = ess_log_write('Lenght of Service = ' || to_char(l_length_of_service)) l_debug = ess_log_write('PER_ASG_USER_PERSON_TYPE = ' || (PER_ASG_USER_PERSON_TYPE)) WHILE(1=1) LOOP( CHANGE_CONTEXTS(EFFECTIVE_DATE = bh_start_date) ( l_debug = ess_log_write('****In Loop****') l_debug = ess_log_write('ASG_HR_ASG_ID = '||TO_CHAR(ASG_HR_ASG_ID)) bh_end_date = least(PER_ASG_EFFECTIVE_END_DATE, ACP_TERMINATION_DATE, ld_end_date, IV_PLANENROLLMENTENDDATE) l_debug = ess_log_write('bh_end_date = '||TO_CHAR(bh_end_date)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('BH_START_DATE = ' || to_char(bh_start_date)) Standard_Working_Hours = PER_ASG_STANDARD_WORKING_HOURS l_debug = ess_log_write('Standard_Working_Hours = '||TO_CHAR(Standard_Working_Hours)) Working_hours = PER_ASG_NORMAL_HOURS l_debug = ess_log_write('Working_hours = '||TO_CHAR(Working_hours)) l_contract_fte = 0 if((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Associated Professionals') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) Then ( l_contract_fte=(Working_hours/Standard_Working_Hours) l_debug = ess_log_write('l_contract_fte = '+ to_char(l_contract_fte)) ) ELSE ( l_contract_fte=0 l_debug = ess_log_write('In Else') ) IF (PER_ASG_USER_PERSON_TYPE = 'Associated Professionals') AND (l_length_of_service <= 5) THEN ( L_UDT_ROW = 'los<5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','ASSOCIATED_PROFESSIONAL',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF((PER_ASG_USER_PERSON_TYPE = 'Associated Professionals') AND (l_length_of_service > 5)) THEN ( L_UDT_ROW = 'los>5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','ASSOCIATED_PROFESSIONAL',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF (((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) AND (l_length_of_service <= 5)) THEN ( L_UDT_ROW = 'los<5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','EMP_OFFICER_MA',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF (((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) AND (l_length_of_service>5)) THEN ( L_UDT_ROW = 'los>5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','EMP_OFFICER_MA',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) l_debug = ess_log_write('PER_ASG_USER_PERSON_TYPE = ' || (PER_ASG_USER_PERSON_TYPE)) l_debug = ess_log_write('L_UDT_ROW = ' || (L_UDT_ROW)) ld_period_start_date = bh_start_date ld_period_end_date = bh_end_date WHILE(ld_period_start_date<= ld_period_end_date) LOOP( L_flag = 'N' l_holiday_entitlement = 0 l_date_day = get_date_day_of_week(ld_period_start_date) l_weekly_hours = PER_ASG_NORMAL_HOURS/5 l_date = add_days(ld_period_start_date,1) l_scheduled_units=GET_PAY_AVAILABILITY('ASSIGN',ld_period_start_date,l_date,'Y','Y','Y','N','H') l_bh_date = To_char(ld_period_start_date,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SC_GET_BANK_HOLIDAYS','|=P_DATE='''||l_bh_date||'''') IF(l_flag = 'Y')THEN ( ASG_Hours = l_scheduled_units adjustmentvalues[j]=(ASG_Hours) * -1 adjustmentdates[j]=bh_start_date adjustmenttypes[j] = 'BHD' j = j + 1 ) IF (PER_ASG_USER_PERSON_TYPE <> 'Associated Professionals')THEN ( IF(l_flag = 'Y')THEN ( ASG_Hours = l_weekly_hours adjustmentvalues[j]=ASG_Hours adjustmentdates[j]=bh_start_date adjustmenttypes[j] = 'BHE' j = j + 1 ) ) ld_period_start_date = ADD_DAYS(ld_period_start_date,1) ) l_end_date= LEAST(PER_ASG_EFFECTIVE_END_DATE,BH_END_DATE) assignment_start_date = to_date(GET_VALUE_SET('SC_ABS_LEAST_DATE','|=P_ASSIGNMENT_ID=' || (l_assignment_id))) l_debug = ess_log_write('assignment_start_date = '||TO_CHAR(assignment_start_date,'DD/MM/YYYY')) IF (assignment_start_date > BH_START_DATE) THEN (l_start_date = assignment_start_date) ELSE (l_start_date = BH_START_DATE) l_debug = ess_log_write('l_start_date = '||TO_CHAR(l_start_date,'DD/MM/YYYY')) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days = '||TO_CHAR(l_days)) l_year_day = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 l_days_final = l_days l_debug = ess_log_write('l_days_final = '||TO_CHAR(l_days_final)) FTE_Accrual = l_balance*(l_days_final/l_year_day)*l_contract_fte l_debug = ess_log_write('FTE_Accrual = '||TO_CHAR(FTE_Accrual)) FTE_accrual_final = ROUND(FTE_Accrual,2) l_debug = ess_log_write('FTE_Accrual_final '||TO_CHAR(FTE_Accrual_final)) l_accrual = l_accrual+FTE_accrual_final bh_start_date = ADD_DAYS(bh_end_date,1) ln_count = ln_count + 1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (ld_end_date = bh_start_date) OR (PER_ASG_EFFECTIVE_END_DATE = IV_PLANENROLLMENTENDDATE) OR (ACP_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (ln_count>=20)) THEN ( l_debug = ess_log_write('Loop Ended') EXIT ) ) ) accrual = l_accrual l_debug = ess_log_write('accrual = '||TO_CHAR(accrual)) return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Annual Leave",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) Continuous_service_date = '1951/01/01 00:00:00' (date) assignment_start_date = '1951/01/01 00:00:00' (date) Full_accrual_again = 0 LOS = 0 Accrual = 0 l_length_of_service = 0 FTE_Accrual = 0 FTE_Accrual_final = 0 l_fte = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_debug = ess_log_write('l_person_id = '||TO_CHAR(l_person_id)) l_assignment_id = TO_CHAR(PER_ASG_ASSIGNMENT_ID) l_debug = ess_log_write('l_assignment_id = '||(l_assignment_id)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE = '||TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'DD/MM/YYYY')) IF (TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN (BH_START_DATE = TO_DATE('01/01/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = TO_DATE('31/12/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY')) ELSE (l_debug = ess_log_write('****Termination found****') BH_START_DATE = TO_DATE('01/01/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE=TO_DATE('31/12/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = ADD_YEARS(BH_END_DATE,1)) l_debug = ess_log_write('BH_START_DATE = '||TO_CHAR(BH_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('BH_END_DATE = '||TO_CHAR(BH_END_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_REL_ORIGINAL_DATE_OF_HIRE = '||TO_CHAR(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD/MM/YYYY')) l_debug = ess_log_write('ACP_HIRE_DATE = '||TO_CHAR(ACP_HIRE_DATE,'DD/MM/YYYY')) IF (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE) THEN (Hire_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) ELSE (Hire_date = ACP_HIRE_DATE) l_debug = ess_log_write('Hire_date = '||TO_CHAR(Hire_date,'DD/MM/YYYY')) Continuous_service_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_debug = ess_log_write('Continuous_service_date = '||TO_CHAR(continuous_service_date,'DD/MM/YYYY')) IF (Continuous_service_date < Hire_date) THEN (l_start_dt = continuous_service_date) ELSE (l_start_dt = Hire_date) l_debug = ess_log_write('l_start_dt = '||TO_CHAR(l_start_dt,'DD/MM/YYYY')) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = '||TO_CHAR(t_no_of_days)) l_length_of_service = ROUND((t_no_of_days/365),2) l_debug = ess_log_write('l_length_of_service = '||TO_CHAR(l_length_of_service)) LOS = TO_NUMBER(GET_TABLE_VALUE('SC_ANNUAL_LEAVE_BALANCE','LOS',TO_CHAR(l_length_of_service),'01/01/1951')) l_debug = ess_log_write('LOS = '||TO_CHAR(LOS)) assignment_start_date = to_date(GET_VALUE_SET('SC_ABS_LEAST_DATE','|=P_ASSIGNMENT_ID=' || (l_assignment_id))) l_debug = ess_log_write('assignment_start_date = '||TO_CHAR(assignment_start_date,'DD/MM/YYYY')) IF (assignment_start_date > BH_START_DATE) THEN (l_start_date = assignment_start_date) ELSE (l_start_date = BH_START_DATE) l_debug = ess_log_write('l_start_date = '||TO_CHAR(l_start_date,'DD/MM/YYYY')) WHILE (1=1) LOOP (CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) (l_debug = ess_log_write('****In Loop****') Standard_hours = PER_ASG_STANDARD_WORKING_HOURS l_debug = ess_log_write('Standard_hours = '||TO_CHAR(Standard_hours)) Working_hours = PER_ASG_NORMAL_HOURS l_debug = ess_log_write('Working_hours = '||TO_CHAR(Working_hours)) l_fte = Working_hours/Standard_hours l_debug = ess_log_write('l_fte (Working_hours/Standard_hours) = '||TO_CHAR(l_fte)) annual_weeks_worked = PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('annual_weeks_worked = '||TO_CHAR(annual_weeks_worked)) l_sequence = 1 standard_working_weeks = TO_NUMBER(GET_TABLE_VALUE('SC_STANDARD_WORKING_WEEKS','1',TO_CHAR(l_sequence),'52.2')) l_debug = ess_log_write('standard_working_weeks = '||TO_CHAR(standard_working_weeks)) l_fte_new = l_fte*(Annual_weeks_worked/standard_working_weeks) l_debug = ess_log_write('l_fte_new = '||TO_CHAR(l_fte_new)) l_fte_final = round(l_fte_new,2) l_debug = ess_log_write('l_fte_final = '||TO_CHAR(l_fte_final)) l_end_date= LEAST(PER_ASG_PROJECTED_ASSIGNMENT_END_DATE,LEAST(PER_ASG_EFFECTIVE_END_DATE,BH_END_DATE)) l_debug = ess_log_write('l_end_date = '||TO_CHAR(l_end_date,'DD/MM/YYYY')) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days = '||TO_CHAR(l_days)) IF l_days > 365 THEN l_days_final = 365 ELSE l_days_final = l_days l_debug = ess_log_write('l_days_final = '||TO_CHAR(l_days_final)) FTE_Accrual = LOS*(l_days_final/365)*l_fte_final l_debug = ess_log_write('FTE_Accrual = '||TO_CHAR(FTE_Accrual)) FTE_accrual_final = ROUND(FTE_Accrual,2) l_debug = ess_log_write('FTE_Accrual_final '||TO_CHAR(FTE_Accrual_final)) Accrual = accrual+FTE_accrual_final l_debug = ess_log_write('accrual (accrual+FTE_accrual_final) = '||TO_CHAR(accrual)) FTE_Accrual = 0 FTE_accrual_final = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE >= BH_END_DATE) OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) THEN (l_debug = ess_log_write('Loop Ended') EXIT) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1))) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Annual Leave",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PERSON_ID,IV_TERM_ID l_debug = ess_log_write('********************************Start of the accrual plan **********************************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) Continuous_service_date = '1951/01/01 00:00:00' (date) assignment_start_date = '1951/01/01 00:00:00' (date) Full_accrual_again = 0 Accrual = 0 l_length_of_service = 0 FTE_Accrual = 0 FTE_Accrual_final = 0 l_fte = 0 accrual = 0 l_accrual = 0 l_days_in_year = 0 l_length_of_service = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_record_end_date = '4712/12/31 00:00:00' (date) L_UDT_ROW = '0' l_balance = 0 ln_count = 1 l_scheduled_units = 0 j=0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_debug = ess_log_write('l_person_id = '||TO_CHAR(l_person_id)) l_assignment_id = TO_CHAR(PER_ASG_ASSIGNMENT_ID) l_debug = ess_log_write('l_assignment_id = '||(l_assignment_id)) ld_start_date = TO_DATE('01/01/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ld_end_date = TO_DATE('31/12/'||to_char((to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY')))),'DD/MM/YYYY') l_debug = ess_log_write('ld_start_date= '+ to_char(ld_start_date)) l_debug = ess_log_write('ld_end_date= '+ to_char(ld_end_date)) l_debug = ess_log_write('ACP_HIRE_DATE= '+ to_char(ACP_HIRE_DATE)) if (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( l_start_dt= LEAST(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE, ACP_HIRE_DATE) ) ELSE ( l_start_dt= ACP_HIRE_DATE ) l_debug = ess_log_write('l_start_dt= '+ to_char(l_start_dt)) bh_start_date = greatest(l_start_dt, ld_start_date, IV_PLANENROLLMENTSTARTDATE) bh_end_date = least(PER_ASG_EFFECTIVE_END_DATE, ACP_TERMINATION_DATE, ld_end_date, IV_PLANENROLLMENTENDDATE) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = ' || to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('BH_START_DATE = ' || to_char(bh_start_date)) l_debug = ess_log_write('BH_END_DATE = ' || to_char(bh_end_date)) l_debug = ess_log_write('LD_START_OF_YEAR = ' || to_char(ld_start_date)) l_debug = ess_log_write('LD_END_OF_YEAR = ' || to_char(ld_end_date)) l_service_date = least(ACP_HIRE_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_days_in_year = DAYS_BETWEEN(ld_end_date, ld_start_date) + 1 l_no_of_days = DAYS_BETWEEN(least(ld_start_date, ACP_TERMINATION_DATE, GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))), l_service_date) l_length_of_service = ROUND((l_no_of_days/l_days_in_year),2) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ' || to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) l_debug = ess_log_write('Days in a year = ' || to_char(l_days_in_year)) l_debug = ess_log_write('No of days = ' || to_char(l_no_of_days)) l_debug = ess_log_write('Lenght of Service = ' || to_char(l_length_of_service)) l_debug = ess_log_write('PER_ASG_USER_PERSON_TYPE = ' || (PER_ASG_USER_PERSON_TYPE)) WHILE(1=1) LOOP( CHANGE_CONTEXTS(EFFECTIVE_DATE = bh_start_date) ( l_debug = ess_log_write('****In Loop****') l_debug = ess_log_write('ASG_HR_ASG_ID = '||TO_CHAR(ASG_HR_ASG_ID)) bh_end_date = least(PER_ASG_EFFECTIVE_END_DATE, ACP_TERMINATION_DATE, ld_end_date, IV_PLANENROLLMENTENDDATE) l_debug = ess_log_write('bh_end_date = '||TO_CHAR(bh_end_date)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('BH_START_DATE = ' || to_char(bh_start_date)) Standard_Working_Hours = PER_ASG_STANDARD_WORKING_HOURS l_debug = ess_log_write('Standard_Working_Hours = '||TO_CHAR(Standard_Working_Hours)) Working_hours = PER_ASG_NORMAL_HOURS l_debug = ess_log_write('Working_hours = '||TO_CHAR(Working_hours)) l_contract_fte = 0 if((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Associated Professionals') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) Then ( l_contract_fte=(Working_hours/Standard_Working_Hours) l_debug = ess_log_write('l_contract_fte = '+ to_char(l_contract_fte)) ) ELSE ( l_contract_fte=0 l_debug = ess_log_write('In Else') ) IF (PER_ASG_USER_PERSON_TYPE = 'Associated Professionals') AND (l_length_of_service <= 5) THEN ( L_UDT_ROW = 'los<5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','ASSOCIATED_PROFESSIONAL',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF((PER_ASG_USER_PERSON_TYPE = 'Associated Professionals') AND (l_length_of_service > 5)) THEN ( L_UDT_ROW = 'los>5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','ASSOCIATED_PROFESSIONAL',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF (((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) AND (l_length_of_service <= 5)) THEN ( L_UDT_ROW = 'los<5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','EMP_OFFICER_MA',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF (((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) AND (l_length_of_service>5)) THEN ( L_UDT_ROW = 'los>5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','EMP_OFFICER_MA',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) l_debug = ess_log_write('PER_ASG_USER_PERSON_TYPE = ' || (PER_ASG_USER_PERSON_TYPE)) l_debug = ess_log_write('L_UDT_ROW = ' || (L_UDT_ROW)) ld_period_start_date = bh_start_date ld_period_end_date = bh_end_date WHILE(ld_period_start_date<= ld_period_end_date) LOOP( L_flag = 'N' l_holiday_entitlement = 0 l_date_day = get_date_day_of_week(ld_period_start_date) l_weekly_hours = PER_ASG_NORMAL_HOURS/5 l_date = add_days(ld_period_start_date,1) l_scheduled_units=GET_PAY_AVAILABILITY('ASSIGN',ld_period_start_date,l_date,'Y','Y','Y','N','H') l_bh_date = To_char(ld_period_start_date,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SC_GET_BANK_HOLIDAYS','|=P_DATE='''||l_bh_date||'''') IF(l_flag = 'Y')THEN ( ASG_Hours = l_scheduled_units adjustmentvalues[j]=(ASG_Hours) * -1 adjustmentdates[j]=ld_period_start_date adjustmenttypes[j] = 'BHD' j = j + 1 ) IF (PER_ASG_USER_PERSON_TYPE <> 'Associated Professionals')THEN ( IF(l_flag = 'Y')THEN ( ASG_Hours = l_weekly_hours adjustmentvalues[j]=ASG_Hours adjustmentdates[j]=ld_period_start_date adjustmenttypes[j] = 'BHE' j = j + 1 ) ) ld_period_start_date = ADD_DAYS(ld_period_start_date,1) ) l_end_date= LEAST(PER_ASG_EFFECTIVE_END_DATE,BH_END_DATE) assignment_start_date = to_date(GET_VALUE_SET('SC_ABS_LEAST_DATE','|=P_ASSIGNMENT_ID=' || (l_assignment_id))) l_debug = ess_log_write('assignment_start_date = '||TO_CHAR(assignment_start_date,'DD/MM/YYYY')) IF (assignment_start_date > BH_START_DATE) THEN (l_start_date = assignment_start_date) ELSE (l_start_date = BH_START_DATE) l_debug = ess_log_write('l_start_date = '||TO_CHAR(l_start_date,'DD/MM/YYYY')) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days = '||TO_CHAR(l_days)) IF(l_days>365) THEN ( l_days_final = 365 ) ELSE ( l_days_final = l_days ) l_debug = ess_log_write('l_days_final = '||TO_CHAR(l_days_final)) FTE_Accrual = l_balance*(l_days_final/365)*l_contract_fte l_debug = ess_log_write('FTE_Accrual = '||TO_CHAR(FTE_Accrual)) FTE_accrual_final = ROUND(FTE_Accrual,2) l_debug = ess_log_write('FTE_Accrual_final '||TO_CHAR(FTE_Accrual_final)) l_accrual = l_accrual+FTE_accrual_final bh_start_date = ADD_DAYS(bh_end_date,1) ln_count = ln_count + 1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (ld_end_date = bh_start_date) OR (PER_ASG_EFFECTIVE_END_DATE = IV_PLANENROLLMENTENDDATE) OR (ACP_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (ln_count>=20)) THEN ( l_debug = ess_log_write('Loop Ended') EXIT ) ) ) accrual = l_accrual l_debug = ess_log_write('accrual = '||TO_CHAR(accrual)) return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SC Annual Leave",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PERSON_ID,IV_TERM_ID l_debug = ess_log_write('********************************Start of the accrual plan **********************************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) Continuous_service_date = '1951/01/01 00:00:00' (date) assignment_start_date = '1951/01/01 00:00:00' (date) Full_accrual_again = 0 Accrual = 0 l_length_of_service = 0 FTE_Accrual = 0 FTE_Accrual_final = 0 l_fte = 0 accrual = 0 l_accrual = 0 l_days_in_year = 0 l_length_of_service = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_record_end_date = '4712/12/31 00:00:00' (date) L_UDT_ROW = '0' l_balance = 0 ln_count = 1 l_scheduled_units = 0 j=0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_debug = ess_log_write('l_person_id = '||TO_CHAR(l_person_id)) l_assignment_id = TO_CHAR(PER_ASG_ASSIGNMENT_ID) l_debug = ess_log_write('l_assignment_id = '||(l_assignment_id)) ld_start_date = TO_DATE('01/01/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') ld_end_date = TO_DATE('31/12/'||to_char((to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY')))),'DD/MM/YYYY') l_debug = ess_log_write('ld_start_date= '+ to_char(ld_start_date)) l_debug = ess_log_write('ld_end_date= '+ to_char(ld_end_date)) l_debug = ess_log_write('ACP_HIRE_DATE= '+ to_char(ACP_HIRE_DATE)) if (PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS NOT DEFAULTED) THEN ( l_start_dt= LEAST(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE, ACP_HIRE_DATE) ) ELSE ( l_start_dt= ACP_HIRE_DATE ) l_debug = ess_log_write('l_start_dt= '+ to_char(l_start_dt)) bh_start_date = greatest(l_start_dt, ld_start_date, IV_PLANENROLLMENTSTARTDATE) bh_end_date = least(PER_ASG_EFFECTIVE_END_DATE, ACP_TERMINATION_DATE, ld_end_date, IV_PLANENROLLMENTENDDATE) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = ' || to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('BH_START_DATE = ' || to_char(bh_start_date)) l_debug = ess_log_write('BH_END_DATE = ' || to_char(bh_end_date)) l_debug = ess_log_write('LD_START_OF_YEAR = ' || to_char(ld_start_date)) l_debug = ess_log_write('LD_END_OF_YEAR = ' || to_char(ld_end_date)) l_service_date = least(ACP_HIRE_DATE, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_days_in_year = DAYS_BETWEEN(ld_end_date, ld_start_date) + 1 l_no_of_days = DAYS_BETWEEN(least(ld_start_date, ACP_TERMINATION_DATE, GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))), l_service_date) l_length_of_service = ROUND((l_no_of_days/l_days_in_year),2) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ' || to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) l_debug = ess_log_write('Days in a year = ' || to_char(l_days_in_year)) l_debug = ess_log_write('No of days = ' || to_char(l_no_of_days)) l_debug = ess_log_write('Lenght of Service = ' || to_char(l_length_of_service)) l_debug = ess_log_write('PER_ASG_USER_PERSON_TYPE = ' || (PER_ASG_USER_PERSON_TYPE)) WHILE(1=1) LOOP( CHANGE_CONTEXTS(EFFECTIVE_DATE = bh_start_date) ( l_debug = ess_log_write('****In Loop****') l_debug = ess_log_write('ASG_HR_ASG_ID = '||TO_CHAR(ASG_HR_ASG_ID)) bh_end_date = least(PER_ASG_EFFECTIVE_END_DATE, ACP_TERMINATION_DATE, ld_end_date, IV_PLANENROLLMENTENDDATE) l_debug = ess_log_write('bh_end_date = '||TO_CHAR(bh_end_date)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('BH_START_DATE = ' || to_char(bh_start_date)) Standard_Working_Hours = PER_ASG_STANDARD_WORKING_HOURS l_debug = ess_log_write('Standard_Working_Hours = '||TO_CHAR(Standard_Working_Hours)) Working_hours = PER_ASG_NORMAL_HOURS l_debug = ess_log_write('Working_hours = '||TO_CHAR(Working_hours)) l_contract_fte = 0 if((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Associated Professionals') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) Then ( l_contract_fte=(Working_hours/Standard_Working_Hours) l_debug = ess_log_write('l_contract_fte = '+ to_char(l_contract_fte)) ) ELSE ( l_contract_fte=0 l_debug = ess_log_write('In Else') ) IF (PER_ASG_USER_PERSON_TYPE = 'Associated Professionals') AND (l_length_of_service <= 5) THEN ( L_UDT_ROW = 'los<5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','ASSOCIATED_PROFESSIONAL',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF((PER_ASG_USER_PERSON_TYPE = 'Associated Professionals') AND (l_length_of_service > 5)) THEN ( L_UDT_ROW = 'los>5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','ASSOCIATED_PROFESSIONAL',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF (((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) AND (l_length_of_service <= 5)) THEN ( L_UDT_ROW = 'los<5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','EMP_OFFICER_MA',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) ELSE IF (((PER_ASG_USER_PERSON_TYPE='Officers') OR (PER_ASG_USER_PERSON_TYPE='Employee') OR (PER_ASG_USER_PERSON_TYPE='Modern Apprentice')) AND (l_length_of_service>5)) THEN ( L_UDT_ROW = 'los>5' l_balance= to_NUMBER(GET_TABLE_VALUE('SC_ACCRUAL_BALANCE','EMP_OFFICER_MA',UPPER(L_UDT_ROW),'0')) l_debug = ess_log_write('l_balance = ' || to_char(l_balance)) ) l_debug = ess_log_write('PER_ASG_USER_PERSON_TYPE = ' || (PER_ASG_USER_PERSON_TYPE)) l_debug = ess_log_write('L_UDT_ROW = ' || (L_UDT_ROW)) ld_period_start_date = bh_start_date ld_period_end_date = bh_end_date WHILE(ld_period_start_date<= ld_period_end_date) LOOP( L_flag = 'N' l_holiday_entitlement = 0 l_date_day = get_date_day_of_week(ld_period_start_date) l_weekly_hours = PER_ASG_NORMAL_HOURS/5 l_date = add_days(ld_period_start_date,1) l_scheduled_units=GET_PAY_AVAILABILITY('ASSIGN',ld_period_start_date,l_date,'Y','Y','Y','N','H') l_bh_date = To_char(ld_period_start_date,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SC_GET_BANK_HOLIDAYS','|=P_DATE='''||l_bh_date||'''') IF(l_flag = 'Y')THEN ( ASG_Hours = l_scheduled_units adjustmentvalues[j]=(ASG_Hours) * -1 adjustmentdates[j]=ld_period_start_date adjustmenttypes[j] = 'BHD' j = j + 1 ) IF (PER_ASG_USER_PERSON_TYPE <> 'Associated Professionals')THEN ( IF(l_flag = 'Y')THEN ( ASG_Hours = l_weekly_hours adjustmentvalues[j]=ASG_Hours adjustmentdates[j]=ld_period_start_date adjustmenttypes[j] = 'BHE' j = j + 1 ) ) ld_period_start_date = ADD_DAYS(ld_period_start_date,1) ) l_end_date= LEAST(PER_ASG_EFFECTIVE_END_DATE,BH_END_DATE) assignment_start_date = to_date(GET_VALUE_SET('SC_ABS_LEAST_DATE','|=P_ASSIGNMENT_ID=' || (l_assignment_id))) l_debug = ess_log_write('assignment_start_date = '||TO_CHAR(assignment_start_date,'DD/MM/YYYY')) IF (assignment_start_date > BH_START_DATE) THEN (l_start_date = assignment_start_date) ELSE (l_start_date = BH_START_DATE) l_debug = ess_log_write('l_start_date = '||TO_CHAR(l_start_date,'DD/MM/YYYY')) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days = '||TO_CHAR(l_days)) l_year_day = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 l_days_final = l_days l_debug = ess_log_write('l_days_final = '||TO_CHAR(l_days_final)) FTE_Accrual = l_balance*(l_days_final/l_year_day)*l_contract_fte l_debug = ess_log_write('FTE_Accrual = '||TO_CHAR(FTE_Accrual)) FTE_accrual_final = ROUND(FTE_Accrual,2) l_debug = ess_log_write('FTE_Accrual_final '||TO_CHAR(FTE_Accrual_final)) l_accrual = l_accrual+FTE_accrual_final bh_start_date = ADD_DAYS(bh_end_date,1) ln_count = ln_count + 1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (ld_end_date = bh_start_date) OR (PER_ASG_EFFECTIVE_END_DATE = IV_PLANENROLLMENTENDDATE) OR (ACP_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (ln_count>=20)) THEN ( l_debug = ess_log_write('Loop Ended') EXIT ) ) ) accrual = l_accrual l_debug = ess_log_write('accrual = '||TO_CHAR(accrual)) return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Annual Accrual",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE_DATE7 is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING IS 'X' DEFAULT FOR PER_ASG_FULL_PART_TIME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE2 IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE14 IS 'X' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR PURCHASE_ANNUAL_LEAVE_INFO_HOURS_ASG_ENTRY_VALUE is 0 DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS is 0 DEFAULT FOR CARRYOVER_LEAVE_CARRYOVER_HOURS_ASG_ENTRY_VALUE is 0 DEFAULT FOR PURCHASE_ANNUAL_LEAVE_INFO_CHARACTER1_ASG_ENTRY_VALUE is 'X' DEFAULT FOR IV_PERSON_ID IS 0 DEFAULT FOR IV_TERM_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_ASG_PERSON_ID IS 0 INPUTS are IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_PERSON_ID,IV_TERM_ID ld_start_date = '4712/12/31 00:00:00' (date) ld_end_date = '4712/12/31 00:00:00' (date) l_hire_date_proration_days = 0 l_days_in_a_year = 0 l_accrual_calendar_duration = 0 ln_FTE = 0 ln_accrual = 0 l_migration_date = '4712/12/31 00:00:00' (date) l_fy_date = '2022/04/01 00:00:00' (date) l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE ln_asg_count = 0 ld_continuous_date = '4712/12/31 00:00:00' (date) ld_continuous_date_years_start = '4712/12/31 00:00:00' (date) ld_continuous_date_years_end = '4712/12/31 00:00:00' (date) ld_continuous_date_years = '4712/12/31 00:00:00' (date) ln_days_before_anv = 0 ln_days_after_anv = 0 ln_acrl_before_anv = 0 ln_acrl_after_anv = 0 ln_standard_entitlement = 0 ln_std_entitlement_before_years = 0 ln_std_entitlement_after_years = 0 ln_asg_standard_days = 5 ln_asg_factor = 0 ld_loop_start_date = '4712/12/31 00:00:00' (date) ld_loop_end_date = '4712/12/31 00:00:00' (date) ld_assignment_loop_start_date = '4712/12/31 00:00:00' (date) ld_assignment_loop_end_date = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) ln_bank_holidays = 0 carryover = 0 l_remaining_accrual_balance=0 l_hours = 0 l_carryover_hours = 0 l_total_duration = 0 l_debug = ess_log_write('*********** Annual Accrual FF Starts here **********') l_debug = ess_log_write('*********** Input details are as under **********') l_debug = ess_log_write('IV_CALEDARSTARTDATE: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('IV_CALEDARENDDATE: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE: ' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Accrual Period End Date: '+ to_char(IV_ACCRUALPERIODENDDATE)) l_debug=ess_log_write('*********** Input parameters ends here **********') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('l_eff_date' + to_char(l_eff_date )) ld_start_date = greatest(IV_CALEDARSTARTDATE, IV_PLANENROLLMENTSTARTDATE, ACP_HIRE_DATE) ld_end_date = least(IV_CALEDARENDDATE, IV_PLANENROLLMENTENDDATE, PER_TRM_REL_ACTUAL_TERMINATION_DATE) l_hire_date_proration_days = DAYS_BETWEEN(IV_CALEDARENDDATE,ld_start_date)+1 l_term_date_proration_days = DAYS_BETWEEN(ld_end_date ,ld_start_date)+1 l_days_in_a_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 l_record_end_date = greatest(IV_CALEDARSTARTDATE, IV_PLANENROLLMENTSTARTDATE) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_debug=ess_log_write('Continuous Service Date' + to_char(ld_continuous_date)) if ld_continuous_date = '0001/01/01 00:00:00' (date) THEN ( ln_no_of_days = days_between(l_record_end_date, ACP_HIRE_DATE) ld_continuous_date = ACP_HIRE_DATE ) else ( ln_no_of_days = days_between(l_record_end_date, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_length_of_service = round(ln_no_of_days / 365, 2) l_debug = ess_log_write('Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('Assignment End Date: ' + to_char(l_asg_effective_end_date)) l_debug = ess_log_write('Participation Start Date: ' + to_char(ld_start_date)) l_debug = ess_log_write('Participation End Date: ' + to_char(ld_end_date)) l_debug = ess_log_write('Proration Days: ' + to_char(l_hire_date_proration_days)) l_debug = ess_log_write('Hire Date: ' + to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('Days in a year: ' + to_char(l_days_in_a_year)) l_debug = ess_log_write('No. of LOS Days: ' + to_char(ln_no_of_days)) l_debug = ess_log_write('Length of Service: ' + to_char(l_length_of_service)) l_debug=ess_log_write('PER_ASG_EFFECTIVE_END_DATE: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug=ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE: ' + to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) ld_loop_start_date = greatest(IV_PLANENROLLMENTSTARTDATE, ld_start_date, PER_ASG_REL_DATE_START) l_debug=ess_log_write('ld_loop_start_date: ' + to_char(ld_loop_start_date)) l_debug = ess_log_write('LOS Loop Starts Here:') l_debug = ess_log_write('Working Weeks: ' + PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('Paid Weeks: ' + PER_ASG_ATTRIBUTE4) l_debug = ess_log_write('Teachers Percentage: ' + PER_ASG_ATTRIBUTE14) While(1=1) loop ( l_debug = ess_log_write('Effective Loop Start Date: ' || to_char(ld_loop_start_date)) CHANGE_CONTEXTS(EFFECTIVE_DATE = ld_loop_start_date) ( ld_loop_end_date = least(ld_loop_end_date, ld_end_date, PER_ASG_EFFECTIVE_END_DATE, PER_TRM_REL_ACTUAL_TERMINATION_DATE) l_debug=ess_log_write('ld_loop_end_date: ' + to_char(ld_loop_end_date)) l_debug = ess_log_write('Entering CHANGE_CONTEXTS with effective date ' || to_char(ld_loop_start_date)) ln_asg_count = ln_asg_count + 1 l_udt_column = 'X' if (l_length_of_service >= 0) and (l_length_of_service < 5) then ( l_udt_column = 'LOS_0_4' l_udt_column_next = 'LOS_5_39' l_debug=ess_log_write('Enters 0-5 LOS If condition' || l_udt_column) ld_continuous_date_years_start = ADD_YEARS(ld_continuous_date, 5) ld_continuous_date_years_end = ADD_YEARS(ld_continuous_date_years_start, 1) ld_continuous_date_years = ld_continuous_date_years_start ) else if (l_length_of_service >= 5) and (l_length_of_service < 40) then ( l_udt_column = 'LOS_5_39' l_udt_column_next = 'LOS_40_99' l_debug=ess_log_write('Enters 5-40 LOS If condition' || l_udt_column) ld_continuous_date_years_start = ADD_YEARS(ld_continuous_date, 40) ld_continuous_date_years_end = ADD_YEARS(ld_continuous_date_years_start, 1) ld_continuous_date_years = ld_continuous_date_years_start ) else if (l_length_of_service >= 40) and (l_length_of_service < 99) then ( l_udt_column = 'LOS_40_99' l_debug=ess_log_write('Enters > 40 LOS If condition' || l_udt_column) ) l_debug = ess_log_write('ld_continuous_date_years_start ' || to_char(ld_continuous_date_years_start)) l_debug = ess_log_write('ld_continuous_date_years_end ' || to_char(ld_continuous_date_years_end)) l_debug = ess_log_write('ld_continuous_date_years ' || to_char(ld_continuous_date_years)) ld_assignment_loop_start_date = ld_loop_start_date l_debug=ess_log_write('ld_assignment_loop_start_date ' + to_char(ld_assignment_loop_start_date)) While (1=1) loop ( l_debug = ess_log_write('Entering Assignment loop'|| to_char(ld_assignment_loop_start_date)) ln_std_entitlement_before_years = 0 ln_std_entitlement_after_years = 0 ln_standard_entitlement = 0 ln_days_before_anv = 0 ln_days_after_anv = 0 ln_acrl_before_anv = 0 ln_acrl_after_anv = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = ld_assignment_loop_start_date) ( ln_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('Value found from FTE DBI ASG change Context') l_debug = ess_log_write('Entering Assignment loop') ld_asg_end_date = PER_ASG_EFFECTIVE_END_DATE ld_assignment_loop_end_date = least( ld_end_date, ld_asg_end_date) l_debug = ess_log_write('ld_assignment_loop_start_date ' || to_char(ld_assignment_loop_start_date)) l_assignment_number = PER_ASG_ASSIGNMENT_NUMBER l_debug = ess_log_write('ld_assignment_loop_end_date ' || to_char(ld_assignment_loop_end_date)) l_debug = ess_log_write('Assignment ID: ' || to_char(ln_assignment_id)) ln_acrl_before_anv = 0 ln_acrl_after_anv = 0 if ld_continuous_date_years >= ld_assignment_loop_start_date and ld_continuous_date_years <= ld_assignment_loop_end_date then ( ln_std_entitlement_before_years = TO_NUMBER(GET_TABLE_VALUE('ANNUAL_LEAVE_ENTITLEMENT',l_udt_column,'Entitlement', IV_CALEDARSTARTDATE)) ln_std_entitlement_after_years = TO_NUMBER(GET_TABLE_VALUE('ANNUAL_LEAVE_ENTITLEMENT',l_udt_column_next,'Entitlement', IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Anniversary is within the loop ' || to_char(ld_continuous_date_years)) ln_std_entitlement_before_years = ln_std_entitlement_before_years ln_std_entitlement_after_years = ln_std_entitlement_after_years l_debug = ess_log_write('ld_assignment_loop_end_date ' || to_char(ld_assignment_loop_end_date)) ln_days_before_anv = DAYS_BETWEEN(ld_continuous_date_years, ld_assignment_loop_start_date) ln_days_after_anv = DAYS_BETWEEN(ld_assignment_loop_end_date, ld_continuous_date_years) + 1 ln_acrl_before_anv = (ln_std_entitlement_before_years) * (ln_FTE) * (ln_days_before_anv / l_days_in_a_year) ln_acrl_after_anv = (ln_std_entitlement_after_years) * (ln_FTE) * (ln_days_after_anv / l_days_in_a_year) ) else ( l_debug = ess_log_write('Not Anniversary') ln_standard_entitlement = TO_NUMBER(GET_TABLE_VALUE('ANNUAL_LEAVE_ENTITLEMENT',l_udt_column,'Entitlement', IV_CALEDARSTARTDATE)) l_debug = ess_log_write('ln_standard_entitlement ' || to_char(ln_standard_entitlement)) ln_standard_entitlement = ln_standard_entitlement ln_days_before_anv = DAYS_BETWEEN(ld_assignment_loop_end_date,ld_assignment_loop_start_date) + 1 ln_days_after_anv = 0 ln_acrl_before_anv = ln_standard_entitlement * (ln_FTE) * (ln_days_before_anv / l_days_in_a_year) ln_acrl_after_anv = 0 ) l_debug = ess_log_write(' - Accrual Calculation - ') l_debug = ess_log_write('ln_standard_entitlement ' || to_char(ln_standard_entitlement)) l_debug = ess_log_write('ln_std_entitlement_before_years ' || to_char(ln_std_entitlement_before_years)) l_debug = ess_log_write('ln_std_entitlement_after_years ' || to_char(ln_std_entitlement_after_years)) l_debug = ess_log_write('ln_days_before_anv ' || to_char(ln_days_before_anv)) l_debug = ess_log_write('ln_days_after_anv ' || to_char(ln_days_after_anv)) l_debug = ess_log_write('ln_acrl_before_anv ' || to_char(ln_acrl_before_anv)) l_debug = ess_log_write('ln_acrl_after_anv ' || to_char(ln_acrl_after_anv)) l_debug = ess_log_write(' - Accrual Calculation Ends') l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING:'+ PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING) EMP_Cat1 = 'X' EMP_Cat1 = (substr(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,1,12)) EMP_Cat2 = 'X' EMP_Cat2 = (substr(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,1,8)) EMP_Cat = 'X' If EMP_Cat1 = 'Non-Teaching' then ( l_debug = ess_log_write('In Non teaching condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,2)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) else if EMP_Cat2 = 'Teaching' then ( l_debug = ess_log_write('In teaching condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) else ( l_debug = ess_log_write('In other condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) l_count = 0 l_debug = ess_log_write('***Part time Logic Start***') ld_period_start_date = greatest (ACP_HIRE_DATE, IV_CALEDARSTARTDATE,ld_assignment_loop_start_date) ld_period_end_date = least( IV_CALEDARENDDATE,PER_TRM_REL_ACTUAL_TERMINATION_DATE,ld_assignment_loop_end_date) l_debug = ess_log_write('ld_period_start_date:'+ to_char(ld_period_start_date)) l_debug = ess_log_write('ld_period_end_date:'+ to_char(ld_period_end_date)) if EMP_Cat = 'Part Time' then ( while (ld_period_start_date<= ld_period_end_date) loop ( l_column='HOLIDAYS' l_calendar = 'BANK_HOLIDAYS' l_sub_date = substr(to_char(ld_period_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) Bank_off = GET_VALUE_SET('GET_BANK_HOLIDAYS','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_calendar|| '''') If Bank_off='Y' then ( l_debug = ess_log_write('Bank Off: ' + Bank_off) l_debug = ess_log_write('Holiday Date is: ' + to_char(ld_period_start_date)) work_schedule = 'N' work_schedule = GET_VALUE_SET('GET_WORK_SCHEDULE','|=P_ASSIGNMENT_ID=''' || to_char(ASG_HR_ASG_ID)|| '''' || '|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''') l_debug = ess_log_write('work_schedule:' + work_schedule + 'check') if work_schedule = 'Y' then ( l_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, add_days(ld_period_start_date,1), 'Y', 'Y', 'Y', 'Y', 'H') l_debug = ess_log_write('l_duration: from WS' + to_char(l_duration)) ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) St_Dt = trunc(l_start_date) CHANGE_CONTEXTS(EFFECTIVE_DATE = ld_period_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_working_hours = PER_ASG_NORMAL_HOURS ) l_debug = ess_log_write('St_Dt' + to_char(ld_period_start_date)+'Working hours'+to_char(l_working_hours)) ln_asg_working_hours_wkly = l_working_hours l_daily_working_hours = ln_asg_working_hours_wkly / 5 l_duration = l_daily_working_hours l_debug = ess_log_write('l_duration: from Working Hours' + to_char(l_duration)) ) l_count = l_count + 1 l_debug = ess_log_write('Count is: ' + to_char(l_count)) l_debug = ess_log_write('l_duration: ' + to_char(l_duration)) l_total_duration = l_total_duration + l_duration l_debug = ess_log_write('l_total_duration: ' + to_char(l_total_duration)) ) ld_period_start_date = add_days(ld_period_start_date,1) ) ) l_new_duration = l_total_duration l_debug = ess_log_write('l_new_duration ' + to_char(l_new_duration)) ln_accrual = ln_accrual + ln_acrl_before_anv + ln_acrl_after_anv x = (GET_VALUE_SET('GET_ABSENCE_TYPE_ID')) l_debug = ess_log_write('absence_type_id ' || (x)) IF ((TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR ((TO_CHAR(PER_TRM_REL_ACTUAL_TERMINATION_DATE,'YYYYMMDD')<>'47121231') AND (ld_assignment_loop_end_date >= PER_TRM_REL_ACTUAL_TERMINATION_DATE)) OR (ld_assignment_loop_start_date >= ld_end_date) OR (ln_asg_count >= 100)) THEN ( l_debug = ess_log_write('Exiting Assignment While Loop: Accrual - '|| to_char(ln_accrual)) EXIT ) ld_assignment_loop_start_date = ADD_DAYS(ld_assignment_loop_end_date,1) ) ) ld_loop_start_date = ADD_DAYS(ld_assignment_loop_end_date,1) IF ((TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (TO_CHAR(PER_TRM_REL_ACTUAL_TERMINATION_DATE,'YYYYMMDD')<>'47121231') OR (ld_loop_start_date >= ld_end_date) OR (ln_asg_count >= 100)) THEN ( l_debug = ess_log_write('Exiting LOS While Loop: Accrual - '|| to_char(ln_accrual)) l_debug = ess_log_write(' ----------------------------------------------------- ') EXIT ) ) ) l_debug = ess_log_write('************************ Purchased Hours Calculation : Start*******************************') l_sub_date = substr((GLOBAL_PAY_INTERFACE_EXTRACTION_DATE),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,5,2) l_dd = substr(l_sub_date,7,2) l_purchased_hours = TO_NUMBER(GET_VALUE_SET('GET_PURCHASE_ANNUAL_LEAVE_VALUE','|=P_ASSIGNMENT_ID='''||to_char(ASG_HR_ASG_ID)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) if (l_purchased_hours > 0) then (l_purchased_hours = l_purchased_hours + 0) else (l_purchased_hours = 0) l_debug = ess_log_write('l_purchased_hours ' || to_char(l_purchased_hours)) l_debug = ess_log_write('************************ Carryover Hours Calculation : Start*******************************') Year_end = IV_CALEDARENDDATE l_sub_date = substr(to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD'),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_carryover_hours = TO_NUMBER(GET_VALUE_SET('GET_CARRYOVER_LEAVE_VALUE','|=P_ASSIGNMENT_ID='''||to_char(ASG_HR_ASG_ID)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) if (l_carryover_hours > 0) then (l_carryover_hours = l_carryover_hours + 0) else (l_carryover_hours = 0) l_debug = ess_log_write('l_sub_date ' + (l_sub_date)) l_debug = ess_log_write('l_carryover_hours ' || to_char(l_carryover_hours)) ln_bank_holidays = l_new_duration l_debug = ess_log_write('ln_bank_holidays ' || to_char(ln_bank_holidays)) ln_bh_balance = 0 ln_bh_balance = ln_bh_balance + ln_bank_holidays l_debug = ess_log_write('ln_bh_balance ' || to_char(ln_bh_balance)) ln_accrual = ln_accrual + ln_bh_balance + l_purchased_hours+l_carryover_hours l_debug = ess_log_write('l_purchased_hours ' || to_char(l_purchased_hours)) accrual = ln_accrual return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "All day worker",
        "answer": "DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE_DATE7 is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING IS 'X' DEFAULT FOR PER_ASG_FULL_PART_TIME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE2 IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE14 IS 'X' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR PURCHASE_ANNUAL_LEAVE_INFO_HOURS_ASG_ENTRY_VALUE is 0 DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS is 0 DEFAULT FOR CARRYOVER_LEAVE_CARRYOVER_HOURS_ASG_ENTRY_VALUE is 0 DEFAULT FOR PURCHASE_ANNUAL_LEAVE_INFO_CHARACTER1_ASG_ENTRY_VALUE is 'X' DEFAULT FOR IV_PERSON_ID IS 0 DEFAULT FOR IV_TERM_ID IS 0 DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_ASG_PERSON_ID IS 0 INPUTS are IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date), IV_PERSON_ID,IV_TERM_ID ld_start_date = '4712/12/31 00:00:00' (date) ld_end_date = '4712/12/31 00:00:00' (date) l_hire_date_proration_days = 0 l_days_in_a_year = 0 l_accrual_calendar_duration = 0 ln_FTE = 0 ln_accrual = 0 l_migration_date = '4712/12/31 00:00:00' (date) l_fy_date = '2022/04/01 00:00:00' (date) l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE ln_asg_count = 0 ld_continuous_date = '4712/12/31 00:00:00' (date) ld_continuous_date_years_start = '4712/12/31 00:00:00' (date) ld_continuous_date_years_end = '4712/12/31 00:00:00' (date) ld_continuous_date_years = '4712/12/31 00:00:00' (date) ln_days_before_anv = 0 ln_days_after_anv = 0 ln_acrl_before_anv = 0 ln_acrl_after_anv = 0 ln_standard_entitlement = 0 ln_std_entitlement_before_years = 0 ln_std_entitlement_after_years = 0 ln_asg_standard_days = 5 ln_asg_factor = 0 ld_loop_start_date = '4712/12/31 00:00:00' (date) ld_loop_end_date = '4712/12/31 00:00:00' (date) ld_assignment_loop_start_date = '4712/12/31 00:00:00' (date) ld_assignment_loop_end_date = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) ln_bank_holidays = 0 carryover = 0 l_remaining_accrual_balance=0 l_hours = 0 l_carryover_hours = 0 l_total_duration = 0 l_debug = ess_log_write('*********** Annual Accrual FF Starts here **********') l_debug = ess_log_write('*********** Input details are as under **********') l_debug = ess_log_write('IV_CALEDARSTARTDATE: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('IV_CALEDARENDDATE: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE: ' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Accrual Period End Date: '+ to_char(IV_ACCRUALPERIODENDDATE)) l_debug=ess_log_write('*********** Input parameters ends here **********') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('l_eff_date' + to_char(l_eff_date )) ld_start_date = greatest(IV_CALEDARSTARTDATE, IV_PLANENROLLMENTSTARTDATE, ACP_HIRE_DATE) ld_end_date = least(IV_CALEDARENDDATE, IV_PLANENROLLMENTENDDATE, PER_TRM_REL_ACTUAL_TERMINATION_DATE) l_hire_date_proration_days = DAYS_BETWEEN(IV_CALEDARENDDATE,ld_start_date)+1 l_term_date_proration_days = DAYS_BETWEEN(ld_end_date ,ld_start_date)+1 l_days_in_a_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 l_record_end_date = greatest(IV_CALEDARSTARTDATE, IV_PLANENROLLMENTSTARTDATE) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE l_debug=ess_log_write('Continuous Service Date' + to_char(ld_continuous_date)) if ld_continuous_date = '0001/01/01 00:00:00' (date) THEN ( ln_no_of_days = days_between(l_record_end_date, ACP_HIRE_DATE) ld_continuous_date = ACP_HIRE_DATE ) else ( ln_no_of_days = days_between(l_record_end_date, PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) l_debug=ess_log_write('Continuous Service Date ' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) ld_continuous_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_length_of_service = round(ln_no_of_days / 365, 2) l_debug = ess_log_write('Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('Assignment End Date: ' + to_char(l_asg_effective_end_date)) l_debug = ess_log_write('Participation Start Date: ' + to_char(ld_start_date)) l_debug = ess_log_write('Participation End Date: ' + to_char(ld_end_date)) l_debug = ess_log_write('Proration Days: ' + to_char(l_hire_date_proration_days)) l_debug = ess_log_write('Hire Date: ' + to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('Days in a year: ' + to_char(l_days_in_a_year)) l_debug = ess_log_write('No. of LOS Days: ' + to_char(ln_no_of_days)) l_debug = ess_log_write('Length of Service: ' + to_char(l_length_of_service)) l_debug=ess_log_write('PER_ASG_EFFECTIVE_END_DATE: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug=ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE: ' + to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) ld_loop_start_date = greatest(IV_PLANENROLLMENTSTARTDATE, ld_start_date, PER_ASG_REL_DATE_START) l_debug=ess_log_write('ld_loop_start_date: ' + to_char(ld_loop_start_date)) l_debug = ess_log_write('LOS Loop Starts Here:') l_debug = ess_log_write('Working Weeks: ' + PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('Paid Weeks: ' + PER_ASG_ATTRIBUTE4) l_debug = ess_log_write('Teachers Percentage: ' + PER_ASG_ATTRIBUTE14) While(1=1) loop ( l_debug = ess_log_write('Effective Loop Start Date: ' || to_char(ld_loop_start_date)) CHANGE_CONTEXTS(EFFECTIVE_DATE = ld_loop_start_date) ( ld_loop_end_date = least(ld_loop_end_date, ld_end_date, PER_ASG_EFFECTIVE_END_DATE, PER_TRM_REL_ACTUAL_TERMINATION_DATE) l_debug=ess_log_write('ld_loop_end_date: ' + to_char(ld_loop_end_date)) l_debug = ess_log_write('Entering CHANGE_CONTEXTS with effective date ' || to_char(ld_loop_start_date)) ln_asg_count = ln_asg_count + 1 l_udt_column = 'X' if (l_length_of_service >= 0) and (l_length_of_service < 5) then ( l_udt_column = 'LOS_0_4' l_udt_column_next = 'LOS_5_39' l_debug=ess_log_write('Enters 0-5 LOS If condition' || l_udt_column) ld_continuous_date_years_start = ADD_YEARS(ld_continuous_date, 5) ld_continuous_date_years_end = ADD_YEARS(ld_continuous_date_years_start, 1) ld_continuous_date_years = ld_continuous_date_years_start ) else if (l_length_of_service >= 5) and (l_length_of_service < 40) then ( l_udt_column = 'LOS_5_39' l_udt_column_next = 'LOS_40_99' l_debug=ess_log_write('Enters 5-40 LOS If condition' || l_udt_column) ld_continuous_date_years_start = ADD_YEARS(ld_continuous_date, 40) ld_continuous_date_years_end = ADD_YEARS(ld_continuous_date_years_start, 1) ld_continuous_date_years = ld_continuous_date_years_start ) else if (l_length_of_service >= 40) and (l_length_of_service < 99) then ( l_udt_column = 'LOS_40_99' l_debug=ess_log_write('Enters > 40 LOS If condition' || l_udt_column) ) l_debug = ess_log_write('ld_continuous_date_years_start ' || to_char(ld_continuous_date_years_start)) l_debug = ess_log_write('ld_continuous_date_years_end ' || to_char(ld_continuous_date_years_end)) l_debug = ess_log_write('ld_continuous_date_years ' || to_char(ld_continuous_date_years)) ld_assignment_loop_start_date = ld_loop_start_date l_debug=ess_log_write('ld_assignment_loop_start_date ' + to_char(ld_assignment_loop_start_date)) While (1=1) loop ( l_debug = ess_log_write('Entering Assignment loop'|| to_char(ld_assignment_loop_start_date)) ln_std_entitlement_before_years = 0 ln_std_entitlement_after_years = 0 ln_standard_entitlement = 0 ln_days_before_anv = 0 ln_days_after_anv = 0 ln_acrl_before_anv = 0 ln_acrl_after_anv = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = ld_assignment_loop_start_date) ( ln_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('Value found from FTE DBI ASG change Context') l_debug = ess_log_write('Entering Assignment loop') ld_asg_end_date = PER_ASG_EFFECTIVE_END_DATE ld_assignment_loop_end_date = least( ld_end_date, ld_asg_end_date) l_debug = ess_log_write('ld_assignment_loop_start_date ' || to_char(ld_assignment_loop_start_date)) l_assignment_number = PER_ASG_ASSIGNMENT_NUMBER l_debug = ess_log_write('ld_assignment_loop_end_date ' || to_char(ld_assignment_loop_end_date)) l_debug = ess_log_write('Assignment ID: ' || to_char(ln_assignment_id)) ln_acrl_before_anv = 0 ln_acrl_after_anv = 0 if ld_continuous_date_years >= ld_assignment_loop_start_date and ld_continuous_date_years <= ld_assignment_loop_end_date then ( ln_std_entitlement_before_years = TO_NUMBER(GET_TABLE_VALUE('ANNUAL_LEAVE_ENTITLEMENT',l_udt_column,'Entitlement', IV_CALEDARSTARTDATE)) ln_std_entitlement_after_years = TO_NUMBER(GET_TABLE_VALUE('ANNUAL_LEAVE_ENTITLEMENT',l_udt_column_next,'Entitlement', IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Anniversary is within the loop ' || to_char(ld_continuous_date_years)) ln_std_entitlement_before_years = ln_std_entitlement_before_years ln_std_entitlement_after_years = ln_std_entitlement_after_years l_debug = ess_log_write('ld_assignment_loop_end_date ' || to_char(ld_assignment_loop_end_date)) ln_days_before_anv = DAYS_BETWEEN(ld_continuous_date_years, ld_assignment_loop_start_date) ln_days_after_anv = DAYS_BETWEEN(ld_assignment_loop_end_date, ld_continuous_date_years) + 1 ln_acrl_before_anv = (ln_std_entitlement_before_years) * (ln_FTE) * (ln_days_before_anv / l_days_in_a_year) ln_acrl_after_anv = (ln_std_entitlement_after_years) * (ln_FTE) * (ln_days_after_anv / l_days_in_a_year) ) else ( l_debug = ess_log_write('Not Anniversary') ln_standard_entitlement = TO_NUMBER(GET_TABLE_VALUE('ANNUAL_LEAVE_ENTITLEMENT',l_udt_column,'Entitlement', IV_CALEDARSTARTDATE)) l_debug = ess_log_write('ln_standard_entitlement ' || to_char(ln_standard_entitlement)) ln_standard_entitlement = ln_standard_entitlement ln_days_before_anv = DAYS_BETWEEN(ld_assignment_loop_end_date,ld_assignment_loop_start_date) + 1 ln_days_after_anv = 0 ln_acrl_before_anv = ln_standard_entitlement * (ln_FTE) * (ln_days_before_anv / l_days_in_a_year) ln_acrl_after_anv = 0 ) l_debug = ess_log_write(' - Accrual Calculation - ') l_debug = ess_log_write('ln_standard_entitlement ' || to_char(ln_standard_entitlement)) l_debug = ess_log_write('ln_std_entitlement_before_years ' || to_char(ln_std_entitlement_before_years)) l_debug = ess_log_write('ln_std_entitlement_after_years ' || to_char(ln_std_entitlement_after_years)) l_debug = ess_log_write('ln_days_before_anv ' || to_char(ln_days_before_anv)) l_debug = ess_log_write('ln_days_after_anv ' || to_char(ln_days_after_anv)) l_debug = ess_log_write('ln_acrl_before_anv ' || to_char(ln_acrl_before_anv)) l_debug = ess_log_write('ln_acrl_after_anv ' || to_char(ln_acrl_after_anv)) l_debug = ess_log_write(' - Accrual Calculation Ends') l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING:'+ PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING) EMP_Cat1 = 'X' EMP_Cat1 = (substr(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,1,12)) EMP_Cat2 = 'X' EMP_Cat2 = (substr(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,1,8)) EMP_Cat = 'X' If EMP_Cat1 = 'Non-Teaching' then ( l_debug = ess_log_write('In Non teaching condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,2)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) else if EMP_Cat2 = 'Teaching' then ( l_debug = ess_log_write('In teaching condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) else ( l_debug = ess_log_write('In other condition') EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) ) l_count = 0 l_debug = ess_log_write('***Part time Logic Start***') ld_period_start_date = greatest (ACP_HIRE_DATE, IV_CALEDARSTARTDATE,ld_assignment_loop_start_date) ld_period_end_date = least( IV_CALEDARENDDATE,PER_TRM_REL_ACTUAL_TERMINATION_DATE,ld_assignment_loop_end_date) l_debug = ess_log_write('ld_period_start_date:'+ to_char(ld_period_start_date)) l_debug = ess_log_write('ld_period_end_date:'+ to_char(ld_period_end_date)) if (EMP_Cat = 'Part Time' OR EMP_Cat = 'Full Time') then ( while (ld_period_start_date<= ld_period_end_date) loop ( l_column='HOLIDAYS' l_calendar = 'BANK_HOLIDAYS' l_sub_date = substr(to_char(ld_period_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) Bank_off = GET_VALUE_SET('GET_BANK_HOLIDAYS','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_calendar|| '''') If Bank_off='Y' then ( l_debug = ess_log_write('Bank Off: ' + Bank_off) l_debug = ess_log_write('Holiday Date is: ' + to_char(ld_period_start_date)) work_schedule = 'N' work_schedule = GET_VALUE_SET('GET_WORK_SCHEDULE','|=P_ASSIGNMENT_ID=''' || to_char(ASG_HR_ASG_ID)|| '''' || '|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''') l_debug = ess_log_write('work_schedule:' + work_schedule + 'check') if work_schedule = 'Y' then ( l_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, add_days(ld_period_start_date,1), 'Y', 'Y', 'Y', 'Y', 'H') l_debug = ess_log_write('l_duration: from WS' + to_char(l_duration)) ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) St_Dt = trunc(l_start_date) CHANGE_CONTEXTS(EFFECTIVE_DATE = ld_period_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_working_hours = PER_ASG_NORMAL_HOURS ) l_debug = ess_log_write('St_Dt' + to_char(ld_period_start_date)+'Working hours'+to_char(l_working_hours)) ln_asg_working_hours_wkly = l_working_hours l_daily_working_hours = ln_asg_working_hours_wkly / 5 l_duration = l_daily_working_hours l_debug = ess_log_write('l_duration: from Working Hours' + to_char(l_duration)) ) l_count = l_count + 1 l_debug = ess_log_write('Count is: ' + to_char(l_count)) l_debug = ess_log_write('l_duration: ' + to_char(l_duration)) l_total_duration = l_total_duration + l_duration l_debug = ess_log_write('l_total_duration: ' + to_char(l_total_duration)) ) ld_period_start_date = add_days(ld_period_start_date,1) ) ) l_new_duration = l_total_duration l_debug = ess_log_write('l_new_duration ' + to_char(l_new_duration)) ln_accrual = ln_accrual + ln_acrl_before_anv + ln_acrl_after_anv x = (GET_VALUE_SET('GET_ABSENCE_TYPE_ID')) l_debug = ess_log_write('absence_type_id ' || (x)) IF ((TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR ((TO_CHAR(PER_TRM_REL_ACTUAL_TERMINATION_DATE,'YYYYMMDD')<>'47121231') AND (ld_assignment_loop_end_date >= PER_TRM_REL_ACTUAL_TERMINATION_DATE)) OR (ld_assignment_loop_start_date >= ld_end_date) OR (ln_asg_count >= 100)) THEN ( l_debug = ess_log_write('Exiting Assignment While Loop: Accrual - '|| to_char(ln_accrual)) EXIT ) ld_assignment_loop_start_date = ADD_DAYS(ld_assignment_loop_end_date,1) ) ) ld_loop_start_date = ADD_DAYS(ld_assignment_loop_end_date,1) IF ((TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (TO_CHAR(PER_TRM_REL_ACTUAL_TERMINATION_DATE,'YYYYMMDD')<>'47121231') OR (ld_loop_start_date >= ld_end_date) OR (ln_asg_count >= 100)) THEN ( l_debug = ess_log_write('Exiting LOS While Loop: Accrual - '|| to_char(ln_accrual)) l_debug = ess_log_write(' ----------------------------------------------------- ') EXIT ) ) ) l_debug = ess_log_write('************************ Purchased Hours Calculation : Start*******************************') l_sub_date = substr((GLOBAL_PAY_INTERFACE_EXTRACTION_DATE),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,5,2) l_dd = substr(l_sub_date,7,2) l_purchased_hours = TO_NUMBER(GET_VALUE_SET('GET_PURCHASE_ANNUAL_LEAVE_VALUE','|=P_ASSIGNMENT_ID='''||to_char(ASG_HR_ASG_ID)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) if (l_purchased_hours > 0) then (l_purchased_hours = l_purchased_hours + 0) else (l_purchased_hours = 0) l_debug = ess_log_write('l_purchased_hours ' || to_char(l_purchased_hours)) l_debug = ess_log_write('************************ Carryover Hours Calculation : Start*******************************') Year_end = IV_CALEDARENDDATE l_sub_date = substr(to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD'),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_carryover_hours = TO_NUMBER(GET_VALUE_SET('GET_CARRYOVER_LEAVE_VALUE','|=P_ASSIGNMENT_ID='''||to_char(ASG_HR_ASG_ID)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) if (l_carryover_hours > 0) then (l_carryover_hours = l_carryover_hours + 0) else (l_carryover_hours = 0) l_debug = ess_log_write('l_sub_date ' + (l_sub_date)) l_debug = ess_log_write('l_carryover_hours ' || to_char(l_carryover_hours)) ln_bank_holidays = l_new_duration l_debug = ess_log_write('ln_bank_holidays ' || to_char(ln_bank_holidays)) ln_bh_balance = 0 ln_bh_balance = ln_bh_balance + ln_bank_holidays l_debug = ess_log_write('ln_bh_balance ' || to_char(ln_bh_balance)) ln_accrual = ln_accrual + ln_bh_balance + l_purchased_hours+l_carryover_hours l_debug = ess_log_write('l_purchased_hours ' || to_char(l_purchased_hours)) accrual = ln_accrual return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "XX_Get_Balance",
        "answer": "DEFAULT FOR IV_PERSON_ID IS 0 DEFAULT FOR IV_TERM_ID IS 0 DEFAULT FOR IV_EFF_DT IS '2014/01/01' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT_data_value for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 INPUTS ARE IV_PERSON_ID,IV_TERM_ID,IV_EFF_DT (DATE) IV_ACCRUALPERIODSTARTDATE = '2021/01/01 00:00:00' (date) IV_ACCRUALPERIODENDDATE = '2021/12/31 00:00:00' (date) L_Leave_Balance = 0 L_Accrual_Plan_ID = 300000007338179 L_Term_Id = IV_TERM_ID L_Person_Id = IV_PERSON_ID CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = L_Accrual_Plan_ID, HR_ASSIGNMENT_ID = L_Term_Id, PERSON_ID = L_Person_Id ) ( L_Leave_Balance = GET_ACCRUAL_BALANCE() ) l_abs_duration=0 L_ABSENCE_TYPE_ID = to_number(GET_VALUE_SET('GET_ABSENCE_TYPE_ID')) l_debug = ess_log_write('neha: ') CHANGE_CONTEXTS (effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31' (date))) CHANGE_CONTEXTS(START_DATE=IV_ACCRUALPERIODSTARTDATE, END_DATE=IV_ACCRUALPERIODENDDATE) ( l_debug = ess_log_write('neha2: ') I=1 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( l_debug = ess_log_write('neha3: ') CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( l_debug = ess_log_write('neha4: ') l_abs_typ_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID if(l_absence_type_id=l_abs_typ_id and ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' and (ANC_ABS_ENTRS_APPROVAL_STATUS_CD='APPROVED' or ANC_ABS_ENTRS_APPROVAL_STATUS_CD='Awaiting approval' or ANC_ABS_ENTRS_APPROVAL_STATUS_CD = 'Scheduled')) then ( l_debug = ess_log_write('neha5: ') l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION l_debug = ess_log_write('l_abs_duration: ' || TO_CHAR(l_abs_duration)) ) I = I+1 ) ) ) l_remaining_accrual_balance = L_Leave_Balance - l_abs_duration l_debug = ess_log_write('l_remaining_accrual_balance - '|| to_char(l_remaining_accrual_balance)) L_Leave_Balance = l_remaining_accrual_balance return L_Leave_Balance",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 73) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 73) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 47) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 47) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Apr Mar Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 65) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 65) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 73) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 73) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 47) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 47) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Sep Aug Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 65) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 65) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i < 26) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 65) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 65) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 47) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 47) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBH Annual Leave Jan Dec Accrual Formula",
        "answer": "DEFAULT For PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE_V2 is '4712/12/31 00:00:00' (date) DEFAULT for PAYROLL_INTERFACE_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 36 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PERSON_LOCAL_NAME_INFORMATION_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_ASG_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'Standard 36 hrs x 52.14 wks' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE4 IS 'LG Worker - Nonsch - 52 wks' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'E' DEFAULT FOR PER_TRM_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TERM_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MIN_REHIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_CONTINUOUS_SERVICE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date) ln_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_debug=ess_log_write('Assignment ID is' + to_char(ln_assignment_id)) l_debug=ess_log_write('Assignment Number' + PER_ASG_ASSIGNMENT_NUMBER) l_debug=ess_log_write('IV_CALEDARSTARTDATE' + to_char(IV_CALEDARSTARTDATE)) l_debug=ess_log_write('IV_CALEDARENDDATE' + to_char(IV_CALEDARENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTENDDATE' + to_char(IV_PLANENROLLMENTENDDATE)) l_debug=ess_log_write('IV_PLANENROLLMENTSTARTDATE' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) l_end_date_for_leap_year = IV_CALEDARENDDATE default_l_continuous_service_date = '4712/12/31 00:00:00' (date) PPG_VALUE = 'X' IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231') THEN ( BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < IV_PLANENROLLMENTENDDATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= IV_PLANENROLLMENTENDDATE ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_CALEDARSTARTDATE IF(IV_CALEDARENDDATE < PER_TRM_REL_ACTUAL_TERMINATION_DATE) THEN BH_END_DATE= IV_CALEDARENDDATE ELSE BH_END_DATE= PER_TRM_REL_ACTUAL_TERMINATION_DATE ) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Bank_holiday_anniversary_year=0 grade_number = 0 bank_holiday_default_date = '1951/01/01 00:00:00' (date) assignment_change_count = 1 Bank_holiday_days_for_log =0 l_days_in_year = DAYS_BETWEEN(IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1 anniversary_year_accrual = 0 bank_holiday_count_total = 0 IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ) ELSE ( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),ACP_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_continous_date = ACP_HIRE_DATE ) l_debug = ess_log_write('l_continous_date - '||to_char(l_continous_date)) l_debug = ess_log_write('l_length_of_service'||to_char(l_length_of_service)) IF(l_length_of_service < 5)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 5 AND l_length_of_service<10)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) ELSE IF(l_length_of_service => 10 AND l_length_of_service<20)THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) ELSE ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,20) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs - '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('Assignment Start Date' + to_char(PER_ASG_REL_DATE_START)) IF (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE AND IV_PLANENROLLMENTSTARTDATE => PER_ASG_REL_DATE_START) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE IF (PER_ASG_REL_DATE_START => IV_PLANENROLLMENTSTARTDATE AND PER_ASG_REL_DATE_START > BH_START_DATE) THEN ( l_start_date=PER_ASG_REL_DATE_START ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) l_debug = ess_log_write('BH_START_DATE '+ to_char(BH_START_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_debug = ess_log_write('l_start_date '+ to_char(l_start_date)) l_contract_type = PER_ASG_ATTRIBUTE4 l_assignment_paid_week = 0 l_emp_working_hours = 0 l_hr_asg_id = 0 l_hr_asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_eff_date_in_FTE '+ to_char(l_eff_date)) l_debug = ess_log_write('l_eff_date '+ to_char(l_eff_date)) l_fte = 0 l_emp_working_hours = HWP_EMP_WORKING_HOURS last_assignment_days = 0 Annual_Hours = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Annual_Hours',l_contract_type ,l_eff_date) Period_Divisor = GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date) Full_Time_Weeks = TO_NUMBER(GET_TABLE_VALUE('PQP_CONTRACT_TYPE','Period_Divisor',l_contract_type,l_eff_date)) Full_Time_Working_Hours =( TO_NUMBER(Annual_Hours) / TO_NUMBER(Period_Divisor)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_assignment_paid_week= PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('l_assignment_paid_week before 0 condition '+ to_char(l_assignment_paid_week)) PPG_VALUE = 'X' l_hr_asg_id = ASG_HR_ASG_ID SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') PPG_VALUE = GET_OUTPUT('X_OUTPUT_TEXT', PPG_VALUE) IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Chief Officers' THEN ( PPG_VALUE = 'Chief_Officers' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'NHS' THEN( PPG_VALUE = 'NHS' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 12+' THEN( PPG_VALUE = 'GLPC2019_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'GLPC2019 Less Than 12' THEN( PPG_VALUE = 'GLPC2019_Less_Than_12' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Youth' THEN( PPG_VALUE = 'Youth' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Apprentices' THEN( PPG_VALUE = 'Apprentice' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury +' THEN( PPG_VALUE = 'Solubury_Plus' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Casuals' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Councilors' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'EXT/VA Schools' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Office Holders' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Other' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Soulbury -' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Supply Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Pensioners' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Teachers' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-LG' THEN( PPG_VALUE = 'LBH_Members' ) ELSE IF PER_ASG_PEOPLE_GROUP_SEGMENT1 = 'Unknown Grades-TCH' THEN( PPG_VALUE = 'LBH_Members' ) l_debug = ess_log_write('PPG Value'+ (PPG_VALUE)) IF l_assignment_paid_week = 0 then l_assignment_paid_week = Full_Time_Weeks Assignment_Weeks = l_assignment_paid_week Week_Factor =(Assignment_Weeks/Full_Time_Weeks) l_debug = ess_log_write('Annual_Hours : '+Annual_Hours) l_debug = ess_log_write('Period_Divisor : '+Period_Divisor) l_debug = ess_log_write('Full_Time_Weeks : '+to_char(Full_Time_Weeks)) l_debug = ess_log_write('Full_Time_Working_Hours : '+to_char(Full_Time_Working_Hours)) l_debug = ess_log_write('l_emp_working_hours : '+to_char(l_emp_working_hours)) l_debug = ess_log_write('Week_Factor : '+to_char(Week_Factor)) l_fte=round((l_emp_working_hours/Full_Time_Working_Hours)* Week_Factor,5) l_debug = ess_log_write('l_fte '+ to_char(l_fte)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date ' || to_char(l_end_date)) l_debug = ess_log_write('l_length_of_service '||to_char(l_length_of_service)) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_in_loop '||to_char(l_length_of_service_in_loop)) LOS = TO_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop),l_eff_date)) l_debug = ess_log_write('Accrual Value=' + to_char(LOS)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<l_end_date) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_debug = ess_log_write('l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_start_date '||to_char(l_start_date)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) l_debug = ess_log_write('l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)) LOS_PERMITABLE = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_los_before_ann))) l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_days_till_ann '||to_char(l_days_till_ann)) i =1 WHILE(i <= 73) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF ((holiday_date >= l_start_date) AND (holiday_date < l_continous_date_after_addng_yrs))THEN( Bank_holiday_anniversary_year = Bank_holiday_anniversary_year + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday '||to_char(Bank_holiday_anniversary_year)||' - '||to_char(holiday_date)) ) ) Bank_holiday_anniversary_year = (Bank_holiday_anniversary_year * 7.2 * l_fte) l_debug = ess_log_write('Bank_holiday_anniversary_year Value for l_fte for anniversary year '+ to_char(l_fte) +' is ' + to_char(Bank_holiday_anniversary_year)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte + Bank_holiday_anniversary_year l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('LOS_PERMITABLE '||to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service_in_loop = ROUND((DAYS_BETWEEN(l_end_date,l_continous_date)/365), 2) l_debug = ess_log_write('l_length_of_service_else - '||to_char(l_length_of_service_in_loop)) LOS = To_NUMBER(GET_TABLE_VALUE('LBH_ANNUAL_LEAVE_ENTITLEMENTS',PPG_VALUE,TO_CHAR(l_length_of_service_in_loop))) l_debug = ess_log_write('LOS in Else '||to_char(LOS)) ) ) l_debug = ess_log_write('l_start_date - '||to_char(l_start_date)) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) if (l_start_date > l_end_date) then ( l_end_date=BH_END_DATE ) l_days = DAYS_BETWEEN(l_end_date,l_start_date)+1 last_assignment_days = 0 IF l_fte=1 THEN ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE 1 '||TO_CHAR(l_days)) Full_accrual=LOS*l_days/l_days_in_year l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( l_debug = ess_log_write('los '||TO_CHAR(LOS)) l_debug = ess_log_write('L_DAYS for FTE Not equal to 1 '||TO_CHAR(l_days)) l_debug = ess_log_write('L_Fte '||TO_CHAR(L_Fte)) FTE_Accrual=LOS*l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(ACP_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = ACP_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) i =1 WHILE(i <= 73) LOOP( holiday_date = TO_DATE(GET_TABLE_VALUE('LBH_BANK_HOLIDAYS','HOLIDAYS',to_char(i),l_eff_date),'DD/MM/YYYY') i = i+1 IF (((holiday_date <= BH_END_DATE) AND (holiday_date > bank_holiday_default_date)) and ((holiday_date >= l_start_date and holiday_date <= l_end_date)))THEN( Bank_holiday = Bank_holiday + 1 bank_holiday_count_total = bank_holiday_count_total + 1 l_debug = ess_log_write('holiday_date '||to_char(holiday_date)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) ) ) Bank_holiday = (Bank_holiday * 7.2 * L_Fte) l_debug = ess_log_write('Bank_holiday Value for L_Fte '+ to_char(L_Fte) +' is ' + to_char(Bank_holiday)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_debug = ess_log_write('Full_accrual '||to_char(Full_accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual_again '||to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('**************************Debugging Logs**************************') l_debug = ess_log_write('Assignment Change '||to_char(assignment_change_count)) l_debug = ess_log_write('From'||to_char(l_start_date)||'To'||to_char(l_end_date)) l_debug = ess_log_write('Tc & Cs:'||(PPG_VALUE)) l_debug = ess_log_write('LOS '||to_char(l_length_of_service)) l_debug = ess_log_write('No. of Days:'||to_char(l_days)) l_debug = ess_log_write('Qualifying UDT Band:'||to_char(LOS)) l_debug = ess_log_write('FTE:'||to_char(l_fte)) l_debug = ess_log_write(' ') l_debug = ess_log_write('Total Count of Bank Holiday:'+to_char(bank_holiday_count_total)) l_debug = ess_log_write('Accrual:'+ to_char(LOS) + '*' + to_char(l_fte) + '*'+ to_char(l_days) + '/l_days_in_year') l_debug = ess_log_write('Total:'||to_char(accrual)) l_debug = ess_log_write('**************************End of Debugging Logs**************************') Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 last_assignment_days = l_days assignment_change_count = assignment_change_count +1 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Total Accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Havering"
    },
    {
        "FORMULA_NAME": "LBL Accrual Full Time",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 11 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) assignment_id = 0 l_debug = ess_log_write('********************************Included Weekend************************************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) Start_of_year = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') Start_of_year = add_years(Start_of_year,-1) l_debug = ess_log_write('$$$$Start_of_year - '||TO_CHAR(Start_of_year)) l_debug = ess_log_write('$$$$eff_of_year - '||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)))) end_of_year = TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') l_debug = ess_log_write('$$$$end_of_year - '||TO_CHAR(end_of_year)) l_debug = ess_log_write('$$$$end_of_year 2 - '||TO_CHAR(end_of_year)) Number_of_year_day = days_between(end_of_year,Start_of_year)+1 l_debug = ess_log_write('$$$$Number_of_year_day - '||TO_CHAR(Number_of_year_day)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) BH_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_START_DATE = ADD_YEARS(BH_START_DATE,-1) BH_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') Full_accrual_again = 0 l_actual_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE if PER_ASG_REL_ACTUAL_TERMINATION_DATE was not defaulted then ( l_month_effective_date=to_char(l_effective_date,'MM') l_month_eff_number=to_number(l_month_effective_date) l_debug=ess_log_write('Effective Date Month : '||l_month_effective_date) if (l_month_eff_number >3) then ( BH_START_DATE=ADD_YEARS(BH_START_DATE,1) BH_END_DATE=ADD_YEARS(BH_END_DATE,1) ) ) l_year_days= DAYS_BETWEEN(BH_END_DATE,BH_START_DATE)+1 l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 IF PER_ASG_CONTRACT_ATTRIBUTE_DATE1 WAS DEFAULTED THEN( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_PERSON_ENTERPRISE_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('l_length_of_service1= '+ to_char(l_length_of_service)) l_continous_date = PER_PERSON_ENTERPRISE_HIRE_DATE ) ELSE( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_CONTRACT_ATTRIBUTE_DATE1) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('l_length_of_service2= '+ to_char(l_length_of_service)) l_continous_date = PER_ASG_CONTRACT_ATTRIBUTE_DATE1 ) l_debug = ess_log_write(' l_continous_date '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_contract_end_date= '+ to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('l_continous_date= '+ to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) l_debug = ess_log_write('l_length_of_service= '+ to_char(l_length_of_service)) l_debug = ess_log_write('PER_ASG_PEOPLE_GROUP_SEGMENT1= '+ PER_ASG_PEOPLE_GROUP_SEGMENT1) NEG_BODY=PER_ASG_PEOPLE_GROUP_SEGMENT1 If(NEG_BODY='Chief Officers') THEN NEG_BODY='Chief_Officers' If(NEG_BODY='Teachers' OR NEG_BODY='Youth Workers') THEN ( NEG_BODY='XX' ) IF(NEG_BODY='Soulbury') THEN ( NEG_BODY = 'Soulbury' ) IF(NEG_BODY = 'Other') THEN ( NEG_BODY = 'Others' ) LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) l_debug = ess_log_write(' LOS '||to_char(LOS)) WHILE(GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'01/01/1951') != '4712/12/31' or GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'01/01/1951') != '01/01/1951') LOOP ( UDT_Entry[i]=TO_DATE(GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'1951/01/01')) l_debug = ess_log_write('udt_entry=2 '+ to_char(UDT_Entry[i], 'dd-mon-yyyy')) i = i +1 l_debug = ess_log_write('i - ' + to_char(i)) If i >50 Then (EXIT) ) If (ACP_HIRE_DATE > BH_START_DATE) THEN ( l_start_date=ACP_HIRE_DATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write(' l_start_date '||to_char(l_start_date)||' PER_PERSON_ENTERPRISE_HIRE_DATE '||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||' ACP_HIRE_DATE '||to_char(ACP_HIRE_DATE)||' PER_PER_ENTERPRISE_TERMINATION_DATE '||PER_TRM__EFFECTIVE_END_DATE) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_los_before_ann),'01/01/1951')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) FTE_Accrual=LOS*l_days/365*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('Final Accrual before return statement - '||to_char(accrual)) accrual = accrual + 0.00001 l_debug = ess_log_write(' round accrual '||to_char(round(accrual))) accrual_char = to_char(accrual) frac_part = 'XX' if(accrual>100) then( frac_part = substr(accrual_char,5,2) ) else ( frac_part = substr(accrual_char,4,2) ) l_debug = ess_log_write('frac_part'||frac_part) f_part = to_number(frac_part) if(f_part>=50) then (accrual = round(accrual) - 1) else if(f_part < 50) then (accrual = round(accrual)) if(f_part >= 0 and f_part<12.5) then (f_part = 0) else if(f_part >= 12.5 and f_part<37.5) then (f_part = 25) else if(f_part >= 37.5 and f_part<62.5) then (f_part = 50) else if(f_part >= 62.5 and f_part<87.5) then (f_part = 75) else if(f_part >= 87.5) then (f_part = 0 accrual = accrual+1 l_debug = ess_log_write('accrual'||to_char(accrual)) return accrual) accrual = accrual + (f_part/100) l_debug = ess_log_write('f_part'||to_char(f_part)||'accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "ANNUAL_LEAVE_PART_TIME",
        "answer": "DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORK_START_TIME IS 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VLAUE IS 0 accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 Standard_hours=PER_ASG_STANDARD_WORKING_HOURS FTE=PER_ASG_FTE_VALUE FINAL_FTE=FTE*(PER_ASG_ATTRIBUTE_NUMBER1/52.14) IF PER_ASG_CONTRACT_ATTRIBUTE_DATE1 WAS DEFAULTED THEN( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_PERSON_ENTERPRISE_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/365),2) ) ELSE( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_CONTRACT_ATTRIBUTE_DATE1) l_length_of_service=ROUND((t_no_of_days/365),2) ) LOS = to_Char(l_length_of_service) FT_LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE','LENGTH_OF_SERVICE',LOS,'01/01/1951')) accrual=FT_LOS * FINAL_FTE carryover = 5*FINAL_FTE return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Accrual Non Weekend",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 11 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_CREATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FULL_PART_TIME IS 'XX' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) l_debug = ess_log_write('********************************Excluded Weekend**********************************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)||' start_date '||to_char(PER_ASG_CREATION_DATE)) assignment_id = 0 l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) Start_of_year = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') Start_of_year = add_years(Start_of_year,-1) l_debug = ess_log_write('$$$$Start_of_year - '||TO_CHAR(Start_of_year)) l_debug = ess_log_write('$$$$eff_of_year - '||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)))) end_of_year = TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') l_debug = ess_log_write('$$$$end_of_year - '||TO_CHAR(end_of_year)) l_debug = ess_log_write('$$$$end_of_year 2 - '||TO_CHAR(end_of_year)) Number_of_year_day = days_between(end_of_year,Start_of_year)+1 l_debug = ess_log_write('$$$$Number_of_year_day - '||TO_CHAR(Number_of_year_day)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) BH_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') l_debug = ess_log_write('$$$$BH_START_DATE Before Adding - '||TO_CHAR(BH_START_DATE)) BH_START_DATE = ADD_YEARS(BH_START_DATE,-1) l_debug = ess_log_write('$$$$BH_START_DATE After Adding - '||TO_CHAR(BH_START_DATE)) BH_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') Full_accrual_again = 0 l_actual_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE if PER_ASG_REL_ACTUAL_TERMINATION_DATE was not defaulted then ( l_month_effective_date=to_char(l_effective_date,'MM') l_month_eff_number=to_number(l_month_effective_date) l_debug=ess_log_write('Effective Date Month : '||l_month_effective_date) if (l_month_eff_number >3) then ( BH_START_DATE=ADD_YEARS(BH_START_DATE,1) BH_END_DATE=ADD_YEARS(BH_END_DATE,1) ) ) l_year_days= DAYS_BETWEEN(BH_END_DATE,BH_START_DATE)+1 l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE*** - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 asg_id = 0 asg_id = PER_ASG_ASSIGNMENT_ID asg_id_char = to_char(asg_id) l_start_date_char = 'no date' mid_start_date = '4712/12/31' (date) IF PER_ASG_CONTRACT_ATTRIBUTE_DATE1 WAS DEFAULTED THEN( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_PERSON_ENTERPRISE_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/Number_of_year_day),2) l_debug = ess_log_write('l_length_of_service1= '+ to_char(l_length_of_service)) l_continous_date = PER_PERSON_ENTERPRISE_HIRE_DATE ) ELSE( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_CONTRACT_ATTRIBUTE_DATE1) l_length_of_service=ROUND((t_no_of_days/Number_of_year_day),2) l_debug = ess_log_write('l_length_of_service2= '+ to_char(l_length_of_service)) l_continous_date = PER_ASG_CONTRACT_ATTRIBUTE_DATE1 ) l_debug = ess_log_write(' l_continous_date '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_contract_end_date= '+ to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('l_continous_date= '+ to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) l_debug = ess_log_write('l_length_of_service= '+ to_char(l_length_of_service)) l_debug = ess_log_write('PER_ASG_PEOPLE_GROUP_SEGMENT1= '+ PER_ASG_PEOPLE_GROUP_SEGMENT1) NEG_BODY=PER_ASG_PEOPLE_GROUP_SEGMENT1 If(NEG_BODY='Chief Officers') THEN NEG_BODY='Chief_Officers' If(NEG_BODY='Teachers' OR NEG_BODY='Youth Workers') THEN ( NEG_BODY='XX' ) IF(NEG_BODY='Soulbury') THEN ( NEG_BODY = 'Soulbury' ) IF(NEG_BODY = 'Other') THEN ( NEG_BODY = 'Others' ) LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) l_debug = ess_log_write(' LOS '||to_char(LOS)||' asg_id_char'||asg_id_char) l_start_date_char = GET_VALUE_SET('LBL_ACC_BAL_ASG_START_DATE','|=ASG_ID='||asg_id_char) l_debug = ess_log_write('l_start_date_char'||l_start_date_char) mid_start_date = to_date(l_start_date_char,'yyyy/mm/dd') l_debug = ess_log_write('l_start_date_char'||to_char(mid_start_date)) IF(mid_start_date > BH_START_DATE) then ( l_start_date = mid_start_date ) else( If (ACP_HIRE_DATE > BH_START_DATE) THEN ( l_start_date=ACP_HIRE_DATE ) ELSE ( l_start_date=BH_START_DATE ) ) l_debug = ess_log_write(' l_start_date '||to_char(l_start_date)||' PER_PERSON_ENTERPRISE_HIRE_DATE '||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||' ACP_HIRE_DATE '||to_char(ACP_HIRE_DATE)||' PER_PER_ENTERPRISE_TERMINATION_DATE '||PER_TRM__EFFECTIVE_END_DATE) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/Number_of_year_day)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/Number_of_year_day l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_los_before_ann),'01/01/1951')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('##PER_ASG_FULL_PART_TIME: '||PER_ASG_FULL_PART_TIME) IF( UPPER(PER_ASG_FULL_PART_TIME) <> UPPER('Part_Time')) THEN( l_debug = ess_log_write('##SOB Inside THEN '||to_char(Bank_holiday)) Bank_holiday=0) ELSE( l_debug = ess_log_write('##SOB Inside ELSE '||to_char(Bank_holiday)) i=1 WHILE(GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'01/01/1951') != '31/12/4712' AND GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'01/01/1951') != '01/01/1951') LOOP ( UDT_Entry[i]=TO_DATE(GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'01/01/1951')) l_debug = ess_log_write('udt_entry=2 '+ to_char(UDT_Entry[i], 'dd/mm/yyyy')) i = i +1 l_debug = ess_log_write('i - ' + to_char(i)) If i >50 Then (EXIT) ) ) Bank_holiday =i-1 bank_holiday_hrs= Bank_holiday*7 l_debug = ess_log_write('***Bank_holiday: '+ to_char(Bank_holiday)) LOS=LOS+Bank_holiday_hrs l_debug = ess_log_write('***LOS after adding bank holidays : '+ to_char(LOS)) l_debug = ess_log_write('***Number_of_year_day : '+ to_char(Number_of_year_day)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days/Number_of_year_day l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( FTE_Accrual=LOS*l_days/Number_of_year_day*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual'|| to_char(Full_accrual)) l_debug = ess_log_write('FTE_Accrual'|| to_char(FTE_Accrual)) l_debug = ess_log_write('Full_accrual_again'|| to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Full_accrual_again Full_accrual=0 FTE_Accrual=0 Full_accrual_again = 0 BH = 0 k=0 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + 0.00001 l_debug = ess_log_write(' round accrual '||to_char(round(accrual))) accrual_char = to_char(accrual) frac_part = 'XX' if(accrual>100) then( frac_part = substr(accrual_char,5,2) ) else ( frac_part = substr(accrual_char,4,2) ) l_debug = ess_log_write('frac_part'||frac_part) f_part = to_number(frac_part) if(f_part>=50) then (accrual = round(accrual) - 1) else if(f_part < 50) then (accrual = round(accrual)) if(f_part >= 0 and f_part<12.5) then (f_part = 0) else if(f_part >= 12.5 and f_part<37.5) then (f_part = 25) else if(f_part >= 37.5 and f_part<62.5) then (f_part = 50) else if(f_part >= 62.5 and f_part<87.5) then (f_part = 75) else if(f_part >= 87.5) then (f_part = 0 accrual = accrual+1 l_debug = ess_log_write('accrual'||to_char(accrual)) return accrual) accrual = accrual + (f_part/100) l_debug = ess_log_write('f_part'||to_char(f_part)||'accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Accrual Non Weekend",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 11 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_CREATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FULL_PART_TIME IS 'XX' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) l_debug = ess_log_write('********************************Excluded Weekend**********************************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)||' start_date '||to_char(PER_ASG_CREATION_DATE)) assignment_id = 0 l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) Start_of_year = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') Start_of_year = add_years(Start_of_year,-1) l_debug = ess_log_write('$$$$Start_of_year - '||TO_CHAR(Start_of_year)) l_debug = ess_log_write('$$$$eff_of_year - '||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)))) end_of_year = TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') l_debug = ess_log_write('$$$$end_of_year - '||TO_CHAR(end_of_year)) l_debug = ess_log_write('$$$$end_of_year 2 - '||TO_CHAR(end_of_year)) Number_of_year_day = days_between(end_of_year,Start_of_year)+1 l_debug = ess_log_write('$$$$Number_of_year_day - '||TO_CHAR(Number_of_year_day)) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) BH_START_DATE = TO_DATE('01/04/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') l_debug = ess_log_write('$$$$BH_START_DATE Before Adding - '||TO_CHAR(BH_START_DATE)) BH_START_DATE = ADD_YEARS(BH_START_DATE,-1) l_debug = ess_log_write('$$$$BH_START_DATE After Adding - '||TO_CHAR(BH_START_DATE)) BH_END_DATE=TO_DATE('31/03/'||to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') Full_accrual_again = 0 l_actual_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE if PER_ASG_REL_ACTUAL_TERMINATION_DATE was not defaulted then ( l_month_effective_date=to_char(l_effective_date,'MM') l_month_eff_number=to_number(l_month_effective_date) l_debug=ess_log_write('Effective Date Month : '||l_month_effective_date) if (l_month_eff_number >3) then ( BH_START_DATE=ADD_YEARS(BH_START_DATE,1) BH_END_DATE=ADD_YEARS(BH_END_DATE,1) ) ) l_year_days= DAYS_BETWEEN(BH_END_DATE,BH_START_DATE)+1 l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE*** - '||TO_CHAR(BH_START_DATE)||' BH End Date - '||TO_CHAR(BH_END_DATE)||' Actual termination date - '||to_char(l_actual_termination_date)||' l_trm_effective_end_date '||l_trm_effective_end_date) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 asg_id = 0 asg_id = PER_ASG_ASSIGNMENT_ID asg_id_char = to_char(asg_id) l_start_date_char = 'no date' mid_start_date = '4712/12/31' (date) IF PER_ASG_CONTRACT_ATTRIBUTE_DATE1 WAS DEFAULTED THEN( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_PERSON_ENTERPRISE_HIRE_DATE) l_length_of_service=ROUND((t_no_of_days/Number_of_year_day),2) l_debug = ess_log_write('l_length_of_service1= '+ to_char(l_length_of_service)) l_continous_date = PER_PERSON_ENTERPRISE_HIRE_DATE ) ELSE( t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_CONTRACT_ATTRIBUTE_DATE1) l_length_of_service=ROUND((t_no_of_days/Number_of_year_day),2) l_debug = ess_log_write('l_length_of_service2= '+ to_char(l_length_of_service)) l_continous_date = PER_ASG_CONTRACT_ATTRIBUTE_DATE1 ) l_debug = ess_log_write(' l_continous_date '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date= '+ to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('l_contract_end_date= '+ to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('l_continous_date= '+ to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) l_debug = ess_log_write('l_length_of_service= '+ to_char(l_length_of_service)) l_debug = ess_log_write('PER_ASG_PEOPLE_GROUP_SEGMENT1= '+ PER_ASG_PEOPLE_GROUP_SEGMENT1) NEG_BODY=PER_ASG_PEOPLE_GROUP_SEGMENT1 If(NEG_BODY='Chief Officers') THEN NEG_BODY='Chief_Officers' If(NEG_BODY='Teachers' OR NEG_BODY='Youth Workers') THEN ( NEG_BODY='XX' ) IF(NEG_BODY='Soulbury') THEN ( NEG_BODY = 'Soulbury' ) IF(NEG_BODY = 'Other') THEN ( NEG_BODY = 'Others' ) LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) l_debug = ess_log_write(' LOS '||to_char(LOS)||' asg_id_char'||asg_id_char) l_start_date_char = GET_VALUE_SET('LBL_ACC_BAL_ASG_START_DATE','|=ASG_ID='||asg_id_char) l_debug = ess_log_write('l_start_date_char'||l_start_date_char) mid_start_date = to_date(l_start_date_char,'yyyy/mm/dd') l_debug = ess_log_write('l_start_date_char'||to_char(mid_start_date)) IF(mid_start_date > BH_START_DATE) then ( l_start_date = mid_start_date ) else( If (ACP_HIRE_DATE > BH_START_DATE) THEN ( l_start_date=ACP_HIRE_DATE ) ELSE ( l_start_date=BH_START_DATE ) ) l_debug = ess_log_write(' l_start_date '||to_char(l_start_date)||' PER_PERSON_ENTERPRISE_HIRE_DATE '||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||' ACP_HIRE_DATE '||to_char(ACP_HIRE_DATE)||' PER_PER_ENTERPRISE_TERMINATION_DATE '||PER_TRM__EFFECTIVE_END_DATE) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop') l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write(' l_continous_date_after_addng_yrs '||to_char(l_continous_date_after_addng_yrs)) LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/Number_of_year_day)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/Number_of_year_day l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_los_before_ann),'01/01/1951')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('LBL_ANNUAL_LEAVE',NEG_BODY,to_char(l_length_of_service),'01/01/1951')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('Effective End Date - '||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_FTE_VALUE - '||to_char(l_fte)) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('##PER_ASG_FULL_PART_TIME: '||PER_ASG_FULL_PART_TIME) IF( UPPER(PER_ASG_FULL_PART_TIME) <> UPPER('Part_Time')) THEN( l_debug = ess_log_write('##SOB Inside THEN '||to_char(Bank_holiday)) Bank_holiday=0) ELSE( l_debug = ess_log_write('##SOB Inside ELSE '||to_char(Bank_holiday)) i=1 WHILE(GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'01/01/1951') != '31/12/4712' AND GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'01/01/1951') != '01/01/1951') LOOP ( UDT_Entry[i]=TO_DATE(GET_TABLE_VALUE('LBL_BANK_HOLIDAY','HOLIDAYS',to_char(i),'01/01/1951')) l_debug = ess_log_write('udt_entry=2 '+ to_char(UDT_Entry[i], 'dd/mm/yyyy')) i = i +1 l_debug = ess_log_write('i - ' + to_char(i)) If i >50 Then (EXIT) ) ) Bank_holiday =i-1 bank_holiday_hrs= Bank_holiday*7 l_debug = ess_log_write('***Bank_holiday: '+ to_char(Bank_holiday)) LOS=LOS+Bank_holiday_hrs l_debug = ess_log_write('***LOS after adding bank holidays : '+ to_char(LOS)) l_debug = ess_log_write('***Number_of_year_day : '+ to_char(Number_of_year_day)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days/Number_of_year_day l_debug = ess_log_write('Accrual is '||to_char(Full_accrual)||' and FTE is '||to_char(l_fte)) ) ELSE ( FTE_Accrual=LOS*l_days/Number_of_year_day*L_Fte l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) l_debug = ess_log_write('Full_accrual'|| to_char(Full_accrual)) l_debug = ess_log_write('FTE_Accrual'|| to_char(FTE_Accrual)) l_debug = ess_log_write('Full_accrual_again'|| to_char(Full_accrual_again)) accrual=accrual+Full_accrual+FTE_Accrual+Full_accrual_again Full_accrual=0 FTE_Accrual=0 Full_accrual_again = 0 BH = 0 k=0 IF (TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231') OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE OR (l_end_date = BH_END_DATE)) THEN ( l_debug = ess_log_write(' Loop Ended '||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) accrual = accrual + 0.00001 l_debug = ess_log_write(' round accrual '||to_char(round(accrual))) accrual_char = to_char(accrual) frac_part = 'XX' if(accrual>100) then( frac_part = substr(accrual_char,5,2) ) else ( frac_part = substr(accrual_char,4,2) ) l_debug = ess_log_write('frac_part'||frac_part) f_part = to_number(frac_part) if(f_part>=50) then (accrual = round(accrual) - 1) else if(f_part < 50) then (accrual = round(accrual)) if(f_part >= 0 and f_part<12.5) then (f_part = 0) else if(f_part >= 12.5 and f_part<37.5) then (f_part = 25) else if(f_part >= 37.5 and f_part<62.5) then (f_part = 50) else if(f_part >= 62.5 and f_part<87.5) then (f_part = 75) else if(f_part >= 87.5) then (f_part = 0 accrual = accrual+1 l_debug = ess_log_write('accrual'||to_char(accrual)) return accrual) accrual = accrual + (f_part/100) l_debug = ess_log_write('f_part'||to_char(f_part)||'accrual '||to_char(accrual)) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Annual Leave Accrual Plan for Days",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'X' DEFAULT FOR PER_ASG_CREATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE_CODE IS ' ' DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 IS '4712/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS ' ' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 Inputs are IV_PLANENROLLMENTSTARTDATE(Date) , IV_PLANENROLLMENTENDDATE(Date), IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_CARRYOVER (number) l_debug = ess_log_write('************************ In Annual Leave Accrual FF*******************************') l_debug = ess_log_write('ASSIGNMENT NUMBER: '||PER_ASG_ASSIGNMENT_NUMBER) accrual=0 l_length_of_service = 0 carryover=0 i=1 l_start_date = '4712/12/31' (date) l_fte= 0 l_column= 'X' l_curr_fte = 0 l_plan_name = 'X' l_plan_type_UOM = 'X' l_ppg_value = 'X' l_purchased_hours = 0 l_Sell_hours = 0 l_column_bank = 'X' l_contract_type = 'X' l_loop_start_date = '4712/12/31' (date) asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_enroll_st_dt = IV_PLANENROLLMENTSTARTDATE l_enroll_ed_dt = IV_PLANENROLLMENTENDDATE BH_START_DATE = TO_DATE('01/01/'||to_char(to_number (substr(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,1,4))),'DD/MM/YYYY') l_eff_date(date) = GREATEST(BH_START_DATE,ACP_HIRE_DATE,l_enroll_st_dt) BH_END_DATE=TO_DATE('31/12/'||to_char(to_number (substr(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,1,4))),'DD/MM/YYYY') l_year_days= DAYS_BETWEEN(BH_END_DATE,BH_START_DATE)+1 l_debug = ess_log_write('l_year_days= '+ to_char(l_year_days)) if (l_year_days = 366 ) then l_year_days= 365 l_continous_date =least(PER_PERSON_ENTERPRISE_HIRE_DATE,PER_ASG_ATTRIBUTE_DATE1) l_debug = ess_log_write('Final Hire Date = '+ to_char(l_continous_date,'DD/MM/YYYY')) l_actual_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_start_date= GREATEST(BH_START_DATE,ACP_HIRE_DATE,l_enroll_st_dt) l_end_date =least(l_actual_termination_date,BH_END_DATE,l_enroll_ed_dt) l_loop_start_date = l_start_date l_loop_end_date = l_end_date i=0 accrual_1 = 0 j = 0 X_START_DATE= GREATEST(ACP_HIRE_DATE,IV_ACCRUALPERIODSTARTDATE,l_enroll_st_dt) X_END_DATE= LEAST(l_actual_termination_date,IV_ACCRUALPERIODENDDATE,l_enroll_ed_dt) t_no_of_days=MONTHS_BETWEEN(X_END_DATE,l_continous_date) l_length_of_service=(t_no_of_days/12) l_debug = ess_log_write('t_no_of_days=' || to_char(t_no_of_days)) l_loop_start_date = X_START_DATE l_loop_end_date = X_END_DATE i_year_days = 0 WHILE (l_loop_start_date <= l_loop_end_date) LOOP ( i_year_days = i_year_days+1 l_debug = ess_log_write('**********************System Date= '||to_char(l_loop_start_date,'dd/mon/yyyy')) l_sub_date = substr(to_char(l_loop_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) L_SYSTEM_DATE = ((l_dd)||'/'||(l_mm)||'/'||(l_yyyy)) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') l_plan_type_UOM = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_type_UOM) if ((l_plan_type_UOM = 'DAYS' )) then ( l_plan_type_UOM = l_plan_type_UOM ) else ( l_plan_type_UOM = 'Not Eligible' ) l_debug = ess_log_write('PPG Plan Type= '||l_plan_type_UOM) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT2') EXECUTE('XX_GET_HR_DATA') l_plan_name = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_name) if ((l_plan_name <> 'NO' and l_plan_name <> 'X' )) then ( l_plan_name = l_plan_name ) else ( l_plan_name = 'Not Eligible' ) l_debug = ess_log_write('PPG Plan Name= '||l_plan_name) L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'NO' SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT3') EXECUTE('XX_GET_HR_DATA') L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = GET_OUTPUT('X_OUTPUT_TEXT', L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG) if ((L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG <> 'NO')) then ( L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG ) else ( L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'NO' ) l_debug = ess_log_write('PPG Bank Holiday Deduction Flag= '||L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG) l_column = 'ACCURAL' l_entitled_days = to_number(GET_TABLE_VALUE('POD_ANNUAL_LEAVE_DAYS_PLAN_UDT' , l_column , l_plan_name,'0')) l_debug = ess_log_write('UDT - Entitled Days Factor= '||TO_CHAR(l_entitled_days)) L_FTE = 0 SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_FTE_VALUE') EXECUTE('XX_GET_HR_DATA') L_FTE = GET_OUTPUT('X_OUTPUT_NUMBER', L_FTE ) l_debug = ess_log_write('FTE= '||to_Char(L_FTE)) if(i_year_days<366) then accrual_1 = accrual_1 + (l_entitled_days * l_fte / l_year_days) l_debug = ess_log_write('accrual_1= '||TO_CHAR(accrual_1)) l_bank_holiday_days = 0 l_bank_holiday_days = 1 BANK_HOLIDAY_FLAG = 'EXCULDE' L_BANK_HOLIDAY_FLAG = 'BANK_HOLIDAY_FLAG' L_BANK_HOLIDAY_FLAG = (GET_TABLE_VALUE('POD_ANNUAL_LEAVE_DAYS_PLAN_UDT' , L_BANK_HOLIDAY_FLAG , l_plan_name)) l_debug = ess_log_write('L_BANK_HOLIDAY_FLAG= '||L_BANK_HOLIDAY_FLAG) BANK_HOLIDAY_FACTOR = 1 BANK_HOLIDAY_DAY_FACTOR = 1 L_BANK_HOLIDAY_FACTOR = to_number(GET_TABLE_VALUE('POD_ANNUAL_LEAVE_DAYS_PLAN_UDT' , 'BANK_HOLIDAY_FACTOR' , l_plan_name,'5')) L_BANK_HOLIDAY_FACTOR = L_BANK_HOLIDAY_FACTOR / 5 l_debug = ess_log_write('L_BANK_HOLIDAY_FACTOR= '||to_char(L_BANK_HOLIDAY_FACTOR)) L_P_DATE = To_char(l_loop_start_date,'YYYY/MM/DD') L_FLAG_BH = GET_VALUE_SET('POD_HCM_UK_BANK_HOLIDAY_VALUE','|=P_DATE='''||L_P_DATE||'''') IF( L_FLAG_BH = 'PH') then ( l_debug = ess_log_write('Bank Holiday Date= '||L_P_DATE) l_debug = ess_log_write('Bank Holiday Flag = '||L_FLAG_BH) ) IF( l_bank_holiday_days <> 0 and L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG ='YES' and L_FLAG_BH = 'PH' and L_BANK_HOLIDAY_FLAG = 'INCULDE') then ( ASG_Hours = l_bank_holiday_days adjustmentvalues[j]=(ASG_Hours) * l_fte * L_BANK_HOLIDAY_FACTOR * -1 adjustmentdates[j]=l_loop_start_date adjustmenttypes[j] = 'POD_HCM_BHR' j = j + 1 ) IF(l_bank_holiday_days <> 0 and L_FLAG_BH = 'PH' ) then ( ASG_Hours = l_bank_holiday_days adjustmentvalues[j]=(ASG_Hours) * L_BANK_HOLIDAY_FACTOR * l_fte adjustmentdates[j]=l_loop_start_date adjustmenttypes[j] = 'POD_HCM_BH' j = j + 1 ) l_loop_start_date = ADD_DAYS(l_loop_start_date,1) i=i+1 ) accrual = accrual_1 l_debug = ess_log_write('PPG Plan Name= '||l_plan_name) l_debug = ess_log_write('Periodic Accrual= '||to_Char(accrual_1)) return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes,carryOver",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "POD HCM Absence Annual Leave Accrual Plan for Hours",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'X' DEFAULT FOR PER_ASG_CREATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE_CODE IS ' ' DEFAULT FOR PER_ASG_ATTRIBUTE_DATE1 IS '4712/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS ' ' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 Inputs are IV_PLANENROLLMENTSTARTDATE(Date) , IV_PLANENROLLMENTENDDATE(Date), IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_CARRYOVER (number) l_debug = ess_log_write('************************ In Annual Leave Accrual FF*******************************') l_debug = ess_log_write('ASSIGNMENT NUMBER= '||PER_ASG_ASSIGNMENT_NUMBER) accrual=0 l_length_of_service = 0 carryover=0 i=1 l_start_date = '4712/12/31' (date) l_fte= 0 l_column= 'X' l_curr_fte = 0 l_plan_name = 'X' l_plan_type_UOM = 'X' l_ppg_value = 'X' l_purchased_hours = 0 l_Sell_hours = 0 l_column_bank = 'X' l_contract_type = 'X' l_loop_start_date = '4712/12/31' (date) asg_id = GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_enroll_st_dt = IV_PLANENROLLMENTSTARTDATE l_enroll_ed_dt = IV_PLANENROLLMENTENDDATE BH_START_DATE = TO_DATE('01/01/'||to_char(to_number (substr(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,1,4))),'DD/MM/YYYY') l_eff_date(date) = GREATEST(BH_START_DATE,ACP_HIRE_DATE,l_enroll_st_dt) BH_END_DATE=TO_DATE('31/12/'||to_char(to_number (substr(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,1,4))),'DD/MM/YYYY') l_year_days= DAYS_BETWEEN(BH_END_DATE,BH_START_DATE)+1 l_debug = ess_log_write('l_year_days = '+ to_char(l_year_days)) if (l_year_days = 366 ) then l_year_days= 365 l_continous_date =least(PER_PERSON_ENTERPRISE_HIRE_DATE,PER_ASG_ATTRIBUTE_DATE1) l_debug = ess_log_write('Final Hire Date = '+ to_char(l_continous_date,'DD/MM/YYYY')) l_actual_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_start_date= GREATEST(BH_START_DATE,ACP_HIRE_DATE,l_enroll_st_dt) l_end_date =least(l_actual_termination_date,BH_END_DATE,l_enroll_ed_dt) l_loop_start_date = l_start_date l_loop_end_date = l_end_date i=0 accrual_1 = 0 j = 0 X_START_DATE= GREATEST(ACP_HIRE_DATE,IV_ACCRUALPERIODSTARTDATE,l_enroll_st_dt) X_END_DATE= LEAST(l_actual_termination_date,IV_ACCRUALPERIODENDDATE,l_enroll_ed_dt) t_no_of_days=MONTHS_BETWEEN(X_END_DATE,l_continous_date) l_length_of_service=(t_no_of_days/12) l_debug = ess_log_write('t_no_of_days=' || to_char(t_no_of_days)) l_loop_start_date = X_START_DATE l_loop_end_date = X_END_DATE i_year_days = 0 WHILE (l_loop_start_date <= l_loop_end_date) LOOP ( l_debug = ess_log_write('************************ For Loop Start*******************************') i_year_days = i_year_days+1 l_debug = ess_log_write('**********************System Date= '||to_char(l_loop_start_date,'dd/mon/yyyy')) l_sub_date = substr(to_char(l_loop_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) L_SYSTEM_DATE = ((l_dd)||'/'||(l_mm)||'/'||(l_yyyy)) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT1') EXECUTE('XX_GET_HR_DATA') l_plan_type_UOM = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_type_UOM) if ((l_plan_type_UOM = 'HOURS' )) then ( l_plan_type_UOM = l_plan_type_UOM ) else ( l_plan_type_UOM = 'Not Eligible' ) l_debug = ess_log_write('PPG Plan Type= '||l_plan_type_UOM) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT2') EXECUTE('XX_GET_HR_DATA') l_plan_name = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_name) if (l_plan_name <> 'X' ) then ( l_plan_name = l_plan_name ) else ( l_plan_name = 'No Plan Selected' ) l_debug = ess_log_write('PPG Plan Name= '||l_plan_name) L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'NO' SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT3') EXECUTE('XX_GET_HR_DATA') L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = GET_OUTPUT('X_OUTPUT_TEXT', L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG) if ((L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG <> 'NO')) then ( L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG ) else ( L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'NO' ) l_debug = ess_log_write('PPG Bank Holiday Deduction Flag= '||L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG) L_FTE = 0 SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_FTE_VALUE') EXECUTE('XX_GET_HR_DATA') L_FTE = GET_OUTPUT('X_OUTPUT_NUMBER', L_FTE ) l_debug = ess_log_write('ASG FTE= '||to_Char(L_FTE)) L_PER_ASG_WORKING_HOURS = 0 l_bank_holiday_hours = 0.2 l_Accural_hours = 0 l_column_accural = 'ACCURAL' l_Accural_hours = to_number(GET_TABLE_VALUE('POD_ANNUAL_LEAVE_HOURS_PLAN_UDT' , l_column_accural , l_plan_name,'0')) l_debug = ess_log_write('UDT - Entitled Hours = '|| TO_CHAR(l_Accural_hours)) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_loop_start_date) SET_INPUT ('mode', 'PER_ASG_NORMAL_HOURS') EXECUTE('XX_GET_HR_DATA') L_PER_ASG_WORKING_HOURS = GET_OUTPUT('X_OUTPUT_NUMBER', L_PER_ASG_WORKING_HOURS ) l_debug = ess_log_write('L_PER_ASG_WORKING_HOURS = '|| TO_CHAR(L_PER_ASG_WORKING_HOURS)) l_bank_holiday_hours = L_PER_ASG_WORKING_HOURS * l_bank_holiday_hours l_entitled_hrs = L_PER_ASG_WORKING_HOURS * l_Accural_hours L_PER_ASG_WORKING_HOURS = L_PER_ASG_WORKING_HOURS / 5 l_debug = ess_log_write('Calculated - Entitled Hours= '||TO_CHAR(l_entitled_hrs)) l_debug = ess_log_write('L_PER_ASG_WORKING_HOURS = '|| TO_CHAR(L_PER_ASG_WORKING_HOURS)) l_debug = ess_log_write('l_bank_holiday_hours = '|| TO_CHAR(l_bank_holiday_hours)) if(i_year_days<367) then accrual_1 = accrual_1 + (l_entitled_hrs / l_year_days) l_debug = ess_log_write('accrual_1= '||TO_CHAR(accrual_1)) L_P_DATE = To_char(l_loop_start_date,'YYYY/MM/DD') L_FLAG_BH = GET_VALUE_SET('POD_HCM_UK_BANK_HOLIDAY_VALUE','|=P_DATE='''||L_P_DATE||'''') IF( L_FLAG_BH = 'PH') then ( l_debug = ess_log_write('Bank Holiday Date= '||L_P_DATE) l_debug = ess_log_write('Bank Holiday Flag = '||L_FLAG_BH) ) IF( l_bank_holiday_hours <> 0 and L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG ='YES' and L_FLAG_BH = 'PH') then ( ASG_Hours = l_bank_holiday_hours adjustmentvalues[j]=(ASG_Hours) * -1 adjustmentdates[j]=l_loop_start_date adjustmenttypes[j] = 'POD_HCM_BHR' j = j + 1 ) IF(l_bank_holiday_hours <> 0 and L_FLAG_BH = 'PH') then ( ASG_Hours = l_bank_holiday_hours adjustmentvalues[j]=(ASG_Hours) adjustmentdates[j]=l_loop_start_date adjustmenttypes[j] = 'POD_HCM_BH' j = j + 1 ) l_loop_start_date = ADD_DAYS(l_loop_start_date,1) i=i+1 l_debug = ess_log_write('************************ For Loop End*******************************') ) accrual = accrual_1 l_debug = ess_log_write('PPG Plan Name= '||l_plan_name) l_debug = ess_log_write('Accrual = '||to_Char(accrual)) l_debug = ess_log_write('Periodic Accrual = '||to_Char(accrual_1)) return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes,carryOver",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SAC Annual Leave",
        "answer": "ALIAS PER_ASG_EIT_ALL_AEI_INFORMATION_CATEGORY AS ADJ_CATG ALIAS PER_ASG_EIT_ALL_AEI_INFORMATION_DATE1 AS ADJ_DATE ALIAS PER_ASG_EIT_ALL_AEI_INFORMATION_NUMBER1 AS ADJ_AMOUNT DEFAULT_DATA_VALUE FOR PER_ASG_EIT_ALL_AEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_ASG_EIT_ALL_AEI_INFORMATION_DATE1 IS '01-JAN-1951' (date) DEFAULT_DATA_VALUE FOR PER_ASG_EIT_ALL_AEI_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XXX' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_AVAILABILITY_WORKDAY_PATTERN is 'XXX' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' INPUTS ARE IV_ACCRUALPERIODSTARTDATE (date) , IV_ACCRUALPERIODENDDATE (date) , IV_PLANENROLLMENTSTARTDATE (date) , IV_PLANENROLLMENTENDDATE (date) l_length_of_service = 0 t_no_of_days = 0 LOS = 0 LOS_MY = 0 LOS_FLOATING = 0 assignment_start_date = '1951/01/01 00:00:00' (date) Accrual = 0 FTE_Accrual = 0 FTE_Accrual_final = 0 l_fte = 0 months_midyear = 0 ValueLOS = ' ' a=0 b=0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_assignment_id = TO_CHAR(PER_ASG_ASSIGNMENT_ID) l_debug = ess_log_write('Person ID = '||TO_CHAR(l_person_id)) l_debug = ess_log_write('Assignment ID = '||(l_assignment_id)) l_debug = ess_log_write('User person type = '||(PER_ASG_PEOPLE_GROUP_SEGMENT2)) l_debug = ess_log_write('Assignment NO = '||(PER_ASG_ASSIGNMENT_NUMBER )) l_debug = ess_log_write('Assignment availability = '||(PER_ASG_AVAILABILITY_WORKDAY_PATTERN)) IF TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231' THEN (BH_START_DATE = TO_DATE('01/01/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = TO_DATE('31/12/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY')) ELSE (BH_START_DATE = TO_DATE('01/01/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = TO_DATE('31/12/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = ADD_YEARS(BH_END_DATE,1) l_debug = ess_log_write('****Termination found****') l_debug = ess_log_write('Termination Date = '||TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'DD/MM/YYYY'))) l_debug = ess_log_write('BH_START_DATE = '||TO_CHAR(BH_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('BH_END_DATE = '||TO_CHAR(BH_END_DATE,'DD/MM/YYYY')) IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN Hire_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ELSE Hire_date = ACP_HIRE_DATE l_debug = ess_log_write('PER_ASG_REL_ORIGINAL_DATE_OF_HIRE = '||TO_CHAR(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD/MM/YYYY')) l_debug = ess_log_write('ACP_HIRE_DATE = '||TO_CHAR(ACP_HIRE_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('Hire_date = '||TO_CHAR(Hire_date,'DD/MM/YYYY')) l_debug = ess_log_write('Continuous Service Start Date = '||TO_CHAR(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('Adjusted Service Start Date = '||TO_CHAR(PER_ASG_REL_ATTRIBUTE_DATE4,'DD/MM/YYYY')) IF PER_ASG_REL_ATTRIBUTE_DATE4 WAS NOT DEFAULTED THEN l_start_date = PER_ASG_REL_ATTRIBUTE_DATE4 ELSE l_start_date = Hire_date l_debug = ess_log_write('Start date = '||TO_CHAR(l_start_date,'DD/MM/YYYY')) t_no_of_days = DAYS_BETWEEN(BH_START_DATE,l_start_date) l_debug = ess_log_write('Total number of days = '||TO_CHAR(t_no_of_days)) IF t_no_of_days > 0 THEN l_length_of_service = ROUND((t_no_of_days/365),2) ELSE l_length_of_service = 0 l_debug = ess_log_write('Length of service = '||TO_CHAR(l_length_of_service)) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Chief Officials' THEN LOS = TO_NUMBER(GET_TABLE_VALUE('SAC_ANNUAL_LEAVE_BALANCE','CO',TO_CHAR(l_length_of_service),'01')) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Permanent 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Temporary 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Modern Apprentice 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Payroll Bureau \u2013 35 hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Evolve Programme \u2013 35 hrs' THEN LOS = TO_NUMBER(GET_TABLE_VALUE('SAC_ANNUAL_LEAVE_BALANCE','GOV',TO_CHAR(l_length_of_service),'01')) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Permanent 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Temporary 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Craft Operatives' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Modern Apprentice 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Craft Apprentices' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Evolve Programme \u2013 37 hrs' THEN LOS = TO_NUMBER(GET_TABLE_VALUE('SAC_ANNUAL_LEAVE_BALANCE','GOV37',TO_CHAR(l_length_of_service),'01')) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Quality Improvement' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Psychologists' THEN LOS = TO_NUMBER(GET_TABLE_VALUE('SAC_ANNUAL_LEAVE_BALANCE','QIO',TO_CHAR(l_length_of_service),'01')) LOS_FLOATING = PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('Floating hours = '||TO_CHAR(LOS_FLOATING)) l_debug = ess_log_write('Length of service = '||TO_CHAR(l_length_of_service)) l_debug = ess_log_write('Entitlement = '||TO_CHAR(LOS)||' hours') IF Hire_date > BH_START_DATE THEN (l_end_date_t = BH_END_DATE New_bh_end_date = Add_days(l_end_date_t,1) months_midyear = floor(months_between (New_bh_end_date,Hire_date)) a=1 l_debug = ess_log_write('****New starter****') IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Permanent 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Temporary 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Craft Operatives' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Modern Apprentice 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Craft Apprentices' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Evolve Programme \u2013 37 hrs' THEN LOS_MY = ((((LOS/7.4)/260.7)*1929.18)/12)*months_midyear LOS_FLOATING = (PER_ASG_ATTRIBUTE_NUMBER1*(months_midyear/12)) l_debug = ess_log_write('Floating hours = '||TO_CHAR(LOS_FLOATING)) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Permanent 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Temporary 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Modern Apprentice 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Payroll Bureau \u2013 35 hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Evolve Programme \u2013 35 hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Quality Improvement' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Psychologists' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Chief Officials' THEN LOS_MY = ((((LOS/7)/260.7)*1824.9)/12)*months_midyear LOS_FLOATING = (PER_ASG_ATTRIBUTE_NUMBER1*(months_midyear/12)) l_debug = ess_log_write('l_end_date_t = '||TO_CHAR(l_end_date_t)) l_debug = ess_log_write('New_bh_end_date = '||TO_CHAR(New_bh_end_date)) l_debug = ess_log_write('Complete months = '||TO_CHAR(months_midyear)) l_debug = ess_log_write('Entitlement = '||TO_CHAR(LOS_MY))) l_debug = ess_log_write('Floating Mid Starter = '||TO_CHAR(LOS_FLOATING)) IF BH_START_DATE < PER_PER_ENTERPRISE_TERMINATION_DATE AND PER_PER_ENTERPRISE_TERMINATION_DATE < BH_END_DATE THEN (l_end_date_t = PER_PER_ENTERPRISE_TERMINATION_DATE New_bh_end_date = ADD_DAYS(l_end_date_t,1) b=1 CURRENT_START_DATE = TO_DATE('01/01/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') months_midyear = floor(months_between (New_bh_end_date,CURRENT_START_DATE)) l_days_term = days_between (New_bh_end_date,l_start_date) l_debug = ess_log_write('****Mid-year Leaver****') IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Permanent 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Temporary 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Craft Operatives' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Modern Apprentice 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Craft Apprentices' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Evolve Programme \u2013 37 hrs' THEN LOS_MY = ((((LOS/7.4)/260.7)*1929.18)/12)*months_midyear LOS_FLOATING = (PER_ASG_ATTRIBUTE_NUMBER1*(months_midyear/12)) l_debug = ess_log_write('Floating hours = '||TO_CHAR(LOS_FLOATING)) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Permanent 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Temporary 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Modern Apprentice 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Payroll Bureau \u2013 35 hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Evolve Programme \u2013 35 hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Quality Improvement' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Psychologists' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Chief Officials' THEN LOS_MY = ((((LOS/7)/260.7)*1824.9)/12)*months_midyear LOS_FLOATING = (PER_ASG_ATTRIBUTE_NUMBER1*(months_midyear/12)) l_debug = ess_log_write('CURRENT_START_DATE = '||TO_CHAR(CURRENT_START_DATE)) l_debug = ess_log_write('l_end_date_t = '||TO_CHAR(l_end_date_t)) l_debug = ess_log_write('New_bh_end_date = '||TO_CHAR(New_bh_end_date)) l_debug = ess_log_write('Complete months = '||TO_CHAR(months_midyear)) l_debug = ess_log_write('Entitlement = '||TO_CHAR(LOS_MY))) l_debug = ess_log_write('Floating Mid Leaver= '||TO_CHAR(LOS_FLOATING)) assignment_start_date = to_date(GET_VALUE_SET('SAC_ABS_LEAST_DATE','|=P_ASSIGNMENT_ID=' || (l_assignment_id))) l_debug = ess_log_write('Assignment start date = '||TO_CHAR(assignment_start_date,'DD/MM/YYYY')) IF assignment_start_date > BH_START_DATE THEN (l_start_date = assignment_start_date l_debug = ess_log_write('Hence BH_START_DATE updated to = '||TO_CHAR(l_start_date,'DD/MM/YYYY'))) ELSE l_start_date = BH_START_DATE WHILE (1=1) LOOP (CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) (l_debug = ess_log_write('****In Loop****') l_fte = PER_ASG_FTE_VALUE l_fte_final = round(l_fte,4) l_debug = ess_log_write('FTE = '||TO_CHAR(l_fte_final)) l_end_date = LEAST(PER_ASG_EFFECTIVE_END_DATE,BH_END_DATE) l_days = DAYS_BETWEEN(l_end_date,l_start_date) l_days = l_days+1 l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('BH_END_DATE = '||TO_CHAR(BH_END_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_days (DAYS_BETWEEN(l_end_date,l_start_date)) = '||TO_CHAR(l_days)) LOS = LOS LOS_MY= LOS_MY l_debug = ess_log_write('Full Entitlement (Annual+Floating) = '||TO_CHAR(LOS)) l_debug = ess_log_write('Mid Year Entitlement (Annual+Floating) = '||TO_CHAR(LOS_MY)) IF a=1 OR b=1 THEN Accrual = (LOS_MY + LOS_FLOATING)*l_fte_final ELSE (FTE_Accrual = (LOS + LOS_FLOATING) *l_fte_final*((l_days)/365) FTE_accrual_final = ROUND(FTE_Accrual,2) l_debug = ess_log_write('FTE_accrual_final = '||TO_CHAR(FTE_accrual_final)) l_debug = ess_log_write('SMALL_accrual = '||TO_CHAR(accrual)) Accrual = accrual+FTE_accrual_final) l_debug = ess_log_write('Accrual = '||TO_CHAR(accrual)) l_debug = ess_log_write('New Starter (1=Y; 0=N) = '||TO_CHAR(a)) l_debug = ess_log_write('Leaver (1=Y; 0=N) = '||TO_CHAR(b)) FTE_Accrual = 0 FTE_accrual_final = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD') = '47121231' OR (PER_ASG_EFFECTIVE_END_DATE >= BH_END_DATE) OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) THEN (l_debug = ess_log_write('Loop Ended') EXIT) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1))) accrual = ROUND(accrual,2) ldStartDate = GREATEST (IV_ACCRUALPERIODSTARTDATE, IV_PLANENROLLMENTSTARTDATE) ldEndDate = LEAST (IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) adjustmentvalues = EMPTY_NUMBER_NUMBER adjustmentdates = EMPTY_DATE_NUMBER adjustmenttypes = EMPTY_TEXT_NUMBER i = ADJ_CATG.FIRST(-1234) k = 1 WHILE ADJ_CATG.EXISTS(i) LOOP ( IF ADJ_CATG[i] = 'Annual Leave - Adjust balance' AND IS_DATE_BETWEEN(ADJ_DATE[i], ldStartDate, ldEndDate) = 1 THEN ( adjustmentvalues[k] = ADJ_AMOUNT[i] adjustmentdates [k] = ADJ_DATE[i] adjustmenttypes [k] = 'MGR_ADJUST' k = k + 1 ) i = ADJ_CATG.NEXT (i, -1234) ) return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "SAC Annual Leave",
        "answer": "ALIAS PER_ASG_EIT_ALL_AEI_INFORMATION_CATEGORY AS ADJ_CATG ALIAS PER_ASG_EIT_ALL_AEI_INFORMATION_DATE1 AS ADJ_DATE ALIAS PER_ASG_EIT_ALL_AEI_INFORMATION_NUMBER1 AS ADJ_AMOUNT DEFAULT_DATA_VALUE FOR PER_ASG_EIT_ALL_AEI_INFORMATION_CATEGORY IS 'NULL' DEFAULT_DATA_VALUE FOR PER_ASG_EIT_ALL_AEI_INFORMATION_DATE1 IS '01-JAN-1951' (date) DEFAULT_DATA_VALUE FOR PER_ASG_EIT_ALL_AEI_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE4 IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XXX' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_AVAILABILITY_WORKDAY_PATTERN is 'XXX' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'NULL' DEFAULT FOR ACP_ENROLLMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_ENROLLMENT_START_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUALPERIODSTARTDATE (date) , IV_ACCRUALPERIODENDDATE (date) , IV_PLANENROLLMENTSTARTDATE (date) , IV_PLANENROLLMENTENDDATE (date) l_length_of_service = 0 t_no_of_days = 0 LOS = 0 LOS_MY = 0 LOS_FLOATING = 0 assignment_start_date = '1951/01/01 00:00:00' (date) Accrual = 0 FTE_Accrual = 0 FTE_Accrual_final = 0 l_fte = 0 months_midyear = 0 ValueLOS = ' ' a=0 b=0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_assignment_id = TO_CHAR(PER_ASG_ASSIGNMENT_ID) l_debug = ess_log_write('Person ID = '||TO_CHAR(l_person_id)) l_debug = ess_log_write('Assignment ID = '||(l_assignment_id)) l_debug = ess_log_write('User person type = '||(PER_ASG_PEOPLE_GROUP_SEGMENT2)) l_debug = ess_log_write('Assignment NO = '||(PER_ASG_ASSIGNMENT_NUMBER )) l_debug = ess_log_write('Assignment availability = '||(PER_ASG_AVAILABILITY_WORKDAY_PATTERN)) IF TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'YYYYMMDD')='47121231' THEN (BH_START_DATE = TO_DATE('01/01/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = TO_DATE('31/12/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY')) ELSE (BH_START_DATE = TO_DATE('01/01/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = TO_DATE('31/12/'||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY'),'DD/MM/YYYY') BH_END_DATE = ADD_YEARS(BH_END_DATE,1) l_debug = ess_log_write('****Termination found****') l_debug = ess_log_write('Termination Date = '||TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE,'DD/MM/YYYY'))) l_debug = ess_log_write('BH_START_DATE = '||TO_CHAR(BH_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('BH_END_DATE = '||TO_CHAR(BH_END_DATE,'DD/MM/YYYY')) IF ((PER_ASG_REL_ORIGINAL_DATE_OF_HIRE WAS NOT DEFAULTED) AND (PER_ASG_REL_ORIGINAL_DATE_OF_HIRE < ACP_HIRE_DATE)) THEN Hire_date = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE ELSE Hire_date = ACP_HIRE_DATE l_debug = ess_log_write('PER_ASG_REL_ORIGINAL_DATE_OF_HIRE = '||TO_CHAR(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD/MM/YYYY')) l_debug = ess_log_write('ACP_HIRE_DATE = '||TO_CHAR(ACP_HIRE_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('Hire_date = '||TO_CHAR(Hire_date,'DD/MM/YYYY')) l_debug = ess_log_write('Continuous Service Start Date = '||TO_CHAR(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('Adjusted Service Start Date = '||TO_CHAR(PER_ASG_REL_ATTRIBUTE_DATE4,'DD/MM/YYYY')) IF PER_ASG_REL_ATTRIBUTE_DATE4 WAS NOT DEFAULTED THEN l_start_date = PER_ASG_REL_ATTRIBUTE_DATE4 ELSE l_start_date = Hire_date l_debug = ess_log_write('Start date = '||TO_CHAR(l_start_date,'DD/MM/YYYY')) t_no_of_days = DAYS_BETWEEN(BH_START_DATE,l_start_date) l_debug = ess_log_write('Total number of days = '||TO_CHAR(t_no_of_days)) IF t_no_of_days > 0 THEN l_length_of_service = ROUND((t_no_of_days/365),2) ELSE l_length_of_service = 0 l_debug = ess_log_write('Length of service = '||TO_CHAR(l_length_of_service)) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Chief Officials' THEN LOS = TO_NUMBER(GET_TABLE_VALUE('SAC_ANNUAL_LEAVE_BALANCE','CO',TO_CHAR(l_length_of_service),'01')) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Permanent 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Temporary 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Modern Apprentice 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 35hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Payroll Bureau \u2013 35 hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 LIKE 'Evolve%Programme%35%' THEN LOS = TO_NUMBER(GET_TABLE_VALUE('SAC_ANNUAL_LEAVE_BALANCE','GOV',TO_CHAR(l_length_of_service),'01')) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Permanent 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'LGE - Temporary 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Craft Operatives' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Modern Apprentice 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Craft Apprentices' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Supported Employment - 37hrs' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 LIKE 'Evolve%Programme%37%' THEN LOS = TO_NUMBER(GET_TABLE_VALUE('SAC_ANNUAL_LEAVE_BALANCE','GOV37',TO_CHAR(l_length_of_service),'01')) IF PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Quality Improvement' OR PER_ASG_PEOPLE_GROUP_SEGMENT2 = 'Psychologists' THEN LOS = TO_NUMBER(GET_TABLE_VALUE('SAC_ANNUAL_LEAVE_BALANCE','QIO',TO_CHAR(l_length_of_service),'01')) LOS_FLOATING = PER_ASG_ATTRIBUTE_NUMBER1 l_debug = ess_log_write('Floating hours = '||TO_CHAR(LOS_FLOATING)) l_debug = ess_log_write('Length of service = '||TO_CHAR(l_length_of_service)) l_debug = ess_log_write('Entitlement = '||TO_CHAR(LOS)||' hours') IF Hire_date > BH_START_DATE OR IV_PLANENROLLMENTSTARTDATE > BH_START_DATE THEN (l_end_date_t = BH_END_DATE New_bh_end_date = Add_days(l_end_date_t,1) months_midyear = floor(months_between (New_bh_end_date,Hire_date)) a=1 l_debug = ess_log_write('****New starter****') ) IF (BH_START_DATE < PER_PER_ENTERPRISE_TERMINATION_DATE AND PER_PER_ENTERPRISE_TERMINATION_DATE < BH_END_DATE) OR IV_PLANENROLLMENTENDDATE < BH_END_DATE THEN (l_end_date_t = PER_PER_ENTERPRISE_TERMINATION_DATE New_bh_end_date = ADD_DAYS(l_end_date_t,1) b=1 ) assignment_start_date = to_date(GET_VALUE_SET('SAC_ABS_LEAST_DATE','|=P_ASSIGNMENT_ID=' || (l_assignment_id))) l_debug = ess_log_write('Assignment start date = '||TO_CHAR(assignment_start_date,'DD/MM/YYYY')) IF assignment_start_date > BH_START_DATE THEN (l_start_date = assignment_start_date l_debug = ess_log_write('Hence BH_START_DATE updated to = '||TO_CHAR(l_start_date,'DD/MM/YYYY'))) ELSE l_start_date = BH_START_DATE WHILE (1=1) LOOP (CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) (l_debug = ess_log_write('****In Loop****') l_fte = PER_ASG_FTE_VALUE l_fte_final = round(l_fte,4) l_debug = ess_log_write('FTE = '||TO_CHAR(l_fte_final)) l_end_date = LEAST(PER_ASG_EFFECTIVE_END_DATE,BH_END_DATE) l_days = DAYS_BETWEEN(l_end_date,l_start_date) l_days = l_days+1 l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('BH_END_DATE = '||TO_CHAR(BH_END_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_days (DAYS_BETWEEN(l_end_date,l_start_date)) = '||TO_CHAR(l_days)) IF a=1 THEN ( no_of_days = DAYS_BETWEEN(BH_END_DATE,BH_START_DATE)+1 prorate_days = DAYS_BETWEEN(BH_END_DATE,IV_PLANENROLLMENTSTARTDATE)+1 LOS_MY= ((LOS + LOS_FLOATING)/365)*no_of_days LOS_MY= (LOS_MY/no_of_days)*prorate_days ) ELSE IF b=1 THEN ( no_of_days = DAYS_BETWEEN(BH_END_DATE,BH_START_DATE)+1 l_start_day_new = GREATEST (BH_START_DATE, IV_PLANENROLLMENTSTARTDATE) prorate_days = DAYS_BETWEEN(IV_PLANENROLLMENTENDDATE,l_start_day_new)+1 LOS_MY= ((LOS + LOS_FLOATING)/365)*no_of_days LOS_MY= (LOS_MY/no_of_days)*prorate_days ) LOS = LOS l_debug = ess_log_write('Full Entitlement (Annual+Floating) = '||TO_CHAR(LOS)) l_debug = ess_log_write('Mid Year Entitlement (Annual+Floating) = '||TO_CHAR(LOS_MY)) IF a=1 OR b=1 THEN Accrual = (LOS_MY)*l_fte_final ELSE (FTE_Accrual = (LOS + LOS_FLOATING) *l_fte_final*((l_days)/365) FTE_accrual_final = ROUND(FTE_Accrual,2) l_debug = ess_log_write('FTE_accrual_final = '||TO_CHAR(FTE_accrual_final)) l_debug = ess_log_write('SMALL_accrual = '||TO_CHAR(accrual)) Accrual = accrual+FTE_accrual_final) l_debug = ess_log_write('Accrual = '||TO_CHAR(accrual)) l_debug = ess_log_write('New Starter (1=Y; 0=N) = '||TO_CHAR(a)) l_debug = ess_log_write('Leaver (1=Y; 0=N) = '||TO_CHAR(b)) FTE_Accrual = 0 FTE_accrual_final = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD') = '47121231' OR (PER_ASG_EFFECTIVE_END_DATE >= BH_END_DATE) OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) THEN (l_debug = ess_log_write('Loop Ended') EXIT) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1))) accrual = ROUND(accrual,2) ldStartDate = GREATEST (IV_ACCRUALPERIODSTARTDATE, IV_PLANENROLLMENTSTARTDATE) ldEndDate = LEAST (IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) adjustmentvalues = EMPTY_NUMBER_NUMBER adjustmentdates = EMPTY_DATE_NUMBER adjustmenttypes = EMPTY_TEXT_NUMBER i = ADJ_CATG.FIRST(-1234) k = 1 WHILE ADJ_CATG.EXISTS(i) LOOP ( IF ADJ_CATG[i] = 'Annual Leave - Adjust balance' AND IS_DATE_BETWEEN(ADJ_DATE[i], ldStartDate, ldEndDate) = 1 THEN ( adjustmentvalues[k] = ADJ_AMOUNT[i] adjustmentdates [k] = ADJ_DATE[i] adjustmenttypes [k] = 'MGR_ADJUST' k = k + 1 ) i = ADJ_CATG.NEXT (i, -1234) ) return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "South Ayrshire Council"
    },
    {
        "FORMULA_NAME": "SCC Fire A Annual Leave Matrix FF",
        "answer": "DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME is 'Default' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT for adjustmentdates is EMPTY_TEXT_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT for adjustmentvalues is EMPTY_TEXT_NUMBER Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:' || to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:' || to_char(IV_ACCRUALPERIODENDDATE)) l_debug = ess_log_write('IV_CALEDARSTARTDATE:' || to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('IV_CALEDARENDDATE:' || to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:' || to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:' || to_char(IV_PLANENROLLMENTENDDATE)) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) if ( ACP_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( BH_START_DATE = IV_PLANENROLLMENTSTARTDATE ) BH_END_DATE = IV_ACCRUALPERIODENDDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || to_char(BH_END_DATE)) LOS = 0 accrual = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' || to_char(l_effective_date)) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:' || to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) IF (l_start_date > BH_END_DATE) THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE') EXIT ) l_debug = ess_log_write('PER_ASG_GRADE_NAME:' || PER_ASG_GRADE_NAME) Position_Name = UPPER(PER_ASG_GRADE_NAME) If (Position_Name != 'AREA MANAGER' and Position_Name != 'GROUP MANAGER' and Position_Name != 'STATION MANAGER' and Position_Name != 'WATCH MANAGER' and Position_Name != 'WATCH MANAGER NON OP' and Position_Name != 'CREW MANAGER' and Position_Name != 'FIREFIGHTER') Then ( Position_Name = 'DEFAULT' ) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_FIRE_ANNUAL_LEAVE_ENTITLEMENT', 'SCALE_A', Position_Name, l_start_date)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:' || to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date = PER_ASG_EFFECTIVE_END_DATE If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date = BH_END_DATE ) l_days_cal = (days_between(l_end_date, l_start_date) + 1) / 365 l_debug = ess_log_write('l_days_cal:' || TO_CHAR(l_days_cal)) l_debug = ess_log_write('l_start_date:' || TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date:' || TO_CHAR(l_end_date)) l_leap_year = '2020/02/29 00:00:00' (date) IF (l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days_cal = (days_between(l_end_date, l_start_date)+1)/366 ) Bit_Accrual = l_days_cal * LOS * l_fte accrual = accrual + Bit_Accrual Bit_Accrual = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = 47121231') EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) ) accrual = ROUND(accrual, 2) carryover = 0 return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SCC Annual Leave Accrual Matrix FF",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS * 2 if (Term = 'DEFAULT' or Term = 'LONG_SERVICE' or Term = 'SCALE_A' or Term = 'SCALE_B') then ( carryover = 0 ) if (Term = 'NHS_HOL') then ( carryover = PER_ASG_NORMAL_HOURS * 4 ) return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Jan",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS * 2 return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Jan",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = 0 return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Jan",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS * 4 return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Jan",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SCC Fire B Annual Leave Matrix FF",
        "answer": "DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME is 'Default' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT for adjustmentdates is EMPTY_TEXT_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT for adjustmentvalues is EMPTY_TEXT_NUMBER Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:' || to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:' || to_char(IV_ACCRUALPERIODENDDATE)) l_debug = ess_log_write('IV_CALEDARSTARTDATE:' || to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('IV_CALEDARENDDATE:' || to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:' || to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:' || to_char(IV_PLANENROLLMENTENDDATE)) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) if ( ACP_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( BH_START_DATE = IV_PLANENROLLMENTSTARTDATE ) BH_END_DATE = IV_ACCRUALPERIODENDDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || to_char(BH_END_DATE)) LOS = 0 accrual = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' || to_char(l_effective_date)) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:' || to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) IF (l_start_date > BH_END_DATE) THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE') EXIT ) l_debug = ess_log_write('PER_ASG_GRADE_NAME:' || PER_ASG_GRADE_NAME) Position_Name = UPPER(PER_ASG_GRADE_NAME) If (Position_Name != 'AREA MANAGER' and Position_Name != 'GROUP MANAGER' and Position_Name != 'STATION MANAGER' and Position_Name != 'WATCH MANAGER' and Position_Name != 'WATCH MANAGER NON OP' and Position_Name != 'CREW MANAGER' and Position_Name != 'FIREFIGHTER') Then ( Position_Name = 'DEFAULT' ) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_FIRE_ANNUAL_LEAVE_ENTITLEMENT', 'SCALE_B', Position_Name, l_start_date)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:' || to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date = PER_ASG_EFFECTIVE_END_DATE If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date = BH_END_DATE ) l_days_cal = (days_between(l_end_date, l_start_date) + 1) / 365 l_debug = ess_log_write('l_days_cal:' || TO_CHAR(l_days_cal)) l_debug = ess_log_write('l_start_date:' || TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date:' || TO_CHAR(l_end_date)) l_leap_year = '2020/02/29 00:00:00' (date) IF (l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days_cal = (days_between(l_end_date, l_start_date)+1)/366 ) Bit_Accrual = l_days_cal * LOS * l_fte accrual = accrual + Bit_Accrual Bit_Accrual = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = 47121231') EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) ) accrual = ROUND(accrual, 2) carryover = 0 return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "SCC Fire Long Service Annual Leave Matrix FF",
        "answer": "DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME is 'Default' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT for adjustmentdates is EMPTY_TEXT_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT for adjustmentvalues is EMPTY_TEXT_NUMBER Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:' || to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:' || to_char(IV_ACCRUALPERIODENDDATE)) l_debug = ess_log_write('IV_CALEDARSTARTDATE:' || to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('IV_CALEDARENDDATE:' || to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:' || to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:' || to_char(IV_PLANENROLLMENTENDDATE)) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) if ( ACP_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( BH_START_DATE = IV_PLANENROLLMENTSTARTDATE ) BH_END_DATE = IV_ACCRUALPERIODENDDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || to_char(BH_END_DATE)) LOS = 0 accrual = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' || to_char(l_effective_date)) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:' || to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) IF (l_start_date > BH_END_DATE) THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE') EXIT ) l_debug = ess_log_write('PER_ASG_GRADE_NAME:' || PER_ASG_GRADE_NAME) Position_Name = UPPER(PER_ASG_GRADE_NAME) If (Position_Name != 'AREA MANAGER' and Position_Name != 'GROUP MANAGER' and Position_Name != 'STATION MANAGER' and Position_Name != 'WATCH MANAGER' and Position_Name != 'WATCH MANAGER NON OP' and Position_Name != 'CREW MANAGER' and Position_Name != 'FIREFIGHTER') Then ( Position_Name = 'DEFAULT' ) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_FIRE_ANNUAL_LEAVE_ENTITLEMENT', 'LONG_SERVICE', Position_Name, l_start_date)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:' || to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date = PER_ASG_EFFECTIVE_END_DATE If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE) THEN ( l_end_date = BH_END_DATE ) l_days_cal = (days_between(l_end_date, l_start_date) + 1) / 365 l_debug = ess_log_write('l_days_cal:' || TO_CHAR(l_days_cal)) l_debug = ess_log_write('l_start_date:' || TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date:' || TO_CHAR(l_end_date)) l_leap_year = '2020/02/29 00:00:00' (date) IF (l_leap_year > l_start_date AND l_leap_year < l_end_date) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days_cal = (days_between(l_end_date, l_start_date)+1)/366 ) Bit_Accrual = l_days_cal * LOS * l_fte accrual = accrual + Bit_Accrual Bit_Accrual = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE = 47121231') EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) ) accrual = ROUND(accrual, 2) carryover = 0 return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Apr",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS * 52 if (Term = 'DEFAULT' or Term = 'LONG_SERVICE' or Term = 'SCALE_A' or Term = 'SCALE_B') then ( carryover = 0 ) if (Term = 'BMSDC_GENERAL' or Term = 'BMSDC_NPS_SO_M' or Term = 'BMSDC_SUDBURY' or Term = 'BMSDC_TRADES_TEAM') then ( carryover = 0 ) if (Term = 'ES_SENIOR_MANAGER' or Term = 'EAST_SUFFOLK_APRIL') then ( carryover = 0 ) if (Term = 'CATCH_22_AFC_HOLIDAY' or Term = 'CATCH_22_HOLIDAY' or Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' or Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' or Term = 'HEALTH_VISITOR_SCHOOL_NURSE' or Term = 'JNC_MANAGERS' or Term = 'SINGLE_STATUS' or Term = 'SOULBURY' or Term = 'ZERO_BANK_HOLIDAY_HOURS' or Term = 'NHS_HOL') then ( carryover = PER_ASG_NORMAL_HOURS * 52 ) return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Apr",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS * 4 if (Term = 'DEFAULT' or Term = 'LONG_SERVICE' or Term = 'SCALE_A' or Term = 'SCALE_B') then ( carryover = 0 ) if (Term = 'BMSDC_GENERAL' or Term = 'BMSDC_NPS_SO_M' or Term = 'BMSDC_SUDBURY' or Term = 'BMSDC_TRADES_TEAM') then ( carryover = 0 ) if (Term = 'ES_SENIOR_MANAGER' or Term = 'EAST_SUFFOLK_APRIL') then ( carryover = PER_ASG_NORMAL_HOURS * 4 ) if (Term = 'CATCH_22_AFC_HOLIDAY' or Term = 'CATCH_22_HOLIDAY' or Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' or Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' or Term = 'HEALTH_VISITOR_SCHOOL_NURSE' or Term = 'JNC_MANAGERS' or Term = 'SINGLE_STATUS' or Term = 'SOULBURY' or Term = 'ZERO_BANK_HOLIDAY_HOURS' or Term = 'NHS_HOL') then ( carryover = PER_ASG_NORMAL_HOURS * 4 ) return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Apr",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) else if ( collective_agreement = 'East Suffolk Services Ltd') then ( Term = 'EAST_SUFFOLK_SERVICES_LTD' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) If isnull(ln_entry_duration_d)='N' THEN ( ln_entry_duration_d = 0 ) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS * 2 if (Term = 'DEFAULT' or Term = 'LONG_SERVICE' or Term = 'SCALE_A' or Term = 'SCALE_B') then ( carryover = 0 ) if (Term = 'BMSDC_GENERAL' or Term = 'BMSDC_NPS_SO_M' or Term = 'BMSDC_SUDBURY' or Term = 'BMSDC_TRADES_TEAM') then ( carryover = PER_ASG_NORMAL_HOURS * 1 ) if (Term = 'ES_SENIOR_MANAGER' or Term = 'EAST_SUFFOLK_APRIL') then ( carryover = PER_ASG_NORMAL_HOURS * 1 ) if (Term = 'CATCH_22_AFC_HOLIDAY' or Term = 'CATCH_22_HOLIDAY' or Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' or Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' or Term = 'HEALTH_VISITOR_SCHOOL_NURSE' or Term = 'JNC_MANAGERS' or Term = 'SINGLE_STATUS' or Term = 'SOULBURY' or Term = 'ZERO_BANK_HOLIDAY_HOURS') then ( carryover = PER_ASG_NORMAL_HOURS * 2 ) if (Term = 'NHS_HOL') then ( carryover = PER_ASG_NORMAL_HOURS ) l_debug = ess_log_write('Amit Final accrual Return:' || to_char(accrual)) return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Jun",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = 0 return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Jun",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UUU Annual Leave Jun",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_TRM_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_PEOPLE_GROUP_GROUP_NAME IS 'PPG_NAME' DEFAULT FOR PER_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_PEOPLE_GROUP_ID IS 0 DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT3 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT4 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT5 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT6 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT7 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT8 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT9 IS 'XX' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT10 IS 'XX' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_TRM_CONTRACT_TYPE_MEANING is 'XX' DEFAULT FOR PER_TRM_CONTRACT_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_TRM__EFFECTIVE_END_DATE IS 'No Date' DEFAULT FOR PER_ASG_PEOPLE_GROUP_NAME IS 'FSAF' DEFAULT FOR PER_TRM_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ACP_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ATTRIBUTE_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ATTRIBUTE2 is 'x' DEFAULT FOR IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME is 'FSAF' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 Default for PER_ASG_EMPLOYMENT_CATEGORY_MEANING is 'XX' Default for PER_ASG_ATTRIBUTE3 is '52.143' Default for PER_ASG_ATTRIBUTE5 is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ACCRUAL_BAL_HR_ASSIGNMENT_ID IS 0 Inputs are IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE, IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE, IV_PLANENROLLMENTENDDATE l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE:'|| to_char(IV_ACCRUALPERIODSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE:'|| to_char(IV_ACCRUALPERIODENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARSTARTDATE:'|| to_char(IV_CALEDARSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_CALEDARENDDATE:'|| to_char(IV_CALEDARENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE:'|| to_char(IV_PLANENROLLMENTSTARTDATE,'DD/MM/YYYY')) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE:'|| to_char(IV_PLANENROLLMENTENDDATE,'DD/MM/YYYY')) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2 (Collective Agreement):' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3 (Annual_weeks):' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:' || PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) Annual_weeks = To_number(PER_ASG_ATTRIBUTE3) collective_agreement = 'x' collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) assignment_id = PER_ASG_ASSIGNMENT_ID l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) IF(TO_CHAR(PER_PER_ENTERPRISE_TERMINATION_DATE, 'YYYYMMDD') = '47121231') THEN ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE) ) ELSE ( l_debug = ess_log_write('Termination found') BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_PLANENROLLMENTENDDATE ) l_debug = ess_log_write('BH_START_DATE:' || TO_CHAR(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE:' || TO_CHAR(BH_END_DATE)) l_person_id=GET_CONTEXT(PERSON_ID,0) l_start_dt = ACP_HIRE_DATE if PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE was not defaulted then ( l_start_dt = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE:' + to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE,'DD/MM/YYYY')) l_debug = ess_log_write('l_start_dt:' || to_char(l_start_dt)) Full_accrual_again = 0 l_actual_termination_date = PER_TRM_REL_ACTUAL_TERMINATION_DATE l_trm_effective_end_date = PER_TRM__EFFECTIVE_END_DATE l_debug = ess_log_write('PER_TRM_REL_ACTUAL_TERMINATION_DATE:' || to_char(PER_TRM_REL_ACTUAL_TERMINATION_DATE)) l_debug = ess_log_write('PER_TRM__EFFECTIVE_END_DATE:' || PER_TRM__EFFECTIVE_END_DATE) assignment_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID LOS=0 NEG_BODY='XX' FTE=0 Add_hours=0 STandard_hours=PER_ASG_STANDARD_WORKING_HOURS accrual=0 l_length_of_service = 0 FT_LOS=0 T_C='XX' FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Term = 'DEFAULT' t_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_length_of_service=ROUND((t_no_of_days/365),4) l_debug = ess_log_write('l_length_of_service:' + to_char(l_length_of_service)) l_continous_date = l_start_dt l_debug = ess_log_write('l_continous_date:' || to_char(l_continous_date)) IF((l_length_of_service >= 1) And (l_length_of_service < 2)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,1) ) Else IF ((l_length_of_service >= 2) And (l_length_of_service < 3)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,2) ) Else IF ((l_length_of_service >= 3) And (l_length_of_service < 4)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,3) ) Else IF ((l_length_of_service >= 4) And (l_length_of_service < 5)) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,4) ) Else IF (l_length_of_service >= 5) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) Else IF (l_length_of_service >= 10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_debug = ess_log_write('l_effective_date:' + to_char(l_effective_date, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_TRM_CONTRACT_EFFECTIVE_END_DATE:' + to_char(PER_TRM_CONTRACT_EFFECTIVE_END_DATE, 'dd-mon-yyyy')) l_debug = ess_log_write('PER_ASG_CONTRACT_ATTRIBUTE_DATE1:' + to_char(PER_ASG_CONTRACT_ATTRIBUTE_DATE1, 'dd-mon-yyyy')) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=BH_START_DATE ) l_debug = ess_log_write('PER_PERSON_ENTERPRISE_HIRE_DATE:' || to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) l_debug = ess_log_write('ACP_HIRE_DATE:' || to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || PER_TRM__EFFECTIVE_END_DATE) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_ID:' || to_char(PER_ASG_ASSIGNMENT_ID)) WHILE (1=1) LOOP ( l_debug = ess_log_write('--------------------------------------------------------------------------------') l_debug = ess_log_write('inside top of the loop') l_debug = ess_log_write('l_start_date:' || to_char(l_start_date, 'DD/MM/YYYY')) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_effective_date = PER_ASG_EFFECTIVE_START_DATE ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'|| to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'|| to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write('PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME:'|| PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_debug = ess_log_write('PER_TRM_FTE_VALUE:' || to_char(PER_TRM_FTE_VALUE)) l_debug = ess_log_write('PER_ASG_ATTRIBUTE2:' || PER_ASG_ATTRIBUTE2) l_debug = ess_log_write('PER_ASG_ATTRIBUTE3:' || PER_ASG_ATTRIBUTE3) l_debug = ess_log_write('PER_ASG_ATTRIBUTE5:' || PER_ASG_ATTRIBUTE5) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:' || PER_ASG_EMPLOYMENT_CATEGORY_MEANING) IF (l_start_date > BH_END_DATE )THEN ( l_debug = ess_log_write('l_start_date > BH_END_DATE, exiting') EXIT ) collective_agreement = PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME if PER_ASG_COL_AGREEMENT_COLLECTIVE_AGREEMENT_NAME was defaulted then ( collective_agreement = 'DEFAULT' ) Term = 'DEFAULT' if ( collective_agreement = 'Catch 22 (TUPE)') then ( Term = 'CATCH_22_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 AFC (TUPE)') then ( Term = 'CATCH_22_AFC_HOLIDAY' ) else if ( collective_agreement = 'Catch 22 Shaftesbury (TUPE)') then ( Term = 'CATCH_22_SHAFTESBURY_HOLIDAY' ) else if ( collective_agreement = 'Joint National Council (JNC)') then ( Term = 'JNC_MANAGERS' ) else if ( collective_agreement = 'NHS (TUPE)' OR collective_agreement = 'NHS Agenda for Change (TUPE)' ) then ( Term = 'NHS_HOL' ) else if ( collective_agreement = 'Single Status' OR collective_agreement = 'Coroners (TUPE)' OR collective_agreement = 'Ipswich Borough Council (TUPE)' OR collective_agreement = 'Ormiston Children\u2019s Centre (TUPE)' OR collective_agreement = 'Schools Choice (TUPE)' OR collective_agreement = 'SCOPE (TUPE)') then ( Term = 'SINGLE_STATUS' ) else if ( collective_agreement = 'Soulbury') then ( Term = 'SOULBURY' ) else if ( collective_agreement = 'East Suffolk April') then ( Term = 'EAST_SUFFOLK_APRIL' ) else if ( collective_agreement = 'East Suffolk June') then ( Term = 'EAST_SUFFOLK_JUNE' ) else if ( collective_agreement = 'ES Building Operatives') then ( Term = 'ES_BUILDING_OPERATIVES' ) else if ( collective_agreement = 'ES Senior Manager') then ( Term = 'ES_SENIOR_MANAGER' ) if PER_ASG_ATTRIBUTE5 WAS not defaulted then ( if PER_ASG_ATTRIBUTE5 = 'Health Visitor & School Nurse' then ( Term = 'HEALTH_VISITOR_SCHOOL_NURSE' ) else if PER_ASG_ATTRIBUTE5 = 'CYP Social Worker Retention Scheme' then ( Term = 'CYP_SOCIAL_WORKER_RETENTION_SCHEME' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( Term = 'ZERO_BANK_HOLIDAY_HOURS' ) else if PER_ASG_ATTRIBUTE5 = 'Headteacher Leadership' then ( Term = 'SOULBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Babergh and Mid Suffolk' then ( Term = 'BMSDC_GENERAL' ) else if PER_ASG_ATTRIBUTE5 = 'Trades Team' then ( Term = 'BMSDC_TRADES_TEAM' ) else if PER_ASG_ATTRIBUTE5 = 'NPS up to SO & M Grades' then ( Term = 'BMSDC_NPS_SO_M' ) else if PER_ASG_ATTRIBUTE5 = 'Sudbury' then ( Term = 'BMSDC_SUDBURY' ) else if PER_ASG_ATTRIBUTE5 = 'Zero Entitlement' then ( Term = 'DEFAULT' ) ) l_debug = ess_log_write('Term:' || Term) l_debug = ess_log_write('PER_ASG_FTE_VALUE:' || to_char(PER_ASG_FTE_VALUE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_continous_date_after_addng_yrs:' || to_char(l_continous_date_after_addng_yrs)) LOS = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_debug = ess_log_write('LOS:' || to_char(LOS)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_los_before_ann),l_start_date)) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)) l_debug = ess_log_write('l_days_till_ann '|| to_char(l_days_till_ann)) l_debug = ess_log_write('Full_accrual_again '|| to_char(Full_accrual_again)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date)) l_debug = ess_log_write('LOS_PERMITABLE:' || to_char(LOS_PERMITABLE)) l_debug = ess_log_write('l_len_of_serv_before_ann:' || to_char(l_len_of_serv_before_ann)) l_debug = ess_log_write('l_length_of_service:' || to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 LOS=TO_NUMBER(GET_TABLE_VALUE('SCC_ANNUAL_LEAVE_ENTITLEMENT',Term,to_char(l_length_of_service),l_start_date)) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('PER_ASG_EFFECTIVE_START_DATE:'||to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('PER_ASG_EFFECTIVE_END_DATE:'||to_char(PER_ASG_EFFECTIVE_END_DATE)) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=BH_END_DATE ) If (PER_ASG_EFFECTIVE_END_DATE > BH_END_DATE ) THEN ( l_end_date=BH_END_DATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_days - '||TO_CHAR(l_days)) l_debug = ess_log_write('l_start_date - '||TO_CHAR(l_start_date)) l_debug = ess_log_write('l_end_date - '||TO_CHAR(l_end_date)) l_leap_year_a = '2016/02/29 00:00:00' (date) l_leap_year_b = '2020/02/29 00:00:00' (date) l_leap_year_c = '2024/02/29 00:00:00' (date) l_leap_year_d = '2028/02/29 00:00:00' (date) l_leap_year_e = '2032/02/29 00:00:00' (date) IF ( (l_leap_year_a > l_start_date AND l_leap_year_a < l_end_date) or (l_leap_year_b > l_start_date AND l_leap_year_b < l_end_date) or (l_leap_year_c > l_start_date AND l_leap_year_c < l_end_date) or (l_leap_year_d > l_start_date AND l_leap_year_d < l_end_date) or (l_leap_year_e > l_start_date AND l_leap_year_e < l_end_date) or 1=0 ) THEN ( l_debug = ess_log_write('JW Leap Year Adjustment' ) l_days = l_days - 1 ) l_days_final = l_days l_debug = ess_log_write('l_days_final:' || TO_CHAR(l_days_final)) l_debug = ess_log_write('l_fte:' || to_char(l_fte)) IF l_fte=1 THEN ( Full_accrual=LOS*l_days_final/365 l_debug = ess_log_write('Full_accrual:' || to_char(Full_accrual)) ) ELSE ( FTE_Accrual = LOS * l_days_final / 365 * L_Fte l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN ( COMP_DATE=BH_START_DATE ) ELSE ( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE:' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual:'||to_char(FTE_Accrual)) ) l_debug = ess_log_write('Bank_holiday:' || to_char(Bank_holiday)) if (Term = 'DEFAULT' or PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Casual' or PER_ASG_NORMAL_HOURS = 0) then ( accrual = accrual ) else if( Annual_weeks > 0 and Annual_weeks < 52.143) then ( accrual = accrual ) else ( accrual = accrual + Full_accrual + FTE_Accrual + Bank_holiday + Full_accrual_again ) Full_accrual = 0 FTE_Accrual = 0 Bank_holiday = 0 Full_accrual_again = 0 BH = 0 k = 0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE, 'YYYYMMDD') = '47121231' THEN ( l_debug = ess_log_write('PER_PER_ENTERPRISE_TERMINATION_DATE:' || to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE, 1) ) l_debug = ess_log_write('inside bottom of the loop') ) If (IV_PLANENROLLMENTSTARTDATE > BH_START_DATE) THEN ( l_start_date = IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date = BH_START_DATE ) l_no_period_days = DAYS_BETWEEN(LEAST(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTENDDATE), l_start_date) + 1 Holidays = 0 St_Dt = trunc(l_start_date) i = 1 jj= 1000 while (i <= l_no_period_days) LOOP ( L_P_DATE = To_char(St_Dt,'YYYY/MM/DD') L_flag = GET_VALUE_SET('SCC_BANK_HOLIDAY_VS','|=P_DATE='''||L_P_DATE||'''') if (L_flag = 'PH') then ( ASG_Hours = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = St_Dt, HR_ASSIGNMENT_ID = PER_ASG_ASSIGNMENT_ID) ( ASG_Hours = ROUND((PER_ASG_NORMAL_HOURS/5),2) l_debug = ess_log_write('PER_ASG_NORMAL_HOURS:' || to_char(PER_ASG_NORMAL_HOURS)) l_debug = ess_log_write('l_start_date:' || to_char(l_start_date,'DD/MM/YYYY')) ld_period_start_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T00:00:00.000Z') ld_period_end_date = to_date (to_char(St_Dt,'YYYY/MM/DD')||'T23:59:59.999Z') L_ASSIGNMENTID = to_char(PER_ASG_ASSIGNMENT_ID) L_P_DATE = To_char(St_Dt, 'YYYY/MM/DD') ln_entry_duration_d = to_Number(GET_VALUE_SET('SCC_EWS_HOURS_VS','|=P_DATE='''||L_P_DATE||''''||'|P_ASSIGNMENTID='''||L_ASSIGNMENTID||'''')) ln_entry_duration_d = ROUND(ln_entry_duration_d, 2) ) l_debug = ess_log_write('ln_entry_duration_d:' || to_char(ln_entry_duration_d)) adjustmentvalues[jj] = ln_entry_duration_d * -1 if PER_ASG_ATTRIBUTE5 = 'Zero Bank Holiday hours' then ( adjustmentvalues[jj] = 0 ) if ASG_Hours = 0 then ( adjustmentvalues[jj] = 0 ) adjustmentdates[jj] = St_Dt adjustmenttypes[jj] = 'BHR' adjustmentvalues[i] = ASG_Hours adjustmentdates[i] = St_Dt adjustmenttypes[i] = 'BH' ) i = i + 1 jj = jj + 1 St_Dt = ADD_DAYS(St_Dt, 1) ) accrual = ROUND(accrual, 2) carryover = PER_ASG_NORMAL_HOURS * 4 return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Dependent Exit reentry",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE4 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER4 is 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER5 is 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER6 is 0 INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_char(effdate,'YYYY') l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_char(effdate,'YYYY') accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 5000 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='C') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) if (PER_EXT_CONT_CONTACT_TYPE[J]='S' OR PER_EXT_CONT_CONTACT_TYPE[J]='P' OR PER_EXT_CONT_CONTACT_TYPE[J]='W' OR PER_EXT_CONT_CONTACT_TYPE[J]='H') then ( if (PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_count = l_count + 1 ) ) J=J+1 ) l_accrual_count = 0 l_accrual_count = l_infant_count + l_child_count + l_count l_total_count = 0 l_adult_ticket = 0 l_child_ticket = 0 l_infant_ticket = 0 j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Exit Re-entry') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) accrual = accrual*l_accrual_count l_total_count = l_adult_ticket + l_child_ticket + l_infant_ticket if(l_total_count <> 0) then ( accrual = accrual - l_total_count ) i=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( if(ANC_ABS_TYP_NAME = 'Annual Leave') then ( if(ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')then ( if(ANC_ABS_ENTRS_ATTRIBUTE4 = 'Both') then ( if(l_adult_ticket = 0) then ( l_adult_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER4 ) if(l_child_ticket = 0) then ( l_child_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER5 ) if(l_infant_ticket = 0) then ( l_infant_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER6 ) l_total_count = l_adult_ticket + l_child_ticket + l_infant_ticket start_year = to_char(ANC_ABS_ENTRS_START_DATE,'YYYY') temp= ESS_LOG_WRITE('ATTRIBUTE=' + ANC_ABS_ENTRS_ATTRIBUTE4) if(effyear = start_year) then ( if (accrual => 1) then ( accrual = accrual - l_total_count ) ) ) ) ) ) ) i=i+1 ) ) ) return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Employee Ticket Accrual FF",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE7 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_num(to_char(effdate,'YYYY')) accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 1 AND PER_ASG_ATTRIBUTE8='Y') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='C') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) if (PER_EXT_CONT_CONTACT_TYPE[J]='S') then ( if (PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_count = l_count + 1 ) ) J=J+1 ) j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Ticket Request') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) i=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( if(ANC_ABS_TYP_NAME = 'Annual Leave') then ( if(ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')then ( if(ANC_ABS_ENTRS_ATTRIBUTE7 = 'Employee only' OR ANC_ABS_ENTRS_ATTRIBUTE7 = 'Both') then ( start_year = to_num(to_char(ANC_ABS_ENTRS_START_DATE,'YYYY')) temp= ESS_LOG_WRITE('ATTRIBUTE=' + ANC_ABS_ENTRS_ATTRIBUTE7) if(effyear = start_year) then ( if (accrual => 1) then ( accrual = accrual - 1 ) ) ) ) ) ) ) i=i+1 ) ) ) return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Annual Ticket Accrual",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE7 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_num(to_char(effdate,'YYYY')) accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 1 AND PER_ASG_ATTRIBUTE8='Y') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = 'S2' OR PER_ASG_GRADE_NAME = 'S1' OR PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'I1' OR PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'M3' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'E1') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='C') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) if (PER_EXT_CONT_CONTACT_TYPE[J]='S') then ( if (PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_count = l_count + 1 ) ) J=J+1 ) j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Ticket Request') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) ) carryover =0 return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Adult ticket accrual",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE7 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER4 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 is 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER2 is 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER3 is 0 INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_char(effdate,'YYYY') l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_char(effdate,'YYYY') l_log = 'XX' accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 0 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 0 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 0 ) if (PER_ASG_GRADE_NAME = 'S2' OR PER_ASG_GRADE_NAME = 'S1' OR PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'I1' OR PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'M3' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'E1') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 0 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='Brother' OR PER_EXT_CONT_CONTACT_TYPE[J]='Daughter' OR PER_EXT_CONT_CONTACT_TYPE[J]='Sister' OR PER_EXT_CONT_CONTACT_TYPE[J]='Son' OR PER_EXT_CONT_CONTACT_TYPE[J]='Father' OR PER_EXT_CONT_CONTACT_TYPE[J]='Husband' OR PER_EXT_CONT_CONTACT_TYPE[J]='ORA_HRX_IN_LAW' OR PER_EXT_CONT_CONTACT_TYPE[J]='Mother' OR PER_EXT_CONT_CONTACT_TYPE[J]='S' OR PER_EXT_CONT_CONTACT_TYPE[J]='Wife') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Yes') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) J=J+1 ) l_log = ESS_LOG_WRITE('Accrual1: '||TO_CHAR(accrual)) l_log = ESS_LOG_WRITE('infant1: '||TO_CHAR(l_infant_count)) l_log = ESS_LOG_WRITE('child1: '||TO_CHAR(l_child_count)) l_log = ESS_LOG_WRITE('Count1: '||TO_CHAR(l_count)) l_accrual_count = 0 l_accrual_count = l_infant_count + l_child_count + l_count l_total_count = 0 l_adult_ticket = 0 l_child_ticket = 0 l_infant_ticket = 0 j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Ticket Request') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) accrual = accrual*l_accrual_count l_total_count = l_adult_ticket + l_child_ticket + l_infant_ticket if(l_total_count <> 0) then ( accrual = accrual - l_total_count ) l_log = ESS_LOG_WRITE('Accrual2: '||TO_CHAR(accrual)) l_log = ESS_LOG_WRITE('infant2: '||TO_CHAR(l_infant_count)) l_log = ESS_LOG_WRITE('child2: '||TO_CHAR(l_child_count)) l_log = ESS_LOG_WRITE('Count2: '||TO_CHAR(l_count)) i=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( if(ANC_ABS_TYP_NAME = 'Annual Leave') then ( if(ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')then ( if(ANC_ABS_ENTRS_ATTRIBUTE7 = 'Both') then ( if(l_adult_ticket = 0) then ( l_adult_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 ) if(l_child_ticket = 0) then ( l_child_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER2 ) if(l_infant_ticket = 0) then ( l_infant_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER3 ) l_total_count = l_adult_ticket + l_child_ticket + l_infant_ticket start_year = to_char(ANC_ABS_ENTRS_START_DATE,'YYYY') temp= ESS_LOG_WRITE('ATTRIBUTE=' + ANC_ABS_ENTRS_ATTRIBUTE7) if(effyear = start_year) then ( if (accrual => 1) then ( accrual = accrual - l_total_count ) ) ) ) ) ) ) i=i+1 ) ) ) return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Employee Exit reentry",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE4 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_num(to_char(effdate,'YYYY')) accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 1 AND PER_ASG_ATTRIBUTE8='Y') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='C') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) if (PER_EXT_CONT_CONTACT_TYPE[J]='S') then ( if (PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_count = l_count + 1 ) ) J=J+1 ) j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Exit Re-entry') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) i=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( if(ANC_ABS_TYP_NAME = 'Annual Leave') then ( if(ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')then ( if(ANC_ABS_ENTRS_ATTRIBUTE4 = 'Employee Only' OR ANC_ABS_ENTRS_ATTRIBUTE4 = 'Both') then ( start_year = to_num(to_char(ANC_ABS_ENTRS_START_DATE,'YYYY')) temp= ESS_LOG_WRITE('ATTRIBUTE=' + ANC_ABS_ENTRS_ATTRIBUTE4) if(effyear = start_year) then ( if (accrual => 1) then ( accrual = accrual - 1 ) ) ) ) ) ) ) i=i+1 ) ) ) return accrual,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Absence Accrual Matrix Formula",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') if(PER_ASG_GRADE_NAME='1' OR PER_ASG_GRADE_NAME='2' OR PER_ASG_GRADE_NAME='3' OR PER_ASG_GRADE_NAME='4' OR PER_ASG_GRADE_NAME='5' OR PER_ASG_GRADE_NAME='6') then ( IF(PER_PER_CITIZENSHIP_LEG_CODE='SA') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service<5) then ( accrual = 21/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME='7' OR PER_ASG_GRADE_NAME='8') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='9A' OR PER_ASG_GRADE_NAME='9B' OR PER_ASG_GRADE_NAME='9C') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 30 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C' OR PER_ASG_GRADE_NAME='11' OR PER_ASG_GRADE_NAME='12') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 40 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C') then ( accrual =40/12 ceiling = 12000 carryover=6000 ) else ( accrual =44/12 ceiling = 12000 carryover=6000 ) ) ) else ( accrual =35/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_ATTRIBUTE8='Y' OR PER_ASG_GRADE_NAME='RS') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(accrual > 2.5 and Exception_Flag <> 'Y') then ( accrual = 2.5 ceiling = 12000 carryover=6000 ) return accrual,ceiling,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Absence Accrual Matrix Formula",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'No' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_NAME is 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS 'X' DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR Exception_Flag IS 'X' DEFAULT FOR Exception_value IS 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date),IV_ACCRUALPERIODSTARTDATE(date),IV_ACCRUALPERIODENDDATE(date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date),daily_rate l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) i= 1 l_payroll_date=(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date))) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) total_days = days_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE)+1 l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') Exception_value = GET_TABLE_VALUE('Annual_Leave_Exceptions','Value',PER_ASG_PERSON_NUMBER,'X') l_abs_start_date=IV_ACCRUALPERIODSTARTDATE l_abs_END_date=IV_ACCRUALPERIODENDDATE L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VAC_DAYS = GET_ABSENCE_DAYS_PER_TYPE('SANED Unpaid Leave',l_abs_start_date,l_abs_END_date) l_log = ess_log_write('L_VAC_DAYS: '||TO_CHAR(L_VAC_DAYS)) ) l_log = ess_log_write('IV_ACCRUALPERIODSTARTDATE: '||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ess_log_write('IV_ACCRUALPERIODENDDATE: '||TO_CHAR(IV_ACCRUALPERIODENDDATE)) if(PER_ASG_GRADE_NAME='1' OR PER_ASG_GRADE_NAME='2' OR PER_ASG_GRADE_NAME='3' OR PER_ASG_GRADE_NAME='4' OR PER_ASG_GRADE_NAME='5' OR PER_ASG_GRADE_NAME='6') then ( IF(PER_PER_CITIZENSHIP_LEG_CODE='SA') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N'))Then ( accrual = 28/12 ceiling = 10000 carryover=5000 ) If(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y'))Then ( accrual =30/12 ceiling = 12000 carryover=6000 ) If (l_length_of_service => 5) Then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual = 21/12 ceiling = 10000 carryover=5000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME='7' OR PER_ASG_GRADE_NAME='8') then ( if(l_length_of_service<5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N'))then ( accrual = 28/12 ceiling = 10000 carryover=5000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='9A' OR PER_ASG_GRADE_NAME='9B' OR PER_ASG_GRADE_NAME='9C') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA' And (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N') ) then ( accrual = 30 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else IF (PER_PER_CITIZENSHIP_LEG_CODE = 'SA' And (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y') )Then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C' OR PER_ASG_GRADE_NAME='11' OR PER_ASG_GRADE_NAME='12') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA' And (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N') ) then ( accrual = 40 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C') then ( accrual =40/12 ceiling = 12000 carryover=6000 ) else ( accrual =44/12 ceiling = 12000 carryover=6000 ) ) ) else ( accrual =35/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'CEO' OR PER_ASG_GRADE_NAME = 'T8' OR PER_ASG_GRADE_NAME = 'Z4' OR PER_ASG_GRADE_NAME = 'R4' OR PER_ASG_GRADE_NAME = 'W8' OR PER_ASG_GRADE_NAME = 'E6' OR PER_ASG_GRADE_NAME = 'P1' OR PER_ASG_GRADE_NAME = 'F2') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(PER_ASG_GRADE_NAME = 'B3' OR PER_ASG_GRADE_NAME = 'G2') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) If (l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y'))THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'N7') then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N'))then ( accrual =28/12 ceiling = 12000 carryover=6000 ) If (l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y'))then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual =21/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME = 'E1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'M3' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'I1') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'S1') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y'))THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'S2') then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N') ) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual =21/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) If(PER_ASG_ATTRIBUTE8='Yes' OR PER_ASG_GRADE_NAME='RS') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) If(Exception_Flag = 'Y' and Exception_value <> 'X') then ( accrual = (to_num(Exception_value)) ceiling = 12000 carryover=6000 ) If(accrual > 2.5 and Exception_Flag <> 'Y') then ( accrual = 2.5 ceiling = 12000 carryover=6000 ) l_log = ess_log_write('accrual1 '||TO_CHAR(accrual)) If (L_VAC_DAYS > 0) then ( daily_rate= accrual/total_days accrual_provided = total_days - L_VAC_DAYS accrual = accrual_provided*daily_rate ) return accrual,ceiling,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Absence Accrual Matrix Formula",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') if(PER_ASG_GRADE_NAME='1' OR PER_ASG_GRADE_NAME='2' OR PER_ASG_GRADE_NAME='3' OR PER_ASG_GRADE_NAME='4' OR PER_ASG_GRADE_NAME='5' OR PER_ASG_GRADE_NAME='6') then ( IF(PER_PER_CITIZENSHIP_LEG_CODE='SA') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service<5) then ( accrual = 21/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME='7' OR PER_ASG_GRADE_NAME='8') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='9A' OR PER_ASG_GRADE_NAME='9B' OR PER_ASG_GRADE_NAME='9C') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 30 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C' OR PER_ASG_GRADE_NAME='11' OR PER_ASG_GRADE_NAME='12') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 40 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C') then ( accrual =40/12 ceiling = 12000 carryover=6000 ) else ( accrual =44/12 ceiling = 12000 carryover=6000 ) ) ) else ( accrual =35/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_ATTRIBUTE8='Y' OR PER_ASG_GRADE_NAME='RS') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) return accrual,ceiling,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "XX_Accrual for Utilizaion",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_NAME is 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS 'X' DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date),IV_ACCRUALPERIODSTARTDATE(date),IV_ACCRUALPERIODENDDATE(date) l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) i= 1 l_payroll_date=(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date))) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) total_days = days_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE)+1 l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') Exception_value = GET_TABLE_VALUE('Annual_Leave_Exceptions','Value',PER_ASG_PERSON_NUMBER,'X') l_abs_start_date=IV_ACCRUALPERIODSTARTDATE l_abs_END_date=IV_ACCRUALPERIODENDDATE L_VAC_DAYS = GET_ABSENCE_DAYS_PER_TYPE('SANED Unpaid Leave',l_abs_start_date,l_abs_END_date) l_log = ess_log_write('L_VAC_DAYS: '||TO_CHAR(L_VAC_DAYS)) l_log = ess_log_write('IV_ACCRUALPERIODSTARTDATE: '||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ess_log_write('IV_ACCRUALPERIODENDDATE: '||TO_CHAR(IV_ACCRUALPERIODENDDATE)) if(PER_ASG_GRADE_NAME='1' OR PER_ASG_GRADE_NAME='2' OR PER_ASG_GRADE_NAME='3' OR PER_ASG_GRADE_NAME='4' OR PER_ASG_GRADE_NAME='5' OR PER_ASG_GRADE_NAME='6') then ( IF(PER_PER_CITIZENSHIP_LEG_CODE='SA') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service<5) then ( accrual = 21/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME='7' OR PER_ASG_GRADE_NAME='8') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='9A' OR PER_ASG_GRADE_NAME='9B' OR PER_ASG_GRADE_NAME='9C') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 30 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C' OR PER_ASG_GRADE_NAME='11' OR PER_ASG_GRADE_NAME='12') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 40 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C') then ( accrual =40/12 ceiling = 12000 carryover=6000 ) else ( accrual =44/12 ceiling = 12000 carryover=6000 ) ) ) else ( accrual =35/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'CEO' OR PER_ASG_GRADE_NAME = 'T8' OR PER_ASG_GRADE_NAME = 'Z4' OR PER_ASG_GRADE_NAME = 'R4' OR PER_ASG_GRADE_NAME = 'W8' OR PER_ASG_GRADE_NAME = 'E6' OR PER_ASG_GRADE_NAME = 'P1' OR PER_ASG_GRADE_NAME = 'F2') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(PER_ASG_GRADE_NAME = 'B3' OR PER_ASG_GRADE_NAME = 'G2') then ( if(l_length_of_service < 5) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'N7') then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( if(l_length_of_service < 5) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5) then ( accrual =21/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME = 'E1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'M3' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'I1') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'S1') then ( if(l_length_of_service < 5) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'S2') then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( if(l_length_of_service < 5) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5) then ( accrual =21/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_ATTRIBUTE8='Y' OR PER_ASG_GRADE_NAME='RS') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(Exception_Flag = 'Y' and Exception_value <> 'X') then ( accrual = (to_num(Exception_value)) ceiling = 12000 carryover=6000 ) if(accrual > 2.5 and Exception_Flag <> 'Y') then ( accrual = 2.5 ceiling = 12000 carryover=6000 ) l_log = ess_log_write('accrual1 '||TO_CHAR(accrual)) If (L_VAC_DAYS > 0) then ( daily_rate= accrual/total_days accrual_provided = total_days - L_VAC_DAYS accrual = accrual_provided*daily_rate ) return accrual,ceiling,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Work From Distance  Accrual Matrix Formula",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'No' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_NAME is 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS 'X' DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR Exception_Flag IS 'X' DEFAULT FOR Exception_value IS 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date),IV_ACCRUALPERIODSTARTDATE(date),IV_ACCRUALPERIODENDDATE(date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date),daily_rate l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) i= 1 l_payroll_date=(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date))) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) total_days = days_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE)+1 l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') Exception_value = GET_TABLE_VALUE('Annual_Leave_Exceptions','Value',PER_ASG_PERSON_NUMBER,'X') l_abs_start_date=IV_ACCRUALPERIODSTARTDATE l_abs_END_date=IV_ACCRUALPERIODENDDATE L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VAC_DAYS = GET_ABSENCE_DAYS_PER_TYPE('SANED Unpaid Leave',l_abs_start_date,l_abs_END_date) l_log = ess_log_write('L_VAC_DAYS: '||TO_CHAR(L_VAC_DAYS)) ) l_log = ess_log_write('IV_ACCRUALPERIODSTARTDATE: '||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ess_log_write('IV_ACCRUALPERIODENDDATE: '||TO_CHAR(IV_ACCRUALPERIODENDDATE)) If(PER_ASG_GRADE_NAME = 'E1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'CEO') then ( accrual = 3 ceiling = 3 carryover=0 ) If(PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'M3') then ( accrual = 2 ceiling = 2 carryover=0 ) If(PER_ASG_GRADE_NAME = 'S2' OR PER_ASG_GRADE_NAME = 'S1' OR PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'I1') then ( accrual = 0 ceiling = 0 carryover=0 ) l_log = ess_log_write('accrual1 '||TO_CHAR(accrual)) If (L_VAC_DAYS > 0) then ( daily_rate= accrual/total_days accrual_provided = total_days - L_VAC_DAYS accrual = accrual_provided*daily_rate ) return accrual,ceiling,carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "TOH ABS Personal Leave Part Time Accrual Matrix",
        "answer": "DEFAULT FOR PER_ASG_FULL_PART_TIME is 'X' DEFAULT FOR PER_ASG_EMPLOYEE_CATEGORY is 'X' L_Person_Id = GET_CONTEXT(PERSON_ID,0) accrual =0 L_prioryear = to_number((to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY')))-1 start_date = to_date(to_char(L_prioryear) || '/01/01' ,'YYYY/MM/DD') end_date = to_date(to_char(L_prioryear) || '/12/31' ,'YYYY/MM/DD') l_date = start_date pt_hours = 0 pt_hours1 =0 LC_ASSIGN_INFO = 'X' l_assign_id = 0 l_worker_category = 'X' l_employment_cat = 'X' WHILE l_date <= end_date LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = (l_date)) ( start_date = start_date end_date = end_date LC_ASSIGN_INFO = 'Y' ||GET_VALUE_SET('TOH_GET_ASSIGNMENT_INFO','|=P_PERSON_ID='''||TO_CHAR(L_Person_Id)||''''|| '|EFFECTIVE_DATE='''||TO_CHAR(l_date, 'YYYY/MM/DD')||'''') l_assign_id = TO_NUMBER(SUBSTR(SUBSTR(LC_ASSIGN_INFO, 1, INSTR(LC_ASSIGN_INFO, '~', 1, 1) - 1), 2)) l_worker_category = SUBSTR(LC_ASSIGN_INFO, INSTR(LC_ASSIGN_INFO, '~', 1, 1) + 1, INSTR(LC_ASSIGN_INFO, '~', 1, 2) - INSTR(LC_ASSIGN_INFO, '~', 1, 1) - 1) l_employment_cat = SUBSTR(LC_ASSIGN_INFO, INSTR(LC_ASSIGN_INFO, '~', 1, 2) + 1) l_log_data = ESS_LOG_WRITE(' LC_ASSIGN_INFO:'+ LC_ASSIGN_INFO +' '+ l_worker_category +' '+ l_employment_cat) IF ( (l_employment_cat = 'PR' OR l_employment_cat = 'PT' ) AND l_worker_category != 'TOH_9' AND LC_ASSIGN_INFO <> 'Y' ) THEN ( pt_hours1 = GET_CALCULATED_HOURS(l_assign_id, 'N', l_date, l_date, 'PAY Regular', 'APPROVED', 0) l_log_data = ESS_LOG_WRITE(' B999l_date:'+ to_char(l_date)+' PER_ASG_FULL_PART_TIME:'+ l_employment_cat +' pt_hours1:'+ to_char(pt_hours1)) ) ELSE pt_hours1 = 0 ) pt_hours = pt_hours + pt_hours1 l_log_data = ESS_LOG_WRITE(' C999l:'+ ' pt_hours:'+ to_char(pt_hours) + ' L_ASS_id: '+ to_char(l_assign_id ) + l_worker_category ) l_date = add_days(l_date,1) ) l_Regular_hours_prioryear = pt_hours L_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_Person_Id = GET_CONTEXT(PERSON_ID,0) accrual =0 L_prioryear = to_number((to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY')))-1 start_date = to_date(to_char(L_prioryear) || '/01/01' ,'YYYY/MM/DD') end_date = to_date(to_char(L_prioryear) || '/12/31' ,'YYYY/MM/DD') l_Regular_hours_prioryear = GET_REPORTED_HOURS(L_Person_Id, 'Y', start_date, end_date, 'PAY Regular', 'APPROVED', 0) l_log_data = ESS_LOG_WRITE(' Fast Formula Logic and Parameters - Starts') l_log_data = ESS_LOG_WRITE(' L_Person_Id:'+ to_char(L_Person_Id)) l_log_data = ESS_LOG_WRITE(' l_eff_date:'+ to_char(l_eff_date)) l_log_data = ESS_LOG_WRITE(' L_prioryear:'+ to_char(L_prioryear)) l_log_data = ESS_LOG_WRITE(' start_date:'+ to_char(start_date)) l_log_data = ESS_LOG_WRITE(' end_date:'+ to_char(end_date)) l_log_data = ESS_LOG_WRITE(' l_Regular_hours_prioryear:'+ to_char(l_Regular_hours_prioryear)) if (l_Regular_hours_prioryear >= 500 AND l_Regular_hours_prioryear < 1000 ) then ( accrual = 8 l_log_data = ESS_LOG_WRITE(' (l_Regular_hours_prioryear >= 500 AND l_Regular_hours_prioryear < 1000 ) : TRUE') ) else if (l_Regular_hours_prioryear >= 1000 AND l_Regular_hours_prioryear < 1500 ) then ( accrual = 16 l_log_data = ESS_LOG_WRITE(' (l_Regular_hours_prioryear >= 1000 AND l_Regular_hours_prioryear < 1500 ) : TRUE') ) else if (l_Regular_hours_prioryear >= 1500 ) then ( accrual = 24 l_log_data = ESS_LOG_WRITE(' (l_Regular_hours_prioryear >= 1500 ) : TRUE') ) l_log_data = ESS_LOG_WRITE(' Final accrual hours:'+ to_char(accrual)) l_log_data = ESS_LOG_WRITE(' Fast Formula Logic and Parameters - Ends') ceiling = 9999999 carryover = 9999999 return accrual",
        "question": "This formula calculates the accrual of personal leave for part-time employees based on the number of hours they worked in the previous year. It checks the employee's assignment information and calculates the total hours worked. Depending on the total hours worked, it assigns different accrual amounts:  If the employee worked between 500 and 999 hours, they accrue 8 hours of leave. If they worked between 1000 and 1499 hours, they accrue 16 hours of leave. If they worked 1500 hours or more, they accrue 24 hours of leave.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "TOH Personal Days Accrual Matrix",
        "answer": "DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'abcd' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT for PER_ASG_BARGAINING_UNIT_CODE is 'abcd' DEFAULT for PER_ASG_EMPLOYMENT_CATEGORY is 'abcd' DEFAULT for PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY is -1 DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE3 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_PER_LATEST_REHIRE_DATE is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE6 is '0001/01/01 00:00:00' (Date) INPUTS ARE IV_ACCRUALPERIODENDDATE (Date) ,IV_ACCRUALPERIODSTARTDATE (Date) l_Accrual_Period_End_Date = IV_ACCRUALPERIODENDDATE l_Accrual_Period_Start_Date = IV_ACCRUALPERIODSTARTDATE l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) NullText = '**NULL**' l_absence_plan = NullText l_earned_hours = 0 l_accrual_rate = 4 l_bargaining_unit_code = NullText l_employment_Category = NullText l_Years_of_Service = -1 l_standard_hours = 80 l_accrual_rate_table = 'COR_SICK_ACCRUAL_RATE' l_accrual_hours_table = 'COR_ACCRUAL_CALCULATION' l_carryover = 0 l_ceiling = 0 l_approved = 'N' l_grp_type_id = 201 L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Hr_Relationship_Id = GET_CONTEXT(HR_RELATIONSHIP_ID,0) L_AccPlan_Id = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_absence_plan = ANC_ABS_PLN_NAME l_bargaining_unit_code = PER_ASG_BARGAINING_UNIT_CODE l_employment_Category = PER_ASG_EMPLOYMENT_CATEGORY l_Years_of_Service = PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY l_log_data = ESS_LOG_WRITE('Formula COR_SICK_ACCRUAL_CALC Starts ...') l_log_data = ESS_LOG_WRITE('Absence Plan: ' + l_absence_plan + ' ; Bargaining unit: ' + l_bargaining_unit_code + ' ; Employment Category: ' + l_employment_Category ) l_column = upper(l_bargaining_unit_code) l_row = l_employment_Category l_log_data = ESS_LOG_WRITE('Bonus vacation date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE3) ) l_log_data = ESS_LOG_WRITE('Adjusted Service date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1) ) l_log_data = ESS_LOG_WRITE('Hire date ...' + to_char(PER_PER_LATEST_REHIRE_DATE) ) if (PER_ASG_REL_ATTRIBUTE_DATE3 WAS NOT DEFAULTED) then ( lv_emp_begin_date =PER_ASG_REL_ATTRIBUTE_DATE3 ) else if ( PER_ASG_REL_ATTRIBUTE_DATE1 WAS NOT DEFAULTED) then ( lv_emp_begin_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) else ( lv_emp_begin_date = PER_REL_ATTRIBUTE_DATE6 ) anniversaryDate = lv_emp_begin_date lv_number_of_years =0 accrual =0 lv_number_of_years = to_number( to_char(l_eff_date,'YYYY') ) - to_number( to_char(anniversaryDate,'YYYY')) if (lv_number_of_years = 1 ) then ( accrual =16 ) else if (lv_number_of_years = 2 ) then ( accrual =24 ) else if (lv_number_of_years = 3 ) then ( accrual =32 ) else if (lv_number_of_years >= 4 ) then ( accrual =40 ) l_log_data = ESS_LOG_WRITE('Rama Accrual: ' + to_char(accrual) + ' + ; Effective Date: ' + to_char(l_eff_date,'YYYY/MM/DD') + ' + ; anniversaryDate : ' + to_char(anniversaryDate,'YYYY/MM/DD') + ' Seniority ' + to_char(lv_number_of_years ) ) l_log_data = ESS_LOG_WRITE(' Formula COR_SICK_ACCRUAL_CALC Ends ...') ceiling = 9999999 carryover = 9999999 return accrual",
        "question": "This formula calculates sick leave accrual based on the employee's bargaining unit code, employment category, and years of service. Here's a detailed explanation of the calculation process:  Determine Employee Start Date: The formula checks various dates to determine the employee's start date. It prioritizes the bonus vacation date, adjusted service date, and hire date in that order.  Calculate Years of Service: It calculates the number of years the employee has been in service by finding the difference between the current effective date and the employee's start date.  Accrual Calculation:  If the employee has completed 1 year of service, they accrue 16 hours of sick leave. If the employee has completed 2 years of service, they accrue 24 hours of sick leave. If the employee has completed 3 years of service, they accrue 32 hours of sick leave. If the employee has completed 4 or more years of service, they accrue 40 hours of sick leave. Return the accrued value",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_WA_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "Write a global absence accrual matrix formula for that calculates sick leave accrual by dividing the total hours worked during the accrual period by 40 and rounding the result",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_CT_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00'(date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date) accrual = 0 l_accrual_curr = 0 l_accrual_prev = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_enrt_st_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 l_Person_id = GET_CONTEXT(PERSON_ID,1) L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_hours_worked_char = '0' l_hours_worked = 0 l_Hire_date = PER_PERSON_ENTERPRISE_HIRE_DATE l_prev_acc_per_ed_date = '4712/12/31 00:00:00' (date) l_flag = 'N' l_debug = 'Y' l_person_number = GET_VALUE_SET('LHC_FETCH_PERSON_NUMBER_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''') l_cutoff_date = to_date(GET_TABLE_VALUE('LHC_PREVIOUS_YEAR_HOURS_WORKED', 'CONNECTICUT_SICK_LEAVE' ,'CUTOFF_DATE', '4712/12/31'),'YYYY/MM/DD') l_udt_hours = to_number(GET_TABLE_VALUE('LHC_PREVIOUS_YEAR_HOURS_WORKED', 'CONNECTICUT_SICK_LEAVE' ,l_person_number, '0')) if (l_udt_hours = 0) then ( if (l_Hire_date >= l_cutoff_date) then ( l_log_accrual = ess_log_write('Employee who hired after go-live date : ') l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_Hire_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_hours_worked = to_number(l_hours_worked_char) if (l_hours_worked > 680) then ( WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) if (l_flag='N') THEN ( l_prev_acc_per_ed_date=ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_Hire_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_prev_acc_per_ed_date,'YYYY/MM/DD HH24:MI:SS') l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'l_prev_acc_per_ed_date'||to_char(l_prev_acc_per_ed_date)) l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_log = ESS_LOG_WRITE('Vesting Period'||'l_hours_worked_char'||l_hours_worked_char) l_hours_worked = to_number(l_hours_worked_char) l_total_hours = l_hours_worked if (l_total_hours < 680) THEN ( accrual=accrual+Round((l_total_hours/40),2) l_log = ESS_LOG_WRITE('Vesting Period'||'accrual'||TO_CHAR(accrual)) l_flag='Y' ) ) ) ) else ( l_log_accrual = ess_log_write('Existing employee who already completed 680 hours as on go-live date : ') l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_hours_worked = to_number(l_hours_worked_char) accrual = Round((l_hours_worked /40),2) ) ) else ( l_log_accrual = ess_log_write('Employee who completed 680 hours before go-live date : ') l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_cutoff_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_hours_worked = to_number(l_hours_worked_char) l_total_hours = l_hours_worked + l_udt_hours if (l_total_hours > 680) then ( WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) if (l_flag='N') THEN ( l_prev_acc_per_ed_date=ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_cutoff_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_prev_acc_per_ed_date,'YYYY/MM/DD HH24:MI:SS') l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'l_prev_acc_per_ed_date'||to_char(l_prev_acc_per_ed_date)) l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_log = ESS_LOG_WRITE('Vesting Period'||'l_hours_worked_char'||l_hours_worked_char) l_hours_worked = to_number(l_hours_worked_char) l_total_hours = l_hours_worked + l_udt_hours if (l_total_hours < 680) THEN ( accrual=accrual+Round((l_total_hours/40),2) l_log = ESS_LOG_WRITE('Vesting Period'||'accrual'||TO_CHAR(accrual)) l_flag='Y' ) ) ) ) if (l_debug = 'Y') then ( l_log_accrual = ess_log_write('PERIOD_START_DATE: ' || to_char(PERIOD_START_DATE)) l_log_accrual = ess_log_write('PERIOD_END_DATE: ' || to_char(PERIOD_END_DATE)) l_log_accrual = ess_log_write('l_enrt_st_date: ' || to_char(l_enrt_st_date)) l_log_accrual = ess_log_write('l_enrt_end_date: ' || to_char(l_enrt_end_date)) l_log_accrual = ess_log_write('l_Person_id: ' || to_char(l_Person_id)) l_log_accrual = ess_log_write('L_Assignemnt_id: ' || to_char(L_Assignemnt_id)) l_log_accrual = ess_log_write('l_hours_worked: ' || to_char(l_hours_worked)) l_log_accrual = ess_log_write('l_hours_worked_char: ' || (l_hours_worked_char)) l_log_accrual = ess_log_write('l_Hire_date: ' || to_char(l_Hire_date)) l_log_accrual = ess_log_write('l_cutoff_date: ' || to_char(l_cutoff_date)) l_log_accrual = ess_log_write('l_udt_hours: ' || to_char(l_udt_hours)) l_log_accrual = ess_log_write('Accrual: ' || to_char(Accrual)) l_log_accrual = ess_log_write('l_person_number: ' || (l_person_number)) ) RETURN accrual",
        "question": "This formula calculates sick leave accrual for Connecticut Sick Leave based on the total hours worked during the accrual period. Here's the calculation logic:  Determine Hours Worked: The formula checks if the employee has worked more than 680 hours since their hire date or the cutoff date. If the employee has worked more than 680 hours, it calculates the total hours worked during the accrual period.  Calculate Accrual: The formula calculates the accrual by dividing the total hours worked by 40 and rounding the result to two decimal places. If the employee has not yet completed 680 hours, it includes hours worked in the previous accrual period to determine if the threshold is met.  Adjust for Previous Hours: If the employee has completed 680 hours before the cutoff date, the formula includes these hours in the total calculation and adjusts the accrual accordingly. the formula calculates sick leave accrual by dividing the total hours worked during the accrual period by 40 and rounding the result. It ensures that employees meet the 680-hour threshold before accruing sick leave",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_COOK_COUNTY_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "This formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:  It initializes the total hours worked to zero. For each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked. After summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 40 and rounding the result to two decimal places.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_ML_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE(date), IV_CALEDARENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date) accrual = 0 l_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_person_id = GET_CONTEXT(PERSON_ID,0) l_acc_period_st_date = IV_ACCRUALPERIODSTARTDATE l_acc_period_end_date = IV_ACCRUALPERIODENDDATE l_plan_enrt_date = IV_PLANENROLLMENTSTARTDATE l_acc_prev_end_date = add_days(l_acc_period_st_date,-1) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_plan_enrt_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_acc_prev_end_date,'YYYY/MM/DD HH24:MI:SS') l_prev_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) IF ISNULL(l_prev_hours_worked_char) = 'N' THEN ( l_prev_hours_worked_char = '0' ) l_prev_hours_worked = to_number(l_prev_hours_worked_char) l_log = ESS_LOG_WRITE('l_prev_hours_worked_char: '|| (l_prev_hours_worked_char)) l_log = ESS_LOG_WRITE('l_prev_hours_worked: '|| TO_CHAR(l_prev_hours_worked)) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_acc_period_st_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_acc_period_end_date,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) IF ISNULL(l_hours_worked_char) = 'N' THEN ( l_hours_worked_char = '0' ) l_hours_worked = to_number(l_hours_worked_char) l_log = ESS_LOG_WRITE('l_hours_worked_char: '|| (l_hours_worked_char)) l_log = ESS_LOG_WRITE('l_hours_worked: '|| TO_CHAR(l_hours_worked)) l_prev_round_30 = floor(l_prev_hours_worked/30) l_prev_round_hours = l_prev_round_30 * 30 l_remaining_hours = l_prev_hours_worked - l_prev_round_hours l_total_hours = l_remaining_hours + l_hours_worked l_round_30 = floor(l_total_hours/30) l_round_hours = l_round_30 * 30 l_log = ESS_LOG_WRITE('l_prev_round_30: '|| TO_CHAR(l_prev_round_30)) l_log = ESS_LOG_WRITE('l_prev_round_hours: '|| TO_CHAR(l_prev_round_hours)) l_log = ESS_LOG_WRITE('l_remaining_hours: '|| TO_CHAR(l_remaining_hours)) l_log = ESS_LOG_WRITE('l_total_hours: '|| TO_CHAR(l_total_hours)) l_log = ESS_LOG_WRITE('l_round_30: '|| TO_CHAR(l_round_30)) l_log = ESS_LOG_WRITE('l_round_hours: '|| TO_CHAR(l_round_hours)) Accrual = l_round_hours/30 l_log = ESS_LOG_WRITE('Accrual: '|| TO_CHAR(Accrual)) return Accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LHC_PTO_LEAVE_ACCRUAL_MATRIX_FF",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (DATE) DEFAULT FOR PER_REL_ACTUAL_TERMINATION_DATE is '1951/01/01 00:00:00'(date) DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE_NAME is 'XX' DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_CODE is 'XX' DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_NAME is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_LOOKUP_MEANING is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_MEANING is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_ID IS 0 DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 Default for PAYROLL_NAME is 'ABC' INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE(date) l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,TO_DATE('1951/01/01')) l_hire_date = PER_ASG_REL_DATE_START l_accrual_period_start_date = IV_ACCRUALPERIODSTARTDATE l_accrual_period_end_date = IV_ACCRUALPERIODENDDATE l_accrual_matrix = IV_ACCRUAL l_debug_flag = 'Y' Accrual = 0 groupTypeId = 201 l_payroll_name = PAYROLL_NAME l_sal_basis_name = CMP_ASSIGNMENT_SALARY_BASIS_CODE_NAME l_sal_basis_code = CMP_ASSIGNMENT_SALARY_BASIS_CODE l_sal_basis = CMP_ASSIGNMENT_SALARY_BASIS_NAME l_asg_status = PER_ASG_ASSIGNMENT_STATUS_TYPE l_asg_status_meaning = PER_ASG_ASSIGNMENT_STATUS_TYPE_MEANING l_asg_status_lookup = PER_ASG_ASSIGNMENT_STATUS_TYPE_LOOKUP_MEANING l_asg_status_id = PER_ASG_ASSIGNMENT_STATUS_TYPE_ID l_hours_sum = 0 l_total_hours_worked = 0 l_tc_hours_ref = '#' l_first_week_hours_ref = '#' l_second_week_hours_ref = '#' l_first_week_date = add_days(l_accrual_period_start_date,6) l_second_week_start = add_days(l_accrual_period_start_date,7) Accrual = l_accrual_matrix if (l_sal_basis <> 'Salaried') then ( l_log_accrual = ess_log_write('Employee is hourly..') if (l_payroll_name = 'LHC Weekly') THEN ( l_log_accrual = ess_log_write('Employee is Weekly..') l_first_week_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_accrual_period_start_date,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_first_week_date,'YYYY/MM/DD') ||'''')||'#' l_second_week_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_second_week_start,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_accrual_period_end_date,'YYYY/MM/DD') ||'''')||'#' if ((l_first_week_hours_ref = '0#') and (l_second_week_hours_ref = '0#')) then ( Accrual = 0 l_log_accrual = ess_log_write('No Time card hours found..') ) if ((l_first_week_hours_ref = '0#') and (l_second_week_hours_ref = '1#')) then ( Accrual = Accrual / 2 l_log_accrual = ess_log_write('No first week Time card hours found.. So, giving only half accruals..') ) if ((l_first_week_hours_ref = '1#') and (l_second_week_hours_ref = '0#')) then ( Accrual = Accrual / 2 l_log_accrual = ess_log_write('No second week Time card hours found.. So, giving only half accruals..') ) if ((l_first_week_hours_ref = '1#') and (l_second_week_hours_ref = '1#')) then ( Accrual = Accrual ) ) else ( l_log_accrual = ess_log_write('Employee is Bi Weekly..') l_tc_hours_ref = GET_VALUE_SET('LHC_TIME_CARD_HOURS_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_EFF_ST_DATE='''||to_char(l_accrual_period_start_date,'YYYY/MM/DD') ||'''' ||'|P_EFF_END_DATE='''||to_char(l_accrual_period_end_date,'YYYY/MM/DD') ||'''')||'#' if (l_tc_hours_ref = '0#') then ( Accrual = 0 l_log_accrual = ess_log_write('No Time card hours found..') ) else ( l_tc_hours = to_number(substr(l_tc_hours_ref,1,instr(l_tc_hours_ref,'#')-1)) if (l_tc_hours > 0) then ( Accrual = Accrual ) ) ) ) if ((l_sal_basis = 'Salaried') and ((to_char(l_asg_status_id) = '2002') or (to_char(l_asg_status_id) = '2001'))) THEN ( l_log_accrual = ess_log_write('Employee is salaried..') Accrual = 0 ) if (l_debug_flag = 'Y') THEN ( l_log_accrual = ess_log_write('l_tc_hours_ref: ' || (l_tc_hours_ref)) l_log_accrual = ess_log_write('l_accrual_matrix: ' || to_char(l_accrual_matrix)) l_log_accrual = ess_log_write('l_person_id: ' || to_char(l_person_id)) l_log_accrual = ess_log_write('l_accrual_period_start_date: ' || to_char(l_accrual_period_start_date)) l_log_accrual = ess_log_write('l_accrual_period_end_date: ' || to_char(l_accrual_period_end_date)) l_log_accrual = ess_log_write('Accrual: ' || to_char(Accrual)) l_log_accrual = ess_log_write('l_hire_date: ' || to_char(l_hire_date)) l_log_accrual = ess_log_write('l_sal_basis_name: ' || (l_sal_basis_name)) l_log_accrual = ess_log_write('l_sal_basis_code: ' || (l_sal_basis_code)) l_log_accrual = ess_log_write('l_sal_basis: ' || (l_sal_basis)) l_log_accrual = ess_log_write('l_asg_status: ' || (l_asg_status)) l_log_accrual = ess_log_write('l_asg_status_meaning: ' || (l_asg_status_meaning)) l_log_accrual = ess_log_write('l_payroll_name: ' || (l_payroll_name)) l_log_accrual = ess_log_write('l_asg_status_lookup: ' || (l_asg_status_lookup)) l_log_accrual = ess_log_write('l_asg_status_id: ' || to_char(l_asg_status_id)) l_log_accrual = ess_log_write('l_total_hours_worked: ' || to_char(l_total_hours_worked)) l_log_accrual = ess_log_write('l_first_week_date: ' || to_char(l_first_week_date)) l_log_accrual = ess_log_write('l_second_week_start: ' || to_char(l_second_week_start)) l_log_accrual = ess_log_write('l_first_week_hours_ref: ' || (l_first_week_hours_ref)) l_log_accrual = ess_log_write('l_second_week_hours_ref: ' || (l_second_week_hours_ref)) ) return Accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LHC_GF_PTG_PTO_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_GF_PTG_PTO_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_first_week_accrual = 0 l_second_week_accrual = 0 Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_first_week_date = add_days(Period_start_date,6) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_start_date: '||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_End_date '||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'L_Assignemnt_id '||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= l_first_week_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_GF_PTG_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_GF_PTG_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) l_first_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) l_total_hours_worked = 0 WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_GF_PTG_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_GF_PTG_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) l_second_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) accrual = l_first_week_accrual + l_second_week_accrual l_log = ESS_LOG_WRITE('LHC_GF_PTG_PTO_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_GF_PTG_PTO_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "LHC_CC_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "This formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:  It initializes the total hours worked to zero. For each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked. After summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 40 and rounding the result to two decimal places.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_AZ_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_person_id = GET_CONTEXT(PERSON_ID,0) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_person_id '||to_char(l_person_id)) l_reg_hours = GET_REPORTED_HOURS(l_person_id,'Y',trunc(Period_start_date),trunc(Period_End_date),'*NULL*','APPROVED',0) l_reg_hours2 = GET_REPORTED_HOURS(l_person_id,'Y',trunc(Period_start_date),trunc(Period_End_date),'*NULL*','*NULL*',0) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_reg_hours '||to_char(l_reg_hours)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_reg_hours2 '||to_char(l_reg_hours2)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "This formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:  It initializes the total hours worked to zero. For each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked. After summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_MI_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /35),2) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "This formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. Then, for each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 35 and rounding the result to two decimal places. The final accrual value is then returned",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_HCBC_PTO_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_NAME is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_ID IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'Begin') l_accrual_matrix = IV_ACCRUAL groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_first_week_accrual = 0 l_second_week_accrual = 0 l_sal_basis = CMP_ASSIGNMENT_SALARY_BASIS_NAME l_asg_status_id = PER_ASG_ASSIGNMENT_STATUS_TYPE_ID l_debug_flag = 'Y' Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_first_week_date = add_days(Period_start_date,6) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_start_date: '||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_End_date '||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'L_Assignemnt_id '||to_char(L_Assignemnt_id)) Accrual = l_accrual_matrix if (l_sal_basis <> 'Salaried') then ( WHILE (Period_start_date <= l_first_week_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) if (l_total_hours_worked < 32) then ( l_first_week_accrual = 0 ) ELSE ( l_first_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) ) l_total_hours_worked = 0 WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) if (l_total_hours_worked < 32) then ( l_second_week_accrual = 0 ) ELSE ( l_second_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) ) accrual = l_first_week_accrual + l_second_week_accrual l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) ) if ((l_sal_basis = 'Salaried') and ((to_char(l_asg_status_id) = '2001') or (to_char(l_asg_status_id) = '2001'))) THEN ( l_log_accrual = ess_log_write('Employee is salaried..') Accrual = 0 ) if (l_debug_flag = 'Y') THEN ( l_log_accrual = ess_log_write('Accrual: ' || to_char(Accrual)) ) RETURN accrual",
        "question": "This formula calculates the Paid Time Off (PTO) accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For non-salaried employees, it calculates the total hours worked in the first week and determines the first week's accrual based on whether the total hours worked are less than 32 hours. It then repeats the process for the second week. The accrual for each week is calculated as a percentage of the total hours worked, with a maximum limit. For salaried employees, the accrual is set to zero. The final accrual value is then returned",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_NY_DOM_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_ELEMENT_TYPE_ID IS 0 DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME IS 'XX' DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00'(date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE IS '0001/01/01 00:00:00'(DATE) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME IS 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_VALUE IS 'X' Default FOR PAYROLL_NAME IS 'xx' INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_CALEDARSTARTDATE'|| TO_CHAR(IV_CALEDARSTARTDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_CALEDARENDDATE'|| TO_CHAR(IV_CALEDARENDDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODENDDATE)) l_enter_hire_date=PER_PERSON_ENTERPRISE_HIRE_DATE l_wait_period_end_date=ADD_DAYS(ADD_YEARS(l_enter_hire_date,1),-1) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_wait_period_end_date'||TO_CHAR(l_wait_period_end_date)) accrual = 0 l_hours_worked_char='0' l_hours_worked=0 l_avg_hours = 0 l_Prev_year_start_Date='0001/01/01 00:00:00'(DATE) l_Prev_year_end_Date='0001/01/01 00:00:00'(DATE) l_person_id=GET_CONTEXT(PERSON_ID,0) if (IV_ACCRUALPERIODENDDATE>l_wait_period_end_date AND IV_CALEDARSTARTDATE >= IV_ACCRUALPERIODSTARTDATE AND IV_CALEDARSTARTDATE<=IV_ACCRUALPERIODENDDATE) Then ( l_Prev_year_end_Date= ADD_DAYS(IV_CALEDARSTARTDATE,-1) l_Prev_year_start_Date= ADD_YEARS(l_Prev_year_end_Date,-1) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_Prev_year_start_Date'||TO_CHAR(l_Prev_year_start_Date)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_Prev_year_end_Date'||TO_CHAR(l_Prev_year_end_Date)) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_Prev_year_start_Date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_Prev_year_end_Date,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char'||l_hours_worked_char) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char'||l_hours_worked_char) l_person_number = GET_VALUE_SET('LHC_FETCH_PERSON_NUMBER_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''') l_days_between = days_between(IV_ACCRUALPERIODENDDATE,IV_PLANENROLLMENTSTARTDATE) if (l_days_between < 365) then ( l_hours_worked_char = GET_TABLE_VALUE('LHC_PREVIOUS_YEAR_HOURS_WORKED_UDT', 'NEW_YORK_DOMESTIC_WORKERS' ,l_person_number, '0') l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'Cut off period '||TO_CHAR(l_days_between)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char '||(l_hours_worked_char)) ) l_hours_worked = to_number(l_hours_worked_char) l_avg_hours=l_hours_worked/52 l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_avg_hours'||TO_CHAR(l_avg_hours)) If (l_avg_hours>=30) THEN accrual=24 ELSE IF (l_avg_hours>=20) THEN accrual=16 ELSE accrual=8 ) RETURN accrual",
        "question": "This formula calculates the sick leave accrual for domestic workers in New York. It first checks if the employee has completed a one-year waiting period from their hire date. If the waiting period is completed, it calculates the average weekly hours worked over the past year. Based on the average hours worked, the formula determines the accrual amount: 24 hours for an average of 30 or more hours per week, 16 hours for an average of 20 to 29 hours per week, and 8 hours for less than 20 hours per week. The final accrual value is then returned.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_NEW_MEXICO_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "This formula calculates the sick leave accrual for an employee in New Mexico over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_MA_PST_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) l_accrual = 0 l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) l_accrual = l_total_hours_worked/30 accrual = ROUND(l_accrual,2) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) RETURN accrual",
        "question": "This formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_OR_PST_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Period_start_date: '||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Period_End_date '||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'L_Assignemnt_id '||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "This formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_IL_PAID_SICK_ACCRUAL_MATRIX",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) IF l_total_hours_worked >=40 THEN ( accrual=1 l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) ) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "question": "This formula calculates the sick leave accrual for an employee in Illinois over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, if the total hours worked are 40 or more, the formula sets the accrual to 1. The final accrual value is then returned.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    },
    {
        "FORMULA_NAME": "BKD ABS State PTO Accrual Matrix",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_VALUE is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME is 'XX' DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG is 'XX' DEFAULT_DATA_VALUE FOR ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_END_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION1 IS 'N' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS ' ' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ADD_REGION2 IS 'XX' DEFAULT FOR PER_ASG_LOC_REGION2 IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION1 IS 'XX' DEFAULT FOR PER_ASG_LOC_REGION1 IS 'XX' DEFAULT FOR PER_ASG_ADD_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_LOC_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_WORK_AT_HOME IS 'N' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_TYPE IS ' ' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS ' ' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_EMP_TERMINATION_ACTION_CODE is 'XYZ' DEFAULT FOR PER_EMP_TERMINATION_ACTION_NAME is 'XYZ' INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date),IV_CEILING,IV_CARRYOVER ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_ft_flag = 'X' i=1 WHILE PER_PERSON_EIT_ALL_PEI_INFORMATION1.EXISTS(i) LOOP ( IF PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY[i] = 'Person Additional Info' AND ld_effective_date >= PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE[i] AND ld_effective_date <= PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE[i] THEN ( l_ft_flag = PER_PERSON_EIT_ALL_PEI_INFORMATION1[i] EXIT ) i = i + 1 ) IF l_ft_flag = 'Y' then ( accrual = 0 ceiling = IV_CEILING carryover = IV_CARRYOVER return accrual, ceiling, carryover ) l_enrt_start_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE l_payroll_relationship_id = GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,0) E = GET_PAYROLL_PERIOD(ld_effective_date) l_pay_period_sd = GET_DATE('PAYROLL_PERIOD_START_DATE') l_pay_period_ed = GET_DATE('PAYROLL_PERIOD_END_DATE') TEMP_ACCRUAL_PERIOD_START_DATE = ADD_DAYS(l_pay_period_sd,-1) l_LEAVE_PLAN_BALANCE = 0 l_PLAN_NAME='State Part Time PTO' ln_paid_duration = 0 ln_unpaid_duration = 0 l_WORKED_HOURS=0 accrual = 0 l_term_code = PER_EMP_TERMINATION_ACTION_CODE l_term_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_log = ESS_LOG_WRITE('Plan Balance HR Assignment ID '||to_char(l_ASSIGNMENT_ID)) l_PERSON_ID = GET_CONTEXT(PERSON_ID,1) l_log = ESS_LOG_WRITE('Plan Balance Person ID '||to_char(l_PERSON_ID)) L_Eff_Dt = GET_CONTEXT(EFFECTIVE_DATE,'0001/12/31 00:00:00' (date)) l_log = ESS_LOG_WRITE('Plan Balance Effective Date '||to_char(L_Eff_Dt)) L_LDG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_log = ESS_LOG_WRITE('Plan Balance LDG '||to_char(L_LDG_ID)) CHANGE_CONTEXTS(START_DATE = GREATEST(l_pay_period_sd,l_enrt_start_date), END_DATE = LEAST(l_pay_period_ed,l_enrt_end_date)) ( i=1 l_WORKED_HOURS = 0 l_debug= ESS_LOG_WRITE('After change contexts') l_debug= ESS_LOG_WRITE('Payroll Relationship ID:'||to_char(l_payroll_relationship_id)) WHILE ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME.EXISTS(i) LOOP ( l_debug= ESS_LOG_WRITE('Inside loop '||to_char(i)) IF ((ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'In-Service' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly' ) AND (ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours' OR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours Calculated') AND ( (GREATEST(l_pay_period_sd,l_enrt_start_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and GREATEST(l_pay_period_sd,l_enrt_start_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i]) OR (LEAST(l_pay_period_ed,l_enrt_end_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and LEAST(l_pay_period_ed,l_enrt_end_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i])) ) then ( l_debug= ESS_LOG_WRITE('Element Name '||ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i]) l_debug= ESS_LOG_WRITE('Input Value '||ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i]) l_debug= ESS_LOG_WRITE('Hours Worked '||ELEMENT_ENTRY_RGE_VALUE[i]) IF IS_TEXT_NULL(ELEMENT_ENTRY_RGE_VALUE[i]) = 'Y' then l_WORKED_HOURS = l_WORKED_HOURS + to_number(ELEMENT_ENTRY_RGE_VALUE[i]) Else l_WORKED_HOURS = l_WORKED_HOURS ) i = i + 1 ) l_WORKED_HOURS = l_WORKED_HOURS + ln_paid_duration ) l_WORKED_HOURS = GREATEST((l_WORKED_HOURS),0) ceiling = IV_CEILING carryover = IV_CARRYOVER if l_WORKED_HOURS <> 0 then accrual = l_WORKED_HOURS * IV_ACCRUAL CHANGE_CONTEXTS(LEGISLATIVE_DATA_GROUP_ID = L_LDG_ID,HR_ASSIGNMENT_ID = l_ASSIGNMENT_ID,PERSON_ID = l_PERSON_ID,EFFECTIVE_DATE =LAST_DAY(TEMP_ACCRUAL_PERIOD_START_DATE)) ( l_LEAVE_PLAN_BALANCE = GET_PLAN_BALANCE(l_PLAN_NAME) ) l_debug= ESS_LOG_WRITE('Leave Balance '|| 'Leave balance '||TO_CHAR(l_LEAVE_PLAN_BALANCE)) accrual = round(accrual, 2) if PER_EMP_TERMINATION_ACTION_CODE was not defaulted AND l_enrt_end_date = l_term_date and l_term_code <> 'GLB_TRANSFER' then ( adjustmentvalues[1] = (l_LEAVE_PLAN_BALANCE+accrual) * -1 adjustmentdates[1] = l_term_date adjustmenttypes[1] = 'BKD_FO' ) return accrual, ceiling, carryover, adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BKD ABS State Paid Leave Accrual Matrix",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_VALUE is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME is 'XX' DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG is 'XX' DEFAULT_DATA_VALUE FOR ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_END_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION1 IS 'N' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS ' ' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ADD_REGION2 IS 'XX' DEFAULT FOR PER_ASG_LOC_REGION2 IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION1 IS 'XX' DEFAULT FOR PER_ASG_LOC_REGION1 IS 'XX' DEFAULT FOR PER_ASG_ADD_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_LOC_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_WORK_AT_HOME IS 'N' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_TYPE IS ' ' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS ' ' DEFAULT FOR PER_ASG_ORG_ATTRIBUTE4 IS 'XX' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_EMP_TERMINATION_ACTION_CODE is 'XYZ' DEFAULT FOR PER_EMP_TERMINATION_ACTION_NAME is 'XYZ' INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date),IV_CEILING,IV_CARRYOVER ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_ft_flag = 'X' l_work_location = PER_ASG_LOC_REGION2 l_bu_code = PER_ASG_ORG_ATTRIBUTE4 l_eligible = 'N' i=1 WHILE PER_PERSON_EIT_ALL_PEI_INFORMATION1.EXISTS(i) LOOP ( IF PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY[i] = 'Person Additional Info' AND ld_effective_date >= PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE[i] AND ld_effective_date <= PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE[i] THEN ( l_ft_flag = PER_PERSON_EIT_ALL_PEI_INFORMATION1[i] EXIT ) i = i + 1 ) IF l_ft_flag = 'Y' then ( accrual = 0 ceiling = IV_CEILING carryover = IV_CARRYOVER return accrual, ceiling, carryover ) IF ( PER_ASG_ASSIGNMENT_TYPE = 'E' AND PER_ASG_PRIMARY_FLAG = 'Y' AND l_ft_flag = 'N' AND l_work_location = 'IL' AND l_bu_code <> '00806' AND l_bu_code <> '00821' ) THEN ( l_eligible = 'Y' ) IF l_eligible = 'N' then ( accrual = 0 ceiling = IV_CEILING carryover = IV_CARRYOVER return accrual, ceiling, carryover ) l_enrt_start_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE l_payroll_relationship_id = GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,0) E = GET_PAYROLL_PERIOD(ld_effective_date) l_pay_period_sd = GET_DATE('PAYROLL_PERIOD_START_DATE') l_pay_period_ed = GET_DATE('PAYROLL_PERIOD_END_DATE') TEMP_ACCRUAL_PERIOD_START_DATE = ADD_DAYS(l_pay_period_sd,-1) l_LEAVE_PLAN_BALANCE = 0 l_PLAN_NAME='State Paid Leave' ln_paid_duration = 0 ln_unpaid_duration = 0 l_WORKED_HOURS=0 accrual = 0 l_term_code = PER_EMP_TERMINATION_ACTION_CODE l_term_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_log = ESS_LOG_WRITE('Plan Balance HR Assignment ID '||to_char(l_ASSIGNMENT_ID)) l_PERSON_ID = GET_CONTEXT(PERSON_ID,1) l_log = ESS_LOG_WRITE('Plan Balance Person ID '||to_char(l_PERSON_ID)) L_Eff_Dt = GET_CONTEXT(EFFECTIVE_DATE,'0001/12/31 00:00:00' (date)) l_log = ESS_LOG_WRITE('Plan Balance Effective Date '||to_char(L_Eff_Dt)) L_LDG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_log = ESS_LOG_WRITE('Plan Balance LDG '||to_char(L_LDG_ID)) CHANGE_CONTEXTS(START_DATE = GREATEST(l_pay_period_sd,l_enrt_start_date), END_DATE = LEAST(l_pay_period_ed,l_enrt_end_date)) ( i=1 l_WORKED_HOURS = 0 l_debug= ESS_LOG_WRITE('After change contexts') l_debug= ESS_LOG_WRITE('Payroll Relationship ID:'||to_char(l_payroll_relationship_id)) WHILE ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME.EXISTS(i) LOOP ( l_debug= ESS_LOG_WRITE('Inside loop '||to_char(i)) IF ((ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'In-Service' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly' ) AND (ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours' OR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours Calculated') AND ( (GREATEST(l_pay_period_sd,l_enrt_start_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and GREATEST(l_pay_period_sd,l_enrt_start_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i]) OR (LEAST(l_pay_period_ed,l_enrt_end_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and LEAST(l_pay_period_ed,l_enrt_end_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i])) ) then ( l_debug= ESS_LOG_WRITE('Element Name '||ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i]) l_debug= ESS_LOG_WRITE('Input Value '||ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i]) l_debug= ESS_LOG_WRITE('Hours Worked '||ELEMENT_ENTRY_RGE_VALUE[i]) IF IS_TEXT_NULL(ELEMENT_ENTRY_RGE_VALUE[i]) = 'Y' then l_WORKED_HOURS = l_WORKED_HOURS + to_number(ELEMENT_ENTRY_RGE_VALUE[i]) Else l_WORKED_HOURS = l_WORKED_HOURS ) i = i + 1 ) l_WORKED_HOURS = l_WORKED_HOURS + ln_paid_duration ) l_WORKED_HOURS = GREATEST((l_WORKED_HOURS),0) ceiling = IV_CEILING carryover = IV_CARRYOVER if l_WORKED_HOURS <> 0 then accrual = l_WORKED_HOURS * IV_ACCRUAL CHANGE_CONTEXTS(LEGISLATIVE_DATA_GROUP_ID = L_LDG_ID,HR_ASSIGNMENT_ID = l_ASSIGNMENT_ID,PERSON_ID = l_PERSON_ID,EFFECTIVE_DATE =LAST_DAY(TEMP_ACCRUAL_PERIOD_START_DATE)) ( l_LEAVE_PLAN_BALANCE = GET_PLAN_BALANCE(l_PLAN_NAME) ) l_debug= ESS_LOG_WRITE('Leave Balance '|| 'Leave balance '||TO_CHAR(l_LEAVE_PLAN_BALANCE)) accrual = round(accrual, 2) if PER_EMP_TERMINATION_ACTION_CODE was not defaulted AND l_enrt_end_date = l_term_date and l_term_code <> 'GLB_TRANSFER' then ( adjustmentvalues[1] = (l_LEAVE_PLAN_BALANCE+accrual) * -1 adjustmentdates[1] = l_term_date adjustmenttypes[1] = 'BKD_FO' ) return accrual, ceiling, carryover, adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BKD ABS Sick Absence Accrual Matrix",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_VALUE is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME is 'XX' DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG is 'XX' DEFAULT_DATA_VALUE FOR ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_END_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION1 IS 'N' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS ' ' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ADD_REGION2 IS 'XX' DEFAULT FOR PER_ASG_LOC_REGION2 IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION1 IS 'XX' DEFAULT FOR PER_ASG_LOC_REGION1 IS 'XX' DEFAULT FOR PER_ASG_ADD_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_LOC_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_WORK_AT_HOME IS 'N' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_TYPE IS ' ' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS ' ' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_EMP_TERMINATION_ACTION_CODE is 'XYZ' DEFAULT FOR PER_EMP_TERMINATION_ACTION_NAME is 'XYZ' INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date),IV_CEILING,IV_CARRYOVER ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_ft_flag = 'X' i=1 WHILE PER_PERSON_EIT_ALL_PEI_INFORMATION1.EXISTS(i) LOOP ( IF PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY[i] = 'Person Additional Info' AND ld_effective_date >= PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE[i] AND ld_effective_date <= PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE[i] THEN ( l_ft_flag = PER_PERSON_EIT_ALL_PEI_INFORMATION1[i] EXIT ) i = i + 1 ) IF l_ft_flag = 'Y' then ( accrual = 0 ceiling = IV_CEILING carryover = IV_CARRYOVER return accrual, ceiling, carryover ) l_le_name = PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_udt_row_name = 'XX' l_udt_col_name = 'XX' l_udt_col_name1 = 'XX' l_udt_col_name2 = 'XX' l_work_from_home = PER_ASG_WORK_AT_HOME l_home_state = PER_ASG_ADD_REGION2 l_home_city = PER_ASG_ADD_TOWN_OR_CITY l_home_county = PER_ASG_ADD_REGION1 l_work_state = PER_ASG_LOC_REGION2 l_work_city = PER_ASG_LOC_TOWN_OR_CITY l_work_county = PER_ASG_LOC_REGION1 l_primary_flag = PER_ASG_PRIMARY_FLAG l_sick_eligible = 'N' l_home_city = REPLACE(l_home_city,' ','_') l_home_county = REPLACE(l_home_county,' ','_') l_work_city = REPLACE(l_work_city,' ','_') l_work_county = REPLACE(l_work_county,' ','_') IF l_le_name = 'Brookdale Employee Services Corporate LLC' THEN ( l_udt_row_name = 'CORPORATE' IF l_work_from_home = 'Y' THEN ( l_udt_col_name = l_home_state l_udt_col_name1 = l_home_state + '_'+ l_home_county l_udt_col_name2 = l_home_state + '__'+ l_home_city ) ELSE ( l_udt_col_name = l_work_state l_udt_col_name1 = l_work_state + '_'+ l_work_county l_udt_col_name2 = l_work_state + '__'+ l_work_city ) ) ELSE ( l_udt_row_name = 'COMMUNITY' l_udt_col_name = l_work_state l_udt_col_name1 = l_work_state + '_'+ l_work_county l_udt_col_name2 = l_work_state + '__'+ l_work_city ) l_debug= ESS_LOG_WRITE('SICK: l_udt_row_name is: '|| l_udt_row_name) l_debug= ESS_LOG_WRITE('SICK: l_udt_col_name is: '|| l_udt_col_name) l_debug= ESS_LOG_WRITE('SICK: l_udt_col_name1 is: '|| l_udt_col_name1) l_debug= ESS_LOG_WRITE('SICK: l_udt_col_name2 is: '|| l_udt_col_name2) l_sick_eligible = GET_TABLE_VALUE ( 'BKD_ABS_SICK_ELG_STATES_COUNTY_CITY', l_udt_col_name, l_udt_row_name, 'N') l_debug= ESS_LOG_WRITE('SICK: ELIGIBLE is: '|| l_sick_eligible ) IF l_sick_eligible = 'N' THEN ( l_debug= ESS_LOG_WRITE('SICK: State Ineligible') l_sick_eligible = GET_TABLE_VALUE ( 'BKD_ABS_SICK_ELG_STATES_COUNTY_CITY', l_udt_col_name1, l_udt_row_name, 'N') ) IF l_sick_eligible = 'N' THEN ( l_debug= ESS_LOG_WRITE('SICK: County Ineligible') l_sick_eligible = GET_TABLE_VALUE ( 'BKD_ABS_SICK_ELG_STATES_COUNTY_CITY', l_udt_col_name2, l_udt_row_name, 'N') ) IF l_sick_eligible = 'N' THEN ( l_debug= ESS_LOG_WRITE('SICK: City Ineligible') accrual = 0 ceiling = IV_CEILING carryover = IV_CARRYOVER return accrual, ceiling, carryover ) l_enrt_start_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE l_payroll_relationship_id = GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,0) E = GET_PAYROLL_PERIOD(ld_effective_date) l_pay_period_sd = GET_DATE('PAYROLL_PERIOD_START_DATE') l_pay_period_ed = GET_DATE('PAYROLL_PERIOD_END_DATE') TEMP_ACCRUAL_PERIOD_START_DATE = ADD_DAYS(l_pay_period_sd,-1) l_LEAVE_PLAN_BALANCE = 0 l_PLAN_NAME='Sick Leave' ln_paid_duration = 0 ln_unpaid_duration = 0 l_WORKED_HOURS=0 accrual = 0 l_term_code = PER_EMP_TERMINATION_ACTION_CODE l_term_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_log = ESS_LOG_WRITE('Plan Balance HR Assignment ID '||to_char(l_ASSIGNMENT_ID)) l_PERSON_ID = GET_CONTEXT(PERSON_ID,1) l_log = ESS_LOG_WRITE('Plan Balance Person ID '||to_char(l_PERSON_ID)) L_Eff_Dt = GET_CONTEXT(EFFECTIVE_DATE,'0001/12/31 00:00:00' (date)) l_log = ESS_LOG_WRITE('Plan Balance Effective Date '||to_char(L_Eff_Dt)) L_LDG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_log = ESS_LOG_WRITE('Plan Balance LDG '||to_char(L_LDG_ID)) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(GREATEST(l_pay_period_sd,l_enrt_start_date),-365), END_DATE = LEAST(l_pay_period_ed,l_enrt_end_date)) ( l_debug= ESS_LOG_WRITE('Pay Period Start Date:' || to_char(l_pay_period_sd)) l_debug= ESS_LOG_WRITE('Pay Period End Date:' || to_char(l_pay_period_ed)) j = 1 ln_abs_duration = 0 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(j) LOOP ( l_debug= ESS_LOG_WRITE('Insider Absence Entries Loop') l_debug= ESS_LOG_WRITE('Absence Entry ID:'||to_char(ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j])) CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_debug= ESS_LOG_WRITE('absence type:'||ANC_ABS_TYP_NAME) IF ((ANC_ABS_TYP_NAME = 'Floating Leave' OR ANC_ABS_TYP_NAME = 'E-Sick' OR ANC_ABS_TYP_NAME = 'Paid Time Off' OR ANC_ABS_TYP_NAME = 'Sick' OR ANC_ABS_TYP_NAME = 'Unpaid Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG = 'Y' THEN ( l_debug= ESS_LOG_WRITE('Insider Valid Absence Type with Basic Flag') IF ( (ANC_ABS_ENTRS_START_DATE <= GREATEST(l_pay_period_sd,l_enrt_start_date) AND ANC_ABS_ENTRS_END_DATE >= LEAST(l_pay_period_ed,l_enrt_end_date)) OR (ANC_ABS_ENTRS_START_DATE >= GREATEST(l_pay_period_sd,l_enrt_start_date) AND ANC_ABS_ENTRS_END_DATE <= LEAST(l_pay_period_ed,l_enrt_end_date)) ) THEN ( l_debug= ESS_LOG_WRITE('Absence Entries with in pay period') IF ANC_ABS_TYP_NAME = 'Unpaid Leave' then ln_unpaid_duration = ln_unpaid_duration + ANC_ABS_ENTRS_DURATION Else ln_paid_duration = ln_paid_duration + ANC_ABS_ENTRS_DURATION l_debug= ESS_LOG_WRITE('Absence Duration:' || to_char(ANC_ABS_ENTRS_DURATION)|| 'for absence type:'||ANC_ABS_TYP_NAME ||'with start date:' ||to_char(ANC_ABS_ENTRS_START_DATE)) ) ) ELSE IF ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG = 'N' THEN ( l_debug= ESS_LOG_WRITE('Insider Valid Absence Type with Advanced Flag') l_debug= ESS_LOG_WRITE('Absence Plan ID is:'||to_char(ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR[1])) l = 1 WHILE ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR.exists(l) Loop ( CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR[l]) ( k = 1 WHILE ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR.exists(k) LOOP ( l_debug= ESS_LOG_WRITE('Inside Plan Entry Detaild id loop') l_debug= ESS_LOG_WRITE('Absence Plan accrual entry details id:'||to_char(ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR[k])) IF ( (ANC_ABS_PLN_ENTR_START_DATE_ARR[k] <= GREATEST(l_pay_period_sd,l_enrt_start_date) AND ANC_ABS_PLN_ENTR_END_DATE_ARR[k] >= LEAST(l_pay_period_ed,l_enrt_end_date)) OR (ANC_ABS_PLN_ENTR_START_DATE_ARR[k] >= GREATEST(l_pay_period_sd,l_enrt_start_date) AND ANC_ABS_PLN_ENTR_END_DATE_ARR[k] <= LEAST(l_pay_period_ed,l_enrt_end_date)) ) THEN ( l_debug= ESS_LOG_WRITE('Absence Entries with in pay period') IF ANC_ABS_TYP_NAME = 'Unpaid Leave' then ln_unpaid_duration = ln_unpaid_duration + ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[k] Else ln_paid_duration = ln_paid_duration + ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[k] l_debug= ESS_LOG_WRITE('Absence Duration:' || to_char(ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[k])|| 'for absence type:'||ANC_ABS_TYP_NAME ||'with start date:' ||to_char(ANC_ABS_PLN_ENTR_START_DATE_ARR[k])) ) k = k + 1 ) ) l = l+ 1 ) ) ) ) j = j + 1 ) ) ) CHANGE_CONTEXTS(START_DATE = GREATEST(l_pay_period_sd,l_enrt_start_date), END_DATE = LEAST(l_pay_period_ed,l_enrt_end_date)) ( i=1 l_WORKED_HOURS = 0 l_debug= ESS_LOG_WRITE('After change contexts') l_debug= ESS_LOG_WRITE('Payroll Relationship ID:'||to_char(l_payroll_relationship_id)) WHILE ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME.EXISTS(i) LOOP ( l_debug= ESS_LOG_WRITE('Inside loop '||to_char(i)) IF ((ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'In-Service' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly' ) AND (ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours' OR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours Calculated') AND ( (GREATEST(l_pay_period_sd,l_enrt_start_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and GREATEST(l_pay_period_sd,l_enrt_start_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i]) OR (LEAST(l_pay_period_ed,l_enrt_end_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and LEAST(l_pay_period_ed,l_enrt_end_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i])) ) then ( l_debug= ESS_LOG_WRITE('Element Name '||ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i]) l_debug= ESS_LOG_WRITE('Input Value '||ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i]) l_debug= ESS_LOG_WRITE('Hours Worked '||ELEMENT_ENTRY_RGE_VALUE[i]) IF IS_TEXT_NULL(ELEMENT_ENTRY_RGE_VALUE[i]) = 'Y' then l_WORKED_HOURS = l_WORKED_HOURS + to_number(ELEMENT_ENTRY_RGE_VALUE[i]) Else l_WORKED_HOURS = l_WORKED_HOURS ) i = i + 1 ) l_WORKED_HOURS = l_WORKED_HOURS + ln_paid_duration ) l_WORKED_HOURS = GREATEST((l_WORKED_HOURS),0) ceiling = IV_CEILING carryover = IV_CARRYOVER if l_WORKED_HOURS <> 0 then accrual = l_WORKED_HOURS * IV_ACCRUAL CHANGE_CONTEXTS(LEGISLATIVE_DATA_GROUP_ID = L_LDG_ID,HR_ASSIGNMENT_ID = l_ASSIGNMENT_ID,PERSON_ID = l_PERSON_ID,EFFECTIVE_DATE =LAST_DAY(TEMP_ACCRUAL_PERIOD_START_DATE)) ( l_LEAVE_PLAN_BALANCE = GET_PLAN_BALANCE(l_PLAN_NAME) ) l_debug= ESS_LOG_WRITE('Leave Balance '|| 'Leave balance '||TO_CHAR(l_LEAVE_PLAN_BALANCE)) accrual = round(accrual, 2) if PER_EMP_TERMINATION_ACTION_CODE was not defaulted AND l_enrt_end_date = l_term_date and l_term_code <> 'GLB_TRANSFER' then ( adjustmentvalues[1] = (l_LEAVE_PLAN_BALANCE+accrual) * -1 adjustmentdates[1] = l_term_date adjustmenttypes[1] = 'BKD_FO' ) return accrual, ceiling, carryover, adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BKD ABS ESick Absence Accrual Matrix",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_EMP_TERMINATION_ACTION_CODE is 'XYZ' DEFAULT FOR PER_EMP_TERMINATION_ACTION_NAME is 'XYZ' INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) l_enrt_start_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_payroll_relationship_id = GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,0) E = GET_PAYROLL_PERIOD(ld_effective_date) l_pay_period_sd = GET_DATE('PAYROLL_PERIOD_START_DATE') l_pay_period_ed = GET_DATE('PAYROLL_PERIOD_END_DATE') TEMP_ACCRUAL_PERIOD_START_DATE = ADD_DAYS(l_pay_period_sd,-1) l_LEAVE_PLAN_BALANCE = 0 l_PLAN_NAME='E-Sick' accrual = 0 ceiling = 480 carryover = 480 l_term_code = PER_EMP_TERMINATION_ACTION_CODE l_term_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_log = ESS_LOG_WRITE('Plan Balance HR Assignment ID '||to_char(l_ASSIGNMENT_ID)) l_PERSON_ID = GET_CONTEXT(PERSON_ID,1) l_log = ESS_LOG_WRITE('Plan Balance Person ID '||to_char(l_PERSON_ID)) L_Eff_Dt = GET_CONTEXT(EFFECTIVE_DATE,'0001/12/31 00:00:00' (date)) l_log = ESS_LOG_WRITE('Plan Balance Effective Date '||to_char(L_Eff_Dt)) L_LDG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_log = ESS_LOG_WRITE('Plan Balance LDG '||to_char(L_LDG_ID)) CHANGE_CONTEXTS(LEGISLATIVE_DATA_GROUP_ID = L_LDG_ID,HR_ASSIGNMENT_ID = l_ASSIGNMENT_ID,PERSON_ID = l_PERSON_ID,EFFECTIVE_DATE =LAST_DAY(TEMP_ACCRUAL_PERIOD_START_DATE)) ( l_LEAVE_PLAN_BALANCE = GET_PLAN_BALANCE(l_PLAN_NAME) ) l_debug= ESS_LOG_WRITE('Leave Balance '|| 'Leave balance '||TO_CHAR(l_LEAVE_PLAN_BALANCE)) accrual = round(accrual, 2) if PER_EMP_TERMINATION_ACTION_CODE was not defaulted AND l_enrt_end_date = l_term_date and l_term_code <> 'GLB_TRANSFER' then ( adjustmentvalues[1] = (l_LEAVE_PLAN_BALANCE+accrual) * -1 adjustmentdates[1] = l_term_date adjustmenttypes[1] = 'BKD_FO' ) return accrual, ceiling, carryover, adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BKD ABS Floating Absence Accrual Matrix",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_EMP_TERMINATION_ACTION_CODE is 'XYZ' DEFAULT FOR PER_EMP_TERMINATION_ACTION_NAME is 'XYZ' DEFAULT FOR PER_ASG_LOC_REGION2 IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION2 IS 'XX' DEFAULT FOR PER_ASG_WORK_AT_HOME IS 'N' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'XX' INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) l_enrt_start_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE l_State_Code=PER_ASG_LOC_REGION2 if PER_ASG_WORK_AT_HOME = 'Y' Then l_State_Code=PER_ASG_ADD_REGION2 l_LEGAL_EMP_NAME=PER_ASG_ORG_LEGAL_EMPLOYER_NAME ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_payroll_relationship_id = GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,0) E = GET_PAYROLL_PERIOD(ld_effective_date) l_pay_period_sd = GET_DATE('PAYROLL_PERIOD_START_DATE') l_pay_period_ed = GET_DATE('PAYROLL_PERIOD_END_DATE') TEMP_ACCRUAL_PERIOD_START_DATE = ADD_DAYS(l_pay_period_sd,-1) IF IV_CALEDARSTARTDATE >= l_pay_period_sd and IV_CALEDARSTARTDATE <= l_pay_period_ed Then TEMP_ACCRUAL_PERIOD_START_DATE = GREATEST(IV_CALEDARSTARTDATE,IV_PLANENROLLMENTSTARTDATE) l_LEAVE_PLAN_BALANCE = 0 l_PLAN_NAME='Floating Leave' IF ((IV_CALEDARSTARTDATE >= l_pay_period_sd and IV_CALEDARSTARTDATE <= l_pay_period_ed) OR (l_enrt_start_date >= l_pay_period_sd and l_enrt_start_date <= l_pay_period_ed)) AND l_LEGAL_EMP_NAME='Brookdale Employee Services Corporate LLC' Then accrual = IV_ACCRUAL else accrual = 0 ceiling = 8 carryover = 0 l_term_code = PER_EMP_TERMINATION_ACTION_CODE l_term_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_log = ESS_LOG_WRITE('Plan Balance HR Assignment ID '||to_char(l_ASSIGNMENT_ID)) l_PERSON_ID = GET_CONTEXT(PERSON_ID,1) l_log = ESS_LOG_WRITE('Plan Balance Person ID '||to_char(l_PERSON_ID)) L_Eff_Dt = GET_CONTEXT(EFFECTIVE_DATE,'0001/12/31 00:00:00' (date)) l_log = ESS_LOG_WRITE('Plan Balance Effective Date '||to_char(L_Eff_Dt)) L_LDG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_log = ESS_LOG_WRITE('Plan Balance LDG '||to_char(L_LDG_ID)) CHANGE_CONTEXTS(LEGISLATIVE_DATA_GROUP_ID = L_LDG_ID,HR_ASSIGNMENT_ID = l_ASSIGNMENT_ID,PERSON_ID = l_PERSON_ID,EFFECTIVE_DATE =TEMP_ACCRUAL_PERIOD_START_DATE) ( l_LEAVE_PLAN_BALANCE = GET_PLAN_BALANCE(l_PLAN_NAME) ) l_debug= ESS_LOG_WRITE('Leave Balance '|| 'Leave balance '||TO_CHAR(l_LEAVE_PLAN_BALANCE)) accrual = round(accrual, 2) l_log = ESS_LOG_WRITE('l_enrt_end_date:'||to_char(l_enrt_end_date)) l_log = ESS_LOG_WRITE('l_pay_period_sd:'||to_char(l_pay_period_sd)) l_log = ESS_LOG_WRITE('l_pay_period_ed:'||to_char(l_pay_period_ed)) l_log = ESS_LOG_WRITE('IV_CALEDARSTARTDATE:'||to_char(IV_CALEDARSTARTDATE)) l_log = ESS_LOG_WRITE('TEMP_ACCRUAL_PERIOD_START_DATE:'||to_char(TEMP_ACCRUAL_PERIOD_START_DATE)) if PER_EMP_TERMINATION_ACTION_CODE was defaulted AND l_enrt_end_date <= l_pay_period_ed and (l_State_Code = 'CA' OR l_State_Code = 'CO') then ( adjustmentvalues[1] = 0 adjustmentdates[1] = L_Eff_Dt adjustmenttypes[1] = 'BKD_FO' ) else if PER_EMP_TERMINATION_ACTION_CODE was defaulted AND l_enrt_end_date <= l_pay_period_ed THEN ( adjustmentvalues[1] = (l_LEAVE_PLAN_BALANCE) * -1 adjustmentdates[1] = L_Eff_Dt adjustmenttypes[1] = 'BKD_FO' ) if PER_EMP_TERMINATION_ACTION_CODE was not defaulted AND l_enrt_end_date = l_term_date and l_term_code <> 'GLB_TRANSFER' and (l_State_Code = 'CA' OR l_State_Code = 'CO') then ( adjustmentvalues[1] = 0 adjustmentdates[1] = l_term_date adjustmenttypes[1] = 'BKD_FO' ) else if PER_EMP_TERMINATION_ACTION_CODE was not defaulted AND l_enrt_end_date = l_term_date and l_term_code <> 'GLB_TRANSFER' then ( adjustmentvalues[1] = (l_LEAVE_PLAN_BALANCE) * -1 adjustmentdates[1] = l_term_date adjustmenttypes[1] = 'BKD_FO' ) return accrual, ceiling, carryover, adjustmentvalues,adjustmentdates,adjustmenttypes",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BBKD ABS PTO Absence Accrual Matrix",
        "answer": "DEFAULT FOR PER_ASG_JOB_ATTRIBUTE1 IS 'XX' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_WORK_AT_HOME IS 'N' DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION2 IS 'CA' DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE IS '0001/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_SENIORITY_DATE_CODE IS ' ' DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_ENTRY_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_SENDT_F_V3_EXIT_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_JOB_CODE IS 'XX' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_JOB_ID IS 0 DEFAULT FOR PER_JOBS_LEG_EFF_HRX_US_JOBS_FLSA_STATUS IS 'XX' DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_INFORMATION_CATEGORY IS ' ' DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_INFORMATION1 IS ' ' DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_JOB_LEG_ALL_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_LOC_REGION2 IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION2 IS 'XX' DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XX' DEFAULT FOR PER_ASG_PERSON_ID IS 0 DEFAULT FOR PER_ASG_ADD_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_MEANING is ' ' DEFAULT FOR PER_ASG_LOC_REGION1 is 'XX' DEFAULT FOR PER_ASG_LOC_TOWN_OR_CITY is 'XX' DEFAULT FOR PER_ASG_ADD_TOWN_OR_CITY is 'XX' DEFAULT FOR PER_ASG_ADD_REGION1 is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_VALUE is '0' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME is 'XX' DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG is 'XX' DEFAULT_DATA_VALUE FOR ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_END_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_EMP_TERMINATION_ACTION_CODE is 'XYZ' DEFAULT FOR PER_EMP_TERMINATION_ACTION_NAME is 'XYZ' DEFAULT FOR PER_EMP_TERMINATION_REASON is 'XYZ' DEFAULT FOR PER_ASG_REL_ATTRIBUTE1 is 'N' INPUTS ARE IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) p_duration_days = 0 p_duration_hours = 0 p_duration_cal = 0 p_duration_weeks = 0 p_duration_months = 0 p_duration_years = 0 p_occurances = 0 p_exclude_abs_status = 'ORA_WITHDRAWN' p_exclude_appr_status = 'Z' var1 = 0 var2 = 0 ln_abs_duration = 0 ln_paid_duration = 0 ln_unpaid_duration = 0 l_exempt_worked_hours = 0 j =1 k =1 l_enrt_start_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) E = GET_PAYROLL_PERIOD(ld_effective_date) l_pay_period_sd = GET_DATE('PAYROLL_PERIOD_START_DATE') l_pay_period_ed = GET_DATE('PAYROLL_PERIOD_END_DATE') TEMP_ACCRUAL_PERIOD_START_DATE = ADD_DAYS(l_pay_period_sd,-1) l_LEAVE_PLAN_BALANCE = 0 accrual = 0 l_udt_column_name = 'HFT' l_udt_row='0-1' l_udt_value = 0 l_ceiling=0 l_carryover=0 l_rollover=0 l_LOS=0 l_Plan_Type='XYZ' l_JOB_CODE=PER_ASG_JOB_CODE l_SICK_ELG_STATE='N' l_SICK_CAP_STATE = 'N' l_LEGAL_EMP_NAME=PER_ASG_ORG_LEGAL_EMPLOYER_NAME l_JOB_ID=PER_ASG_JOB_ID l_FLSA_STATUS='XYZ' l_LOC_ADD_R2=PER_ASG_ADD_REGION2 l_LOC_ASG_R2=PER_ASG_LOC_REGION2 l_PERSON_NUMBER=PER_ASG_PERSON_NUMBER l_PERSON_ID=GET_CONTEXT(PERSON_ID,0) l_WORKED_HOURS=0 l_WORKED_HOURS_CHAR='0' l_CITY_TEST=PER_ASG_ADD_TOWN_OR_CITY l_ROLLOVER_BALANCE=0 l_payroll_relationship_id = GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,0) l_asg_hours = PER_ASG_NORMAL_HOURS l_PLAN_NAME='Full Time PTO Plan' l_reduce_prorated_hours = 0 loop_days = '4712/12/31 00:00:00' (date) l_term_code = PER_EMP_TERMINATION_ACTION_CODE l_term_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_term_reason = PER_EMP_TERMINATION_REASON l_pto_pay_old_hire_date = '2023/04/01 00:00:00' (date) l_seniority_date = '4712/12/31 00:00:00' (date) l_notice_given = PER_ASG_REL_ATTRIBUTE1 if DAYS_BETWEEN(l_pay_period_ed,l_pay_period_sd) > 7 then l_per_period_cap = 80 Else l_per_period_cap = 40 l_debug= ESS_LOG_WRITE('Checking termination logic ') l_debug= ESS_LOG_WRITE('l_enrt_start_date '|| to_char(l_enrt_start_date)) l_debug= ESS_LOG_WRITE('l_enrt_end_date '|| to_char(l_enrt_end_date)) l_debug= ESS_LOG_WRITE('Termination Date '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE)) l_debug= ESS_LOG_WRITE('PER_EMP_TERMINATION_ACTION_NAME '|| PER_EMP_TERMINATION_ACTION_NAME) l_debug= ESS_LOG_WRITE('PER_EMP_TERMINATION_ACTION_CODE '|| PER_EMP_TERMINATION_ACTION_CODE) l_debug= ESS_LOG_WRITE('PER_EMP_TERMINATION_REASON '|| PER_EMP_TERMINATION_REASON) l_debug= ESS_LOG_WRITE('Start of accrual matrix formula') l_debug= ESS_LOG_WRITE('l_enrt_start_date '|| to_char(l_enrt_start_date)) l_debug= ESS_LOG_WRITE('l_enrt_end_date '|| to_char(l_enrt_end_date)) l_debug= ESS_LOG_WRITE('Address Region2 '|| 'Address Region2 '||l_LOC_ADD_R2) l_debug= ESS_LOG_WRITE('ASG_Region 2 '|| 'ASG_Region 2 '||l_LOC_ASG_R2) l_debug= ESS_LOG_WRITE('Person Number '|| 'Person Number '||l_PERSON_NUMBER) l_debug= ESS_LOG_WRITE('Person ID '|| 'Person ID '||TO_CHAR(l_PERSON_ID)) l_debug= ESS_LOG_WRITE('l_COUNTY_TEST '|| 'l_COUNTY_TEST '||l_CITY_TEST) CHANGE_CONTEXTS(JOB_ID=l_JOB_ID) ( I=1 WHILE (PER_JOB_LEG_ALL_INFORMATION1.EXISTS(I)) LOOP ( If (ld_effective_date>= PER_JOB_LEG_ALL_EFFECTIVE_START_DATE[I] AND ld_effective_date <=PER_JOB_LEG_ALL_EFFECTIVE_END_DATE[I] AND PER_JOB_LEG_ALL_INFORMATION_CATEGORY[I]='HRX_US_JOBS') THEN ( l_FLSA_STATUS=PER_JOB_LEG_ALL_INFORMATION1[I] l_debug= ESS_LOG_WRITE('FLSA STATUS '|| 'FLSA STATUS '||l_FLSA_STATUS) EXIT ) I=I+1 ) ) l_udt_row_Ceiling='XYZ' l_udt_row_Rollover='XYZ' l_udt_row_Carryover='XYZ' l_State_Code=PER_ASG_LOC_REGION2 l_county = PER_ASG_LOC_REGION1 l_city = PER_ASG_LOC_TOWN_OR_CITY l_Job_DFF =PER_ASG_JOB_ATTRIBUTE1 l_ASG_NUM='X' l_WORK_AT_HOME=PER_ASG_WORK_AT_HOME l_ASG_NUM= PER_ASG_ASSIGNMENT_NUMBER if PER_ASG_WORK_AT_HOME = 'Y' Then ( l_State_Code=PER_ASG_ADD_REGION2 l_county = PER_ASG_ADD_REGION1 l_city = PER_ASG_ADD_TOWN_OR_CITY ) l_debug= ESS_LOG_WRITE('State Code'|| 'PER_ASG_ADD_REGION2 '||l_State_Code) l_debug= ESS_LOG_WRITE('Job DFF'|| 'PER_ASG_JOB_ATTRIBUTE1 '||l_Job_DFF) l_debug= ESS_LOG_WRITE('Work from Home Flag'|| 'l_WORK_AT_HOME '||l_WORK_AT_HOME) l_debug= ESS_LOG_WRITE('Legal Empployer name'|| 'Legal Empployer name '||l_LEGAL_EMP_NAME) IF (l_State_Code= 'CA' OR l_State_Code= 'CO' OR l_State_Code= 'IL' OR l_State_Code= 'LA' OR l_State_Code= 'MA' OR l_State_Code= 'MT' OR l_State_Code= 'ND' OR l_State_Code= 'NE' OR l_State_Code= 'NH' OR l_State_Code= 'RI') Then ( l_udt_row='CEILING (CAPPED)' l_udt_row_Ceiling='CEILING (CAPPED)' l_udt_row_Rollover='ROLLOVER(CAPPED)' l_udt_row_Carryover='CARRYOVER (CAPPED)' l_SICK_CAP_STATE = 'Y' ) Else ( l_udt_row='CEILING(NON-CAPPED)' l_udt_row_Ceiling='CEILING(NON-CAPPED)' l_udt_row_Rollover='ROLLOVER(NON-CAPPED)' l_udt_row_Carryover='CARRYOVER (NON-CAPPED)' ) IF (l_State_Code= 'AZ' OR l_State_Code= 'CA' OR l_State_Code= 'CO' OR l_State_Code= 'CT' OR l_State_Code= 'NM' OR l_State_Code= 'IL' OR l_State_Code= 'MD' OR l_State_Code= 'MA' OR l_State_Code= 'MI' OR l_State_Code= 'MN' OR l_State_Code= 'NJ' OR l_State_Code= 'NY' OR l_State_Code= 'OR' OR l_State_Code= 'RI' OR l_State_Code= 'VT' OR l_State_Code= 'WA' OR l_State_Code= 'WA' OR (l_State_Code= 'PA' AND upper(l_county) = 'ALLEGHENY') OR (l_State_Code= 'PA' AND upper(l_city) = 'PHILADELPHIA') OR (l_State_Code= 'TX' AND upper(l_city) = 'AUSTIN') OR (l_State_Code= 'TX' AND upper(l_city) = 'SAN_ANTONIO') OR (l_State_Code= 'TX' AND upper(l_city) = 'DALLAS') OR l_State_Code= 'DC') THEN ( l_SICK_ELG_STATE='Y' ) Else ( l_SICK_ELG_STATE='N' ) l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_GRANDFATHER_PTO', l_PERSON_NUMBER,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_GRANDFATHER_PTO' IF l_Plan_Type= 'XYZ' THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_VP_UP_JOB_CODE', l_PERSON_NUMBER,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN (l_Plan_Type= 'BKD_ABS_VP_UP_JOB_CODE') ) l_debug= ESS_LOG_WRITE('Lookup Plan Type '|| 'Lookup Plan Type1 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ') THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_CORP_DIRECTORS_AND_UP', l_JOB_CODE,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_CORP_DIRECTORS_AND_UP' ) l_debug= ESS_LOG_WRITE('Lookup Plan Type2 '|| 'Lookup Plan Type2 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ') THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_CORP_NURSE_THERAP_DIRE', l_JOB_CODE,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_CORP_NURSE_THERAP_DIRECTOR' ) l_debug= ESS_LOG_WRITE('Lookup Plan Type '|| 'Lookup Plan Type3 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ') THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_CORP_NURSE_THERAPIST', l_JOB_CODE,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_CORP_NURSE_THERAPIST' ) l_debug= ESS_LOG_WRITE('Lookup Plan Type '|| 'Lookup Plan Type4 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ') THEN ( l_Plan_Type=GET_LOOKUP_MEANING('BKD_ABS_FIELD_NURSE_THERAPIST', l_JOB_CODE,'XYZ') IF (l_Plan_Type<> 'XYZ') THEN l_Plan_Type= 'BKD_ABS_FIELD_NURSE_THERAPIST' ) l_debug= ESS_LOG_WRITE('Lookup Plan Type '|| 'Lookup Plan Type5 '||l_Plan_Type) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME='Brookdale Employee Services Corporate LLC' AND l_FLSA_STATUS='EXEMPT') THEN ( l_Plan_Type= 'BKD_ABS_CORP_SAL' l_debug= ESS_LOG_WRITE('Corp Sal '|| 'Corp Sal '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME='Brookdale Employee Services Corporate LLC' AND l_FLSA_STATUS='NONEXEMPT') THEN ( l_Plan_Type= 'BKD_ABS_CORP_HOUR' l_debug= ESS_LOG_WRITE('Corp Hour '|| 'Corp Hour '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME<>'Brookdale Employee Services Corporate LLC' AND l_JOB_CODE='110230') THEN ( l_Plan_Type= 'BKD_ABS_FIELD_SAL' l_debug= ESS_LOG_WRITE('Field Salary '|| 'Field Salary '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME<>'Brookdale Employee Services Corporate LLC' AND l_FLSA_STATUS='EXEMPT') THEN ( l_Plan_Type= 'BKD_ABS_FIELD_SAL' l_debug= ESS_LOG_WRITE('Field Salary '|| 'Field Salary '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_SICK_ELG_STATE='Y' AND l_FLSA_STATUS='NONEXEMPT') THEN ( l_Plan_Type= 'BKD_PTO_FOR_SICK_STATES' l_debug= ESS_LOG_WRITE('PTO_PLAN '|| 'PTO_PLAN '||l_Plan_Type) ) IF (l_Plan_Type= 'XYZ' AND l_LEGAL_EMP_NAME<>'Brookdale Employee Services Corporate LLC' AND l_FLSA_STATUS='NONEXEMPT') THEN ( l_Plan_Type= 'BKD_ABS_FIELD_HOUR' l_debug= ESS_LOG_WRITE('Field Hour'|| 'Field Hour '||l_Plan_Type) ) l_debug= ESS_LOG_WRITE('Plan Type at the End: '||l_Plan_Type) IF l_Plan_Type = 'XYZ' THEN ( accrual = 0 ceiling = 0 carryover = 0 RETURN accrual, ceiling, carryover ) l_udt_value = TO_NUMBER(GET_TABLE_VALUE ( 'BKD_ABS_PTO_PLAN_LIMITS', l_Plan_Type, l_udt_row_Ceiling, '0')) l_Ceiling=l_udt_value if l_Ceiling = 0 then l_Ceiling = 80 ceiling=l_Ceiling l_debug= ESS_LOG_WRITE('l_ceiling'|| 'l_ceiling'||To_CHAR(l_ceiling)) l_debug= ESS_LOG_WRITE('l_Plan_Type'|| 'l_Plan_Type'||l_Plan_Type) l_debug= ESS_LOG_WRITE('l_udt_row_Ceiling'|| 'l_udt_row_Ceiling'||l_udt_row_Ceiling) l_udt_value = TO_NUMBER(GET_TABLE_VALUE ( 'BKD_ABS_PTO_PLAN_LIMITS', l_Plan_Type, l_udt_row_Rollover, '0')) l_rollover=l_udt_value rollover=l_rollover l_debug= ESS_LOG_WRITE('l_rollover'|| 'l_rollover'||To_CHAR(l_rollover)) l_udt_value = TO_NUMBER(GET_TABLE_VALUE ( 'BKD_ABS_PTO_PLAN_LIMITS', l_Plan_Type, l_udt_row_Carryover, '0')) l_carryover=l_udt_value carryover=l_carryover l_debug= ESS_LOG_WRITE('l_carryover'|| 'l_carryover'||To_CHAR(l_carryover)) IF l_SICK_CAP_STATE = 'Y' THEN accrualCeiling = 80 ELSE accrualCeiling = 999 i=1 WHILE PER_SENDT_F_V3_SENIORITY_DATE.EXISTS(i) LOOP ( l_seniority_date_code = PER_SENDT_F_V3_SENIORITY_DATE_CODE[i] if l_seniority_date_code = 'BKD_Core_HR_BSD' AND ld_effective_date >= PER_SENDT_F_V3_EFFECTIVE_START_DATE[i] and ld_effective_date <= PER_SENDT_F_V3_EFFECTIVE_END_DATE[i] AND ld_effective_date >= PER_SENDT_F_V3_ENTRY_DATE[i] and ld_effective_date <= PER_SENDT_F_V3_EXIT_DATE[i] THEN ( l_seniority_date = PER_SENDT_F_V3_SENIORITY_DATE[i] l_debug= ESS_LOG_WRITE('ld_effective_date'|| 'inside loop ld_effective_date Date'||To_CHAR(ld_effective_date)) l_debug= ESS_LOG_WRITE('Seiority Date'|| 'Enterprise Seniority Date - Person - Calculated'||To_CHAR(l_seniority_date)) l_debug= ESS_LOG_WRITE('PER_SENDT_F_V3_ENTRY_DATE:'|| to_char(PER_SENDT_F_V3_ENTRY_DATE[i])) l_debug= ESS_LOG_WRITE('PER_SENDT_F_V3_EXIT_DATE:'|| to_char(PER_SENDT_F_V3_EXIT_DATE[i])) l_debug= ESS_LOG_WRITE('PER_SENDT_F_V3_EFFECTIVE_START_DATE:'|| to_char(PER_SENDT_F_V3_EFFECTIVE_START_DATE[i])) l_debug= ESS_LOG_WRITE('PER_SENDT_F_V3_EFFECTIVE_END_DATE:'|| to_char(PER_SENDT_F_V3_EFFECTIVE_END_DATE[i])) EXIT ) i=i+1 ) l_debug= ESS_LOG_WRITE('ld_effective_date'|| 'l_LOS ld_effective_date Date'||To_CHAR(ld_effective_date)) l_LOS= ROUND((MONTHS_BETWEEN(ld_effective_date, l_seniority_date)/12), 2) l_debug= ESS_LOG_WRITE('LOS'|| 'l_LOS Seniority Date'||To_CHAR(l_LOS)) l_debug= ESS_LOG_WRITE('Before Get Accrual Rate:') l_udt_value = TO_NUMBER(REPLACE(GET_TABLE_VALUE ( 'BKD_ABS_PTO_ACCRUAL_RATES', l_Plan_Type, To_CHAR(l_LOS),'0'),CHR(09))) l_debug= ESS_LOG_WRITE('UDT'|| 'Accrual Rate'||to_char(l_udt_value)) l_debug= ESS_LOG_WRITE('Just before start of loop') ln_paid_duration = 0 ln_unpaid_duration = 0 CHANGE_CONTEXTS (START_DATE= ADD_DAYS(GREATEST(l_pay_period_sd,l_enrt_start_date),-365), END_DATE = LEAST(l_pay_period_ed,l_enrt_end_date)) ( l_debug= ESS_LOG_WRITE('Pay Period Start Date:' || to_char(l_pay_period_sd)) l_debug= ESS_LOG_WRITE('Pay Period End Date:' || to_char(l_pay_period_ed)) j = 1 ln_abs_duration = 0 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(j) LOOP ( l_debug= ESS_LOG_WRITE('Insider Absence Entries Loop') l_debug= ESS_LOG_WRITE('Absence Entry ID:'||to_char(ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j])) CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_debug= ESS_LOG_WRITE('absence type:'||ANC_ABS_TYP_NAME) IF ((ANC_ABS_TYP_NAME = 'Floating Leave' OR ANC_ABS_TYP_NAME = 'E-Sick' OR ANC_ABS_TYP_NAME = 'Paid Time Off' OR ANC_ABS_TYP_NAME = 'Sick' OR ANC_ABS_TYP_NAME = 'Unpaid Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG = 'Y' THEN ( l_debug= ESS_LOG_WRITE('Insider Valid Absence Type with Basic Flag') IF ( (ANC_ABS_ENTRS_START_DATE <= GREATEST(l_pay_period_sd,l_enrt_start_date) AND ANC_ABS_ENTRS_END_DATE >= LEAST(l_pay_period_ed,l_enrt_end_date)) OR (ANC_ABS_ENTRS_START_DATE >= GREATEST(l_pay_period_sd,l_enrt_start_date) AND ANC_ABS_ENTRS_END_DATE <= LEAST(l_pay_period_ed,l_enrt_end_date)) ) THEN ( l_debug= ESS_LOG_WRITE('Absence Entries with in pay period') IF ANC_ABS_TYP_NAME = 'Unpaid Leave' then ln_unpaid_duration = ln_unpaid_duration + ANC_ABS_ENTRS_DURATION Else ln_paid_duration = ln_paid_duration + ANC_ABS_ENTRS_DURATION l_debug= ESS_LOG_WRITE('Absence Duration:' || to_char(ANC_ABS_ENTRS_DURATION)|| 'for absence type:'||ANC_ABS_TYP_NAME ||'with start date:' ||to_char(ANC_ABS_ENTRS_START_DATE)) ) ) ELSE IF ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG = 'N' THEN ( l_debug= ESS_LOG_WRITE('Insider Valid Absence Type with Advanced Flag') l_debug= ESS_LOG_WRITE('Absence Plan ID is:'||to_char(ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR[1])) l = 1 WHILE ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR.exists(l) Loop ( CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR[l]) ( k = 1 WHILE ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR.exists(k) LOOP ( l_debug= ESS_LOG_WRITE('Inside Plan Entry Detaild id loop') l_debug= ESS_LOG_WRITE('Absence Plan accrual entry details id:'||to_char(ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR[k])) IF ( (ANC_ABS_PLN_ENTR_START_DATE_ARR[k] <= GREATEST(l_pay_period_sd,l_enrt_start_date) AND ANC_ABS_PLN_ENTR_END_DATE_ARR[k] >= LEAST(l_pay_period_ed,l_enrt_end_date)) OR (ANC_ABS_PLN_ENTR_START_DATE_ARR[k] >= GREATEST(l_pay_period_sd,l_enrt_start_date) AND ANC_ABS_PLN_ENTR_END_DATE_ARR[k] <= LEAST(l_pay_period_ed,l_enrt_end_date)) ) THEN ( l_debug= ESS_LOG_WRITE('Absence Entries with in pay period') IF ANC_ABS_TYP_NAME = 'Unpaid Leave' then ln_unpaid_duration = ln_unpaid_duration + ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[k] Else ln_paid_duration = ln_paid_duration + ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[k] l_debug= ESS_LOG_WRITE('Absence Duration:' || to_char(ANC_ABS_PLN_ENTR_ABS_UNITS_ARR[k])|| 'for absence type:'||ANC_ABS_TYP_NAME ||'with start date:' ||to_char(ANC_ABS_PLN_ENTR_START_DATE_ARR[k])) ) k = k + 1 ) ) l = l+ 1 ) ) ) ) j = j + 1 ) ) ) IF l_FLSA_STATUS='NONEXEMPT' THEN ( CHANGE_CONTEXTS(START_DATE = GREATEST(l_pay_period_sd,l_enrt_start_date), END_DATE = LEAST(l_pay_period_ed,l_enrt_end_date)) ( i=1 l_WORKED_HOURS = 0 l_debug= ESS_LOG_WRITE('After change contexts') l_debug= ESS_LOG_WRITE('Payroll Relationship ID:'||to_char(l_payroll_relationship_id)) WHILE ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME.EXISTS(i) LOOP ( l_debug= ESS_LOG_WRITE('Inside loop '||to_char(i)) IF ((ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'In-Service' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time Retro' ) AND (ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours' OR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours Calculated') AND ( (GREATEST(l_pay_period_sd,l_enrt_start_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and GREATEST(l_pay_period_sd,l_enrt_start_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i]) OR (LEAST(l_pay_period_ed,l_enrt_end_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and LEAST(l_pay_period_ed,l_enrt_end_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i])) ) then ( l_debug= ESS_LOG_WRITE('Element Name '||ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i]) l_debug= ESS_LOG_WRITE('Input Value '||ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i]) l_debug= ESS_LOG_WRITE('Hours Worked '||ELEMENT_ENTRY_RGE_VALUE[i]) IF IS_TEXT_NULL(ELEMENT_ENTRY_RGE_VALUE[i]) = 'Y' then l_WORKED_HOURS = l_WORKED_HOURS + to_number(ELEMENT_ENTRY_RGE_VALUE[i]) Else l_WORKED_HOURS = l_WORKED_HOURS ) i = i + 1 ) l_WORKED_HOURS = l_WORKED_HOURS + ln_paid_duration ) ) Else ( l_debug= ESS_LOG_WRITE('Inside Else for Exempt') l_WORKED_HOURS = l_asg_hours if DAYS_BETWEEN(l_pay_period_ed,l_pay_period_sd) > 7 then l_WORKED_HOURS = l_WORKED_HOURS + l_WORKED_HOURS l_debug= ESS_LOG_WRITE('l_WORKED_HOURS for exempt:'||to_char(l_WORKED_HOURS)) l_reduce_prorated_hours = 0 IF l_enrt_start_date > l_pay_period_sd or l_enrt_end_date < l_pay_period_ed then ( i = 0 WHILE i < days_between(l_enrt_start_date,l_pay_period_sd) Loop ( l_debug= ESS_LOG_WRITE('inside prorated loop i:'||to_char(i)) loop_days = ADD_DAYS(l_pay_period_sd,i) l_debug= ESS_LOG_WRITE('inside prorated loop loop_days:'||to_char(loop_days)) l_debug= ESS_LOG_WRITE('inside prorated loop loop_days day:'||to_char(loop_days,'DAY')) IF to_char(loop_days,'DAY') = '1' OR to_char(loop_days,'DAY') = '2' OR to_char(loop_days,'DAY') = '3' OR to_char(loop_days,'DAY') = '5' OR to_char(loop_days,'DAY') = '5' then l_reduce_prorated_hours = l_reduce_prorated_hours + (l_asg_hours/5) i = i + 1 ) i = 0 WHILE i < days_between(l_pay_period_ed,l_enrt_end_date) Loop ( l_debug= ESS_LOG_WRITE('inside prorated loop i:'||to_char(i)) loop_days = ADD_DAYS(l_enrt_end_date,i) l_debug= ESS_LOG_WRITE('inside prorated loop loop_days:'||to_char(loop_days)) l_debug= ESS_LOG_WRITE('inside prorated loop loop_days day:'||to_char(loop_days,'DAY')) IF to_char(loop_days,'DAY') = '1' OR to_char(loop_days,'DAY') = '2' OR to_char(loop_days,'DAY') = '3' OR to_char(loop_days,'DAY') = '5' OR to_char(loop_days,'DAY') = '5' then l_reduce_prorated_hours = l_reduce_prorated_hours + (l_asg_hours/5) i = i + 1 ) ) IF l_pay_period_ed = '2024/06/15 00:00:00' (date) then l_reduce_prorated_hours = 0 l_debug= ESS_LOG_WRITE('l_reduce_prorated_hours'||to_char(l_reduce_prorated_hours)) CHANGE_CONTEXTS(START_DATE = GREATEST(l_pay_period_sd,l_enrt_start_date), END_DATE = LEAST(l_pay_period_ed,l_enrt_end_date)) ( i=1 l_exempt_worked_hours = 0 l_debug= ESS_LOG_WRITE('After change contexts') l_debug= ESS_LOG_WRITE('Payroll Relationship ID:'||to_char(l_payroll_relationship_id)) WHILE ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME.EXISTS(i) LOOP ( l_debug= ESS_LOG_WRITE('Inside loop for exempt worked hours'||to_char(i)) l_debug= ESS_LOG_WRITE('Element Name'||ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i]) IF ((ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Exempt Worked Hours') AND (ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours Worked') AND ( (GREATEST(l_pay_period_sd,l_enrt_start_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and GREATEST(l_pay_period_sd,l_enrt_start_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i]) OR (LEAST(l_pay_period_ed,l_enrt_end_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and LEAST(l_pay_period_ed,l_enrt_end_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i])) ) then ( l_debug= ESS_LOG_WRITE('Element Name '||ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i]) l_debug= ESS_LOG_WRITE('Input Value '||ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i]) l_debug= ESS_LOG_WRITE('Hours Worked '||ELEMENT_ENTRY_RGE_VALUE[i]) IF IS_TEXT_NULL(ELEMENT_ENTRY_RGE_VALUE[i]) = 'Y' then l_exempt_worked_hours = l_exempt_worked_hours + to_number(ELEMENT_ENTRY_RGE_VALUE[i]) Else l_exempt_worked_hours = l_exempt_worked_hours ) i = i + 1 ) ) l_debug= ESS_LOG_WRITE('ln_unpaid_duration '||to_char(ln_unpaid_duration)) l_WORKED_HOURS = GREATEST((l_WORKED_HOURS - ln_unpaid_duration + l_exempt_worked_hours - l_reduce_prorated_hours),0) ) l_debug= ESS_LOG_WRITE('Worked Hours '|| 'Worked Hours '||To_CHAR(l_WORKED_HOURS)) if l_udt_value <> 0 and l_WORKED_HOURS > 0 then accrual = l_udt_value * l_WORKED_HOURS accrual = least(l_per_period_cap,accrual) l_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_log = ESS_LOG_WRITE('Plan Balance HR Assignment ID '||to_char(l_ASSIGNMENT_ID)) l_PERSON_ID = GET_CONTEXT(PERSON_ID,1) l_log = ESS_LOG_WRITE('Plan Balance Person ID '||to_char(l_PERSON_ID)) L_Eff_Dt = GET_CONTEXT(EFFECTIVE_DATE,'0001/12/31 00:00:00' (date)) l_log = ESS_LOG_WRITE('Plan Balance Effective Date '||to_char(L_Eff_Dt)) L_LDG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_log = ESS_LOG_WRITE('Plan Balance LDG '||to_char(L_LDG_ID)) CHANGE_CONTEXTS(LEGISLATIVE_DATA_GROUP_ID = L_LDG_ID,HR_ASSIGNMENT_ID = l_ASSIGNMENT_ID,PERSON_ID = l_PERSON_ID,EFFECTIVE_DATE =LAST_DAY(TEMP_ACCRUAL_PERIOD_START_DATE)) ( l_LEAVE_PLAN_BALANCE = GET_PLAN_BALANCE(l_PLAN_NAME) ) l_debug= ESS_LOG_WRITE('Leave Balance '|| 'Leave balance '||TO_CHAR(l_LEAVE_PLAN_BALANCE)) l_log = ESS_LOG_WRITE('l_SICK_ELG_STATE '||l_SICK_ELG_STATE) IF l_SICK_CAP_STATE = 'Y' AND (l_LEAVE_PLAN_BALANCE+accrual) > 80 then ( accrual = 0 adjustmentvalues[1] = 80 - (l_LEAVE_PLAN_BALANCE+accrual) adjustmentdates[1] = ld_effective_date adjustmenttypes[1] = 'BKD_SICK_CAP' ) accrual = round(accrual, 2) if PER_EMP_TERMINATION_ACTION_CODE was defaulted AND l_enrt_end_date <= l_pay_period_ed then ( l_log = ESS_LOG_WRITE('Into Loss of Eligibility Logic') l_log = ESS_LOG_WRITE('PER_ASG_EMPLOYMENT_CATEGORY_MEANING:'||PER_ASG_EMPLOYMENT_CATEGORY_MEANING) l_log = ESS_LOG_WRITE('L_Eff_Dt:'||to_char(L_Eff_Dt)) l_log = ESS_LOG_WRITE('Final Balance:'||to_char((l_LEAVE_PLAN_BALANCE+accrual))) IF PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Part-time/PRN regular' OR PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Part-time/PRN temporary' OR PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Part-time/Pool temporary' OR PER_ASG_EMPLOYMENT_CATEGORY_MEANING = 'Part-time/Pool regular' THEN ( IF l_LOS < 1 AND (l_LEAVE_PLAN_BALANCE+accrual) > 0 then ( adjustmentvalues[1] = (l_LEAVE_PLAN_BALANCE+accrual) * -1 adjustmentdates[1] = L_Eff_Dt adjustmenttypes[1] = 'BKD_FO' ) ELSE IF l_seniority_date < l_pto_pay_old_hire_date and l_LOS >= 1 and l_LOS <2 AND (l_LEAVE_PLAN_BALANCE+accrual) > 40 then ( adjustmentvalues[1] = 40 - (l_LEAVE_PLAN_BALANCE+accrual) adjustmentdates[1] = L_Eff_Dt adjustmenttypes[1] = 'BKD_FO' ) ELSE IF l_seniority_date < l_pto_pay_old_hire_date and l_LOS >= 2 and l_LOS <5 AND (l_LEAVE_PLAN_BALANCE+accrual) > 60 then ( adjustmentvalues[1] = 60 - (l_LEAVE_PLAN_BALANCE+accrual) adjustmentdates[1] = L_Eff_Dt adjustmenttypes[1] = 'BKD_FO' ) ELSE IF l_seniority_date < l_pto_pay_old_hire_date and l_LOS >= 5 AND (l_LEAVE_PLAN_BALANCE+accrual) > 80 then ( adjustmentvalues[1] = 80 - (l_LEAVE_PLAN_BALANCE+accrual) adjustmentdates[1] = L_Eff_Dt adjustmenttypes[1] = 'BKD_FO' ) ELSE IF l_seniority_date >= l_pto_pay_old_hire_date and l_LOS >_x0000_",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BKD ABS Chicago State Part Time PTO Absence Accrual Matrix",
        "answer": "DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_PLANENROLLMENTSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_VALUE is 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME is 'XX' DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'XX' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_ENTRY_BASIC_FLAG is 'XX' DEFAULT_DATA_VALUE FOR ANC_ABS_TYPE_PLAN_ABSENCE_PLAN_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_PER_ACCRUAL_ENTRY_DTL_ID_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_ABS_UNITS_ARR is 0 DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_END_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ABS_PLN_ENTR_START_DATE_ARR is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION1 IS 'N' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY IS ' ' DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ADD_REGION2 IS 'XX' DEFAULT FOR PER_ASG_LOC_REGION2 IS 'XX' DEFAULT FOR PER_ASG_ADD_REGION1 IS 'XX' DEFAULT FOR PER_ASG_LOC_REGION1 IS 'XX' DEFAULT FOR PER_ASG_ADD_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_LOC_TOWN_OR_CITY IS 'XX' DEFAULT FOR PER_ASG_WORK_AT_HOME IS 'N' DEFAULT FOR PER_ASG_ORG_LEGAL_EMPLOYER_NAME IS 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_TYPE IS ' ' DEFAULT FOR PER_ASG_PRIMARY_FLAG IS ' ' DEFAULT FOR PER_ASG_ORG_ATTRIBUTE4 is 'XX' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_EMP_TERMINATION_ACTION_CODE is 'XYZ' DEFAULT FOR PER_EMP_TERMINATION_ACTION_NAME is 'XYZ' INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date),IV_CEILING,IV_CARRYOVER ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_ft_flag = 'X' l_eligible = 'N' l_work_location = PER_ASG_LOC_REGION2 l_bu_code = PER_ASG_ORG_ATTRIBUTE4 i=1 WHILE PER_PERSON_EIT_ALL_PEI_INFORMATION1.EXISTS(i) LOOP ( IF PER_PERSON_EIT_ALL_PEI_INFORMATION_CATEGORY[i] = 'Person Additional Info' AND ld_effective_date >= PER_PERSON_EIT_ALL_EFFECTIVE_START_DATE[i] AND ld_effective_date <= PER_PERSON_EIT_ALL_EFFECTIVE_END_DATE[i] THEN ( l_ft_flag = PER_PERSON_EIT_ALL_PEI_INFORMATION1[i] EXIT ) i = i + 1 ) l_log = ESS_LOG_WRITE('PER_ASG_ASSIGNMENT_TYPE: '||PER_ASG_ASSIGNMENT_TYPE) l_log = ESS_LOG_WRITE('PER_ASG_PRIMARY_FLAG : '||PER_ASG_PRIMARY_FLAG) l_log = ESS_LOG_WRITE('l_ft_flag : '||l_ft_flag) l_log = ESS_LOG_WRITE('l_work_location : '||l_work_location) l_log = ESS_LOG_WRITE('l_bu_code: '||l_bu_code) IF ( PER_ASG_ASSIGNMENT_TYPE = 'E' AND PER_ASG_PRIMARY_FLAG = 'Y' AND l_ft_flag = 'N' AND l_work_location = 'IL' AND (l_bu_code = '00806' OR l_bu_code = '00821' )) THEN ( l_eligible = 'Y' ) IF l_eligible = 'N' then ( accrual = 0 ceiling = IV_CEILING carryover = IV_CARRYOVER return accrual, ceiling, carryover ) l_enrt_start_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE l_payroll_relationship_id = GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,0) E = GET_PAYROLL_PERIOD(ld_effective_date) l_pay_period_sd = GET_DATE('PAYROLL_PERIOD_START_DATE') l_pay_period_ed = GET_DATE('PAYROLL_PERIOD_END_DATE') TEMP_ACCRUAL_PERIOD_START_DATE = ADD_DAYS(l_pay_period_sd,-1) l_LEAVE_PLAN_BALANCE = 0 l_PLAN_NAME='Chicago Part Time PTO' ln_paid_duration = 0 ln_unpaid_duration = 0 l_WORKED_HOURS=0 accrual = 0 l_term_code = PER_EMP_TERMINATION_ACTION_CODE l_term_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_log = ESS_LOG_WRITE('Plan Balance HR Assignment ID '||to_char(l_ASSIGNMENT_ID)) l_PERSON_ID = GET_CONTEXT(PERSON_ID,1) l_log = ESS_LOG_WRITE('Plan Balance Person ID '||to_char(l_PERSON_ID)) L_Eff_Dt = GET_CONTEXT(EFFECTIVE_DATE,'0001/12/31 00:00:00' (date)) l_log = ESS_LOG_WRITE('Plan Balance Effective Date '||to_char(L_Eff_Dt)) L_LDG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_log = ESS_LOG_WRITE('Plan Balance LDG '||to_char(L_LDG_ID)) CHANGE_CONTEXTS(START_DATE = GREATEST(l_pay_period_sd,l_enrt_start_date), END_DATE = LEAST(l_pay_period_ed,l_enrt_end_date)) ( i=1 l_WORKED_HOURS = 0 l_debug= ESS_LOG_WRITE('After change contexts') l_debug= ESS_LOG_WRITE('Payroll Relationship ID:'||to_char(l_payroll_relationship_id)) WHILE ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME.EXISTS(i) LOOP ( l_debug= ESS_LOG_WRITE('Inside loop '||to_char(i)) IF ((ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Funeral Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Jury Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Alternate Paid Sick Leave' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Paid Holiday' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Everyday Hero PTO' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'PTO - CEO Elite And Chairman' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Event' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Transitional Duty' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'In-Service' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Kept on Salary-Regular Pay WA' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Holiday Worked Regular' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Baylor Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Regular Hours - Hourly' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime AL Exempt Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'Overtime Earnings Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'CA Double Time Retro' OR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i] = 'REG - Regular Hours - Hourly' ) AND (ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours' OR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i] = 'Hours Calculated') AND ( (GREATEST(l_pay_period_sd,l_enrt_start_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and GREATEST(l_pay_period_sd,l_enrt_start_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i]) OR (LEAST(l_pay_period_ed,l_enrt_end_date) >= ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE[i] and LEAST(l_pay_period_ed,l_enrt_end_date) <= ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE[i])) ) then ( l_debug= ESS_LOG_WRITE('Element Name '||ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME[i]) l_debug= ESS_LOG_WRITE('Input Value '||ELEMENT_ENTRY_RGE_BASE_VALUE_NAME[i]) l_debug= ESS_LOG_WRITE('Hours Worked '||ELEMENT_ENTRY_RGE_VALUE[i]) IF IS_TEXT_NULL(ELEMENT_ENTRY_RGE_VALUE[i]) = 'Y' then l_WORKED_HOURS = l_WORKED_HOURS + to_number(ELEMENT_ENTRY_RGE_VALUE[i]) Else l_WORKED_HOURS = l_WORKED_HOURS ) i = i + 1 ) l_WORKED_HOURS = l_WORKED_HOURS + ln_paid_duration ) l_WORKED_HOURS = GREATEST((l_WORKED_HOURS),0) ceiling = IV_CEILING carryover = IV_CARRYOVER if l_WORKED_HOURS <> 0 then accrual = l_WORKED_HOURS * IV_ACCRUAL CHANGE_CONTEXTS(LEGISLATIVE_DATA_GROUP_ID = L_LDG_ID,HR_ASSIGNMENT_ID = l_ASSIGNMENT_ID,PERSON_ID = l_PERSON_ID,EFFECTIVE_DATE =LAST_DAY(TEMP_ACCRUAL_PERIOD_START_DATE)) ( l_LEAVE_PLAN_BALANCE = GET_PLAN_BALANCE(l_PLAN_NAME) ) l_debug= ESS_LOG_WRITE('Leave Balance '|| 'Leave balance '||TO_CHAR(l_LEAVE_PLAN_BALANCE)) accrual = round(accrual, 2) return accrual, ceiling, carryover",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AMICO_LEAVE_ACCRUAL_MATRIX_FF",
        "answer": "DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For AMICO_TIMETOTAL_WORK_HOURS_ASG_RP IS 0 DEFAULT FOR PER_ASG_LENGTH_OF_SERVICE_BY_SENIORITY IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ERROR_MESSAGE IS 'XX' INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) l_debug_flag = 'Y' l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Std_wrk_Hour1=PER_ASG_STANDARD_WORKING_HOURS L_Std_wrk_Hour ='0' L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_no_of_days = days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)), PER_PERSON_ENTERPRISE_HIRE_DATE) l_length_of_service =(l_no_of_days / 365) L_len_of_ser = l_length_of_service Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) L_Std_wrk_Hour = GET_VALUE_SET('AMICO_ASSIGNMENT_WORK_HOURS','|=P_ASSIGN_ID='''||to_char(L_Assignemnt_id)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'L_len_of_ser= '||to_char(L_len_of_ser)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'l_no_of_days= '||to_char(l_no_of_days)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'l_length_of_service= '||to_char(l_length_of_service)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'PER_PERSON_ENTERPRISE_HIRE_DATE= '||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum =AMICO_TIMETOTAL_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) IF L_Std_wrk_Hour='40' and (L_len_of_ser < 10) THEN (l_accrual = (l_total_hours_worked *0.007211538) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='40' and (L_len_of_ser >= 10 and L_len_of_ser < 15) THEN (l_accrual = (l_total_hours_worked *0.009615385) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='40' and (L_len_of_ser >= 15 and L_len_of_ser < 20) THEN (l_accrual = (l_total_hours_worked *0.010576923) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='40' and (L_len_of_ser >= 20 and L_len_of_ser < 25) THEN (l_accrual = (l_total_hours_worked *0.012019231) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='40' and (L_len_of_ser >= 25 and L_len_of_ser < 30) THEN (l_accrual = (l_total_hours_worked *0.012980769) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='40' and (L_len_of_ser >=30) THEN (l_accrual = (l_total_hours_worked *0.014423077) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='50' and (L_len_of_ser < 10) THEN (l_accrual = (l_total_hours_worked *0.005769231) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='50' and (L_len_of_ser >= 10 and L_len_of_ser < 15) THEN (l_accrual = (l_total_hours_worked *0.007692308) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='50' and (L_len_of_ser >= 15 and L_len_of_ser < 20) THEN (l_accrual = (l_total_hours_worked *0.008461538) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='50' and (L_len_of_ser >= 20 and L_len_of_ser < 25) THEN (l_accrual = (l_total_hours_worked *0.009615385) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='50' and (L_len_of_ser >= 25 and L_len_of_ser < 30) THEN (l_accrual = (l_total_hours_worked *0.010384615) accrual = ROUND(l_accrual,2)) IF L_Std_wrk_Hour='50' and (L_len_of_ser >=30) THEN (l_accrual = (l_total_hours_worked *0.011538462) accrual = ROUND(l_accrual,2)) if (l_debug_flag = 'Y') THEN ( l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'L_len_of_ser= '||to_char(L_len_of_ser)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'L_Std_wrk_Hour= '||(L_Std_wrk_Hour)) l_log = ESS_LOG_WRITE('AMICO_LEAVE_ACCRUAL_MATRIX_FF'||'= l_total_hours_worked '||to_char(l_hours_sum)) ) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BBC_ABS_LOA Rule",
        "answer": "DEFAULT for PER_ASG_STATUS_CODE is 'A' INPUTS are IV_ACCRUAL If ( PER_ASG_STATUS_CODE = 'LOA' ) then (accrual = 0) else (accrual = IV_ACCRUAL) return accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BBC_ABS_ACCRUAL_TRANSFER_LOA",
        "answer": "INPUTS are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_PLANENROLLMENTSTARTDATE (date), IV_ACCRUAL DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START is '01-JAN-1951' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '2001/01/01'(date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '2001/01/01'(date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '01-JAN-1951' (date) DEFAULT FOR PER_ASG_ACTION_CODE IS ' ' DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '2001/01/01'(Date) DEFAULT for PER_ASG_STATUS_CODE is 'A' HR_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) PER_ID = GET_CONTEXT(Person_ID,0) EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) LEG_GROUP = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) HR_NEW_ASSIGNMENT_ID = 0 DEFAULT_NEW_ASSIGNMENT_ID = 0 L_Person_ID = GET_CONTEXT(PERSON_ID,0) p_pl_name_one = 'PTO BBC and SACB' p_pl_name_two = 'PTO CA' p_pl_name_three = 'PTO MA and NYC' p_pl_name_four = 'PTO SAPB' L_EFFECTIVE_END_DATE = IV_ACCRUALPERIODENDDATE DATE_TO_USE = '01-JAN-1951' (date) NEW_DATE = ADD_DAYS (IV_PLANENROLLMENTSTARTDATE,-1) ASG_TO_USE = 0 accrual = 0 l_st_date = PER_ASG_EFFECTIVE_START_DATE L_PER_ASG_ACTION_CODE = PER_ASG_ACTION_CODE l = ess_log_write('LEG_GROUP'||to_char(LEG_GROUP)) l = ess_log_write('IV_ACCRUALPERIODENDDATE'||to_char(IV_ACCRUALPERIODENDDATE,'dd-mm-yyyy')) l = ess_log_write('IV_ACCRUALPERIODSTARTDATE'||to_char(IV_ACCRUALPERIODSTARTDATE,'dd-mm-yyyy')) WHILE (L_EFFECTIVE_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND LEAST(PER_PERSON_ENTERPRISE_HIRE_DATE,PER_ASG_REL_DATE_START)=<L_EFFECTIVE_END_DATE) LOOP ( IF L_PER_ASG_ACTION_CODE = 'GLB_TRANSFER' then (L_EFFECTIVE_END_DATE = ADD_DAYS(l_st_date,-1) l = ess_log_write('l_PER_ASG_ACTION_CODE'||l_PER_ASG_ACTION_CODE) CHANGE_CONTEXTS(EFFECTIVE_DATE = L_EFFECTIVE_END_DATE) ( CALL_FORMULA('BBC_ABS_GET_GLOBAL_ASSIGNMENT_ID',L_PERSON_ID > 'PERSON_ID' ,L_EFFECTIVE_END_DATE > 'EFFECTIVE_DATE', HR_NEW_ASSIGNMENT_ID < 'HR_NEW_ASSIGNMENT_ID' DEFAULT 0) IF HR_NEW_ASSIGNMENT_ID > 0 THEN ( DATE_TO_USE = L_EFFECTIVE_END_DATE ASG_TO_USE = HR_NEW_ASSIGNMENT_ID l = ess_log_write('DATE_TO_USE'||to_char(DATE_TO_USE,'dd/mm/yyyy')) l = ess_log_write('ASG_TO_USE'||to_char(ASG_TO_USE)) ) EXIT ) ) ELSE ( L_EFFECTIVE_END_DATE = ADD_DAYS(l_st_date ,-1) CHANGE_CONTEXTS(EFFECTIVE_DATE = L_EFFECTIVE_END_DATE) (L_PER_ASG_ACTION_CODE = PER_ASG_ACTION_CODE l_st_date = PER_ASG_EFFECTIVE_START_DATE ) l = ess_log_write('L_PER_ASG_ACTION_CODE'||PER_ASG_ACTION_CODE) l = ess_log_write('l_st_date'||to_char(l_st_date,'dd-mm-yyyy')) ) ) l = ess_log_write('DATE_TO_USE'||to_char(DATE_TO_USE,'dd/mm/yyyy')) l = ess_log_write('ASG_TO_USE'||to_char(ASG_TO_USE)) l = ess_log_write('LEG_GROUP'||to_char(LEG_GROUP)) l = ess_log_write('PER_ID'||to_char(PER_ID)) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID=ASG_TO_USE,PERSON_ID=PER_ID,EFFECTIVE_DATE=DATE_TO_USE,LEGISLATIVE_DATA_GROUP_ID=LEG_GROUP) accrual_one_global = GET_PLAN_BALANCE(p_pl_name_one) l = ess_log_write('L_PER_ASG_ACTION_CODE'||L_PER_ASG_ACTION_CODE) l = ess_log_write('accrual_one_global'||to_char(accrual_one_global)) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID=ASG_TO_USE,PERSON_ID=PER_ID,EFFECTIVE_DATE=DATE_TO_USE,LEGISLATIVE_DATA_GROUP_ID=LEG_GROUP) accrual_two_global = GET_PLAN_BALANCE(p_pl_name_two) l = ess_log_write('accrual_two_global'||to_char(accrual_two_global)) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID=ASG_TO_USE,PERSON_ID=PER_ID,EFFECTIVE_DATE=DATE_TO_USE,LEGISLATIVE_DATA_GROUP_ID=LEG_GROUP) accrual_three_global = GET_PLAN_BALANCE(p_pl_name_three) l = ess_log_write('accrual_three_global'||to_char(accrual_three_global)) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID=ASG_TO_USE,PERSON_ID=PER_ID,EFFECTIVE_DATE=DATE_TO_USE,LEGISLATIVE_DATA_GROUP_ID=LEG_GROUP) accrual_four_global = GET_PLAN_BALANCE(p_pl_name_four) l = ess_log_write('accrual_four_global'||to_char(accrual_four_global)) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID=HR_ID,PERSON_ID=PER_ID,EFFECTIVE_DATE=NEW_DATE,LEGISLATIVE_DATA_GROUP_ID=LEG_GROUP) accrual_one_current = GET_PLAN_BALANCE(p_pl_name_one) l = ess_log_write('L_PER_ASG_ACTION_CODE'||L_PER_ASG_ACTION_CODE) l = ess_log_write('accrual_one_current'||to_char(accrual_one_current)) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID=HR_ID,PERSON_ID=PER_ID,EFFECTIVE_DATE=NEW_DATE,LEGISLATIVE_DATA_GROUP_ID=LEG_GROUP) accrual_two_current = GET_PLAN_BALANCE(p_pl_name_two) l = ess_log_write('accrual_two_current'||to_char(accrual_two_current)) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID=HR_ID,PERSON_ID=PER_ID,EFFECTIVE_DATE=NEW_DATE,LEGISLATIVE_DATA_GROUP_ID=LEG_GROUP) accrual_three_current = GET_PLAN_BALANCE(p_pl_name_three) l = ess_log_write('accrual_three_current'||to_char(accrual_three_current)) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID=HR_ID,PERSON_ID=PER_ID,EFFECTIVE_DATE=NEW_DATE,LEGISLATIVE_DATA_GROUP_ID=LEG_GROUP) accrual_four_current = GET_PLAN_BALANCE(p_pl_name_four) l = ess_log_write('accrual_four_current'||to_char(accrual_four_current)) IF ((IV_PLANENROLLMENTSTARTDATE >= IV_ACCRUALPERIODSTARTDATE) and (IV_PLANENROLLMENTSTARTDATE <= IV_ACCRUALPERIODENDDATE)) THEN (accrual = accrual_one_global + accrual_two_global + accrual_three_global + accrual_four_global + accrual_one_current + accrual_two_current + accrual_three_current + accrual_four_current + IV_ACCRUAL) ELSE If (PER_ASG_STATUS_CODE != 'LOA') then (accrual = IV_ACCRUAL) If (PER_ASG_STATUS_CODE = 'LOA') then (accrual = 0) l = ess_log_write('PERSON_NUMBER : ' || PER_ASG_PERSON_NUMBER) l = ess_log_write('accrual'||to_char(accrual)) RETURN accrual",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "BBC_ABS_GET_GLOBAL_ASSIGNMENT_ID",
        "answer": "DEFAULT FOR PER_ASG_ASSIGNMENT_ID is 0 L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_EFFECTIVE_DATE = GET_CONTEXT(EFFECTIVE_DATE,to_date('1951/01/01 00:00:00')) COUNT_FOR_ASG = 0 l = ess_log_write('GLOBAL 0:'||to_char(L_EFFECTIVE_DATE)||'PERSONID'||TO_CHAR(L_Person_ID)) KOUNT = PER_EXT_ASG_PERSON_ID.FIRST(-1234) WHILE PER_EXT_ASG_PERSON_ID.EXISTS(KOUNT) LOOP ( IF (L_Person_ID = PER_EXT_ASG_PERSON_ID[KOUNT]) THEN ( IF (PER_EXT_ASG_STATUS_TYPE[KOUNT] = 'ACTIVE' AND PER_EXT_ASG_PRIMARY_FLAG[KOUNT] = 'Y') THEN ( COUNT_FOR_ASG = KOUNT l = ess_log_write('GLOBAL:'||TO_CHAR(PER_EXT_ASG_ASSIGNMENT_ID[COUNT_FOR_ASG])) HR_NEW_ASSIGNMENT_ID = PER_EXT_ASG_ASSIGNMENT_ID[COUNT_FOR_ASG] EXIT ) ) KOUNT = PER_EXT_ASG_PERSON_ID.NEXT(KOUNT,-1234) ) RETURN HR_NEW_ASSIGNMENT_ID",
        "question": "This formula is designed to return the Global Assignment ID for an employee. It starts by retrieving the employee's ID and assignment ID from the context. Then, it iterates through the list of external assignments for the employee, checking for an active and primary assignment. Once it finds such an assignment, it sets the Global Assignment ID to that assignment's ID and exits the loop. The final Global Assignment ID is then returned.",
        "FORMULA_TYPE_NAME": "Global Absence Accrual Matrix",
        "LEGISLATIVE_DATA_GROUP": "US Legislative Data Group"
    }
]