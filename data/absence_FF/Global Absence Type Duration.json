[
    {
        "FORMULA_NAME": "ORA_HRX_FR_PARTIAL_TIME_ABS_DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') lc_use_sch_asg_y = 'Y' lc_use_sch_inh_y = 'Y' lc_include_noshift_y = 'Y' lc_include_calevents_y = 'Y' lc_calc_units_d = 'D' ln_unrounded_duration_d = GET_PAY_AVAILABILITY (lc_asg_resource_type, ld_period_start_date, ld_period_end_date, lc_use_sch_asg_y, lc_use_sch_inh_y, lc_include_noshift_y, lc_include_calevents_y, lc_calc_units_d) IF PER_ASG_EMPLOYMENT_CATEGORY ='FR_20' THEN ln_duration = ln_unrounded_duration_d * (1/PER_ASG_FTE_VALUE) ELSE ln_duration = ln_unrounded_duration_d duration = ln_duration RETURN duration",
        "question": "Write an absence plan entitlement formua for: Service Calculation:  It calculates the employee's length of service in years based on the seniority date and the matching date. Primary Assignment Check:  If the employee has at least one year of service and the primary assignment flag is 'Y', it checks an additional attribute (ANC_ABS_ENTRS_ATTRIBUTE3). If write a  attribute contains 'Y', it sets the pay factors and entitlements for four bands as follows: Band 1: 100% pay, 0 days entitlement Band 2: 90% pay, 42 days entitlement Band 3: 50% pay, 84 days entitlement Band 4: 0% pay, 147 days entitlement If the attribute does not contain 'Y', it sets the pay factors and entitlements for four bands as follows: Band 1: 100% pay, 0 days entitlement Band 2: 90% pay, 42 days entitlement Band 3: 50% pay, 0 days entitlement Band 4: 0% pay, 147 days entitlement Default Values:  If the employee does not meet the primary assignment check, it sets the pay factors and entitlements for four bands as follows: Band 1: 100% pay, 0 days entitlement Band 2: 90% pay, 0 days entitlement Band 3: 50% pay, 0 days entitlement Band 4: 0% pay, 0 days entitlement",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF AF Absence Duration",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 50 DEFAULT FOR IV_END_DURATION IS 100 DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text),IV_START_DURATION,IV_END_DURATION,iv_abs_start_date (date),iv_abs_end_date (date) p_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') p_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') DURATION=0 ln_entry_duration_d=0 l_total_duration_d = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_HR_ASS_id= GET_CONTEXT(HR_ASSIGNMENT_ID,100) r = ess_log_write ('Type Call Start Afghanistan Annual Leave==============================================' ) l_person_id = GET_CONTEXT(PERSON_ID,0) l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(l_HR_ASS_id)||''''||'|EFF_DATE='''||to_char(IV_START_DATE,'DD-MM-YYYY')||'''') l_debug = ess_log_write('l_schedule: ' + l_schedule) l_debug = ess_log_write('l_date_shift: ' + to_char(iv_start_date, 'DDMMYYYY')) l_debug = ess_log_write('l_end_date_shift: ' + to_char(iv_end_date, 'DDMMYYYY')) l_debug = ess_log_write('IV_ABS_START_DATE: ' + to_char(IV_ABS_START_DATE, 'DDMMYYYY')) l_debug = ess_log_write('IV_ABS_END_DATE: ' + to_char(IV_ABS_END_DATE, 'DDMMYYYY')) l_debug = ess_log_write('D_IV_START_DATE: ' + to_char(D_IV_START_DATE, 'DDMMYYYY')) l_debug = ess_log_write('D_IV_END_DATE: ' + to_char(D_IV_END_DATE, 'DDMMYYYY')) IF (l_schedule = '8 hours Elapsed General Work Schedule AFG NEW' ) THEN ( WHILE (TRUNC(D_IV_START_DATE)<= TRUNC(D_IV_END_DATE)) LOOP ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d1 = ln_entry_duration_d1 IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d D_IV_START_DATE=ADD_DAYS(D_IV_START_DATE,1) ) RETURN DURATION ) ELSE ( l_date = iv_start_date WHILE (l_date <= iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') If l_schedule = 'New Afghanistan General Work Schedule Summer with 1 Hour break' then ( IF (L_DAY>0 AND L_DAY<=4.5) THEN (L_DAY = 4) IF (L_DAY>4.5) THEN (L_DAY =8)) IF (L_DAY>0 AND L_DAY<=1) THEN (L_DAY = 1) IF (L_DAY>1 AND L_DAY<=2) THEN (L_DAY = 2) IF (L_DAY>2 AND L_DAY<=3) THEN (L_DAY = 3) IF (L_DAY>3 AND L_DAY<=4) THEN (L_DAY = 4) IF (L_DAY>4) THEN (L_DAY =8) l_debug = ess_log_write('l_date: ' +to_char(l_date)) l_debug = ess_log_write('iv_start_date: ' +to_char(iv_start_date)) l_debug = ess_log_write('l_ed: ' +to_char(l_ed)) l_debug = ess_log_write('iv_end_date: ' +to_char(iv_end_date)) l_debug = ess_log_write('L_DAY: ' +to_char(L_DAY)) l_debug = ess_log_write('l_total_duration_d: ' +to_char(l_total_duration_d)) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) If l_schedule = 'AFG Security Guard Work Schedule 60 hours' then ( D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') WHILE (TRUNC(D_IV_START_DATE)<= TRUNC(D_IV_END_DATE)) LOOP ( ld_period_start_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d1 l_debug = ess_log_write('Entered the Security Guard work Schedule') L_start_day=GET_DATE_DAY_OF_WEEK(D_IV_START_DATE) L_end_day=GET_DATE_DAY_OF_WEEK(D_IV_END_DATE) l_day_date = GET_DATE_DAY_OF_WEEK(ld_period_start_date_SG) l_debug = ess_log_write(' ln_entry_duration_d'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('L_start_day'||(L_start_day)) l_debug = ess_log_write('L_end_day'||(L_end_day)) l_debug = ess_log_write('l_day_date'||(l_day_date)) IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) IF (l_day_date = 'FRI' OR l_day_date = 'SAT' ) THEN (ln_entry_duration_d = 0) l_debug = ess_log_write('ld_period_start_date_SG'||to_char(ld_period_start_date_SG)) l_debug = ess_log_write('IV_START_DATE'||to_char(IV_START_DATE)) IF(ld_period_start_date_SG = IV_START_DATE and (L_start_day = 'FRI' OR L_start_day = 'SAT')) THEN ( l_debug = ess_log_write('Condition 1') IF (ln_entry_duration_d < 12 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 12)) ELSE IF (ld_period_end_date_SG = IV_END_DATE and (L_end_day = 'FRI' OR L_start_day = 'SAT'))then (l_debug = ess_log_write('Condition 2') IF (ln_entry_duration_d < 12 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 12)) l_debug = ess_log_write(' ln_entry_duration_d after calculation v1'||to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d D_IV_START_DATE=ADD_DAYS(D_IV_START_DATE,1) l_debug = ess_log_write(' DURATION after calculation v1'||to_char(DURATION)) ) RETURN DURATION ) l_debug = ess_log_write('ln_entry_duration_d After condition v2'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Type Duration*****') If l_schedule = 'AFG Drivers Work Schedule 50 hours' then ( D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') WHILE (TRUNC(D_IV_START_DATE)<= TRUNC(D_IV_END_DATE)) LOOP ( ld_period_start_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d2 = ln_entry_duration_d1 l_debug = ess_log_write('Entered the Drivers Work Schedule') L_start_day=GET_DATE_DAY_OF_WEEK(D_IV_START_DATE) L_end_day=GET_DATE_DAY_OF_WEEK(D_IV_END_DATE) l_day_date = GET_DATE_DAY_OF_WEEK(ld_period_start_date_SG) l_debug = ess_log_write(' ln_entry_duration_d'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('L_start_day'||(L_start_day)) l_debug = ess_log_write('L_end_day'||(L_end_day)) l_debug = ess_log_write('l_day_date'||(l_day_date)) IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) IF (l_day_date = 'FRI' OR l_day_date = 'SAT' ) THEN (ln_entry_duration_d = 0) IF(ld_period_start_date_SG = IV_START_DATE and (L_start_day = 'FRI' OR L_start_day = 'SAT')) THEN ( l_debug = ess_log_write('Condition 1') IF (ln_entry_duration_d < 10 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 10)) ELSE IF (ld_period_end_date_SG = IV_END_DATE and (L_end_day = 'FRI' OR L_start_day = 'SAT'))then (l_debug = ess_log_write('Condition 2') IF (ln_entry_duration_d < 10 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 10)) l_debug = ess_log_write(' ln_entry_duration_d after calculation v1'||to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d D_IV_START_DATE=ADD_DAYS(D_IV_START_DATE,1) l_debug = ess_log_write(' DURATION after calculation v1'||to_char(DURATION)) ) RETURN DURATION ) l_debug = ess_log_write('ln_entry_duration_d After condition v2'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Type Duration*****') DURATION = l_total_duration_d ) RETURN DURATION",
        "question": "Validates birthday leave applications in the UK. Ensures the duration complies with local policies (e.g., typically 1 day), prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "AF Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF TJ Absence Duration",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave') THEN ( l_total_duration_d = 0 l_he = 0 l_we = 0 l_wd =0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF L_DAY>0 THEN (L_WD=L_WD+L_DAY) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( l_we = l_we + 1 )ELSE ( l_he = l_he +1 ) ) l_date = add_days(l_date,1) ) l_he = 0 IF PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY != 'AKF_LOCAL' THEN ( l_total_duration_d = l_wd )ELSE ( l_total_duration_d = l_wd + l_we+l_he ) ) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "Calculates prorated ancillary leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies for ancillary leave types. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "TJ Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF KG Duration Calculation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Child Care Leave') THEN ( l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d*8 ) IF (L_ABS_TYPE = 'Additional paid leave for high altitude regions') THEN ( l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF (L_DAY>0) THEN (L_DAY = 1) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( L_DAY = 1 ) ) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( l_total_duration_d = 0 l_total_wd = 0 l_total_we =0 l_total_hol = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF L_DAY = 8 THEN (L_DAY = 1) IF L_DAY = 4 THEN (L_DAY = .5) IF (L_DAY>0) THEN (l_total_wd = l_total_wd + L_DAY) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( l_total_we = l_total_we + 1 )ELSE ( l_total_hol = l_total_hol +1 ) ) l_date = add_days(l_date,1) ) IF PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY = 'AKF_LOCAL' THEN ( l_total_duration_d = l_total_wd+l_total_we ) ELSE ( l_total_duration_d = l_total_wd ) ) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "Calculates the anniversary date for employees in Malaysia to determine eligibility or adjustments for absence plans (e.g., annual leave, bonuses). Uses the employee\u2019s hire date or service tenure, ensuring alignment with local policies. Returns the calculated anniversary date.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "KG Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_HD_ALLOWED_8HRS_DAY",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_total_duration_d = 0 l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_date = iv_start_date l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(L_ASSIGNMENT_ID)||''''||'|EFF_DATE='''||to_char(l_date,'DD-MM-YYYY')||'''') l_debug = ess_log_write('l_date_shift: ' + to_char(iv_start_date, 'DDMMYYYY')) l_debug = ess_log_write('l_end_date_shift: ' + to_char(iv_end_date, 'DDMMYYYY')) l_date = iv_start_date WHILE (l_date <= iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') If l_schedule = 'New Afghanistan General Work Schedule Summer with 1 Hour break' then ( IF (L_DAY>0 AND L_DAY<=4.5) THEN (L_DAY = 4) IF (L_DAY>4.5) THEN (L_DAY =8)) else if l_schedule = 'New Afghanistan Cleaners Work Schedule Summer with 1 Hour Break' then ( IF (L_DAY>0 AND L_DAY<=6.5) THEN (L_DAY = 4) IF (L_DAY>6.5) THEN (L_DAY =8)) Else (IF (L_DAY>0 AND L_DAY<=4) THEN (L_DAY = 4) IF (L_DAY>4) THEN (L_DAY =8)) l_debug = ess_log_write('l_date: ' +to_char(l_date)) l_debug = ess_log_write('iv_start_date: ' +to_char(iv_start_date)) l_debug = ess_log_write('l_ed: ' +to_char(l_ed)) l_debug = ess_log_write('iv_end_date: ' +to_char(iv_end_date)) l_debug = ess_log_write('L_DAY: ' +to_char(L_DAY)) l_debug = ess_log_write('l_total_duration_d: ' +to_char(l_total_duration_d)) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "Calculates the anniversary event date for absence plans in Malaysia to determine eligibility or adjustments (e.g., annual leave, bonuses). Uses the employee\u2019s hire date or service tenure, ensuring alignment with local policies. Returns the calculated anniversary date.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_HD_NOT_ALLOWED_8HRS",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 l_date = iv_start_date L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(L_ASSIGNMENT_ID)||''''||'|EFF_DATE='''||to_char(l_date,'DD-MM-YYYY')||'''') WHILE (l_date <= iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') If l_schedule = 'New Afghanistan General Work Schedule Summer with 1 Hour break' then ( IF (L_DAY>0 AND L_DAY<=4.5) THEN (L_DAY = 4) IF (L_DAY>4.5) THEN (L_DAY =8)) else if l_schedule = 'New Afghanistan Cleaners Work Schedule Summer with 1 Hour Break' then ( IF (L_DAY>0 AND L_DAY<=6.5) THEN (L_DAY = 4) IF (L_DAY>6.5) THEN (L_DAY =8)) Else (IF (L_DAY>0) THEN (L_DAY = 8)) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "Retrieves compensation data for absence plans in the UK. Checks for specific absence types (e.g., annual, sick, Hajj) with block leave reasons within a specified period, determining if compensation limits are exceeded. Returns a status indicating whether compensation data exists.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_HD_ALLOWED_WD_DAY",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') L_DAY = trunc(L_DAY,1) IF (L_DAY>0 AND L_DAY<=0.5) THEN (L_DAY = 0.5) IF (L_DAY>0.5) THEN (L_DAY =1) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "Validates marriage leave applications in Hong Kong. Ensures the duration does not exceed a specified limit (e.g., 3\u20135 days), the leave is applied within a certain period after the marriage date, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_HD_NOT_ALLOWED_CD_8HR",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_total_duration_d = 0 l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF (L_DAY>0 AND L_DAY<=4) THEN (L_DAY = 4) IF (L_DAY>4) THEN (L_DAY =8) IF (L_DAY = 0) THEN (L_DAY =8) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "Validates unpaid leave applications in India. Ensures the duration complies with local policies, requires other leave balances (e.g., annual, sick) to be exhausted, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_HD_ALLOWED_7_HRS",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_total_duration_d = 0 l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF (L_DAY>0 AND L_DAY<=3.5) THEN (L_DAY = 3.5) IF (L_DAY>3.5) THEN (L_DAY =7) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "Calculates prorated casual leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies for casual leave. Returns the accrual value and adjustments.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_HD_ALLOWED_CD_DAY",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF (L_DAY>0 AND L_DAY<=0.5) THEN (L_DAY = 0.5) IF (L_DAY>0.5 OR L_DAY=0) THEN (L_DAY =1) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service and the accrual plan they are enrolled in. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.  The formula checks if the employee's citizenship code is not 'SA'. If the employee's grade is between 1 and 6 and their length of service is more than 2 years, or if the grade is 7 or 8 and the length of service is more than 1 year, or if the grade is 9A, 9B, 9C, 10, 11, or 12, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.  The formula then counts the number of dependents (infants, children, and others) and calculates the total accrual based on the number of dependents. It also checks for any dependent ticket requests and adjusts the accrual accordingly.  Finally, the formula iterates through the employee's absence entries and adjusts the accrual if the absence type is 'Annual Leave' and the absence status is not 'ORA_WITHDRAWN'. If the absence attribute is 'Employee only' or 'Both', it further adjusts the accrual based on the number of tickets for adults, children, and infants.  The final accrual and carryover values are returned.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "IN Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_HD_ALLOWED_CD_DAY",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF (L_DAY>0 AND L_DAY<=0.5) THEN (L_DAY = 0.5) IF (L_DAY>0.5 OR L_DAY=0) THEN (L_DAY =1) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "write a  fast formula calculates the duration of an absence, excluding weekends and holidays. It first determines the total number of days between the start and end dates of the absence. Then, it iterates through a predefined list of holidays and subtracts the number of holidays that fall within the absence period from the total duration. The final duration is the total number of days minus the number of holidays. write a  ensures that the absence duration accurately reflects the number of working days the employee is absent.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "PK Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF PT Duration Calculation",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') L_WD = 7.5 IF (PER_ASG_NORMAL_HOURS =35) THEN ( L_WD = 7 ) l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF (L_DAY=0) THEN (L_DAY =L_WD) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "write a  formula calculates sick leave accrual based on the employee's bargaining unit code, employment category, and hours worked. Here's a detailed explanation of the calculation process:  Determine Employee Information: The formula retrieves the employee's bargaining unit code, employment category, and years of service.  Retrieve Work Hours: It retrieves the total reported and absence hours for the employee during the accrual period. write a  includes both the hours worked and the hours recorded as absence.  Calculate Accrual:  If the employee's work hours are 48 or more and their employment category is not 'RS', the accrual is set to 4 hours. If the employment category is 'RS' and the work hours are 40 or more, the accrual is calculated based on the accrual rate and standard hours. If the work hours do not meet the above conditions, the accrual is set to zero. Logging and Return: The formula logs the calculated accrual amount, carryover, and ceiling for debugging purposes. It then returns the calculated accrual, ceiling, and carryover.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "PT Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF_HD_NOT_ALLOWED_8HRS_V2",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d*8 DURATION = l_total_duration_d RETURN DURATION",
        "question": "write a  formula calculates the sick leave accrual for an employee in Illinois over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, if the total hours worked are 40 or more, the formula sets the accrual to 1. The final accrual value is then returned.",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_HD_NOT_ALLOWED_DAY",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d*1 DURATION = l_total_duration_d RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF_HD_ALLOWED_WD_HOURS",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_date = iv_start_date l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(L_ASSIGNMENT_ID)||''''||'|EFF_DATE='''||to_char(l_date,'DD-MM-YYYY')||'''') WHILE (l_date <= iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') l_debug = ess_log_write('L_DAY: ' + to_char(L_DAY)) L_DAY = trunc(L_DAY,1) l_debug = ess_log_write('L_DAY: ' + to_char(L_DAY)) IF (L_DAY>0 AND L_DAY<=4) THEN (L_DAY = 4) IF (L_DAY>4) THEN (L_DAY =8) l_debug = ess_log_write('L_DAY: ' + to_char(L_DAY)) l_debug = ess_log_write('l_date: ' +to_char(l_date)) l_debug = ess_log_write('iv_start_date: ' +to_char(iv_start_date)) l_debug = ess_log_write('l_ed: ' +to_char(l_ed)) l_debug = ess_log_write('iv_end_date: ' +to_char(iv_end_date)) l_debug = ess_log_write('l_schedule: ' +l_schedule) l_debug = ess_log_write('l_total_duration_d: ' +to_char(l_total_duration_d)) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "PK Legislative Data Group"
    },
    {
        "FORMULA_NAME": "AKF PK ABSENCE DURATION CALCULATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Hajj Leave - AKF Pakistan V1') AND (L_ABS_TYPE = 'Maternity Leave - AKF Pakistan V1') THEN ( l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY = 0 THEN ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( L_DAY = 8 ) ELSE ( L_DAY = 0 ) ) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) ) ) DURATION = l_total_duration_d * 8 RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "PK Legislative Data Group"
    },
    {
        "FORMULA_NAME": "China Calendar Day Duration Calculation without Calendar Events",
        "answer": "default for IV_START_DATE is '4712/12/31 00:00:00' (date) default for IV_END_DATE is '4712/12/31 00:00:00' (date) default for IV_START_DURATION is 1 default for IV_END_DURATION is 1 inputs are IV_START_DATE (date), IV_END_DATE (date), IV_START_DURATION (number), IV_END_DURATION (number) l_start_date = IV_START_DATE if IV_START_DURATION < 1 then l_start_date = add_days(l_start_date, IV_START_DURATION) l_end_date = IV_END_DATE if IV_END_DURATION < 1 then l_end_date = add_days(l_end_date, -IV_END_DURATION) duration = days_between(l_end_date, l_start_date) - get_calendar_event_days(l_start_date, l_end_date) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "AKF PT Formula",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_DURATION, IV_END_DURATION, IV_ABS_START_DATE (date), IV_ABS_END_DATE (date), IV_START_TIME (Text), IV_END_TIME (Text) p_IV_START_DATE = TO_DATE(TO_CHAR(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') p_IV_END_DATE = TO_DATE(TO_CHAR(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') DURATION = 0 ln_entry_duration_d = 0 l_total_duration_d = 0 l_debug = ESS_LOG_WRITE('Nursing Leave Calculation Start') IF (TRUNC(p_IV_START_DATE) <= TRUNC(p_IV_END_DATE)) THEN ( p_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') p_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') WHILE (TRUNC(p_IV_START_DATE) <= TRUNC(p_IV_END_DATE)) LOOP ( l_debug = ESS_LOG_WRITE('IV_START_TIME ' + (IV_START_TIME)) l_debug = ESS_LOG_WRITE('IV_END_TIME ' + (IV_END_TIME)) ld_period_start_date_SG = to_date(to_char(p_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(p_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d1 If (ln_entry_duration_d >= 2) THEN (ln_entry_duration_d = 2) If ( IV_START_TIME = '14:00' AND IV_END_TIME = '17:30' ) THEN (ln_entry_duration_d = 0) l_total_duration_d = l_total_duration_d + ln_entry_duration_d l_debug = ESS_LOG_WRITE('l_total_duration_d ' + TO_CHAR(l_total_duration_d)) p_IV_START_DATE = ADD_DAYS(p_IV_START_DATE, 1) l_debug = ESS_LOG_WRITE('p_IV_START_DATE ' + TO_CHAR(p_IV_START_DATE)) ) DURATION = l_total_duration_d l_debug = ESS_LOG_WRITE('DURATION1 ' + TO_CHAR(DURATION)) ) ELSE ( DURATION = ln_entry_duration_d l_debug = ESS_LOG_WRITE('DURATION2 ' + TO_CHAR(DURATION)) ) l_debug = ESS_LOG_WRITE('Nursing Leave Total Duration: ' + TO_CHAR(DURATION)) l_debug = ESS_LOG_WRITE('Nursing Leave Calculation END') RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "PT Legislative Data Group"
    },
    {
        "FORMULA_NAME": "UNPAID LEAVE DURATION FORMULA",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) Count_leave = 0 l_start = trunc(IV_START_DATE) l_end = trunc(IV_END_DATE) date_loop = l_start Total_days = DAYS_BETWEEN(l_end, l_start) + 1 ( i=1 CHANGE_CONTEXTS(START_DATE=l_start, END_DATE=l_end) ( l_debug = ess_log_write('l_end= '+ to_char((l_end))) l_debug = ess_log_write('l_start= '+ to_char((l_start))) WHILE date_loop <= l_end LOOP ( Day = GET_DATE_DAY_OF_WEEK(date_loop) l_debug = ess_log_write('Inside While Loop ') l_debug = ess_log_write('Day= '+ (Day)) IF((DAY = 'SAT') OR (DAY = 'SUN')) THEN ( Count_leave = Count_leave+1 l_debug = ess_log_write('Count_leave= '+ to_char((Count_leave))) ) date_loop = ADD_DAYS(date_loop, 1) l_debug = ess_log_write('date_loop= '+ to_char((date_loop))) ) ) ) Total_duration = Total_days - count_leave l_debug = ess_log_write('Total_duration= '+ to_char((Total_duration))) DURATION = round(Total_duration) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "CIMB_UK_HALFDAY_DUR_CAL",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DURATION_ARR IS 0 INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_start_dt = IV_START_DATE l_end_dt = iv_end_date l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 l_start_min_time = '4712/12/31 00:00:00' (date) l_end_max_time = '4712/12/31 00:00:00' (date) multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 L_object_id = 'X' L_prv_object_id = 'X' L_hours = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date WHILE (l_date <= l_end_date) LOOP ( L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_asg_shift_end_date = TO_DATE(l_shift_end_date,'YYYY-MM-DD HH24:MI') L_hours = get_measure_from_time(l_start_dt,IV_END_DATE) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE IF l_end_time = l_start_time THEN l_entry_duration_m = 0 ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL CHECK last day:'||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)||'L_hours'||TO_CHAR(L_hours)) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_PUBLISHED_SHIFT_DETAILS_ARR EXISTS 1:1') WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_object_id = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,3)+1,INSTR(L_pub_details,'|',1,4)-INSTR(L_pub_details,'|',1,3)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_start_min_time = TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') L_END_MAX_TIME = l_asg_shift_end_date IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND L_object_id != L_prv_object_id AND SUBSTR(l_asg_shift_st_date_CHAR,12,5) <= l_end_time THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) ELSE IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 L_prv_object_id = L_object_id l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF l_entry_duration_h > 0 THEN ( IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ) ELSE( ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS 1:2') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = l_date, END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') OR SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) l_date = ADD_DAYS(l_date,1) l_start_dt = ADD_DAYS(l_start_dt,1) ) DURATION = ln_unrounded_duration_d return DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB United Kingdom"
    },
    {
        "FORMULA_NAME": "CIMB_KH_HALFDAY_DUR_CAL",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DURATION_ARR IS 0 INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_start_dt = IV_START_DATE l_end_dt = iv_end_date l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 l_start_min_time = '4712/12/31 00:00:00' (date) l_end_max_time = '4712/12/31 00:00:00' (date) multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 L_object_id = 'X' L_prv_object_id = 'X' L_hours = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date WHILE (l_date <= l_end_date) LOOP ( L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_asg_shift_end_date = TO_DATE(l_shift_end_date,'YYYY-MM-DD HH24:MI') L_hours = get_measure_from_time(l_start_dt,IV_END_DATE) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE IF l_end_time = l_start_time THEN l_entry_duration_m = 0 ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL CHECK last day:'||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)||'L_hours'||TO_CHAR(L_hours)) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_PUBLISHED_SHIFT_DETAILS_ARR EXISTS 1:1') WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_object_id = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,3)+1,INSTR(L_pub_details,'|',1,4)-INSTR(L_pub_details,'|',1,3)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_start_min_time = TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') L_END_MAX_TIME = l_asg_shift_end_date IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND L_object_id != L_prv_object_id AND SUBSTR(l_asg_shift_st_date_CHAR,12,5) <= l_end_time THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) ELSE IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 L_prv_object_id = L_object_id l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF l_entry_duration_h > 0 THEN ( IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ) ELSE( ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS 1:2') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = l_date, END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') OR SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) l_date = ADD_DAYS(l_date,1) l_start_dt = ADD_DAYS(l_start_dt,1) ) DURATION = ln_unrounded_duration_d return DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "CIMB_TH_HALFDAY_DUR_CAL",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 l_prv_duration_char = 'X' IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date WHILE (l_date <= l_end_date) LOOP ( L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( L_DATA = ESS_LOG_WRITE('TH_DUR_CAL LAST DAY l_date'||TO_CHAR(l_date,'yyyy-mm-dd')) l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_shift_st_date_prv = TO_CHAR(ADD_DAYS(l_date,-1),'yyyy-mm-dd')||' '||'00:00' l_shift_end_date_prv = TO_CHAR(ADD_DAYS(l_date,-1),'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') l_prv_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date_prv||''''||'|P_EFF_END_DATE='''|| l_shift_end_date_prv||'''') IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= IV_START_DATE OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_START_DATE) AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) ELSE IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF (l_duration_char = '1' OR (IV_END_TIME = '00:00' AND l_prv_duration_char = '1')) AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD')||IV_END_TIME,'YYYY/MM/DD HH24:MI') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD')||' '||IV_START_TIME,'YYYY/MM/DD HH24:MI') OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD')||' '||IV_START_TIME,'YYYY/MM/DD HH24:MI')) AND TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') != IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours IF L_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE IF l_duration_char = '1' AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') THEN ( IF TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') = TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') AND TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') = L_date THEN ( IF L_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') = L_date OR (ADD_DAYS(TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY'),1) = L_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5)= '00:00')THEN ( L_DATA = ESS_LOG_WRITE('TH_DUR_CAL 2:2:2 ADD DURATION') IF L_asg_hours < 5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) i = i + 1 ) ) ) ) l_date = ADD_DAYS(l_date,1) ) DURATION = ln_unrounded_duration_d return DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Thailand"
    },
    {
        "FORMULA_NAME": "CIMB_MY_ABSCONVERSION_FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION lc_use_sch_asg_y = 'N' lc_use_sch_inh_y = 'N' lc_include_noshift_y = 'N' lc_include_calevents_y = 'Y' lc_calc_units_d = 'D' l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_ph = 'X' l_date_st = 'X' WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) IF ln_start_duration = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_SG_HALFDAY_DUR_CAL",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 l_prv_duration_char = 'X' IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date WHILE (l_date <= l_end_date) LOOP ( L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) L_DATA = ESS_LOG_WRITE('SG_DUR_CAL CHECK last day:'||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_shift_st_date_prv = TO_CHAR(ADD_DAYS(l_date,-1),'yyyy-mm-dd')||' '||'00:00' l_shift_end_date_prv = TO_CHAR(ADD_DAYS(l_date,-1),'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') l_prv_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date_prv||''''||'|P_EFF_END_DATE='''|| l_shift_end_date_prv||'''') IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= IV_START_DATE OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_START_DATE) AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) ELSE IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF (l_duration_char = '1' OR (IV_END_TIME = '00:00' AND l_prv_duration_char = '1')) AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/L_tot_asg_hours) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR DOES NOT EXISTS') ) ) ELSE( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD')||IV_END_TIME,'YYYY/MM/DD HH24:MI') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD')||' '||IV_START_TIME,'YYYY/MM/DD HH24:MI') OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD')||' '||IV_START_TIME,'YYYY/MM/DD HH24:MI')) AND TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') != IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours IF L_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE IF l_duration_char = '1' AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') THEN ( IF TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') = TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') AND TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') = L_date THEN ( IF L_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') = L_date OR (ADD_DAYS(TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY'),1) = L_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5)= '00:00')THEN ( IF L_asg_hours < 5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) i = i + 1 ) ) ) ) l_date = ADD_DAYS(l_date,1) ) DURATION = ln_unrounded_duration_d return DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Singapore"
    },
    {
        "FORMULA_NAME": "CIMB_MY_HALFDAY_DUR_CAL",
        "answer": "DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DURATION_ARR IS 0 INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_start_dt = IV_START_DATE l_end_dt = iv_end_date l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 l_start_min_time = '4712/12/31 00:00:00' (date) l_end_max_time = '4712/12/31 00:00:00' (date) l_entry_first_day = 0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_new_start_date = '4712/12/31 23:59:00' (date) l_new_end_date = '4712/12/31 23:59:00' (date) l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 L_object_id = 'X' L_prv_object_id = 'X' L_hours = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE IV_START_DATE'||TO_CHAR(IV_START_DATE,'yyyy-mm-dd')||'IV_START_TIME'||IV_START_TIME||'IV_END_DATE'||TO_CHAR(IV_END_DATE,'yyyy-mm-dd')||'IV_END_TIME'||IV_END_TIME) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE l_date'||TO_CHAR(l_date,'yyyy-mm-dd')||'l_end_date'||TO_CHAR(l_end_date,'yyyy-mm-dd')) WHILE (l_date <= l_end_date) LOOP ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL NEW LOOP l_date'||TO_CHAR(l_date,'yyyy-mm-dd')) L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_asg_shift_end_date = TO_DATE(l_shift_end_date,'YYYY-MM-DD HH24:MI') L_hours = get_measure_from_time(l_start_dt,IV_END_DATE) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE IF l_end_time = l_start_time THEN l_entry_duration_m = 0 ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL CHECK last day:'||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)||'L_hours'||TO_CHAR(L_hours)) IF l_entry_duration_h > 24 THEN l_entry_duration_h = l_entry_duration_h - 24 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_PUBLISHED_SHIFT_DETAILS_ARR EXISTS 1:1') l_entry_duration_h = 0 WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_object_id = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,3)+1,INSTR(L_pub_details,'|',1,4)-INSTR(L_pub_details,'|',1,3)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_start_min_time = TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') L_END_MAX_TIME = l_asg_shift_end_date L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_PUBLISHED_SHIFT_DETAILS_ARR 1:1 l_start_min_time:'||TO_CHAR(l_start_min_time,'DD-MM-YYYY HH24:MI')||'L_END_MAX_TIME'|| TO_CHAR(L_END_MAX_TIME,'DD-MM-YYYY HH24:MI')||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_PUBLISHED_SHIFT_DETAILS_ARR 1:1 l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)||'DATE'||TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY')||'TIME:'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)) L_DATA = ESS_LOG_WRITE('L_object_id'||L_object_id||'L_prv_object_id'||L_prv_object_id||'l_asg_shift_end_date_CHAR'||SUBSTR(l_asg_shift_end_date_CHAR,1,10)||'l_date'||TO_CHAR(l_date,'DD-MM-YYYY')) IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) != '00:00' THEN ( l_entry_duration_h = l_entry_duration_h + get_measure_from_time(l_start_min_time,L_END_MAX_TIME) L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1 L_tot_asg_hours:'||'TIME:'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)||'l_end_time'||l_end_time) ) ELSE IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( l_entry_duration_h = l_entry_duration_h + get_measure_from_time(l_start_min_time,L_END_MAX_TIME) L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:2 L_tot_asg_hours:'||'TIME:'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)||'l_end_time'||l_end_time) ) i = i + 1 IF L_tot_asg_hours > 0 THEN L_prv_object_id = L_object_id L_DATA = ESS_LOG_WRITE('L_object_id 2 chk'||L_object_id||'L_prv_object_id'||L_prv_object_id||'L_tot_asg_hours'||to_char(L_tot_asg_hours)) l_chk = l_chk + 1 ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1:n4 L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)||'l_entry_duration_h'||to_char(l_entry_duration_h)) IF L_tot_asg_hours < 3 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF l_entry_duration_h > 0 THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1:in L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 OR L_tot_asg_hours < 5.5 THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1:1 l_entry_duration_h:'||TO_CHAR(l_entry_duration_h)||'L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)||'PCT:'|| TO_CHAR(l_entry_duration_h/L_tot_asg_hours)) ) ELSE( ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1:2 l_entry_duration_h:'||TO_CHAR(l_entry_duration_h)||'L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)||'PCT:'|| TO_CHAR(l_entry_duration_h/L_tot_asg_hours)) ) ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1 ln_unrounded_duration_d:'||TO_CHAR(ln_unrounded_duration_d)||'L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS 1:2') l_entry_duration_h = 0 WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_ASSIGNED_SHIFT_DETAILS_ARR l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)) l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE 1:2 l_duration_char:' ||l_duration_char||'l_asg_shift_st_date_CHAR'||SUBSTR(l_asg_shift_st_date_CHAR,1,10)||'l_asg_shift_end_date_CHAR'||SUBSTR(l_asg_shift_end_date_CHAR,1,10)) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE IV_START_DATE'||TO_CHAR(IV_START_DATE,'yyyy-mm-dd')||'IV_START_TIME'||IV_START_TIME||'IV_END_DATE'||TO_CHAR(IV_END_DATE,'yyyy-mm-dd')||'IV_END_TIME'||IV_END_TIME) IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND IV_END_TIME != '00:00' AND TO_CHAR(l_date,'DD-MM-YYYY') = TO_CHAR(IV_END_DATE,'DD-MM-YYYY') THEN ( IF IV_START_DATE < TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') THEN l_new_start_date = TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') ELSE l_new_start_date = IV_START_DATE IF IV_END_DATE > TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') THEN l_new_end_date = TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') ELSE l_new_end_date = IV_END_DATE IF TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < IV_END_DATE THEN l_entry_duration_h = l_entry_duration_h + get_measure_from_time(l_new_start_date,l_new_end_date) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE :'||to_char(l_new_start_date,'DD-MM-YYYY HH24:MI')||'L_new_end_time'|| to_char(l_new_end_date,'DD-MM-YYYY HH24:MI')||'l_entry_duration_h'||to_char(l_entry_duration_h)) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE 1:2 L_tot_asg_hours IN:') L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:2 TYPE L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) l_chk = l_chk + 1 ) IF L_tot_asg_hours < 3 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF ROUND((l_entry_duration_h/(L_tot_asg_hours+1)),2) <= 0.5 OR L_tot_asg_hours <= 5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:2 ln_unrounded_duration_d:'||TO_CHAR(ln_unrounded_duration_d)||'L_tot_asg_hours'||TO_CHAR(L_tot_asg_hours)) ) ) ) ELSE( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = l_date, END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL VALUE CHECK 2:1 ANC_PUBLISHED_SHIFT_START_ARR:'||TO_CHAR(ANC_PUBLISHED_SHIFT_START_ARR[i],'DD-MM-YYYY HH24:MI')|| 'ANC_PUBLISHED_SHIFT_END_ARR:'||TO_CHAR(ANC_PUBLISHED_SHIFT_END_ARR[i],'DD-MM-YYYY HH24:MI') ||'ANC_PUBLISHED_SHIFT_DURATION_ARR:'||TO_CHAR(ANC_PUBLISHED_SHIFT_DURATION_ARR[i])) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_PUBLISHED_SHIFT_DETAILS_ARR l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)) IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') OR SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:1 ln_unrounded_duration_d:'||TO_CHAR(ln_unrounded_duration_d)||'L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS 2:2') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') L_DATA = ESS_LOG_WRITE('MY_DUR_CAL l_duration_char:' ||l_duration_char||'l_asg_shift_st_date_CHAR'||SUBSTR(l_asg_shift_st_date_CHAR,1,10)||'l_date'||TO_CHAR(l_date,'DD-MM-YYYY')||'IV_START_DATE'||TO_CHAR(IV_START_DATE,'DD-MM-YYYY')||'L_asg_hours'||TO_CHAR(L_asg_hours)) IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours IF TO_CHAR(IV_START_DATE,'DD-MM-YYYY') = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( l_entry_first_day = GET_MEASURE_FROM_TIME(IV_START_DATE,TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI')) IF IV_START_DATE >= TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') THEN ( L_tot_asg_hours = 0 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2:1 INSIDE assign exclude') ) ELSE IF l_entry_first_day < .5 AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '13:00' THEN ( L_tot_asg_hours = 0 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2:2 INSIDE assign exclude') ) ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2 ADD DURATION') L_DATA = ESS_LOG_WRITE('l_entry_first_day:'||TO_CHAR(l_entry_first_day)) ) i = i + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2 TYPE L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) ) IF L_tot_asg_hours > 0 AND L_tot_asg_hours <= 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE IF L_tot_asg_hours > 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2 FINAL ln_unrounded_duration_d:'||TO_CHAR(ln_unrounded_duration_d)) ) ) ) l_date = ADD_DAYS(l_date,1) l_start_dt = ADD_DAYS(l_start_dt,1) ) DURATION = ln_unrounded_duration_d L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE DURATION:'||TO_CHAR(DURATION)) return DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Malaysia"
    },
    {
        "FORMULA_NAME": "CIMB_HK_ABSTYPE_DURATION_EX_PH_FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_ph = 'X' l_date_st = 'X' WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH_HK','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) IF ln_start_duration = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Hong Kong"
    },
    {
        "FORMULA_NAME": "CIMB_VN_ABS_TYPE_DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 ln_floor_duration_d = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ln_unrounded_duration_d = ln_entry_duration_d * PER_ASG_FTE_VALUE IF (ln_unrounded_duration_d - FLOOR(ln_unrounded_duration_d) <> 0 AND ln_unrounded_duration_d - FLOOR(ln_unrounded_duration_d) <> 0.5) THEN ln_floor_duration_d = FLOOR(ln_unrounded_duration_d) + 0.5 ELSE ln_floor_duration_d = ln_unrounded_duration_d DURATION = ln_floor_duration_d RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB VietNam"
    },
    {
        "FORMULA_NAME": "CIMB_KH_DURATION_EX_PH_FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_ph = 'X' l_date_st = 'X' WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH_KH','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) IF ln_start_duration = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "CIMB Cambodia"
    },
    {
        "FORMULA_NAME": "\u6ca1\u6709\u65e5\u5386\u4e8b\u4ef6\u7684\u4e2d\u56fd\u65e5\u5386\u5929\u6570\u6301\u7eed\u65f6\u95f4\u8ba1\u7b97",
        "answer": "default for IV_START_DATE is '4712/12/31 00:00:00' (date) default for IV_END_DATE is '4712/12/31 00:00:00' (date) default for IV_START_DURATION is 1 default for IV_END_DURATION is 1 inputs are IV_START_DATE (date), IV_END_DATE (date), IV_START_DURATION (number), IV_END_DURATION (number) l_start_date = IV_START_DATE if IV_START_DURATION < 1 then l_start_date = add_days(l_start_date, IV_START_DURATION) l_end_date = IV_END_DATE if IV_END_DURATION < 1 then l_end_date = add_days(l_end_date, -IV_END_DURATION) duration = days_between(l_end_date, l_start_date) - get_calendar_event_days(l_start_date, l_end_date) return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "EMG ICD Hours Conversion Formula",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_ORG_ATTRIBUTE1 is 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 is 'No' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 l_debug = ess_log_write('Start Date: ' + to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('End Date: ' + to_char(IV_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Fixed Work Pattern: '+PER_ASG_ATTRIBUTE8) l_debug = ess_log_write('Leave Daye: '+to_char(leave_days)) i = 1 while(i<=leave_days) loop ( l_debug = ess_log_write('Date: '+ to_char(ld_period_start_date,'DD-Mon-YYYY')) if ((PER_ASG_ATTRIBUTE8 = 'Casual') OR (PER_ASG_ATTRIBUTE8 = 'Non-Working Period')) then ( ln_entry_duration_d = 0 ) else ( l_debug = ess_log_write('Non Standard Working Hours: ' + PER_ASG_ATTRIBUTE8) l_debug = ess_log_write('Hours: ' +to_char(ln_entry_duration_d)) l_sub_date = substr(to_char(ld_period_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('Asg ID: '+to_char(ASG_HR_ASG_ID)) x = 'x' if (PER_ASG_ATTRIBUTE8 = 'No') then ( day_of_week = 'X' day_of_week = to_char(ld_period_start_date,'DAY') l_day = 'X' if day_of_week = '1' then l_day='MONDAY' else if day_of_week = '2' then l_day='TUESDAY' else if day_of_week = '3' then l_day='WEDNESDAY' else if day_of_week = '4' then l_day='THURSDAY' else if day_of_week = '5' then l_day='FRIDAY' else if day_of_week = '6' then l_day='SATURDAY' else l_day='SUNDAY' l_debug = ess_log_write('Day of Week: ' + day_of_week) l_debug = ess_log_write('Day: ' + l_day) ln_entry_duration_d = to_number(GET_VALUE_SET('GET_ICD_PAY_AVAILABILITY','|=P_ASG_ID='''||to_char(ASG_HR_ASG_ID)||''''||'|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' ||'|P_YEAR='''||(l_yyyy)||''''||'|P_WORKDAY='''||(l_day)||'''')) l_debug = ess_log_write('ICD Hours: ' + to_char(ln_entry_duration_d)) ) else ( ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, add_days(ld_period_start_date,1), 'Y', 'Y', 'Y', 'Y', 'H') ) l_column='HOLIDAYS' l_calendar = 'PUBLIC_HOLIDAYS' Teach_off = GET_VALUE_SET('GET_TEACHERS_CALENDAR','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''|| l_column|| ''''|| '|P_TABLE='''|| l_calendar|| '''') l_debug = ess_log_write('Teach Off: ' + Teach_off) IF Teach_off='Y' THEN ( ln_entry_duration_d = 0 ) ) l_total_duration = l_total_duration + ln_entry_duration_d l_debug = ess_log_write('Total Duration: ' +to_char(l_total_duration)) ld_period_start_date = add_days(ld_period_start_date,1) i = i+1 ) DURATION = ROUND(l_total_duration,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "East Midlands Group"
    },
    {
        "FORMULA_NAME": "Kaneka Paternity Leave Type Conversion",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 DEFAULT for ANC_ABS_TYP_NAME is 'ANC_ABS_TYP_NAME' DEFAULT FOR PER_ASG_PERSON_NUMBER IS '0' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME IS '-Y' DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is '-x' DEFAULT FOR PER_ASG_LEGAL_ENTITY_ID IS 0 DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_NAME IS '-X' DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_COVERAGE_NODE is '-X' DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_START_DATE_TIME IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_END_DATE_TIME IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_final_duration = 0 l_absence_start_date = to_date(to_char(IV_START_DATE,'DD/MM/YYYY')) l_absence_end_date = to_date(to_char(IV_END_DATE,'DD/MM/YYYY')) l_absence_duration = days_between(l_absence_end_date, l_absence_start_date) + 1 L_Log =ESS_LOG_WRITE(' Evosys Debugging : DAM_ANNUAL_LEAVE_DURATION') l_public_holiday = 'N' L_Emp_Asg_BU = PER_ASG_BUSINESS_UNIT_NAME L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_absence_start_date : '||to_char(l_absence_start_date) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_absence_end_date : '||to_char(l_absence_end_date) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->IV_START_DURATION : '||to_char(IV_START_DURATION) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->IV_END_DURATION : '||to_char(IV_END_DURATION) ) l_ph_count = 0 l_start_index = PER_EXT_CAL_COVERAGE_START_DATE_TIME.FIRST(-1234) WHILE PER_EXT_CAL_COVERAGE_START_DATE_TIME.EXISTS(l_start_index) LOOP ( IF (L_Emp_Asg_BU = PER_EXT_CAL_COVERAGE_COVERAGE_NODE[l_start_index]) THEN ( L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->PER_EXT_CAL_COVERAGE_START_DATE_TIME : '||to_char(PER_EXT_CAL_COVERAGE_START_DATE_TIME[l_start_index]) ) l_cal_event_start_date = TO_DATE(TO_CHAR(PER_EXT_CAL_COVERAGE_START_DATE_TIME[l_start_index],'dd/mm/yyyy'),'dd/mm/yyyy') l_cal_event_end_date = TO_DATE(TO_CHAR(PER_EXT_CAL_COVERAGE_END_DATE_TIME[l_start_index],'dd/mm/yyyy'),'dd/mm/yyyy') L_Cal_event_Cov_Node = PER_EXT_CAL_COVERAGE_COVERAGE_NODE[l_start_index] l_Cal_event_duration = days_between(l_cal_event_end_date, l_cal_event_start_date) +1 L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_cal_event_start_date : '||to_char(l_cal_event_start_date) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_cal_event_end_date : '||to_char(l_cal_event_end_date) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->L_Cal_event_Cov_Node : '||L_Cal_event_Cov_Node ) l_increment_absence_days = l_absence_start_date while (l_increment_absence_days <= l_absence_end_date) loop ( IF (l_increment_absence_days >= l_cal_event_start_date AND l_increment_absence_days <= l_cal_event_end_date AND L_Emp_Asg_BU = L_Cal_event_Cov_Node) Then ( L_Log =ESS_LOG_WRITE(' '||PER_ASG_PERSON_NUMBER||'->Public Holiday date in current Period : '||to_char(l_increment_absence_days)||' Holiday Name: '||PER_EXT_CAL_COVERAGE_NAME[l_start_index] ) l_ph_count = l_ph_count +1 ) l_increment_absence_days = ADD_DAYS(l_increment_absence_days, 1) ) ) l_start_index = PER_EXT_CAL_COVERAGE_START_DATE_TIME.NEXT(l_start_index,-1234) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_absence_duration : '||to_char(l_absence_duration) ) L_Log =ESS_LOG_WRITE(PER_ASG_PERSON_NUMBER||'->l_ph_count : '||to_char(l_ph_count) ) IF l_ph_count > l_absence_duration THEN ( l_final_duration = 0 ) ELSE l_final_duration = l_absence_duration - l_ph_count DURATION = l_final_duration l_log = ess_log_write('abs_duration value is:'||to_char(DURATION)) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "KANEKA SICK HOSPITALIZATION LEAVE DURATION CALC FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 ld_period_start_date = IV_START_DATE ld_period_end_date = IV_END_DATE ln_entry_duration_calendar_days = 0 ln_entry_duration_working_days = 0 final_duration = 0 ln_entry_duration_calendar_days = DAYS_BETWEEN(ld_period_end_date,ld_period_start_date)+1 ln_entry_duration_working_days = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') IF(ln_entry_duration_working_days <4)THEN ( duration = ln_entry_duration_working_days RETURN duration ) IF(ln_entry_duration_working_days >=4)THEN ( CheckStartDate = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ADD_DAYS(ld_period_start_date,4), 'Y', 'Y', 'Y', 'Y', 'D') CheckEndDate = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(ld_period_end_date,-4), ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') IF((CheckStartDate = 4) OR (CheckEndDate=4))THEN ( final_duration = ROUND(ln_entry_duration_calendar_days) ) ELSE ( final_duration = ROUND(ln_entry_duration_working_days) ) ) duration = final_duration RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "KANEKA UNPAID LEAVE",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) msg1 = 'XX' ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 ld_period_start_date = IV_START_DATE ld_period_end_date = IV_END_DATE ln_entry_duration_calendar_days = 0 ln_entry_duration_working_days = 0 final_duration = 0 ln_entry_duration_calendar_days = DAYS_BETWEEN(ld_period_end_date,ld_period_start_date)+1 ln_entry_duration_working_days = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') IF(ln_entry_duration_working_days <=3)THEN ( ln_unrounded_duration_d = ln_entry_duration_working_days x = TRUNC(ln_unrounded_duration_d) y = ln_unrounded_duration_d + 0.5 z = x + 1 IF ( y > z) then ( DURATION = x + 1) IF ( y <= z) then ( DURATION = x + 0.5) IF( x = ln_unrounded_duration_d) then ( DURATION = x) RETURN DURATION ) IF(ln_entry_duration_working_days > 3)THEN ( CheckStartDate = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ADD_DAYS(ld_period_start_date,4), 'Y', 'Y', 'Y', 'Y', 'D') CheckEndDate = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(ld_period_end_date,-4), ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') IF((CheckStartDate = 4) OR (CheckEndDate=4))THEN ( day_before_start_date = ADD_DAYS(IV_START_DATE,-1) StartDate_Weekend_Check = GET_PAY_AVAILABILITY ('ASSIGN', day_before_start_date, ld_period_start_date, 'Y', 'Y', 'Y', 'Y', 'D') Off_days_Count_StartDate = 0 Off_days_loop_date = day_before_start_date IF(StartDate_Weekend_Check = 0)THEN ( WHILE(StartDate_Weekend_Check = 0) LOOP ( Off_days_Count_StartDate = Off_days_Count_StartDate + 1 Off_days_loop_date = ADD_DAYS(Off_days_loop_date,-1) Off_day_Check = GET_PAY_AVAILABILITY ('ASSIGN', Off_days_loop_date, ld_period_start_date, 'Y', 'Y', 'Y', 'Y', 'D') IF(Off_day_Check > 0)THEN ( StartDate_Weekend_Check = 1 ) ) ) ELSE ( Off_days_Count_StartDate = 0 ) day_after_end_date = TO_DATE(TO_CHAR(ADD_DAYS(IV_END_DATE,1),'YYYY-MM-DD')) Off_days_loop_EndDate = ADD_DAYS(day_after_end_date,1) Off_days_loop_EndDate1 = ADD_DAYS(IV_END_DATE,1) EndDate_Weekend_Check = GET_PAY_AVAILABILITY ('ASSIGN', day_after_end_date, Off_days_loop_EndDate, 'Y', 'Y', 'Y', 'Y', 'D') VALID= 'N' ERROR_MESSAGE = TO_CHAR(day_after_end_date) + '--day_after_end_date--' + TO_CHAR(Off_days_loop_EndDate) + '--Off_days_loop_EndDate-' + TO_CHAR(EndDate_Weekend_Check) + '--EndDate_Weekend_Check--' counter = 0 Off_days_Count_EndDate = 0 EndDate_Message = 'Msg' IF(EndDate_Weekend_Check = 0)THEN ( msg1 = 'EndDate_Weekend_Check is true----' WHILE(EndDate_Weekend_Check = 0) LOOP ( Off_day_EndDate_Check = GET_PAY_AVAILABILITY ('ASSIGN', day_after_end_date, ADD_DAYS(day_after_end_date,1), 'Y', 'Y', 'Y', 'Y', 'D') EndDate_Message = EndDate_Message + '--' + TO_CHAR(Off_day_EndDate_Check) + '--Off_day_EndDate_Check--' IF(Off_day_EndDate_Check > 0 )THEN ( EndDate_Weekend_Check = 1 ) ELSE ( Off_days_Count_EndDate = Off_days_Count_EndDate + 1 ) day_after_end_date = ADD_DAYS(day_after_end_date,1) ) ) ELSE ( Off_days_Count_EndDate = 0 ) Duration_Between = ROUND(ln_entry_duration_calendar_days) final_duration = Off_days_Count_StartDate + Duration_Between + Off_days_Count_EndDate ) ELSE ( final_duration = (ln_entry_duration_working_days) ) ) ln_unrounded_duration_d = final_duration x = TRUNC(ln_unrounded_duration_d) y = ln_unrounded_duration_d + 0.5 z = x + 1 IF ( y > z) then ( DURATION = x + 1) IF ( y <= z) then ( DURATION = x + 0.5) IF( x = ln_unrounded_duration_d) then ( DURATION = x) RETURN DURATION duration = final_duration RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "KANEKA_ANNUAL_DURATION_CALCULATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ln_unrounded_duration_d = ln_entry_duration_d X = TRUNC(ln_unrounded_duration_d) y = ln_unrounded_duration_d + 0.5 z = x + 1 IF ( y > z) then ( DURATION = x + 1) IF ( y <= z) then ( DURATION = x + 0.5) IF( x = ln_unrounded_duration_d) then ( DURATION = x) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "MY Legislative Data Group"
    },
    {
        "FORMULA_NAME": "KU Conversion Formula",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') if ((ln_entry_duration_d/9)-floor(ln_entry_duration_d/9)) = 0 Then Duration = 7.6*(ln_entry_duration_d/9) else IF ((ln_entry_duration_d/8)-floor(ln_entry_duration_d/8)) = 0 Then Duration = 7.6*(ln_entry_duration_d/8) else Duration = ln_entry_duration_d RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "AU Legislative Data Group"
    },
    {
        "FORMULA_NAME": "NCC_7_DAYS",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) ln_entry_duration_d=DAYS_BETWEEN(ld_period_end_date,ld_period_start_date)+1 DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "NCC_7_Days_Unaid_Leave_Teaching",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) ln_entry_duration_d=DAYS_BETWEEN(ld_period_end_date,ld_period_start_date)+1 DURATION = ROUND(ln_entry_duration_d,2) L_CUSTOM_MESSAGE = 'X' L_CUSTOM_MESSAGE = ESS_LOG_WRITE('IV_START_DATE = ' || TO_CHAR(IV_START_DATE)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('ld_period_start_date = ' || TO_CHAR(ld_period_start_date)) L_CUSTOM_MESSAGE = ESS_LOG_WRITE('DURATION = ' || TO_CHAR(DURATION)) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Northumberland County Council"
    },
    {
        "FORMULA_NAME": "WC_7DAYS_CONVERSION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 l_total_duration = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 l_debug = ess_log_write('Start Date: ' + to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('End Date: ' + to_char(IV_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Leave Days: '+to_char(leave_days)) i = 1 while(i<=leave_days) loop ( Day = get_date_day_of_week(ld_period_start_date) l_debug = ess_log_write('l_Day: ' +(Day)) l_sub_date = substr(to_char(ld_period_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('Asg ID: '+to_char(ASG_HR_ASG_ID)) ln_asg_working_hours_wkly = HWP_EMP_WORKING_HOURS l_daily_working_hours = ln_asg_working_hours_wkly / 5 If (Day='MON') or (Day='TUE') or (Day='WED') or (Day='THU') or (Day='FRI') or (Day='SAT') or (Day='SUN') then (ln_entry_duration_d = l_daily_working_hours) l_total_duration = l_total_duration + ln_entry_duration_d l_debug = ess_log_write('ld_period_start_date:' + to_char(ld_period_start_date)) l_debug = ess_log_write('entry Duration: ' +to_char(ln_entry_duration_d)) l_debug = ess_log_write('Total Duration: ' +to_char(l_total_duration)) ld_period_start_date = add_days(ld_period_start_date,1) i = i+1 ) DURATION = ROUND(l_total_duration,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "WC_UNPAID_CONVERSION_FORMULA",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING is 'X' DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 l_emp_working_hours = 0 L_OT_ELG = '0' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 l_debug = ess_log_write('Start Date: ' + to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('End Date: ' + to_char(IV_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Leave Days: '+to_char(leave_days)) EMP_Cat = 'X' EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,10)) l_debug = ess_log_write('EMP_Cat: '+ EMP_Cat) i = 1 while(i<=leave_days) loop ( l_Day = get_date_day_of_week(ld_period_start_date) l_debug = ess_log_write('l_Day: ' +(l_Day)) l_sub_date = substr(to_char(ld_period_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('Asg ID: '+to_char(ASG_HR_ASG_ID)) work_schedule = 'N' work_schedule = GET_VALUE_SET('GET_WORK_SCHEDULE','|=P_ASSIGNMENT_ID=''' || to_char(ASG_HR_ASG_ID)|| '''' || '|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''') l_debug = ess_log_write('work_schedule:' + work_schedule) ln_asg_working_hours_wkly = HWP_EMP_WORKING_HOURS l_daily_working_hours = ln_asg_working_hours_wkly / 5 if (work_schedule = 'Y') then ( l_debug = ess_log_write('Fetching working hours from work schedule') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, add_days(ld_period_start_date,1), 'Y', 'Y', 'Y', 'Y', 'H') ) else ( ln_entry_duration_d = l_daily_working_hours ) IF (l_Day = 'SAT' or l_Day = 'SUN') THEN ( l_debug = ess_log_write('In if condition') ln_entry_duration_d = 0 ) l_total_duration = l_total_duration + ln_entry_duration_d l_debug = ess_log_write('Total Duration: ' +to_char(l_total_duration)) ld_period_start_date = add_days(ld_period_start_date,1) i = i+1 ) DURATION = ROUND(l_total_duration,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "WC CONVERSION FORMULA",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING is 'X' DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 l_emp_working_hours = 0 L_OT_ELG = '0' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 l_debug = ess_log_write('Start Date: ' + to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('End Date: ' + to_char(IV_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Leave Days: '+to_char(leave_days)) EMP_Cat = 'X' EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,1)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) i = 1 while(i<=leave_days) loop ( l_Day = get_date_day_of_week(ld_period_start_date) l_debug = ess_log_write('l_Day: ' +(l_Day)) l_sub_date = substr(to_char(ld_period_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('Asg ID: '+to_char(ASG_HR_ASG_ID)) work_schedule = 'N' work_schedule = GET_VALUE_SET('GET_WORK_SCHEDULE','|=P_ASSIGNMENT_ID=''' || to_char(ASG_HR_ASG_ID)|| '''' || '|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''') l_debug = ess_log_write('work_schedule:' + work_schedule) ln_asg_working_hours_wkly = HWP_EMP_WORKING_HOURS l_daily_working_hours = ln_asg_working_hours_wkly / 5 if (work_schedule = 'Y') then ( l_debug = ess_log_write('Fetching working hours from work schedule') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, add_days(ld_period_start_date,1), 'Y', 'Y', 'Y', 'Y', 'H') ) else ( ln_entry_duration_d = l_daily_working_hours ) l_column='HOLIDAYS' l_calendar = 'BANK_HOLIDAYS' Bank_off = GET_VALUE_SET('GET_BANK_HOLIDAYS','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''||l_column|| ''''|| '|P_TABLE='''||l_calendar|| '''') l_debug = ess_log_write('ld_period_start_date:' + to_char(ld_period_start_date)) l_debug = ess_log_write('Bank Off:' + Bank_off) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) IF (((Bank_off='Y') and (EMP_Cat = 'Full Time')) or (PER_ASG_BUSINESS_UNIT_NAME <> 'Wiltshire Council BU') or (l_Day = 'SAT') or (l_Day = 'SUN')) THEN ( l_debug = ess_log_write('In if condition') ln_entry_duration_d = 0 ) l_total_duration = l_total_duration + ln_entry_duration_d l_debug = ess_log_write('entry Duration: ' +to_char(ln_entry_duration_d)) l_debug = ess_log_write('Total Duration: ' +to_char(l_total_duration)) ld_period_start_date = add_days(ld_period_start_date,1) i = i+1 ) DURATION = ROUND(l_total_duration,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "WC Conversion Formula V2",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING is 'X' DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME is 'X' DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION (Number) ,IV_END_DURATION(Number) l_debug = ess_log_write('In WC Conversion Formula') ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 l_emp_working_hours = 0 L_OT_ELG = '0' l_start_dura = IV_START_DURATION l_end_dura = IV_END_DURATION ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 l_debug = ess_log_write('Start Date: ' + to_char(IV_START_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('End Date: ' + to_char(IV_END_DATE,'DD-Mon-YYYY')) l_debug = ess_log_write('Leave Days: '+to_char(leave_days)) EMP_Cat = 'X' EMP_Cat = (SUBSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,INSTR(PER_ASG_EMPLOYMENT_CATEGORY_LOOKUP_MEANING,'-',1,2)+2,9)) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) i = 1 while(i<=leave_days) loop ( l_Day = get_date_day_of_week(ld_period_start_date) l_debug = ess_log_write('l_Day: ' +(l_Day)) l_sub_date = substr(to_char(ld_period_start_date),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('Asg ID: '+to_char(ASG_HR_ASG_ID)) work_schedule = 'N' work_schedule = GET_VALUE_SET('GET_WORK_SCHEDULE','|=P_ASSIGNMENT_ID=''' || to_char(ASG_HR_ASG_ID)|| '''' || '|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''') l_debug = ess_log_write('work_schedule:' + work_schedule) ln_asg_working_hours_wkly = HWP_EMP_WORKING_HOURS l_daily_working_hours = ln_asg_working_hours_wkly / 5 if (work_schedule = 'Y') then ( l_debug = ess_log_write('Fetching working hours from work schedule') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, add_days(ld_period_start_date,1), 'Y', 'Y', 'Y', 'Y', 'H') ) else ( ln_entry_duration_d = l_daily_working_hours ) l_column='HOLIDAYS' l_calendar = 'BANK_HOLIDAYS' Bank_off = GET_VALUE_SET('GET_BANK_HOLIDAYS','|=P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''' || '|P_COLUMN='''||l_column|| ''''|| '|P_TABLE='''||l_calendar|| '''') l_debug = ess_log_write('ld_period_start_date:' + to_char(ld_period_start_date)) l_debug = ess_log_write('Bank Off:' + Bank_off) l_debug = ess_log_write('EMP_Cat:'+ EMP_Cat) IF ((Bank_off='Y') and (EMP_Cat = 'Full Time') or (l_Day = 'SAT') or (l_Day = 'SUN')) THEN ( l_debug = ess_log_write('In if condition') ln_entry_duration_d = 0 ) If ( i = 1) then ( ln_entry_duration_d = l_start_dura / ln_entry_duration_d ) If ( i = leave_days ) then ( ln_entry_duration_d = l_end_dura / ln_entry_duration_d ) l_total_duration = l_total_duration + ln_entry_duration_d l_debug = ess_log_write('entry Duration: ' +to_char(ln_entry_duration_d)) l_debug = ess_log_write('Total Duration: ' +to_char(l_total_duration)) ld_period_start_date = add_days(ld_period_start_date,1) i = i+1 ) DURATION = ROUND(l_total_duration,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LBL Absence 7 Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) ln_entry_duration_d=DAYS_BETWEEN(ld_period_end_date,ld_period_start_date)+1 DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL Unpaid leave Days Type Duration",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(NUMBER), IV_END_DURATION(NUMBER) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 i=1 k=1 UDT_Entry[0]= '4712/12/31 00:00:00' (date) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'N', 'N', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('ln_entry_duration_d:: ' +to_char(ln_entry_duration_d)) PUBLIC_DAYS = GET_VALUE_SET('LBL_BANK_HOLIDAYS','|=P_DAY='''||to_char(ld_period_start_date,'DD-MM-YYYY')||'''') l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('PUBLIC_DAYS - ' + (PUBLIC_DAYS)) IF PUBLIC_DAYS='Y' THEN ( ln_entry_duration_d=1 ) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "LBL UNPAID LEAVE HOURS TYPE DURATION",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 7 DEFAULT FOR IV_END_DURATION IS 7 DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(NUMBER), IV_END_DURATION(NUMBER) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 i=1 k=1 UDT_Entry[0]= '4712/12/31 00:00:00' (date) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'N', 'H') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('ln_entry_duration_d:: ' +to_char(ln_entry_duration_d)) PUBLIC_DAYS = GET_VALUE_SET('LBL_BANK_HOLIDAYS','|=P_DAY='''||to_char(ld_period_start_date,'DD/MM/YYYY')||'''') l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('PUBLIC_DAYS - ' + (PUBLIC_DAYS)) l_debug = ess_log_write(' IV_START_DATE:: ' + to_char(IV_START_DATE) +' IV_START_DURATION:: ' + to_char(IV_START_DURATION) ) l_debug = ess_log_write(' IV_END_DATE:: ' + to_char(IV_END_DATE) +' IV_END_DURATION:: ' + to_char(IV_END_DURATION) ) if IV_START_DURATION != 7 then ln_entry_duration_d = (ln_entry_duration_d - 7) + IV_START_DURATION else if IV_END_DURATION != 7 then ln_entry_duration_d = (ln_entry_duration_d - 7) + IV_END_DURATION else if PUBLIC_DAYS='Y' then ln_entry_duration_d = ln_entry_duration_d + 0 l_debug = ess_log_write('ln_entry_duration_d after logic:: ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "London Borough of Lambeth"
    },
    {
        "FORMULA_NAME": "POD Global Absence Type Duration FF for Annual Leave Days",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_ATTRIBUTE2 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS ' ' DEFAULT FOR IV_ABS_START_DURATION is 0 DEFAULT FOR IV_ABS_END_DURATION is 0 DEFAULT FOR IV_START_DURATION is 0 DEFAULT FOR IV_END_DURATION is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_ABS_START_DURATION,IV_ABS_END_DURATION,IV_START_DURATION,IV_END_DURATION l_plan_name = 'X' leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 l_debug = ess_log_write('************************ Type Duration - Formula Start *******************************') ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') i = 1 while(i<=leave_days) loop ( ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, add_days(ld_period_start_date,1), 'Y', 'Y', 'Y', 'Y', 'D') l_debug = ess_log_write('ln_entry_duration_d: '||to_char(ln_entry_duration_d)) L_P_DATE_1 = substr(TO_CHAR(ld_period_start_date),1,10) l_yyyy = substr(L_P_DATE_1,1,4) l_mm = substr(L_P_DATE_1,6,2) l_dd = substr(L_P_DATE_1,9,2) L_P_DATE = ((l_yyyy)||'/'||(l_mm)||'/'||(l_dd)) l_debug = ess_log_write('L_P_DATE: '||(L_P_DATE)) L_FLAG_BH = GET_VALUE_SET('POD_HCM_UK_BANK_HOLIDAY_VALUE','|=P_DATE='''||L_P_DATE||'''') l_debug = ess_log_write('L_FLAG_BH '||L_FLAG_BH) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', ld_period_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT2') EXECUTE('XX_GET_HR_DATA') l_plan_name = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_name) if ((l_plan_name <> 'NO' and l_plan_name <> 'X' )) then ( l_plan_name = l_plan_name ) else ( l_plan_name = 'Not Eligible' ) l_debug = ess_log_write('PPG Plan Name: '||l_plan_name) L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'NO' SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', ld_period_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT3') EXECUTE('XX_GET_HR_DATA') L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = GET_OUTPUT('X_OUTPUT_TEXT', L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG) if ((L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG <> 'NO')) then ( L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG ) else ( L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'NO' ) l_debug = ess_log_write('PPG Bank Holiday Deduction Flag= '||L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG) if(L_FLAG_BH = 'PH' and L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'YES' ) then ( ln_entry_duration_d = 0 l_debug = ess_log_write('ln_entry_duration_d: '||TO_CHAR(ln_entry_duration_d)) ) l_total_duration = l_total_duration + ln_entry_duration_d l_debug = ess_log_write('Total Duration: ' +to_char(l_total_duration)) ld_period_start_date = add_days(ld_period_start_date,1) i = i+1 ) ln_unrounded_duration_d = l_total_duration DURATION = ROUND(ln_unrounded_duration_d,2) if ( IV_START_DURATION = 0.5) then DURATION = DURATION - IV_START_DURATION if (IV_END_DURATION = 0.5) then DURATION = DURATION - IV_END_DURATION l_debug = ess_log_write('************************ Type Duration - Formula End *******************************') RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "POD Global Absence Type Duration FF for Annual Leave Hours",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_ATTRIBUTE2 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS ' ' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT2 IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) l_plan_name = 'X' leave_days = days_between(IV_END_DATE,IV_START_DATE) + 1 ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 l_total_duration = 0 l_debug = ess_log_write('************************ Type Duration - Formula Start *******************************') ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') i = 1 while(i<=leave_days) loop ( ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, add_days(ld_period_start_date,1), 'Y', 'Y', 'Y', 'Y', 'D') l_debug = ess_log_write('ln_entry_duration_d: '||to_char(ln_entry_duration_d)) L_P_DATE_1 = substr(TO_CHAR(ld_period_start_date),1,10) l_yyyy = substr(L_P_DATE_1,1,4) l_mm = substr(L_P_DATE_1,6,2) l_dd = substr(L_P_DATE_1,9,2) L_P_DATE = ((l_yyyy)||'/'||(l_mm)||'/'||(l_dd)) l_debug = ess_log_write('L_P_DATE: '||(L_P_DATE)) L_FLAG_BH = GET_VALUE_SET('POD_HCM_UK_BANK_HOLIDAY_VALUE','|=P_DATE='''||L_P_DATE||'''') l_debug = ess_log_write('L_FLAG_BH '||L_FLAG_BH) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', ld_period_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT2') EXECUTE('XX_GET_HR_DATA') l_plan_name = GET_OUTPUT('X_OUTPUT_TEXT', l_plan_name) if ((l_plan_name <> 'NO' and l_plan_name <> 'X' )) then ( l_plan_name = l_plan_name ) else ( l_plan_name = 'Not Eligible' ) l_debug = ess_log_write('PPG Plan Name: '||l_plan_name) L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'NO' SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', ld_period_start_date) SET_INPUT ('mode', 'PER_ASG_PEOPLE_GROUP_SEGMENT3') EXECUTE('XX_GET_HR_DATA') L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = GET_OUTPUT('X_OUTPUT_TEXT', L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG) if ((L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG <> 'NO')) then ( L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG ) else ( L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'NO' ) l_debug = ess_log_write('PPG Bank Holiday Deduction Flag= '||L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG) if(L_FLAG_BH = 'PH' and L_BANK_HOLIDAY_AUTO_DEDUCT_FLAG = 'YES' ) then ( ln_entry_duration_d = 0 l_debug = ess_log_write('ln_entry_duration_d: '||TO_CHAR(ln_entry_duration_d)) ) l_total_duration = l_total_duration + ln_entry_duration_d l_debug = ess_log_write('Total Duration: ' +to_char(l_total_duration)) ld_period_start_date = add_days(ld_period_start_date,1) i = i+1 ) ln_unrounded_duration_d = l_total_duration DURATION = ROUND(ln_unrounded_duration_d,2) l_debug = ess_log_write('************************ Type Duration - Formula End *******************************') RETURN DURATION",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "GB Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Holiday Exception",
        "answer": "Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) Default for demo_date is '2015/03/21 00:00:00' (DATE) Default for date_start is '1951/01/01 00:00:00' (DATE) DEFAULT FOR holidays is EMPTY_DATE_NUMBER Default for l_holiday_days is 0 Default for num1 is 0 Default for num2 is 0 INPUTS are IV_START_DATE (date), IV_END_DATE (date) holidays[1]='2017/06/25 00:00:00' (DATE) holidays[2]='2017/06/26 00:00:00' (DATE) holidays[3]='2017/06/27 00:00:00' (DATE) holidays[4]='2017/06/28 00:00:00' (DATE) holidays[5]='2017/06/29 00:00:00' (DATE) holidays[6]='2017/09/24 00:00:00' (DATE) holidays[7]='2017/08/31 00:00:00' (DATE) holidays[8]='2017/09/01 00:00:00' (DATE) holidays[9]='2017/09/02 00:00:00' (DATE) holidays[10]='2017/09/03 00:00:00' (DATE) holidays[10]='2017/09/04 00:00:00' (DATE) holidays[10]='2017/09/05 00:00:00' (DATE) holidays[11]='2018/06/14 00:00:00' (DATE) holidays[12]='2018/06/15 00:00:00' (DATE) holidays[13]='2018/06/16 00:00:00' (DATE) holidays[14]='2018/06/17 00:00:00' (DATE) holidays[15]='2018/06/18 00:00:00' (DATE) holidays[16]='2018/06/19 00:00:00' (DATE) holidays[17]='2018/06/20 00:00:00' (DATE) holidays[18]='2018/08/19 00:00:00' (DATE) holidays[19]='2018/08/20 00:00:00' (DATE) holidays[20]='2018/08/21 00:00:00' (DATE) holidays[21]='2018/08/22 00:00:00' (DATE) holidays[22]='2018/08/23 00:00:00' (DATE) holidays[23]='2018/08/24 00:00:00' (DATE) holidays[24]='2018/08/25 00:00:00' (DATE) holidays[25]='2018/08/25 00:00:00' (DATE) holidays[26]='2018/09/23 00:00:00' (DATE) holidays[27]='2018/09/24 00:00:00' (DATE) holidays[28]='2019/06/02 00:00:00' (DATE) holidays[29]='2019/06/03 00:00:00' (DATE) holidays[30]='2019/06/04 00:00:00' (DATE) holidays[31]='2019/06/05 00:00:00' (DATE) holidays[32]='2019/06/06 00:00:00' (DATE) holidays[33]='2019/08/11 00:00:00' (DATE) holidays[34]='2019/08/12 00:00:00' (DATE) holidays[35]='2019/08/13 00:00:00' (DATE) holidays[36]='2019/08/14 00:00:00' (DATE) holidays[37]='2019/08/15 00:00:00' (DATE) holidays[38]='2019/08/16 00:00:00' (DATE) holidays[39]='2019/08/17 00:00:00' (DATE) holidays[40]='2019/08/18 00:00:00' (DATE) holidays[41]='2019/09/23 00:00:00' (DATE) holidays[42]='2020/09/23 00:00:00' (DATE) holidays[43]='2021/09/23 00:00:00' (DATE) holidays[44]='2022/09/23 00:00:00' (DATE) holidays[45]='2023/09/23 00:00:00' (DATE) holidays[46]='2024/09/23 00:00:00' (DATE) holidays[47]='2025/09/23 00:00:00' (DATE) holidays[48]='2021/05/12 00:00:00' (DATE) holidays[49]='2021/05/13 00:00:00' (DATE) holidays[50]='2021/05/16 00:00:00' (DATE) holidays[51]='2021/05/17 00:00:00' (DATE) holidays[52]='2021/07/19 00:00:00' (DATE) holidays[53]='2021/07/20 00:00:00' (DATE) holidays[54]='2021/07/21 00:00:00' (DATE) holidays[55]='2021/07/22 00:00:00' (DATE) l_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_weekday=to_char(l_date,'DAY') If (l_weekday= '7') then( duration=0 ) else( duration= 0 ) duration = days_between(IV_END_DATE,IV_START_DATE)+ 1 duration = floor(duration) I= 0 J=1 l_holiday_days = 0 while (I < duration) LOOP ( J=1 while (J<=HOLIDAYS.COUNT) LOOP ( if ( to_char(HOLIDAYS[J],'dd-MM-yyyy')=to_char(add_days(IV_START_DATE,I),'dd-MM-yyyy')) then ( l_holiday_days=l_holiday_days+1 ) J = J + 1 ) I= I + 1 ) duration = duration - l_holiday_days return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Holiday Exception",
        "answer": "Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) Default for demo_date is '2015/03/21 00:00:00' (DATE) Default for date_start is '1951/01/01 00:00:00' (DATE) DEFAULT FOR holidays is EMPTY_DATE_NUMBER Default for l_holiday_days is 0 Default for num1 is 0 Default for num2 is 0 INPUTS are IV_START_DATE (date), IV_END_DATE (date) holidays[1]='2017/06/25 00:00:00' (DATE) holidays[2]='2017/06/26 00:00:00' (DATE) holidays[3]='2017/06/27 00:00:00' (DATE) holidays[4]='2017/06/28 00:00:00' (DATE) holidays[5]='2017/06/29 00:00:00' (DATE) holidays[6]='2017/09/24 00:00:00' (DATE) holidays[7]='2017/08/31 00:00:00' (DATE) holidays[8]='2017/09/01 00:00:00' (DATE) holidays[9]='2017/09/02 00:00:00' (DATE) holidays[10]='2017/09/03 00:00:00' (DATE) holidays[10]='2017/09/04 00:00:00' (DATE) holidays[10]='2017/09/05 00:00:00' (DATE) holidays[11]='2018/06/14 00:00:00' (DATE) holidays[12]='2018/06/15 00:00:00' (DATE) holidays[13]='2018/06/16 00:00:00' (DATE) holidays[14]='2018/06/17 00:00:00' (DATE) holidays[15]='2018/06/18 00:00:00' (DATE) holidays[16]='2018/06/19 00:00:00' (DATE) holidays[17]='2018/06/20 00:00:00' (DATE) holidays[18]='2018/08/19 00:00:00' (DATE) holidays[19]='2018/08/20 00:00:00' (DATE) holidays[20]='2018/08/21 00:00:00' (DATE) holidays[21]='2018/08/22 00:00:00' (DATE) holidays[22]='2018/08/23 00:00:00' (DATE) holidays[23]='2018/08/24 00:00:00' (DATE) holidays[24]='2018/08/25 00:00:00' (DATE) holidays[25]='2018/08/25 00:00:00' (DATE) holidays[26]='2018/09/23 00:00:00' (DATE) holidays[27]='2018/09/24 00:00:00' (DATE) holidays[28]='2019/06/02 00:00:00' (DATE) holidays[29]='2019/06/03 00:00:00' (DATE) holidays[30]='2019/06/04 00:00:00' (DATE) holidays[31]='2019/06/05 00:00:00' (DATE) holidays[32]='2019/06/06 00:00:00' (DATE) holidays[33]='2019/08/11 00:00:00' (DATE) holidays[34]='2019/08/12 00:00:00' (DATE) holidays[35]='2019/08/13 00:00:00' (DATE) holidays[36]='2019/08/14 00:00:00' (DATE) holidays[37]='2019/08/15 00:00:00' (DATE) holidays[38]='2019/08/16 00:00:00' (DATE) holidays[39]='2019/08/17 00:00:00' (DATE) holidays[40]='2019/08/18 00:00:00' (DATE) holidays[41]='2019/09/23 00:00:00' (DATE) l_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_weekday=to_char(l_date,'DAY') If (l_weekday= '7') then( duration=0 ) else( duration= 0 ) duration = days_between(IV_END_DATE,IV_START_DATE)+ 1 duration = floor(duration) I= 0 J=1 l_holiday_days = 0 while (I < duration) LOOP ( J=1 while (J<=HOLIDAYS.COUNT) LOOP ( if ( to_char(HOLIDAYS[J],'dd-MM-yyyy')=to_char(add_days(IV_START_DATE,I),'dd-MM-yyyy')) then ( l_holiday_days=l_holiday_days+1 ) J = J + 1 ) I= I + 1 ) duration = duration - l_holiday_days return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Global_Absence_Type_Eid_ul_fitr",
        "answer": "Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) Default for ANC_ABS_TYP_NAME is 'xx' INPUTS are IV_START_DATE (date), IV_END_DATE (date) l_md = '2022/05/01' l_mds = '2022/05/02' l_mdss = '2022/05/03' l_mdsss = '2022/05/04' l_x = '2022/07/08' l_y = '2022/07/09' l_z = '2022/07/10' l_a = '2022/07/11' l_b = '2022/07/12' l_c = '2022/07/13' l_d = '2022/09/22' l_e = '2022/11/23' l_f = '2023/02/22' l_g = '2023/04/23' l_h = '2023/04/24' l_i = '2023/04/25' l_j = '2023/04/26' l_k = '2023/06/27' l_l = '2023/06/28' l_m = '2023/06/29' l_n = '2023/07/02' l_o = '2023/09/22' l_p = '2023/09/23' l_q = '2023/09/24' l_Pp = '2024/04/09' l_Qq = '2024/04/10' l_r = '2024/04/11' l_s = '2024/04/14' l_t = '2024/06/16' l_u = '2024/06/17' l_v = '2024/06/18' l_w = '2024/06/19' l_Aa = '2024/02/22' l_Ab = '2024/09/23' L_FD = '2025/02/23' L_EAF1 = '2025/03/30' L_EAF2 = '2025/03/31' L_EAF3 = '2025/04/01' L_EAF4 = '2025/04/02' L_EAH1 = '2025/06/05' L_EAH2 = '2025/06/08' L_EAH3 = '2025/06/09' L_EAH4 = '2025/06/10' L_SN = '2025/09/23' l_date_start = trunc(IV_START_DATE) l_duration = DAYS_BETWEEN(trunc(IV_END_DATE),trunc(IV_START_DATE)) + 1 l_absence_type = ANC_ABS_TYP_NAME If (l_md >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_md <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_mds >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_mds <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_mdss >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_mdss <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_mdsss >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_mdsss <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_x >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_x <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_y >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_y <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_z >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_z <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_a >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_a <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_b >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_b <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_c >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_c <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_d >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_d <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_e >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_e <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_f >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_f <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_g >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_g <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_h >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_h <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_i >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_i <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_j >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_j <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_k >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_k <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_l >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_l <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_m >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_m <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_n >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_n <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_o >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_o <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_p >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_p <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_q >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_q <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_FD >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_FD <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_EAF1 >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_EAF1 <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_EAF2 >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_EAF2 <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_EAF3 >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_EAF3 <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_EAF4 >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_EAF4 <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_EAH1 >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_EAH1 <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_EAH2 >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_EAH2 <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_EAH3 >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_EAH3 <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_EAH4 >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_EAH4 <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (L_SN >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and L_SN <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_Pp >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_Pp <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_Qq >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_Qq <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_r >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_r <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_s >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_s <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_t >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_t <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_u >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_u <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_v >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_v <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_w >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_w <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_Aa >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_Aa <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) If (l_Ab >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_Ab <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD') and l_absence_type <> 'Sick Leave') then( l_duration = l_duration - 1 ) duration = l_duration return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    },
    {
        "FORMULA_NAME": "Eid_ul_Adha_Hajj_Leave",
        "answer": "Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) INPUTS are IV_START_DATE (date), IV_END_DATE (date) l_z = '2022/07/10' l_a = '2022/07/11' l_b = '2022/07/12' l_c = '2022/07/13' l_date_start = trunc(IV_START_DATE) l_duration = DAYS_BETWEEN(trunc(IV_END_DATE),trunc(IV_START_DATE)) + 1 If (l_z >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_z <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_a >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_a <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_b >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_b <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_c >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_c <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) duration = l_duration return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "Eid_ul_Adha_Hajj_Leave",
        "answer": "Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) INPUTS are IV_START_DATE (date), IV_END_DATE (date) l_z = '2022/07/10' l_a = '2022/07/11' l_b = '2022/07/12' l_c = '2022/07/13' l_d = '2022/09/22' l_date_start = trunc(IV_START_DATE) l_duration = DAYS_BETWEEN(trunc(IV_END_DATE),trunc(IV_START_DATE)) + 1 If (l_z >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_z <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_a >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_a <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_b >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_b <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_c >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_c <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_d >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_d <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) duration = l_duration return duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "SA Legislative Data Group"
    },
    {
        "FORMULA_NAME": "LHC_FMLA_ABSENCE_TYPE_DURATION_FF",
        "answer": "DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') lc_use_sch_asg_y = 'Y' lc_use_sch_inh_y = 'Y' lc_include_noshift_y = 'Y' lc_include_calevents_y = 'N' lc_calc_units_d = 'H' ln_unrounded_duration_d = GET_PAY_AVAILABILITY (lc_asg_resource_type, ld_period_start_date, ld_period_end_date, lc_use_sch_asg_y, lc_use_sch_inh_y, lc_include_noshift_y, lc_include_calevents_y, lc_calc_units_d) ln_duration = ln_unrounded_duration_d duration = ln_duration RETURN duration",
        "question": "",
        "FORMULA_TYPE_NAME": "Global Absence Type Duration",
        "LEGISLATIVE_DATA_GROUP": "Standard formula"
    }
]