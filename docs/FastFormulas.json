[
    {
        "page_content": "***question***: Write an Absence duration formula that calculates absence duration based on an employee\u2019s work schedule and assigned shift timings. It first retrieves the assigned work schedule and then applies specific rules based on the schedule type.\n\nFor employees with an 8-hour Elapsed General Work Schedule, the system calculates the available working hours:\n\nIf the absence starts at mid-day (50% of the shift completed), the system checks the planned end time:\nIf a specific end duration is provided, the absence is adjusted accordingly.\nOtherwise, the full shift duration is considered.\nIf the absence starts at a custom time:\nIf the planned start time falls within working hours, the absence is adjusted accordingly.\nIf the start time is outside working hours, the full shift is considered.\nFor employees on the Afghanistan General Work Schedule (Summer with 1-hour break):\n\nIf the absence duration is 4.5 hours or less, it is rounded up to 4 hours.\nIf the absence is longer than 4.5 hours, it is counted as a full 8-hour shift.\nFor Security Guards and Drivers, special weekend rules apply:\n\nIf the absence falls on a Friday or Saturday, it is ignored (set to 0 hours).\nIf the employee takes a partial-day absence on a weekend, it is capped at 10 hours max.\nThe formula ensures correct duration adjustments for full-day, partial-day, and weekend absences, then returns the final absence duration for payroll processing.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 50 DEFAULT FOR IV_END_DURATION IS 100 DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_START_time IS '01:00' DEFAULT FOR IV_ABS_END_time IS '23:59' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text),IV_START_DURATION,IV_END_DURATION,iv_abs_start_date (date),iv_abs_end_date (date) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') p_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') p_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') DURATION=0 ln_entry_duration_d=0 l_total_duration_d = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_HR_ASS_id= GET_CONTEXT(HR_ASSIGNMENT_ID,100) r = ess_log_write ('Plan Duarion Call Start Afghanistan Annual Leave==============================================' ) l_person_id = GET_CONTEXT(PERSON_ID,0) l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(l_HR_ASS_id)||''''||'|EFF_DATE='''||to_char(IV_START_DATE,'DD-MM-YYYY')||'''') l_debug = ess_log_write('l_schedule: ' + l_schedule) l_debug = ess_log_write('l_date_shift: ' + to_char(iv_start_date, 'DDMMYYYY')) l_debug = ess_log_write('l_end_date_shift: ' + to_char(iv_end_date, 'DDMMYYYY')) IF (l_schedule = '8 hours Elapsed General Work Schedule AFG NEW' ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') IF (trunc(IV_ABS_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( ln_entry_duration_d=ln_entry_duration_d ) ) IF (( TRUNC(IV_ABS_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_ABS_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ) IF (TRUNC(IV_ABS_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_ABS_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d IF (IV_end_DURATION = 100) THEN ( ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( ln_entry_duration_d=ln_entry_duration_d ) ) DURATION=DURATION+ln_entry_duration_d RETURN DURATION ) ELSE( ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') l_debug = ess_log_write('ln_entry_duration_d '||to_char(ln_entry_duration_d)) l_abs_days = ln_entry_duration_d If l_schedule = 'New Afghanistan General Work Schedule Summer with 1 Hour break' then ( IF (ln_entry_duration_d>0 AND ln_entry_duration_d<=4.5) THEN (ln_entry_duration_d = 4) IF (ln_entry_duration_d>4.5) THEN (ln_entry_duration_d =8)) IF (ln_entry_duration_d>0 AND ln_entry_duration_d<=1) THEN (ln_entry_duration_d = 1) IF (ln_entry_duration_d>1 AND ln_entry_duration_d<=2) THEN (ln_entry_duration_d = 2) IF (ln_entry_duration_d>2 AND ln_entry_duration_d<=3) THEN (ln_entry_duration_d = 3) IF (ln_entry_duration_d>3 AND ln_entry_duration_d<=4) THEN (ln_entry_duration_d = 4) IF (ln_entry_duration_d>4) THEN (ln_entry_duration_d =8) If l_schedule = 'AFG Security Guard Work Schedule 60 hours' then ( D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') ld_period_start_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d1 l_debug = ess_log_write('Entered the Security Guard work Schedule') L_start_day=GET_DATE_DAY_OF_WEEK(D_IV_START_DATE) L_end_day=GET_DATE_DAY_OF_WEEK(D_IV_END_DATE) l_day_date = GET_DATE_DAY_OF_WEEK(ld_period_start_date_SG) l_debug = ess_log_write(' ln_entry_duration_d'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('L_start_day'||(L_start_day)) l_debug = ess_log_write('L_end_day'||(L_end_day)) l_debug = ess_log_write('l_day_date'||(l_day_date)) IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) IF (l_day_date = 'FRI' OR l_day_date = 'SAT' ) THEN (ln_entry_duration_d = 0) IF(ld_period_start_date_SG = IV_ABS_START_DATE and (L_start_day = 'FRI' OR L_start_day = 'SAT')) THEN ( l_debug = ess_log_write('Condition 1') l_debug = ess_log_write('IV_START_DATE'||TO_CHAR(IV_START_DATE,'DD-MM-YYYY')) l_debug = ess_log_write('IV_ABS_START_DATE'||TO_CHAR(IV_ABS_START_DATE,'DD-MM-YYYY')) l_debug = ess_log_write('IV_ABS_END_DATE'||TO_CHAR(IV_ABS_END_DATE,'DD-MM-YYYY')) IF (ln_entry_duration_d < 12 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 12)) ELSE IF (ld_period_end_date_SG = IV_ABS_END_DATE and (L_end_day = 'FRI' OR L_start_day = 'SAT'))then (l_debug = ess_log_write('Condition 2') IF (ln_entry_duration_d < 12 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 12)) l_debug = ess_log_write(' ln_entry_duration_d after calculation v1'||to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d l_debug = ess_log_write(' DURATION after calculation v1'||to_char(DURATION)) RETURN DURATION ) l_debug = ess_log_write('ln_entry_duration_d After condition '||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Plan Duration*****') If l_schedule = 'AFG Drivers Work Schedule 50 hours' then ( D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') ld_period_start_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d1 l_debug = ess_log_write('Entered the Drivers Work Schedule') L_start_day=GET_DATE_DAY_OF_WEEK(D_IV_START_DATE) L_end_day=GET_DATE_DAY_OF_WEEK(D_IV_END_DATE) l_day_date = GET_DATE_DAY_OF_WEEK(ld_period_start_date_SG) l_debug = ess_log_write(' ln_entry_duration_d'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('L_start_day'||(L_start_day)) l_debug = ess_log_write('L_end_day'||(L_end_day)) l_debug = ess_log_write('l_day_date'||(l_day_date)) IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) IF (l_day_date = 'FRI' OR l_day_date = 'SAT' ) THEN (ln_entry_duration_d = 0) IF(ld_period_start_date_SG = IV_ABS_START_DATE and (L_start_day = 'FRI' OR L_start_day = 'SAT')) THEN ( l_debug = ess_log_write('Condition 1') l_debug = ess_log_write('IV_START_DATE'||TO_CHAR(IV_START_DATE,'DD-MM-YYYY')) l_debug = ess_log_write('IV_ABS_START_DATE'||TO_CHAR(IV_ABS_START_DATE,'DD-MM-YYYY')) l_debug = ess_log_write('IV_ABS_END_DATE'||TO_CHAR(IV_ABS_END_DATE,'DD-MM-YYYY')) IF (ln_entry_duration_d < 10 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 10)) ELSE IF (ld_period_end_date_SG = IV_ABS_END_DATE and (L_end_day = 'FRI' OR L_start_day = 'SAT'))then (l_debug = ess_log_write('Condition 2') IF (ln_entry_duration_d < 10 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 10)) l_debug = ess_log_write(' ln_entry_duration_d after calculation v1'||to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d l_debug = ess_log_write(' DURATION after calculation v1'||to_char(DURATION)) RETURN DURATION ) l_debug = ess_log_write('ln_entry_duration_d After condition '||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Plan Duration*****') DURATION = ln_entry_duration_d l_debug = ess_log_write('DURATION '||to_char(DURATION)) RETURN DURATION )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence requests for employees in the UK based on absence type, approval status, and work schedule rules. It ensures that employees do not exceed their allowed absence limits.\n\nFor Carers Leave:\n\nChecks if the request is submitted but not yet approved and adds it to the total approved hours.\nIf the total requested absence exceeds the annual limit, it rejects the request with an error message.\nAllows leave to be applied only in full-day or half-day increments.\nFor Annual Leave:\n\nEnsures that leave can only be taken in half-day or full-day increments, based on the employee's normal working hours.\nIf the requested duration does not align with half/full-day rules, the request is rejected.\nFor Sick Leave:\n\nLimits the weekly allowance by dividing total normal hours by 5 (i.e., daily work schedule).\nEnsures leave can only be taken in half-day or full-day increments, similar to Annual Leave.\nIf the request does not comply with these rules, the formula returns an error message indicating the issue. Otherwise, it validates the request for approval.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 40 DEFAULT for IV_TOTALDURATION IS 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_NUMBER1(number), IV_START_TIME, IV_END_TIME ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' l_approved_abs_hours =0 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_effective_date = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_eff_end_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') ln_default_duration=0 ln_half_duration = 0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'00:01','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=ADD_DAYS(IV_START_DATE,-1)) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( l_abs_typ_name ='Carers Leave' AND l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING') ) then ( l_approved_abs_hours = l_approved_abs_hours + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Carers Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = PER_ASG_NORMAL_HOURS L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION,2) IF L_TOTAL_ABSENCE > L_VALID_ABSENCE THEN ( TOKEN = 'You have applied '|| to_char(L_TOTAL_ABSENCE)|| ' hours of total allocated absence hours. You can not apply this leave for more than '|| to_char(L_VALID_ABSENCE) ||' hours in a year. Please reduce the absence hours.' VALID = 'N' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ln_default_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_duration = round(ln_default_duration/2,2) IF(round(IV_TOTALDURATION,2)<>round(ln_default_duration,2) AND round(IV_TOTALDURATION,2)<>ln_half_duration ) THEN ( VALID = 'N' TOKEN = 'You can only apply the Leave in Half ('|| to_char(ln_half_duration)||') or Full Day ('|| to_char(ln_default_duration)||')' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN IF L_TOTAL_ABSENCE = L_VALID_ABSENCE THEN ( Valid = 'Y' ) RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( L_TOTAL_ABSENCE = 0 l_total_full_days = 0 l_total_half_days = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = PER_ASG_NORMAL_HOURS L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION, 2) ln_default_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_duration = ROUND(ln_default_duration / 2, 2) ld_period_end_date_v2 = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_half_per_day_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date_v2, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_per_day_duration = round(ln_half_per_day_duration / 2,2) l_remainder = 0 l_remainder = round(mod(IV_TOTALDURATION , ln_half_per_day_duration),2) IF l_remainder<>0 THEN ( VALID = 'N' TOKEN = 'You can only apply Annual Leave in Half (' || TO_CHAR(ln_half_per_day_duration) || ') or Full Day (' || TO_CHAR(ln_half_per_day_duration*2) || ') per day' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) IF (L_ABS_TYPE = 'Sick Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = PER_ASG_NORMAL_HOURS / 5 L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION, 2) ln_default_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_duration = ROUND(ln_default_duration / 2, 2) ld_period_end_date_v2 = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_half_per_day_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date_v2, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_per_day_duration = round(ln_half_per_day_duration / 2,2) l_remainder = 0 l_remainder = round(mod(IV_TOTALDURATION , ln_half_per_day_duration),2) IF l_remainder<>0 THEN ( VALID = 'N' TOKEN = 'You can only apply Annual Leave in Half (' || TO_CHAR(ln_half_per_day_duration) || ') or Full Day (' || TO_CHAR(ln_half_per_day_duration*2) || ') per day' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the absence duration based on an employee\u2019s assigned work schedule and working hours. It applies different rules for various schedules to ensure accurate payroll processing.\n\nFor an 8-hour Elapsed General Work Schedule:\n\nThe system loops through each day in the absence period to determine actual working hours.\nIf the absence starts mid-shift, it checks the planned end time:\nIf an end duration is provided, it adjusts the absence accordingly.\nOtherwise, it retains the full available work hours.\nFor Afghanistan General Work Schedule (Summer with 1-hour break):\n\nIf the absence is 4.5 hours or less, it is rounded to 4 hours.\nIf the absence is more than 4.5 hours, it is counted as a full 8-hour shift.\nFor Security Guards and Drivers' Work Schedules:\n\nIf the absence falls on a Friday or Saturday, it is ignored (set to 0 hours).\nIf the absence is partial on a weekend, it is capped at 10 hours.\nFinal Calculation:\n\nThe formula accumulates absence hours across multiple days.\nIt returns the total adjusted absence duration based on the employee\u2019s schedule and shift policies.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 50 DEFAULT FOR IV_END_DURATION IS 100 DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text),IV_START_DURATION,IV_END_DURATION,iv_abs_start_date (date),iv_abs_end_date (date) p_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') p_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') DURATION=0 ln_entry_duration_d=0 l_total_duration_d = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_HR_ASS_id= GET_CONTEXT(HR_ASSIGNMENT_ID,100) r = ess_log_write ('Type Call Start Afghanistan Annual Leave==============================================' ) l_person_id = GET_CONTEXT(PERSON_ID,0) l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(l_HR_ASS_id)||''''||'|EFF_DATE='''||to_char(IV_START_DATE,'DD-MM-YYYY')||'''') l_debug = ess_log_write('l_schedule: ' + l_schedule) l_debug = ess_log_write('l_date_shift: ' + to_char(iv_start_date, 'DDMMYYYY')) l_debug = ess_log_write('l_end_date_shift: ' + to_char(iv_end_date, 'DDMMYYYY')) l_debug = ess_log_write('IV_ABS_START_DATE: ' + to_char(IV_ABS_START_DATE, 'DDMMYYYY')) l_debug = ess_log_write('IV_ABS_END_DATE: ' + to_char(IV_ABS_END_DATE, 'DDMMYYYY')) l_debug = ess_log_write('D_IV_START_DATE: ' + to_char(D_IV_START_DATE, 'DDMMYYYY')) l_debug = ess_log_write('D_IV_END_DATE: ' + to_char(D_IV_END_DATE, 'DDMMYYYY')) IF (l_schedule = '8 hours Elapsed General Work Schedule AFG NEW' ) THEN ( WHILE (TRUNC(D_IV_START_DATE)<= TRUNC(D_IV_END_DATE)) LOOP ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d1 = ln_entry_duration_d1 IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d D_IV_START_DATE=ADD_DAYS(D_IV_START_DATE,1) ) RETURN DURATION ) ELSE ( l_date = iv_start_date WHILE (l_date <= iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') If l_schedule = 'New Afghanistan General Work Schedule Summer with 1 Hour break' then ( IF (L_DAY>0 AND L_DAY<=4.5) THEN (L_DAY = 4) IF (L_DAY>4.5) THEN (L_DAY =8)) IF (L_DAY>0 AND L_DAY<=1) THEN (L_DAY = 1) IF (L_DAY>1 AND L_DAY<=2) THEN (L_DAY = 2) IF (L_DAY>2 AND L_DAY<=3) THEN (L_DAY = 3) IF (L_DAY>3 AND L_DAY<=4) THEN (L_DAY = 4) IF (L_DAY>4) THEN (L_DAY =8) l_debug = ess_log_write('l_date: ' +to_char(l_date)) l_debug = ess_log_write('iv_start_date: ' +to_char(iv_start_date)) l_debug = ess_log_write('l_ed: ' +to_char(l_ed)) l_debug = ess_log_write('iv_end_date: ' +to_char(iv_end_date)) l_debug = ess_log_write('L_DAY: ' +to_char(L_DAY)) l_debug = ess_log_write('l_total_duration_d: ' +to_char(l_total_duration_d)) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) If l_schedule = 'AFG Security Guard Work Schedule 60 hours' then ( D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') WHILE (TRUNC(D_IV_START_DATE)<= TRUNC(D_IV_END_DATE)) LOOP ( ld_period_start_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d1 l_debug = ess_log_write('Entered the Security Guard work Schedule') L_start_day=GET_DATE_DAY_OF_WEEK(D_IV_START_DATE) L_end_day=GET_DATE_DAY_OF_WEEK(D_IV_END_DATE) l_day_date = GET_DATE_DAY_OF_WEEK(ld_period_start_date_SG) l_debug = ess_log_write(' ln_entry_duration_d'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('L_start_day'||(L_start_day)) l_debug = ess_log_write('L_end_day'||(L_end_day)) l_debug = ess_log_write('l_day_date'||(l_day_date)) IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) IF (l_day_date = 'FRI' OR l_day_date = 'SAT' ) THEN (ln_entry_duration_d = 0) l_debug = ess_log_write('ld_period_start_date_SG'||to_char(ld_period_start_date_SG)) l_debug = ess_log_write('IV_START_DATE'||to_char(IV_START_DATE)) IF(ld_period_start_date_SG = IV_START_DATE and (L_start_day = 'FRI' OR L_start_day = 'SAT')) THEN ( l_debug = ess_log_write('Condition 1') IF (ln_entry_duration_d < 12 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 12)) ELSE IF (ld_period_end_date_SG = IV_END_DATE and (L_end_day = 'FRI' OR L_start_day = 'SAT'))then (l_debug = ess_log_write('Condition 2') IF (ln_entry_duration_d < 12 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 12)) l_debug = ess_log_write(' ln_entry_duration_d after calculation v1'||to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d D_IV_START_DATE=ADD_DAYS(D_IV_START_DATE,1) l_debug = ess_log_write(' DURATION after calculation v1'||to_char(DURATION)) ) RETURN DURATION ) l_debug = ess_log_write('ln_entry_duration_d After condition v2'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Type Duration*****') If l_schedule = 'AFG Drivers Work Schedule 50 hours' then ( D_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') D_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') WHILE (TRUNC(D_IV_START_DATE)<= TRUNC(D_IV_END_DATE)) LOOP ( ld_period_start_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d2 = ln_entry_duration_d1 l_debug = ess_log_write('Entered the Drivers Work Schedule') L_start_day=GET_DATE_DAY_OF_WEEK(D_IV_START_DATE) L_end_day=GET_DATE_DAY_OF_WEEK(D_IV_END_DATE) l_day_date = GET_DATE_DAY_OF_WEEK(ld_period_start_date_SG) l_debug = ess_log_write(' ln_entry_duration_d'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('L_start_day'||(L_start_day)) l_debug = ess_log_write('L_end_day'||(L_end_day)) l_debug = ess_log_write('l_day_date'||(l_day_date)) IF (trunc(IV_START_DATE)=trunc(D_IV_START_DATE)) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 3rd Condition') l_debug = ess_log_write('IV_START_DURATION: ' + to_char(IV_START_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_START_DURATION = 50) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.1 Condition') IF (IV_END_DURATION <> 100) THEN (ln_entry_duration_d = IV_END_DURATION) ln_entry_duration_d=ln_entry_duration_d ) IF (IV_START_DURATION <> 50 and IV_START_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.2 Condition') ln_entry_duration_d=IV_START_DURATION ) IF (IV_START_DURATION <> 50 and IV_START_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 3.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (( TRUNC(IV_START_DATE) <> TRUNC(D_IV_START_DATE)) AND (TRUNC(IV_END_DATE) <> TRUNC(D_IV_START_DATE)) ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 2nd Condition') l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) ) IF (TRUNC(IV_END_DATE)=TRUNC(D_IV_START_DATE) and (trunc(iv_start_date) <> trunc(IV_END_DATE)) ) THEN ( ld_period_start_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(D_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d ln_entry_duration_d = ln_entry_duration_d l_debug = ess_log_write('AKF Elapsed Schedule 1st Condition') l_debug = ess_log_write('l_schedule: ' + to_char(IV_end_DURATION)) l_debug = ess_log_write('ln_entry_duration_d: ' + to_char(ln_entry_duration_d)) IF (IV_end_DURATION = 100) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.1 Condition') ln_entry_duration_d=ln_entry_duration_d ) IF (IV_end_DURATION <> 100 and IV_end_DURATION <=ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.2 Condition') ln_entry_duration_d=IV_end_DURATION ) IF (IV_end_DURATION <> 100 and IV_end_DURATION >ln_entry_duration_d ) THEN ( l_debug = ess_log_write('AKF Elapsed Schedule 1.3 Condition') ln_entry_duration_d=ln_entry_duration_d ) ) l_debug = ess_log_write('ln_entry_duration_d After Cond: ' + to_char(ln_entry_duration_d)) IF (l_day_date = 'FRI' OR l_day_date = 'SAT' ) THEN (ln_entry_duration_d = 0) IF(ld_period_start_date_SG = IV_START_DATE and (L_start_day = 'FRI' OR L_start_day = 'SAT')) THEN ( l_debug = ess_log_write('Condition 1') IF (ln_entry_duration_d < 10 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 10)) ELSE IF (ld_period_end_date_SG = IV_END_DATE and (L_end_day = 'FRI' OR L_start_day = 'SAT'))then (l_debug = ess_log_write('Condition 2') IF (ln_entry_duration_d < 10 AND ln_entry_duration_d > 0) THEN (ln_entry_duration_d = ln_entry_duration_d) ELSE (ln_entry_duration_d = 10)) l_debug = ess_log_write(' ln_entry_duration_d after calculation v1'||to_char(ln_entry_duration_d)) DURATION=DURATION+ln_entry_duration_d D_IV_START_DATE=ADD_DAYS(D_IV_START_DATE,1) l_debug = ess_log_write(' DURATION after calculation v1'||to_char(DURATION)) ) RETURN DURATION ) l_debug = ess_log_write('ln_entry_duration_d After condition v2'||to_char(ln_entry_duration_d)) l_debug = ess_log_write('*****End of Type Duration*****') DURATION = l_total_duration_d ) RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: his formula validates absence requests based on the type of leave, ensuring employees do not exceed policy limits for various leave categories.\n\nFor Maternity Leave:\n\nChecks the past rolling year (365 days) for taken leave.\nIf the total exceeds 98 days, the request is rejected.\nFor Paternity Leave:\n\nChecks the past rolling year for taken leave.\nIf the total exceeds 5 days, the request is rejected.\nFor Exceptional Permission Leave:\n\nEnsures that employees do not exceed 10 days of leave in a rolling year.\nFor Annual Leave:\n\nChecks the employee's length of service.\nIf the employee has less than 6 months of service, the request is rejected.\nFor Unpaid Leave:\n\nLimits the total unpaid leave to 30 days in a rolling year.\nIf any of these conditions fail, the formula returns an error message. Otherwise, the request is validated for approval.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'XX' INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) effdate = GET_CURRENT_DATE() CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Maternity Leave') THEN ( L_DATE = ADD_DAYS(iv_start_date,-365) L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,L_DATE,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF (IV_TOTALDURATION > 784) THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 98 days in a rolling year.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Paternity Leave') THEN ( L_DATE = ADD_DAYS(iv_start_date,-365) L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,L_DATE,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF (IV_TOTALDURATION > 40) THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 5 days in a rolling year.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Exceptional Permission') THEN ( L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,L_DATE,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF (IV_TOTALDURATION > 80) THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 10 days in a rolling year.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( L_SERVICE = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) L_EMP_HR = 'X' L_EMP_HR =GET_VALUE_SET('AKF_MG_Annual_Leave_Override_HR_VS') IF (ISNULL(L_EMP_HR) = 'N') THEN (L_EMP_HR = 'XX') IF ( L_EMP_HR = 'XX') THEN ( IF L_SERVICE < .5 then ( TOKEN = 'You can avail of Annual Leaves only after 6 months of service.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Unpaid Leave') THEN ( L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,L_DATE,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF (IV_TOTALDURATION > 240) THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 30 days in a rolling year.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence requests based on the type of leave, ensuring employees do not exceed policy limits for different leave categories.\n\nFor Parental Leave:\n\nChecks if the total parental leave taken exceeds 10 days.\nIf exceeded, the request is rejected.\nFor Birthday Leave:\n\nEnsures the absence date matches the employee\u2019s date of birth.\nIf the selected date does not match, the request is rejected.\nFor Maternity Leave:\n\nChecks the employee\u2019s gender before allowing maternity leave.\nIf the employee is female ('F'), the maximum allowed leave is 60 days in a rolling year.\nIf the employee is not female, only 4 days are allowed.\nIf the total maternity leave exceeds the limit, the request is rejected.\nIf any of these conditions fail, the formula returns an error message. Otherwise, the request is validated for approval.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_PER_SEX IS 'XX' DEFAULT FOR PER_PER_DATE_OF_BIRTH IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') IF L_ABS_TYPE = 'Parental Leave' THEN ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Birthday Leave' THEN ( L_BD = PER_PER_DATE_OF_BIRTH IF TO_CHAR(L_BD,'DDMM') != TO_CHAR(iv_start_date,'DDMM') THEN ( TOKEN = 'Please select the correct date of birth.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION L_SEX = PER_PER_SEX L_LIMIT = 4 IF L_SEX = 'F' THEN (L_LIMIT = 60) IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than '|| TO_CHAR(L_LIMIT) ||' days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence requests based on the type of leave and ensures employees do not exceed policy limits. It also checks eligibility based on service duration.\n\nFor Bereavement Leave:\n\nLimits total leave to 5 days per year.\nIf exceeded, the request is rejected.\nFor Family and Medical Leave:\n\nRequires at least 1 year of service before applying.\nLimits leave to 16 weeks in a rolling year.\nIf exceeded, the request is rejected.\nFor Paid Parental Leave:\n\nRequires at least 30 days of service before applying.\nLimits leave to 16 weeks in a 12-month period.\nFor Short-Term Disability Leave:\n\nLimits the maximum leave to 90 days per year.\nIf exceeded, the request is rejected.\nIf any of these conditions fail, the formula returns an error message. Otherwise, the request is validated for approval.\n\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_TOTALDURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_current_yr=TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) l_effective_date = TO_DATE(TO_CHAR(l_current_yr)+'/01/01 00:00:00') l_yr_end_date = TO_DATE(TO_CHAR(l_current_yr)+'/12/31 00:00:00') l_abs_typ_name = 'X' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_approved_Bereavement_Leave= 0 l_approved_Family_and_Medical_Leave = 0 l_approved_Paid_Parental_Leave = 0 l_approved_Short_term_and_Long_term_Disability = 0 L_ABS_ENTRY_ID = GET_CONTEXT(ABSENCE_ENTRY_ID,0) CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( L_ABS_ENTRY_ID_N = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I] CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( (l_abs_typ_name ='Bereavement Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING') AND(L_ABS_ENTRY_ID != L_ABS_ENTRY_ID_N)) then ( l_approved_Bereavement_Leave = l_approved_Bereavement_Leave + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Family and Medical Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_Family_and_Medical_Leave = l_approved_Family_and_Medical_Leave + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Short term and Long term Disability')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_Short_term_and_Long_term_Disability = l_approved_Short_term_and_Long_term_Disability + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Paid Parental Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_Paid_Parental_Leave = l_approved_Paid_Parental_Leave + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Bereavement Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = l_approved_Bereavement_Leave + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 40 THEN ( TOKEN = 'You can not apply this leave for more than 5 days in a year.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Family and Medical Leave') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_SERVICE_PERIOD = L_SERVICE_PERIOD * 365 IF L_SERVICE_PERIOD < 365 THEN ( TOKEN = 'You can not apply this leave before completing 1 year of service.' VALID = 'N' ) ) IF VALID !='N' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-730) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = l_approved_Family_and_Medical_Leave + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 640 THEN ( TOKEN = 'You can not apply this leave for more than 16 weeks in a year.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE ='Paid Parental Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_SERVICE_PERIOD = L_SERVICE_PERIOD * 365 IF L_SERVICE_PERIOD < 30 THEN ( TOKEN = 'You can not apply this leave before completing 30 days of service.' VALID = 'N' ) ) IF VALID !='N' THEN ( CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = l_approved_Paid_Parental_Leave + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 640 THEN ( TOKEN = 'You can not apply this leave for more than 16 weeks in a twelve month period.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE ='Short term and Long term Disability') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = l_approved_Short_term_and_Long_term_Disability + IV_TOTALDURATION IF IV_ABSENCE_REASON = 'Short Term Disability' AND L_TOTAL_ABSENCE > 720 THEN ( TOKEN = 'You can not apply Short Term Disability Leave for more than 90 days in a year.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence requests based on the type of leave and ensures employees comply with policy rules.\n\nFor Annual Leave:\n\nEmployees cannot apply for leave before completing their probation period.\nFor Study Leave:\n\nThe total leave cannot exceed 10 days in a rolling period.\nFor Compassionate Leave & Bereavement Leave:\n\nLimited to 5 days per year.\nFor Maternity Leave:\n\nRestricted to 90 days in a rolling year.\nFor Pre-Adoptive Leave:\n\nMaximum of 30 days allowed.\nFor Unpaid Leave:\n\nEmployees must have exhausted their Annual Leave balance before applying.\nMaximum limit: 240 hours.\nFor Sick Leave:\n\nRequires at least 2 months of service before applying.\nFull Sick Leave capped at 45 days.\nShort Sick Leave capped at 10 days.\nIf any of these conditions fail, the formula returns an error message. Otherwise, the request is validated for approval.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1901/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_HIRE_DATE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_HIRE_DATE >1 THEN (L_HIRE_DATE =1) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Annual Leave') THEN ( IF PER_ASG_DATE_PROBATION_END > iv_start_date THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'You can not apply Annual Leave before end of probation period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Study Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Compassionate Leave' OR L_ABS_TYPE = 'Bereavement Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION L_LIMIT = 5 L_LIMIT_HRS = L_LIMIT*8 IF L_TOTAL_ABSENCE > L_LIMIT_HRS THEN ( TOKEN = 'You can not apply this leave for more than '||TO_CHAR(L_LIMIT) ||' days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 720 THEN ( TOKEN = 'You can not apply this leave for more than 90 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Pre-adoptive Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 30 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Unpaid Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF l_balance>0 then ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 240 THEN ( TOKEN = 'You can not apply this leave for more than 240 hours.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Sick Leave' THEN ( IF L_HIRE_DATE*365 < 60 then ( TOKEN = 'You can not apply Sick Leave before completing two months of service.' VALID = 'N' ) IF VALID != 'N' THEN ( IF (IV_ABSENCE_REASON = 'Sick Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 360 THEN ( TOKEN = 'You can not apply Sick Leave for more than 45 days.' VALID = 'N' ) ) ) IF (IV_ABSENCE_REASON = 'Short Sick Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply Short Sick Leave for more than 10 days.' VALID = 'N' ) ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence requests based on the type of leave and ensures compliance with company policies.\n\nFor Annual Leave:\n\nEmployees cannot apply before completing their probation period.\nFor Study Leave:\n\nThe total leave cannot exceed 10 days.\nFor Compassionate & Bereavement Leave:\n\nLimited to 5 days per year.\nFor Maternity Leave:\n\nRestricted to 60 working days.\nFor Pre-Adoptive Leave:\n\nMaximum of 30 days allowed.\nFor Unpaid Leave:\n\nEmployees must have zero Annual Leave balance before applying.\nThe leave is capped at 240 hours.\nFor Sick Leave:\n\nMaximum allowed is 15 days.\nIf any of these conditions fail, the formula returns an error message.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1901/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_HIRE_DATE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_HIRE_DATE >1 THEN (L_HIRE_DATE =1) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Annual Leave') THEN ( IF PER_ASG_DATE_PROBATION_END > iv_start_date THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'You can not apply Annual Leave before end of probation period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Study Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Compassionate Leave' OR L_ABS_TYPE = 'Bereavement Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION L_LIMIT = 5 L_LIMIT_HRS = L_LIMIT*8 IF L_TOTAL_ABSENCE > L_LIMIT_HRS THEN ( TOKEN = 'You can not apply this leave for more than '||TO_CHAR(L_LIMIT) ||' days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 480 THEN ( TOKEN = 'You can not apply this leave for more than 60 working days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Pre-adoptive Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 30 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Unpaid Leave') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = iv_start_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF l_balance>0 then ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ELSE ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 240 THEN ( TOKEN = 'You can not apply this leave for more than 240 hours.' VALID = 'N' ) ) ) ) IF L_ABS_TYPE = 'Sick Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 120 THEN ( TOKEN = 'You can not apply Sick Leave for more than 15 days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula determines pay factor and entitlement based on an employee\u2019s probation period and length of service.\n\nBy default, the pay factor is set to 100%, and the band entitlement is 12 months \u00d7 5 days \u00d7 8 hours.\nIf the employee is still in their probation period or has less than 6 months of service, the formula:\nKeeps the pay factor at 100%.\nReduces the band entitlement to 8 months \u00d7 5 days \u00d7 8 hours.\nThe final pay factor and entitlement values are returned\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) L_PROBATION_END = PER_ASG_DATE_PROBATION_END L_HIRE_DATE = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE L_DATE = GET_CURRENT_DATE() bandpayfactor = 100 bandentitlement = 12*5*8 IF L_PROBATION_END >L_DATE OR MONTHS_BETWEEN(L_DATE,L_HIRE_DATE)<6 THEN ( bandpayfactor = 100 bandentitlement = 8*5*8 ) RETURN bandpayfactor, bandentitlement",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence entries for UK employees, ensuring compliance with absence policies and entitlements.\n\nCompassionate Leave Validation\n\nChecks submitted and approved leave records.\nEnsures total absence hours do not exceed the allocated limit (normal weekly hours).\nValidates that leave can only be taken in half or full-day increments.\nParental Leave Validation\n\nRequires child selection in the absence request.\nEnsures a maximum of 4 weeks per year per child.\nPaternity Leave Validation\n\nLimits paternity leave to 2 weeks per year.\nIf any condition fails, an error message is returned\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 40 DEFAULT for IV_TOTALDURATION IS 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_NUMBER1(number), IV_START_TIME, IV_END_TIME ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' l_approved_abs_hours =0 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_effective_date = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_eff_end_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') ln_default_duration=0 ln_half_duration = 0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'00:01','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=ADD_DAYS(IV_START_DATE,-1)) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( l_abs_typ_name ='Compassionate Leave' AND l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING') ) then ( l_approved_abs_hours = l_approved_abs_hours + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Compassionate Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = PER_ASG_NORMAL_HOURS L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION,2) IF L_TOTAL_ABSENCE > L_VALID_ABSENCE THEN ( TOKEN = 'You have applied '|| to_char(L_TOTAL_ABSENCE)|| ' hours of total allocated absence hours. You can not apply this leave for more than '|| to_char(L_VALID_ABSENCE) ||' hours in a year. Please reduce the absence hours.' VALID = 'N' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ln_default_duration = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'H') ln_half_duration = round(ln_default_duration/2,2) IF(round(IV_TOTALDURATION,2)<>round(ln_default_duration,2) AND round(IV_TOTALDURATION,2)<>ln_half_duration ) THEN ( VALID = 'N' TOKEN = 'You can only apply the Leave in Half ('|| to_char(ln_half_duration)||') or Full Day ('|| to_char(ln_default_duration)||') Only' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN IF L_TOTAL_ABSENCE = L_VALID_ABSENCE THEN ( Valid = 'Y' ) RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) IF (L_ABS_TYPE = 'Parental Leave') THEN ( L_SELECTED_CHILD = IV_ATTRIBUTE_NUMBER1 if (L_SELECTED_CHILD = 0) THEN ( TOKEN = 'Please select the Child Name from the Child Name dropdown in Additional Information Section.' VALID = 'N' ) IF VALID != 'N' THEN ( l_start_date = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_end_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_DURATION = IV_TOTALDURATION I=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = 'Parental Leave' THEN ( L_CHILD = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IF (L_CHILD = IV_ATTRIBUTE_NUMBER1) THEN ( L_DURATION = L_DURATION + ANC_ABS_ENTRS_DURATION ) ) ) ) ) IF L_DURATION >4 THEN ( TOKEN = 'You can not apply this leave for more than 4 weeks in a year for this child.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE ='Paternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 2 THEN ( TOKEN = 'You can not apply this leave for more than 2 weeks in a year.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence entry rules for Pakistan (PK). Here\u2019s a concise summary of its key conditions:\n\nAnnual Leave: Employees cannot apply for annual leave within six months of their hire date.\n\nUncertified Leave: Cannot exceed 7 days in total.\n\nUnpaid Leave: Allowed only if the annual leave balance is zero. The maximum allowed is 90 days.\n\nCompassionate Leave: Cannot exceed 10 days.\n\nStudy Leave: Cannot exceed 30 days.\n\nMaternity Leave:\n\nDefault eligibility: 140 days.\nBirth of twins: 186 days.\nBirth with complications: 156 days.\nCannot exceed the specified eligibility.\nIf any of these conditions are violated, an error message is triggered\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_HIRE_DATE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Annual Leave') THEN ( IF L_HIRE_DATE < 0.5 THEN ( TOKEN = 'You can not apply this leave before six months from date of hire.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Uncertified Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF IV_TOTALDURATION > 7 THEN ( TOKEN = 'You can not apply this leave for more than 7 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Unpaid Leave') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ELSE ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 90 THEN ( TOKEN = 'You can not apply this leave for more than 90 days.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE ='Compassionate Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Study Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 30 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION L_ELIGIBILITY = 140 IF IV_ABSENCE_REASON = 'Birth of twins' THEN ( L_ELIGIBILITY = 186 ) ELSE IF IV_ABSENCE_REASON = 'Birth with complications' THEN ( L_ELIGIBILITY = 156 ) IF L_TOTAL_ABSENCE > L_ELIGIBILITY THEN ( TOKEN = 'You can not apply this leave for more than '||TO_CHAR(L_ELIGIBILITY) ||' days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the total absence duration by considering weekends and holidays. It converts the start and end dates to a proper format and iterates through the date range to count working days. If an employee is categorized as AKF_LOCAL, weekends and holidays are included; otherwise, only working days are counted. The formula uses GET_PAY_AVAILABILITY to check available workdays and returns the final absence duration as DURATION\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave') THEN ( l_total_duration_d = 0 l_he = 0 l_we = 0 l_wd =0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF L_DAY>0 THEN (L_WD=L_WD+L_DAY) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( l_we = l_we + 1 )ELSE ( l_he = l_he +1 ) ) l_date = add_days(l_date,1) ) l_he = 0 IF PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY != 'AKF_LOCAL' THEN ( l_total_duration_d = l_wd )ELSE ( l_total_duration_d = l_wd + l_we+l_he ) ) ) DURATION = l_total_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates leave accrual based on the employee's enrollment start date and the accrual period. If the plan enrollment start date is before or equal to the accrual period start date, it assumes 20 working days. Otherwise, it dynamically calculates available working days using GET_PAY_AVAILABILITY. If the employee has less than 13 working days, the accrual is set to 0. The final accrued leave is returned as accrual.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL L_WORKING_DAYS = 20 IF IV_PLANENROLLMENTSTARTDATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_WORKING_DAYS = 20 )ELSE ( L_WORKING_DAYS = GET_PAY_AVAILABILITY ('ASSIGN', IV_PLANENROLLMENTSTARTDATE, IV_ACCRUALPERIODENDDATE, 'Y', 'Y', 'Y', 'Y', 'D') ) IF L_WORKING_DAYS <13 THEN (L_ACCRUAL = 0) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates absence duration based on the leave type and employee category.\n\nChild Care Leave: Calculates total days between start and end dates and converts them to hours (days \u00d7 8).\nAdditional Paid Leave for High Altitude Regions: Counts working days and includes weekends if they fall in the leave period.\nAnnual Leave: Differentiates between working days, weekends, and holidays. If the employee category is 'AKF_LOCAL', weekends are included; otherwise, only working days are counted.\nThe final computed leave duration is returned.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Child Care Leave') THEN ( l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d*8 ) IF (L_ABS_TYPE = 'Additional paid leave for high altitude regions') THEN ( l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF (L_DAY>0) THEN (L_DAY = 1) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( L_DAY = 1 ) ) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( l_total_duration_d = 0 l_total_wd = 0 l_total_we =0 l_total_hol = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF L_DAY = 8 THEN (L_DAY = 1) IF L_DAY = 4 THEN (L_DAY = .5) IF (L_DAY>0) THEN (l_total_wd = l_total_wd + L_DAY) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( l_total_we = l_total_we + 1 )ELSE ( l_total_hol = l_total_hol +1 ) ) l_date = add_days(l_date,1) ) IF PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY = 'AKF_LOCAL' THEN ( l_total_duration_d = l_total_wd+l_total_we ) ELSE ( l_total_duration_d = l_total_wd ) ) ) DURATION = l_total_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence requests based on leave type and specific conditions.\n\nUnpaid Leave: Allowed only if there is no remaining Annual Leave balance.\nAdmin Leave: Limited to 10 days.\nPaternity Leave: Limited to 10 days within the last 365 days.\nMaternity Leave: Duration varies based on absence reasons:\nSingle Child Birth: 126 days\nMultiple Infants / High Altitude / Complexity: 140\u2013180 days\nValidation ensures the total leave does not exceed the allowed limit.\nIf conditions are not met, an error message is returned.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Unpaid Leave') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Admin Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Paternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date, -365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_DATE = ADD_DAYS(iv_start_date, -365) L_TOTAL_ABSENCE = 0 CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION ) IF IV_ABSENCE_REASON = 'Birth of Single Child' THEN ( L_LIMIT = 126 ) ELSE IF IV_ABSENCE_REASON = 'Birth of 2 or more infants' OR IV_ABSENCE_REASON = 'Birth of single child - high altitude regions' THEN ( L_LIMIT = 140 ) ELSE IF IV_ABSENCE_REASON = 'Birth with complexity' THEN ( L_LIMIT = 140 ) ELSE IF IV_ABSENCE_REASON = 'Birth with complexity - high altitude regions' THEN ( L_LIMIT = 156 )ELSE IF IV_ABSENCE_REASON = 'Birth of 2 or more infants - high altitude regions' THEN ( L_LIMIT = 180 ) IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than '||TO_CHAR(L_LIMIT)||' days.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates different types of leave requests based on eligibility criteria:\n\nExam Leave: Maximum 7 days allowed.\nSick Leave: Limited to 190 days.\nHajj Leave: Requires 3 years of service.\nUrgent/Compassionate Leave: Maximum 10 days, reduced proportionally for service less than 1 year.\nPaternity Leave: Limited to 5 days in a rolling 365-day period.\nMaternity Leave: Maximum 90 days in a rolling year.\nLeave Without Pay:\nAllowed only if Annual Leave balance is zero.\nMaximum of 15 days.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_HIRE_DATE = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Exam Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 7 THEN ( TOKEN = 'You can not apply this leave for more than 7 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Sick Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 190 THEN ( TOKEN = 'You can not apply this leave for more than 190 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Hajj Leave') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=iv_start_date) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_SERVICE<3 THEN ( TOKEN = 'You can not apply this leave before completion of 3 years of service.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Urgent/Compassionate Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_SERVICE = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = L_DATE) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION L_ELIGIBILITY = 10 IF L_SERVICE < 1 THEN ( L_ELIGIBILITY = L_ELIGIBILITY * L_SERVICE ) IF L_TOTAL_ABSENCE > L_ELIGIBILITY THEN ( TOKEN = 'You can not apply this leave for more than ' ||to_char(L_ELIGIBILITY)||' days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Paternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 5 THEN ( TOKEN = 'You can not apply this leave for more than 5 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 90 THEN ( TOKEN = 'You can not apply this leave for more than 90 days in a rolling year period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Leave Without Pay') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Leave without Pay only if there is no Annual Leave balance.' VALID = 'N' ) IF (VALID !='N') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 15 THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates different types of leave requests based on eligibility criteria:\n\nProbation Restriction\n\nLeave cannot be applied before the end of the probation period.\nHajj Leave\n\nRequires 5 years of service.\nMaternity Leave\n\nLimited to 180 days in a rolling year.\nPaternity Leave\n\nLimited to 30 days in a rolling year.\nStudy Leave\n\nMaximum 15 days.\nBereavement Leave\n\nMaximum 5 days.\nMarriage Leave\n\nMaximum 7 days.\nCompassion Leave\n\nMaximum 10 days.\nLeave Without Pay\n\nMaximum 30 consecutive days.\nIf any condition is not met, the leave request is rejected with an appropriate error message.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_SERVICE_PERIOD = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) L_NEW_PROBATION_DATE = PER_ASG_DATE_PROBATION_END IF PER_ASG_DATE_PROBATION_END WAS DEFAULTED THEN ( L_NEW_PROBATION_DATE = iv_start_date ) IF L_NEW_PROBATION_DATE > iv_start_date THEN ( TOKEN = 'You can not apply this leave before end of probation.' VALID = 'N' ) IF VALID = 'Y' THEN ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF L_ABS_TYPE = 'Hajj Leave' THEN ( IF L_SERVICE_PERIOD<5 THEN ( TOKEN = 'You can not apply this leave before completing 5 years of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 180 THEN ( TOKEN = 'You can not apply this leave for more than 180 days in a rolling year period.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Paternity Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 30 THEN ( TOKEN = 'You can not apply this leave for more than 30 days in a rolling year period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Study Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 120 THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Bereavement Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 40 THEN ( TOKEN = 'You can not apply this leave for more than 5 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Marriage Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 56 THEN ( TOKEN = 'You can not apply this leave for more than 7 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Compassion Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*8) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Leave Without Pay') THEN ( IF IV_TOTALDURATION > 240 THEN ( TOKEN = 'You can not apply this leave for more than 30 consecutive days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates different leave requests for Pakistan (PK) employees based on predefined eligibility rules.\n\nKey Validations:\nMarriage Leave\n\nCannot start within the next 5 days.\nMaximum 15 days allowed.\nMaternity/Paternity Leave\n\nMaximum 9 months (calculated based on working hours).\nFamily Support Leave\n\nLimited to 15 days.\nAnnual Leave\n\nCannot be availed before completing 6 months of service.\nCompassionate Leave\n\nEligibility varies based on relationship with the deceased (e.g., spouse gets 20 days, son/daughter gets 5 days, funeral only gets 1 day).\nSchool Support Leave\n\nCannot be applied beyond one quarter.\nMaximum 4 hours per child per quarter.\nUnpaid Leave\n\nCan only be applied if no Annual Leave balance is available.\nIf a leave request exceeds the allowed limit, the application is rejected with an error message.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR IV_ATTRIBUTE_NUMBER1 IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_NUMBER1(number) ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF L_ABS_TYPE = 'Marriage Leave' THEN ( effdate = GET_CURRENT_DATE() IF iv_start_date < add_days(effdate,5) THEN ( TOKEN = 'Leave start date cannot be within next 5 days.' VALID = 'N' ) L_LIMIT = 15*7.5 IF PER_ASG_NORMAL_HOURS = 35 THEN ( L_LIMIT = 15*7 ) IF IV_TOTALDURATION > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave' OR L_ABS_TYPE = 'Paternity Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) L_WORKING_DAY = 7.5 IF PER_ASG_NORMAL_HOURS = 35 THEN ( L_WORKING_DAY = 7 ) L_LIMIT = 30*9*L_WORKING_DAY CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE*L_WORKING_DAY + IV_TOTALDURATION IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than 9 months.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Family Support Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') L_WORKING_DAY = 7.5 L_LIMIT = 112.5 IF PER_ASG_NORMAL_HOURS = 35 THEN ( L_LIMIT = 15*7 L_WORKING_DAY = 7 ) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE*L_WORKING_DAY + IV_TOTALDURATION IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( L_SERVICE = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) IF L_SERVICE < .5 then ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'You can avail of Annual Leaves only after 6 months of service.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Compassionate Leave') THEN ( L_WORKING_DAY = 7.5 L_ECD = PER_ASG_NORMAL_HOURS IF (L_ECD = 35) THEN ( L_WORKING_DAY = 7 ) L_ELIGIBILITY = 2*L_WORKING_DAY l_duration = 0 l_sd = iv_start_date while (l_sd<iv_end_date) loop ( l_duration = l_duration + L_WORKING_DAY L_SD = add_days(l_sd,1) ) IF (IV_ABSENCE_REASON = 'Spouse (married or legal union) - 20 Calendar Days' ) THEN ( L_ELIGIBILITY = 20*L_WORKING_DAY ) IF (IV_ABSENCE_REASON = 'Son/Daughter/Step son/Step daughter/Son in law/Daughter in law - 5 Calendar Days') THEN ( L_ELIGIBILITY = 5*L_WORKING_DAY ) IF (IV_ABSENCE_REASON = 'Funeral') THEN ( L_ELIGIBILITY = 1*L_WORKING_DAY L_DURATION = IV_TOTALDURATION ) IF L_DURATION > L_ELIGIBILITY THEN ( TOKEN = 'You cannot apply this Leave for more than '||to_char(L_ELIGIBILITY)||' hours.' VALID = 'N' ) ) IF(L_ABS_TYPE = 'School Support') Then ( L_S_YEAR = TO_CHAR(iv_start_date,'YYYY') L_S_MM = TO_NUMBER(TO_CHAR(iv_start_date,'MM')) L_S_MM_C = TO_CHAR(L_S_MM) IF L_S_MM<=3 THEN ( L_S_MM_C = '01' L_E_MM_C='03' ) IF (L_S_MM>3) AND (L_S_MM <=6) THEN ( L_S_MM_C = '04' L_E_MM_C='06' ) IF (L_S_MM>6) AND (L_S_MM <=9) THEN ( L_S_MM_C = '07' L_E_MM_C='09' ) IF L_S_MM >9 THEN ( L_S_MM_C = '10' L_E_MM_C = '12' ) l_start_date = TO_DATE('01'||L_S_MM_C||L_S_YEAR,'DDMMYYYY') l_end_date = LAST_DAY(TO_DATE('01'||L_E_MM_C||L_S_YEAR,'DDMMYYYY')) if iv_end_date > l_end_date Then ( TOKEN = 'You can not apply this leave beyond one quarter.' VALID = 'N' ) L_SELECTED_CHILD = IV_ATTRIBUTE_NUMBER1 if (L_SELECTED_CHILD = 0) THEN ( TOKEN = 'Please select the Child Name from the Child Name dropdown in Additional Information Section.' VALID = 'N' ) IF (VALID !='N') THEN ( L_DURATION = IV_TOTALDURATION I=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = L_ABS_TYPE THEN ( L_CHILD = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IF (L_CHILD = IV_ATTRIBUTE_NUMBER1) THEN ( L_DURATION = L_DURATION + ANC_ABS_ENTRS_DURATION ) ) ) ) ) ) IF L_DURATION >4 THEN ( TOKEN = 'You can not apply this leave for more than 4 hours in a quarter for this child.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Unpaid Leave') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates leave accrual based on the employee\u2019s hire date and the accrual period.\n\nKey Rules:\nIf the employee was hired before or on the accrual period start date:\n\nThe standard accrual value is retained.\nIf the employee was hired after the accrual period start date:\n\nThe hire date\u2019s day of the month determines the initial accrual:\n\nBefore the 15th \u2192 2 days accrued.\nBetween 15th and 25th \u2192 1 day accrued.\nAfter the 25th \u2192 No accrual.\nThe remaining months of the year contribute 2 days per month.\n\nFinal Calculation:\n\nThe total accrual is converted to hours (by multiplying with 8 hours per day).\nThe formula ensures that new hires earn leave fairly based on when they joined.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_HRS = 8 hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DATE = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'DD')) IF L_DATE < 15 THEN ( L_ACCRUAL = 2 )ELSE ( L_ACCRUAL = 1 ) IF L_DATE> 25 THEN ( L_ACCRUAL = 0 ) L_MM = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'MM')) L_ACCRUAL = L_ACCRUAL + (12-L_MM)*2 L_ACCRUAL = L_ACCRUAL*L_HRS ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates different types of leave requests based on predefined limits and conditions.\n\nKey Rules:\nAbsence Tracking:\n\nIt tracks previously approved leave durations for:\nEmergency Leave\nPaternity Leave\nSick Leave\nAcademic Leave\nUnpaid Leave\nValidation Checks:\n\nEmergency Leave: Cannot exceed 10 days in a year.\nPaternity Leave: Cannot exceed 10 days in a year.\nSick Leave: Cannot exceed 20 days in a year.\nAcademic Leave: Cannot exceed 15 days in a year.\nUnpaid Leave:\nIf Annual Leave balance is available: Unpaid Leave is not allowed.\nIf no Annual Leave balance: Cannot exceed 30 days in a year.\nProcess Flow:\n\nRetrieves the leave type being applied for.\nChecks existing approved leave for the same type.\nAdds the requested duration to the approved leave.\nIf the total exceeds the defined limit, it rejects the request.\nReturn Values:\n\nIf valid, the leave request proceeds.\nIf invalid, an error message is returned specifying why it was rejected.\nwrite a  ensures employees do not exceed leave limits and cannot take unpaid leave if they have remaining annual leave balance.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_TOTALDURATION IS 0 INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_TOTALDURATION l_current_yr=TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) l_effective_date = TO_DATE(TO_CHAR(l_current_yr)+'/01/01 00:00:00') l_yr_end_date = TO_DATE(TO_CHAR(l_current_yr)+'/12/31 00:00:00') ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' l_abs_typ_name = 'X' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_approved_emergency_days= 0 l_approved_paternity_days = 0 l_approved_sick_abs_days = 0 l_approved_academic_abs_days = 0 l_approved_unpaid_leave_abs_days = 0 l_logs = ESS_LOG_WRITE('**Emergency Leave/ paternity Leave Validation Start*') CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( (l_abs_typ_name ='Emergency Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_emergency_days = l_approved_emergency_days + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Paternity Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_paternity_days = l_approved_paternity_days + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Sick Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_sick_abs_days = l_approved_sick_abs_days + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Academic Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_academic_abs_days = l_approved_academic_abs_days + ANC_ABS_ENTRS_DURATION ) else if ( (l_abs_typ_name ='Unpaid Leave')and l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED' or l_app_stat='AWAITING')) then ( l_approved_unpaid_leave_abs_days = l_approved_unpaid_leave_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Emergency Leave') THEN ( IF l_approved_emergency_days+IV_TOTALDURATION > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Paternity Leave') THEN ( IF l_approved_paternity_days+IV_TOTALDURATION > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Sick Leave') THEN ( IF l_approved_sick_abs_days+IV_TOTALDURATION > 160 THEN ( TOKEN = 'You can not apply this leave for more than 20 days.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Academic Leave') THEN ( IF l_approved_academic_abs_days+IV_TOTALDURATION > 120 THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) IF (L_ABS_TYPE ='Unpaid Leave') THEN ( l_effective_date = TO_DATE('3112'||TO_CHAR(IV_START_DATE,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID,PERSON_ID = L_PERSON_ID,EFFECTIVE_DATE = l_effective_date,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ELSE ( IF l_approved_unpaid_leave_abs_days+IV_TOTALDURATION > 240 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the allowable leave balance for an employee by determining the minimum, maximum, and increment values for leave deduction.\n\nKey Steps:\nRetrieve Employee Context:\n\nGets effective date (L_DATE).\nFetches HR assignment ID, Person ID, and Legislative Data Group ID.\nCheck Leave Balance:\n\nDefines the leave plan name as 'Annual Leave'.\nFetches the remaining balance of the leave plan.\nDetermine Allowed Leave Limits:\n\nMinimum leave (MIN) is always 0.\nMaximum leave (MAX) is 50% of the available balance.\nIncrement value (INCREMENT) is set to 1 (ensuring leave is deducted in whole numbers).\nReturn Values:\n\nReturns the allowed range for leave deduction based on the available balance.\nwrite a  ensures that employees cannot take more than half of their remaining annual leave at once, maintaining balance control in the system.\n\n***answer***: MIN=0 MAX=0 INCREMENT=0 L_DATE = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00'(DATE)) L_BALANCE = 0 ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = GET_CONTEXT(PERSON_ID,0) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) lc_plan_name = 'Annual Leave' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ln_hr_assignment_id ,PERSON_ID = ln_person_id ,EFFECTIVE_DATE = L_DATE ,LEGISLATIVE_DATA_GROUP_ID = ln_leg_group_id) ( L_BALANCE = GET_PLAN_BALANCE(lc_plan_name) ) MIN = 0 MAX = FLOOR(L_BALANCE*.5) INCREMENT = 1 RETURN MIN,MAX,INCREMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write an accrual matrix formula for :\nIf the employee was hired before or on the accrual period start date, they receive the full accrual.\nIf the employee was hired after the accrual period start date, the leave is prorated based on the number of days they worked in the period.\nThe prorated accrual is calculated as:\n(Days remaining in the accrual period) \u00f7 (Total days in the period) \u00d7 Full Accrual\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_HRS = 8 hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DATE = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'DD')) L_PD = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODENDDATE, 'DD')) L_PRORATE = (L_PD-L_DATE+1)/L_PD L_ACCRUAL = IV_ACCRUAL*L_PRORATE ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Checks Leave Limits Based on Absence Type:\nPaternity Leave: Maximum 10 days per year (80 hours limit).\nMaternity Leave: Maximum 126 days per year (1008 hours limit).\nUnpaid Leave: Maximum 30 days per year (240 hours limit).\nExam Leave: Maximum 2 days per year (16 hours limit).\nCompares Used Leave \u2013 It checks the employee's total absence days in the past year, adds the current leave request, and validates against the allowed limit.\nIf Exceeding Limits:\nSets an error message.\nPrevents the leave request.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Paternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 1008 THEN ( TOKEN = 'You can not apply this leave for more than 126 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Unpaid Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 240 THEN ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Exam Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 16 THEN ( TOKEN = 'You can not apply this leave for more than 2 days.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Checks If Employee Was Enrolled Before or During the Accrual Period:\nIf enrolled before the accrual period \u2192 Full accrual is granted.\nIf enrolled during the accrual period:\nCalculates remaining eligible days (days from enrollment start to period end).\nComputes total days in the accrual period.\nAdjusts the accrual proportionally based on the number of eligible days.\nReturns the Calculated Accrual\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 L_ACCRUAL = L_ACCRUAL*L_DAYS/L_TOTAL ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Bereavement Leave\n\nMax 3 days allowed.\nPaternity Leave\n\nMax 10 days in the past one year.\nMaternity Leave\n\nAllowed only after probation and 80 days of service.\nDuration:\n182 days if the employee has less than 2 children.\n84 days if the employee has 2 or more children.\nMarriage Leave\n\nRequires marriage date input.\nCan only be taken within 5 days before or after the marriage date.\nUnpaid Leave\n\nAllowed only if Annual Leave balance is zero.\nMax 15 days.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID is 0 DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE is 'NA' INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_DATE1(date) ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Bereavement Leave - AKF India') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE *8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 24 THEN ( TOKEN = 'You can not apply this leave for more than 3 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Paternity Leave - AKF India') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,add_days(iv_start_date,-1)) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Maternity Leave - AKF India') THEN ( L_SERVICE = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_THRESHOLD = 80/365 IF (PER_ASG_DATE_PROBATION_END > iv_start_date) AND (L_SERVICE<L_THRESHOLD) THEN ( TOKEN = 'You can not apply this leave before end of probation or completion of 80 days of service.' VALID = 'N' ) ) IF VALID != 'N' THEN ( i=1 l_count =0 WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.EXISTS(i) loop ( if ( PER_PER_CONT_REL_CONTACT_TYPE[i]='C' ) then ( l_count = l_count +1 ) i=i+1 ) l_limit = 0 if l_count <2 then (l_limit= 182) if l_count>=2 then (l_limit = 84) L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > l_limit THEN ( l_limit = l_limit/7 TOKEN = 'You can not apply this leave for more than'||to_char(l_limit) ||'weeks in a rolling year period.' VALID = 'N' ) ) ) ) IF (L_ABS_TYPE = 'Marriage Leave - AKF India') THEN ( IF IV_ATTRIBUTE_DATE1 WAS DEFAULTED THEN ( TOKEN = 'Please provide the Marriage Date in Additional Information section.' VALID = 'N' ) IF (VALID !='N') THEN ( L_CHECK_SD = IV_ATTRIBUTE_DATE1 L_CHECK_ED = IV_ATTRIBUTE_DATE1 l_index = 0 WHILE (L_INDEX <5) loop ( L_CHECK_SD = ADD_DAYS(L_CHECK_SD,-1) L_ED = ADD_DAYS(L_CHECK_SD,1) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,L_CHECK_SD ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY>0 THEN (L_INDEX =L_INDEX+1) ) l_index = 0 WHILE (L_INDEX<5) loop ( L_CHECK_ED = ADD_DAYS(L_CHECK_ED,1) L_ED = ADD_DAYS(L_CHECK_ED,1) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,L_CHECK_ED ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY>0 THEN (L_INDEX =L_INDEX+1) ) IF (iv_start_date <L_CHECK_SD) OR (iv_end_date > L_CHECK_ED) THEN ( TOKEN = 'Leaves should be within 5 days from date of marriage.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Unpaid Leave - AKF India') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave - AKF India') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Unpaid Leave only if there is no Annual Leave balance.' VALID = 'N' ) ELSE ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE*8 + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 120 THEN ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the total duration of leave between a start and end date. It iterates through each day, checks its availability using GET_PAY_AVAILABILITY, and adjusts for half-day or full-day leave conditions. If a day is non-working, it is considered a full day. The final leave duration is accumulated and returned as DURATION.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF (L_DAY>0 AND L_DAY<=0.5) THEN (L_DAY = 0.5) IF (L_DAY>0.5 OR L_DAY=0) THEN (L_DAY =1) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write an Absence Discretionary Disbursement Rule formula to calculate the maximum leave balance a person can take from their 'Earned Leave' plan, ensuring it doesn't go below 16.5. If the balance is less than 16.5, the maximum is set to 0. It then returns the minimum, maximum, and increment values for the leave balance\n\n***answer***: MIN=0 MAX=0 INCREMENT=1 L_DATE = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00'(DATE)) L_BALANCE = 0 ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = GET_CONTEXT(PERSON_ID,0) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) lc_plan_name = 'Earned Leave' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ln_hr_assignment_id ,PERSON_ID = ln_person_id ,EFFECTIVE_DATE = L_DATE ,LEGISLATIVE_DATA_GROUP_ID = ln_leg_group_id) ( L_BALANCE = GET_PLAN_BALANCE(lc_plan_name) ) MIN = 0 MAX = L_BALANCE - 16.5 IF MAX<0 Then (MAX=0) INCREMENT = 1 RETURN MIN,MAX,INCREMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a global absence entry validation formula to check the following :\nUnpaid Leave: It checks if there is any balance in 'Earned Leave' or 'General Leave'. If there is, unpaid leave cannot be applied.\nExtra Ordinary Leave: It ensures that the employee has completed at least one year of service before applying for write a  leave.\nOptional Leave: It verifies that the absence reason matches the correct date for the leave type.\nStudy Leave: It requires the employee to have completed at least three years of service before applying for write a  leave.\nMaternity Leave: It checks if the employee has completed 80 working days. It also sets different limits for the leave duration based on the reason (e.g., miscarriage, adoption) and ensures the total leave taken does not exceed the limit in a rolling year.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID is 0 DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE is 'NA' INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_SERVICE_PERIOD = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE = iv_start_date) ( L_SERVICE_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF L_ABS_TYPE = 'Unpaid Leave - AKRSP India' THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Earned Leave - AKRSP India') + GET_PLAN_BALANCE('General Leave - AKRSP India') ) IF l_balance>0 then ( TOKEN = 'You can apply for Unpaid Leave only if there is no Earned Leave or General Leave balance.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Extra Ordinary Leave - AKRSP India' THEN ( IF L_SERVICE_PERIOD < 1 THEN ( TOKEN = 'You can not apply for '||L_ABS_TYPE||' before completing 1 year of service.' VALID = 'N' ) ) IF ((L_ABS_TYPE = 'Optional Leave - AKRSP India (Bihar)') OR (L_ABS_TYPE = 'Optional Leave - AKRSP India (Gujarat)') or L_ABS_TYPE = ('Optional Leave - AKRSP India (Madhya Pradesh)') or (L_ABS_TYPE = 'Optional Leave - AKRSP India (Maharashtra)')) THEN ( l_reason = IV_ABSENCE_REASON L_CHECK = GET_LOOKUP_MEANING ('AKF_IN_AKRSP_OPTIONAL_LEAVE',l_reason) L_VALID = 'Y' L_IP_DATE = TO_CHAR(iv_start_date,'DDMMYYYY') IF LENGTH(L_CHECK) > 8 THEN ( L_CHECK = SUBSTR(L_CHECK,0,8) ) IF L_IP_DATE != L_CHECK THEN ( L_VALID = 'N' ) IF L_VALID ='N' THEN ( TOKEN = 'Please select the correct date for '||IV_ABSENCE_REASON||'.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Study Leave - AKRSP India' THEN ( IF L_SERVICE_PERIOD < 3 THEN ( TOKEN = 'You can not apply for '||L_ABS_TYPE||' before completing 3 years of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave - AKRSP India' THEN ( L_DAYS = 365*L_SERVICE_PERIOD IF L_DAYS < 80 THEN ( TOKEN = 'You can not apply for Maternity Leave before completing 80 working days in the organization.' VALID = 'N' ) ELSE ( L_LIMIT = 180 IF IV_ABSENCE_REASON = 'Miscarriage' THEN ( L_LIMIT = 42 ) IF IV_ABSENCE_REASON = 'Adoption' THEN ( L_LIMIT = 85 )ELSE ( L_CHILD = 0 i=1 WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.EXISTS(i) loop ( if ( PER_PER_CONT_REL_CONTACT_TYPE[i]='C' ) then ( L_CHILD = L_CHILD +1 ) i=i+1 ) IF L_CHILD >2 THEN ( L_LIMIT = 85 ) ) L_TOTAL_ABSENCE = 0 L_DATE = add_days(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > L_LIMIT THEN ( TOKEN = 'You can not apply this leave for more than '||to_char(L_LIMIT)||' days in a rolling year period.' VALID = 'N' ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a global absence entry validation formula to check the following :\nValidation:\nFor annual, casual, and compensatory leave, it checks if the probation period is completed.\nFor maternity and paternity leave, it checks if the employee has completed one year of service.\nFor paternity leave, it ensures the total absence does not exceed 10 days in a rolling year.\nFor maternity leave, it ensures the total absence does not exceed 75 days in a rolling year.\nFor Hajj leave, it checks if the employee has completed one year of service and ensures the leave does not exceed 30 days for Hajj or 15 days for Umrah.\nIf any condition is not met, it sets the validation to 'N' and returns an error message.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave - AKF Pakistan' OR L_ABS_TYPE= 'Casual Leave - AKF Pakistan' OR L_ABS_TYPE = 'Compensatory Leave - AKF Pakistan') then ( L_DATE = PER_ASG_DATE_PROBATION_END IF L_DATE > iv_start_date THEN ( TOKEN = 'You can not apply '||l_abs_type||' before completion of probation period.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Maternity Leave - AKF Pakistan' OR L_ABS_TYPE = 'Paternity Leave - AKF Pakistan') THEN ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF l_period<1 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of one year of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Paternity Leave - AKF Pakistan' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 10 days in a rolling year.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave - AKF Pakistan' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 75 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 75 days in a rolling year.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Hajj Leave - AKF Pakistan') THEN ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF l_period<1 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of one year of service.' VALID = 'N' ) ) IF (IV_ABSENCE_REASON = 'Hajj' and IV_TOTALDURATION > 30) then ( TOKEN = 'You can not apply this leave for more than 30 days.' VALID = 'N' ) ELSE IF (IV_ABSENCE_REASON = 'Umrah' and IV_TOTALDURATION > 15) then ( TOKEN = 'You can not apply this leave for more than 15 days.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a discretionary disbursement ruleto calculate the leave plan balance for 'Annual Leave - AKF Pakistan'.\nMin, Max, Increment Calculation:\nMIN is set to 0.\nMAX is set to the lesser of half the leave balance (rounded down) or 11.\nINCREMENT is set to 1.\nReturn Values: Returns the calculated MIN, MAX, and INCREMENT values.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) MIN=0 MAX=11 INCREMENT=0 L_DATE = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00'(DATE)) L_BALANCE = 0 ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = GET_CONTEXT(PERSON_ID,0) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) lc_plan_name = 'Annual Leave - AKF Pakistan' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ln_hr_assignment_id ,PERSON_ID = ln_person_id ,EFFECTIVE_DATE = L_DATE ,LEGISLATIVE_DATA_GROUP_ID = ln_leg_group_id) ( L_BALANCE = GET_PLAN_BALANCE(lc_plan_name) ) MIN = 0 MAX = LEAST(FLOOR(L_BALANCE*.5),11) INCREMENT = 1 RETURN MIN,MAX,INCREMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a global absence accrual matrix formula that calculates the prorated accrual amount for a leave plan based on the enrollment start date. If the enrollment start date is later than the accrual period start date, it prorates the accrual amount by the number of months remaining in the year. The formula then returns the prorated accrual amount.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 8 INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_DATE = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00'(DATE)) L_RETURN = IV_ACCRUAL hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_PLAN_ID = GET_CONTEXT(ACCRUAL_PLAN_ID,0) IF IV_PLANENROLLMENTSTARTDATE > IV_ACCRUALPERIODSTARTDATE THEN ( L_MM = TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'MM')) L_TOTAL_MONTH = 12-L_MM L_DD = TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'MM')) IF L_DD>=15 THEN (L_TOTAL_MONTH = L_TOTAL_MONTH+1) L_PRORATE = L_TOTAL_MONTH/12 L_RETURN = IV_ACCRUAL*L_PRORATE ) accrual = L_RETURN return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a global absence entry validation fast formula that validates different types of leave requests for AKRSP Pakistan based on specific conditions. Here's a simple explanation of what it does:\n\nPaternity and Maternity Leave: It checks if the employee has completed at least 4 months of service. For maternity leave, it also ensures that the total leave taken does not exceed 84 days in a rolling year.\nUnpaid Leave: It checks if the total unpaid leave taken in the year exceeds 90 days. It also ensures that there is no balance in 'Annual Leave' or 'Casual Leave' before allowing unpaid leave.\nCompassionate Leave: It ensures that there is no balance in 'Annual Leave' or 'Casual Leave' before allowing compassionate leave. It also checks if the total compassionate leave taken in the year exceeds 10 days.\nIf any of these conditions are not met, the formula returns an error message\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Paternity Leave - AKRSP Pakistan' OR L_ABS_TYPE = 'Maternity Leave - AKRSP Pakistan' ) then ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE l_period = 365*l_period IF l_period<120 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of 4 months of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave - AKRSP Pakistan' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 84 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 84 days in a rolling year.' VALID = 'N' ) ) ) IF (L_ABS_TYPE='Unpaid Leave - AKRSP Pakistan') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 90 THEN ( TOKEN = 'You can not apply this leave for more than 90 days.' VALID = 'N' ) ) IF (VALID !='N') THEN ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave - AKRSP Pakistan') + GET_PLAN_BALANCE('Casual Leave - AKRSP Pakistan') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You still have Annual Leave or Casual Leave balance.' VALID = 'N' ERROR_CODE = 'W' ) ) ) IF (L_ABS_TYPE = 'Compassionate Leave - AKRSP Pakistan') then ( l_balance = 0 l_effective_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = l_effective_date ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave - AKRSP Pakistan') + GET_PLAN_BALANCE('Casual Leave - AKRSP Pakistan') ) IF L_BALANCE > 0 THEN ( TOKEN = 'You can apply for Compassionate Leave only if there is no Annual Leave or Casual Leave balance.' VALID = 'N' ) IF (VALID !='N') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 10 THEN ( TOKEN = 'You can not apply this leave for more than 10 days.' VALID = 'N' ) ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a Global Absence type Duration formula to calculates the total duration of an absence in days. Here's a simple explanation of what it does:\n\nIt initializes the start and end dates.\nIt loops through each day from the start date to the end date.\nFor each day, it calculates the availability using the GET_PAY_AVAILABILITY function.\nIt adjusts the day value to 0.5 if it's between 0 and 0.5, and to 1 if it's more than 0.5 or equal to 0.\nIt adds the adjusted day value to the total duration.\nIt returns the total duration in days.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'D') IF (L_DAY>0 AND L_DAY<=0.5) THEN (L_DAY = 0.5) IF (L_DAY>0.5 OR L_DAY=0) THEN (L_DAY =1) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write an absence carryover formula that calculates the carryover amount for a leave plan. If the enrollment start date is before July 1st, the carryover is 88 hours. If the enrollment start date is on or after July 1st, the carryover is 64 hours. It then returns the calculated carryover amount.\n\n***answer***: INPUTS ARE IV_PLANENROLLMENTSTARTDATE(DATE), IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUAL L_DATE = TO_DATE('0107'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY'),'DDMMYYYY') carryover = 11*8 IF IV_PLANENROLLMENTSTARTDATE >= L_DATE THEN ( carryover = 8*8 ) RETURN carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a global absence accrual matrix formula that does the below calculation:\nInitial Accrual Calculation:\nIf the enrollment start date is before or on the accrual period start date, the formula uses the provided accrual amount.\nIf the enrollment start date is after the accrual period start date, it calculates the number of days between the enrollment start date and the accrual period end date. It also calculates the total number of days in the accrual period. The formula then prorates the accrual amount by dividing the standard accrual amount (24) by the total number of days in the accrual period and multiplying it by the number of days from the enrollment start date to the accrual period end date. write a  gives the prorated accrual amount.\nRounding:\n\nThe formula separates the integer part and the fractional part of the prorated accrual amount. If the fractional part is greater than 0.5, it rounds up to 1; otherwise, it rounds to 0.5. The final accrual amount is the sum of the integer part and the adjusted fractional part, multiplied by the standard hours (7).\nMaternity Leave Check:\n\nThe formula checks if the employee was on maternity leave in the previous year. It sets a check date to December 31st of the previous year. It then loops through the absence entries to see if any of them are for maternity leave. If the employee was on maternity leave, it retrieves the balance of 'Annual Leave' as of the check date and adds it to the accrual amount.\nFTE Adjustment:\n\nThe formula adjusts the accrual amount based on the employee's full-time equivalent (FTE) value. It loops through the assignment details, retrieves the FTE value for each period, and calculates the FTE accrual for that period. It sums up the FTE accruals for all periods to get the total FTE accrual. If the total FTE accrual is greater than or equal to 1, it sets it to 1. If the assignment status is 'INACTIVE', it sets the total FTE accrual to 0. The final accrual amount is then multiplied by the total FTE accrual.\nFinal Rounding:\n\nThe formula rounds the final accrual amount to the nearest 0.5 or 1, similar to the initial rounding step.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_AVAILABILITY_WORKDAY_PATTERN IS 'XX' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'XX' DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_FTE_VALUE is 1 DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR ASG_HR_ASG_ID is 0 DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_ACCRUAL = 0 L_ACCRUAL1 = 24 L_Hours = 7 l_debug = ess_log_write('IV_ACCRUALPERIODSTARTDATE: '+to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('IV_ACCRUAL: '+to_char(IV_ACCRUAL)) l_debug = ess_log_write('IV_ACCRUALPERIODENDDATE: '+to_char(IV_ACCRUALPERIODENDDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTSTARTDATE: '+to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE: '+to_char(IV_PLANENROLLMENTENDDATE)) IF IV_PLANENROLLMENTSTARTDATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL )ELSE ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 L_ACCRUAL = (L_ACCRUAL1/L_TOTAL)*L_DAYS l_int = Floor(L_ACCRUAL) l_fraction = L_ACCRUAL - L_INT IF l_fraction > 0.5 then (l_fraction =1) else (l_fraction = 0.5) l_accrual = (l_int + l_fraction)*L_Hours ) l_debug = ess_log_write('L_ACCRUAL: '+to_char(L_ACCRUAL)) L_LAST_YEAR = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODENDDATE,'YYYY'))-1 L_CHECK_DATE = TO_DATE('3112'||TO_CHAR(L_LAST_YEAR)) IF IV_PLANENROLLMENTSTARTDATE>=L_CHECK_DATE THEN ( L_MATERNITY = 'N' I=1 l_start_date = ADD_DAYS(L_CHECK_DATE,-1) l_end_date = ADD_DAYS(L_CHECK_DATE, 1) CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = 'Maternity Leave' THEN ( L_MATERNITY = 'Y' ) ) ) ) ) IF L_MATERNITY = 'Y' THEN ( l_balance = 0 L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = L_ASSIGNMENT_ID ,PERSON_ID = L_PERSON_ID ,EFFECTIVE_DATE = L_CHECK_DATE ,LEGISLATIVE_DATA_GROUP_ID = L_LEG_ID) ( L_BALANCE = GET_PLAN_BALANCE('Annual Leave') ) L_ACCRUAL = L_ACCRUAL + L_BALANCE ) ) L_schedule_evaluate_date = IV_ACCRUALPERIODSTARTDATE L_PATTERN = PER_ASG_AVAILABILITY_WORKDAY_PATTERN i=1 l_accrual_end = IV_ACCRUALPERIODENDDATE l_start_date = IV_ACCRUALPERIODSTARTDATE l_days_in_year = days_between(l_accrual_end,l_start_date) + 1 FTE_Accrual = 0 l_total_FTE = 0 L_FTE = 0 l_hr_asg_id = ASG_HR_ASG_ID WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('l_start_date: ' + to_char(l_start_date)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_fte = PER_ASG_FTE_VALUE l_debug = ess_log_write('l_fte ='||to_char(l_fte)) l_debug = ess_log_write('l_start_date: ' + to_char(l_start_date)) l_debug = ess_log_write('l_total_FTE: ' + to_char(l_total_FTE)) l_debug = ess_log_write('L_PATTERN: '+ L_PATTERN) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_ACCRUALPERIODENDDATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('l_start_date'||TO_CHAR(l_start_date)||'l_end_date'||TO_CHAR(l_end_date)) l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) l_debug = ess_log_write('l_days_in_year: '||TO_CHAR(l_days_in_year)) FTE_Accrual=l_days/l_days_in_year*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('l_total_FTE '||to_char(l_total_FTE)) l_total_FTE = l_total_FTE + FTE_Accrual If l_total_FTE >= 1 then l_total_FTE = 1 l_debug = ess_log_write('l_total_FTE '||to_char(l_total_FTE)) if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (l_total_FTE = 0) l_debug = ess_log_write('HR Status is: ' + PER_ASG_ASSIGNMENT_STATUS_TYPE) IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_ACCRUALPERIODENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) l_debug = ess_log_write('l_total_FTE: '+to_char(l_total_FTE)) l_debug = ess_log_write('L_ACCRUAL: '+to_char(L_ACCRUAL)) L_ACCRUAL = ROUND(L_ACCRUAL*l_total_FTE,2) l_debug = ess_log_write('L_PATTERN: '+ L_PATTERN) l_debug = ess_log_write('L_FTE: '+to_char(L_FTE)) l_debug = ess_log_write('L_ACCRUAL: '+to_char(L_ACCRUAL)) l_debug = ess_log_write('IV_PLANENROLLMENTENDDATE: '+to_char(IV_PLANENROLLMENTENDDATE)) l_int = Floor(L_ACCRUAL) l_fraction = L_ACCRUAL - L_INT IF l_fraction > 0 AND l_fraction <= 0.5 then (l_fraction = 0.5) ELSE IF l_fraction > 0.5 then (l_fraction = 1) l_accrual = (l_int + l_fraction) accrual = L_ACCRUAL l_debug = ess_log_write('L_ACCRUAL: '+to_char(L_ACCRUAL)) return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a formula for absence carryover that calculates  the carryover amount for a leave plan. It starts with a default carryover of 35 days. The formula then checks if the employee was on maternity leave in the previous year by looking at absence entries around the end of the previous year. If the employee was on maternity leave, the carryover is set to 0. Finally, it returns the calculated carryover amount.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' INPUTS ARE IV_PLANENROLLMENTSTARTDATE(DATE), IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUAL L_MATERNITY = 'N' L_CARRYOVER = 35 I=1 L_LAST_YEAR = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY'))-1 L_CHECK_DATE = TO_DATE('3112'||TO_CHAR(L_LAST_YEAR)) l_start_date = ADD_DAYS(L_CHECK_DATE,-1) l_end_date = ADD_DAYS(L_CHECK_DATE, 1) CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = 'Maternity Leave' THEN ( L_MATERNITY = 'Y' ) ) ) ) ) IF L_MATERNITY = 'Y' THEN ( L_CARRYOVER = 0 ) carryover = L_CARRYOVER RETURN carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the accrual amount for a leave plan based on several factors:\n\nInitial Accrual Calculation:\n\nThe formula starts by determining the standard working hours per day. If the normal working hours are 35, it sets the working day to 7 hours; otherwise, it uses 7.5 hours.\nIf the enrollment start date is before or on the accrual period start date, it multiplies the provided accrual amount by the working day hours.\nIf the enrollment start date is after the accrual period start date, it calculates the number of days between the enrollment start date and the accrual period end date. It then prorates the accrual amount by multiplying the provided accrual amount by the number of days and the working day hours, divided by 365.\nECD Employees Check:\n\nThe formula checks if the employee belongs to specific employment categories (AKF_PT_ECD or AKF_PT_ECD_CIOS). If so, it sets a flag indicating the employee is in these categories.\nIt then calculates the total duration of absences (excluding certain types like maternity leave, paternity leave, strikes, school support, legal commitment, and work accidents) in the previous year.\nBased on the total duration of absences, it adjusts the accrual amount by adding additional working days: 3 days if there were no absences, 2 days if the absences were up to 1 day, and 1 day if the absences were between 1 and 2 days.\nSick Leave Check:\n\nThe formula checks for sick leave absences in the previous two years. If any sick leave absence lasted 30 days or more and falls within the check period, it sets the accrual amount to 0.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'XX' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_WD = 7.5 IF (PER_ASG_NORMAL_HOURS =35) THEN ( L_WD = 7 ) L_ACCRUAL = IV_ACCRUAL * L_WD IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL * L_WD ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_ACCRUAL = IV_ACCRUAL*L_DAYS*L_WD/365 ) L_ECD = PER_ASG_EMPLOYMENT_CATEGORY IF (L_ECD = 'AKF_PT_ECD' OR L_ECD = 'AKF_PT_ECD_CIOS') THEN ( L_ECD = 'Y' ) L_LAST_YEAR = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODENDDATE,'YYYY'))-1 l_start_date = TO_DATE('0101'||TO_CHAR(L_LAST_YEAR),'DDMMYYYY') l_end_date = TO_DATE('3112'||TO_CHAR((L_LAST_YEAR)),'DDMMYYYY') IF L_ECD = 'Y' THEN ( L_DURATION = 0 I=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE != 'Maternity Leave' OR L_ABSENCE_TYPE != 'Paternity Leave' OR L_ABSENCE_TYPE != 'Strikes' OR L_ABSENCE_TYPE != 'School Support' OR L_ABSENCE_TYPE != 'Legal Commitment' OR L_ABSENCE_TYPE != 'Work Accidents' THEN ( L_DURATION = L_DURATION + ANC_ABS_ENTRS_DURATION ) ) ) ) L_DURATION = L_DURATION/L_WD IF L_DURATION = 0 THEN (L_ACCRUAL = L_ACCRUAL + (3*L_WD)) IF L_DURATION > 0 AND L_DURATION <=1 THEN (L_ACCRUAL = L_ACCRUAL+ (2*L_WD)) IF L_DURATION>1 AND L_DURATION <=2 THEN (L_ACCRUAL = L_ACCRUAL + L_WD) ) ) l_end_date = TO_DATE('3112'||TO_CHAR((L_LAST_YEAR+2)),'DDMMYYYY') L_CHECK_DATE = TO_DATE('0101'||TO_CHAR((L_LAST_YEAR+1)),'DDMMYYYY') I=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( L_ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID I=I+1 CHANGE_CONTEXTS(ABSENCE_TYPE_ID=L_ABSENCE_TYPE_ID) ( L_ABSENCE_TYPE = ANC_ABS_TYP_NAME IF L_ABSENCE_TYPE = 'Sick Leave' THEN ( IF L_CHECK_DATE >= ANC_ABS_ENTRS_START_DATE THEN ( IF L_CHECK_DATE <= ANC_ABS_ENTRS_END_DATE THEN ( IF ANC_ABS_ENTRS_DURATION>=30 THEN ( L_ACCRUAL = 0 ) ) ) ) ) ) ) ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a formula for :\nAccrual Based on Service Length:\n\nIf the employee has more than 10 years of service, the accrual amount is set to 240.\nIf the employee has between 2 and 10 years of service, the accrual amount is set to 168.\nProrated Accrual:\n\nIf the enrollment start date is before or on the accrual period start date, the formula uses the calculated accrual amount.\nIf the enrollment start date is after the accrual period start date, it calculates the number of days between the enrollment start date and the accrual period end date. It then prorates the accrual amount based on these days relative to the total number of days in the accrual period.\n\n***answer***: DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL L_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_PERIOD >10 THEN ( L_ACCRUAL = 240 ) IF L_PERIOD <=10 AND L_PERIOD>= 2 THEN ( L_ACCRUAL = 168 ) IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( accrual = L_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 L_ACCRUAL = L_ACCRUAL*L_DAYS/L_TOTAL ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the accrual amount for a leave plan based on the length of service. Here's a simple explanation of what it does:\n\nIf the employee has less than 2 years of service, the accrual amount is set to 10.\nIf the employee has between 2 and 3 years of service, the accrual amount is set to 10.64.\nIf the employee has between 3 and 4 years of service, the accrual amount is set to 11.36.\nIf the employee has between 4 and 5 years of service, the accrual amount is set to 12.\nIf the employee has 5 or more years of service, the accrual amount is set to 13.36.\n\n***answer***: DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL L_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF L_PERIOD<2 THEN ( L_ACCRUAL = 10 ) IF L_PERIOD >=2 AND L_PERIOD < 3 THEN ( L_ACCRUAL = 10.64 ) IF L_PERIOD >=3 AND L_PERIOD < 4 THEN ( L_ACCRUAL = 11.36 ) IF L_PERIOD >=4 AND L_PERIOD < 5 THEN ( L_ACCRUAL = 12 ) IF L_PERIOD >=5 THEN ( L_ACCRUAL = 13.36 ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the accrual amount for a leave plan based on the length of service. Here's a simple explanation of what it does:\n\nIf the employee has 4 years of service or less, the accrual amount is set to 1.25 times the standard hours per day (7 hours).\nIf the employee has more than 4 years but 10 years or less of service, the accrual amount is set to 1.67 times the standard hours per day.\nIf the employee has more than 10 years of service, the accrual amount is set to 2.083 times the standard hours per day.\n\n***answer***: DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL L_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_HRS = 7 IF L_PERIOD<=4 THEN ( L_ACCRUAL = 1.25*L_HRS ) IF L_PERIOD >4 AND L_PERIOD <= 10 THEN ( L_ACCRUAL = 1.67*L_HRS ) IF L_PERIOD >10 THEN ( L_ACCRUAL = 2.083*L_HRS ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the total duration of an absence based on the type of leave and the start and end dates. Here's a simple explanation of what it does:\n\nGeneral Calculation:\n\nIt calculates the total number of days between the start and end dates.\nChild Care Leave:\n\nIf the leave type is \"Child Care Leave,\" it multiplies the total number of days by 8 to convert it to hours.\nAdditional Paid Leave for High Altitude Regions:\n\nIf the leave type is \"Additional paid leave for high altitude regions,\" it calculates the total duration in hours for each day within the date range. It adjusts the duration based on the availability of hours (8 hours for a full day, 4 hours for a half day). If the day is a weekend (Saturday or Sunday), it counts as a full day.\nAnnual Leave:\n\nIf the leave type is \"Annual Leave,\" it calculates the total duration by distinguishing between working days, weekends, and holidays. It sums up the working days and, if the employee category is \"AKF_LOCAL,\" it also includes weekends in the total duration.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Child Care Leave') THEN ( l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 l_total_duration_d = l_total_duration_d*8 ) IF (L_ABS_TYPE = 'Additional paid leave for high altitude regions') THEN ( l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY = 8 THEN (L_DAY = 1) IF L_DAY = 4 THEN (L_DAY = .5) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( L_DAY = 1 ) ) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) ) IF (L_ABS_TYPE = 'Annual Leave') THEN ( l_total_duration_d = 0 l_total_wd = 0 l_total_we =0 l_total_hol = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY = 8 THEN (L_DAY = 1) IF L_DAY = 4 THEN (L_DAY = .5) IF L_DAY> 0 THEN (l_total_wd = l_total_wd+l_day) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( l_total_we = l_total_we + 1 )ELSE ( l_total_hol = l_total_hol +1 ) ) l_date = add_days(l_date,1) ) IF PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY = 'AKF_LOCAL' THEN ( l_total_duration_d = l_total_wd+l_total_we ) ELSE ( l_total_duration_d = l_total_wd ) ) ) DURATION = l_total_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the total duration of an absence in hours based on the start and end dates. Here's a simple explanation:\n\nIt sets the standard working day hours to 7.5. If the normal working hours are 35, it sets the working day to 7 hours.\nIt loops through each day from the start date to the end date.\nFor each day, it checks the availability of hours. If no hours are available, it uses the standard working day hours.\nIt adds the hours for each day to get the total duration.\nIt returns the total duration in hours.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') L_WD = 7.5 IF (PER_ASG_NORMAL_HOURS =35) THEN ( L_WD = 7 ) l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF (L_DAY=0) THEN (L_DAY =L_WD) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the minimum, maximum, and increment values for the 'Annual Leave' balance. It checks the balance of the 'Annual Leave' plan and sets the minimum value to 0, the maximum value to the rounded balance, and the increment value to 1. It then returns these values.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) MIN=0 MAX=0 INCREMENT=0 L_DATE = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00'(DATE)) ( L_BALANCE = 0 ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = GET_CONTEXT(PERSON_ID,0) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) lc_plan_name = 'Annual Leave' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ln_hr_assignment_id ,PERSON_ID = ln_person_id ,EFFECTIVE_DATE = L_DATE ,LEGISLATIVE_DATA_GROUP_ID = ln_leg_group_id) ( L_BALANCE = GET_PLAN_BALANCE(lc_plan_name) ) MIN = 0 MAX = ROUND(L_BALANCE) INCREMENT = 1 ) RETURN MIN,MAX,INCREMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates various types of absence requests, each with specific rules for approval:\n\nStatutory Leave (Paid/Unpaid): Employees are prompted to contact HR to apply for these leaves.\nPersonal Leave: Restricted to 70 hours. Employees are instructed to contact HR if they exceed write a  limit.\nPregnancy Leave: Limited to 15 weeks in a rolling year. It includes checking if the employee has completed the required service period.\nTime Off for Study: Limited to 3 days per year. It applies a cap of 21 days.\nParental Leave: Limited to 63 weeks in a rolling year. It ensures eligibility based on the employee's prior absence.\nVacation Leave: The employee's eligibility is determined by their service length and current leave balance. If the requested duration exceeds eligibility, the request is rejected.\nFor all cases, the validation checks the requested leave duration against the respective caps and balances. If any condition is violated, an error message is returned.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PER_ABS_AGRMNT_ENT_AGREEMENT_ALLOC_UNITS IS 0 DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Statutory Leave - Unpaid') OR (L_ABS_TYPE = 'Statutory Leave - Paid') THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'Please get in touch with your HR for applying '||L_ABS_TYPE VALID = 'N' ) ) IF (L_ABS_TYPE = 'Personal Leave') THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*7) + IV_TOTALDURATION IF (IV_TOTALDURATION>70) THEN ( TOKEN = 'Please get in touch with your HR to apply this leave.' VALID = 'N' ) ) ) ) IF L_ABS_TYPE = 'Pregnancy Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE/7) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 15 THEN ( TOKEN = 'You can not apply this leave for more than 15 weeks in a rolling year period.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Time Off for Study' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE*7) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 21 THEN ( TOKEN = 'You can not apply this leave for more than 3 days in a year.' VALID = 'N' ) ) ) IF L_ABS_TYPE = 'Parental Leave' THEN ( L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,iv_start_date) L_TOTAL_ABSENCE = (L_TOTAL_ABSENCE/7) + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 63 THEN ( TOKEN = 'You can not apply this leave for more than 63 weeks in a rolling year period.' VALID = 'N' ) ) ) IF (L_ABS_TYPE ='Vacation Leave') THEN ( L_EFF_DATE = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00'(DATE)) L_MM = TO_NUMBER(TO_CHAR(L_EFF_DATE,'MM')) L_DATE = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_ACTUAL_BALANCE = 0 ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = GET_CONTEXT(PERSON_ID,0) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) lc_plan_name = 'Vacation Leave' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = ln_hr_assignment_id ,PERSON_ID = ln_person_id ,EFFECTIVE_DATE = L_DATE ,LEGISLATIVE_DATA_GROUP_ID = ln_leg_group_id) ( L_ACTUAL_BALANCE = GET_PLAN_BALANCE(lc_plan_name) ) L_PERIOD = PER_REL_LENGTH_OF_SERVICE_BY_HIRE L_HRS = 7 IF L_PERIOD<=4 THEN ( L_ACCRUAL = 1.25*L_HRS ) IF L_PERIOD >4 AND L_PERIOD <= 10 THEN ( L_ACCRUAL = 1.67*L_HRS ) IF L_PERIOD >10 THEN ( L_ACCRUAL = 2.083*L_HRS ) L_REMAINING_ELIGIBILITY = L_ACCRUAL * (12-L_MM) L_ELIGIBILITY = L_ACTUAL_BALANCE + L_REMAINING_ELIGIBILITY IF IV_TOTALDURATION > L_ELIGIBILITY THEN ( TOKEN = 'You do not have sufficient leave balance to apply this leave.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the leave accrual based on the hire date and accrual period:\n\nInputs: The inputs are the accrual value, the accrual period's start and end dates, and the enrollment period's start and end dates.\nLogic:\nIf the hire date is on or before the accrual period's start date, the accrual value remains unchanged.\nIf the hire date is later, the formula calculates the accrual based on the number of months from the hire date to the end of the year (i.e., 12 - month of hire + 1).\nThe accrual is then adjusted proportionally by dividing by 12 (to reflect the monthly accrual).\nReturn: The resulting accrual is returned.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) L_HRS = 7 hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_MM = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'MM')) L_ACCRUAL = (12-L_MM +1 ) L_ACCRUAL = IV_ACCRUAL*(L_ACCRUAL/12) ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula ensures employees cannot apply for Annual Leave, Maternity Leave, Paternity Leave, or Study Leave before completing their probation period. Requests before write a  period are rejected.\nSick Leave is limited to 126 days in a year. If the total leave duration exceeds write a  limit, the request is rejected.\nBereavement Leave and Compassionate Leave are limited to 5 days per year. If the total duration exceeds 5 days, the request is rejected.\nParental Leave is capped at 63 weeks in a rolling year. If the leave exceeds write a  limit, the request is rejected.\nEmployees must meet the required service period to apply for Maternity Leave. If they haven\u2019t, the request is rejected.\nVacation Leave eligibility is based on the employee\u2019s service length and their current leave balance. If the requested leave exceeds the available balance, the request is rejected.\nThe formula ensures that the requested leave duration does not exceed the allowed limits for each leave type.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1901/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) effdate = GET_CURRENT_DATE() CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave') THEN ( L_DATE = PER_ASG_DATE_PROBATION_END IF L_DATE > iv_start_date THEN ( L_USER = get_value_set('AKF_SESSION_PERSON_ID') IF (L_USER = TO_CHAR(L_PERSON_ID)) THEN ( TOKEN = 'You can not apply '||l_abs_type||' before completion of probation period.' VALID = 'N' ) ) ) IF ( L_ABS_TYPE= 'Maternity' OR L_ABS_TYPE = 'Paternity' OR L_ABS_TYPE = 'Study Leave') then ( L_DATE = PER_ASG_DATE_PROBATION_END IF L_DATE > iv_start_date THEN ( TOKEN = 'You can not apply '||l_abs_type||' before completion of probation period.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Study Leave' OR L_ABS_TYPE= 'Compassionate Leave' OR L_ABS_TYPE = 'Sick Leave' or L_ABS_TYPE= 'Bereavement Leave') then ( CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( l_year = to_number(to_char(iv_start_date, 'YYYY')) l_ddmm = to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DDMM') l_ann = to_date(l_ddmm||to_char(l_year),'DDMMYYYY') if iv_start_date < l_ann then ( l_ann = to_date(l_ddmm||to_char(l_year-1),'DDMMYYYY') ) L_TOTAL_ABSENCE = GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_ann,iv_start_date) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_ABS_TYPE = 'Sick Leave' THEN ( IF L_TOTAL_ABSENCE > 1008 THEN ( TOKEN = 'You can not apply this leave for more than 126 days in a year.' VALID = 'N' ) ) ELSE IF (L_ABS_TYPE = 'Bereavement Leave' ) or (L_ABS_TYPE='Compassionate Leave') THEN ( IF L_TOTAL_ABSENCE > 40 THEN ( TOKEN = 'You can not apply this leave for more than 5 days in a year.' VALID = 'N' ) ) ELSE IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply this leave for more than 10 days in a year.' VALID = 'N' ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the accrual amount based on the hire date and the accrual period. If the hire date is on or before the start of the accrual period, the full accrual amount is used. If the hire date is after the start of the accrual period, the accrual amount is prorated based on the number of days from the hire date to the end of the accrual period. The formula returns the calculated accrual amount.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE THEN ( L_ACCRUAL = IV_ACCRUAL ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DATE = TO_NUMBER(TO_CHAR(L_HIRE_DATE,'DD')) L_PD = TO_NUMBER(TO_CHAR(IV_ACCRUALPERIODENDDATE, 'DD')) L_PRORATE = (L_PD-L_DATE+1)/L_PD L_ACCRUAL = ROUND(IV_ACCRUAL*L_PRORATE,1) ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the total duration of an annual leave period. It considers the start and end dates of the leave and checks each day within write a  period. If a day is a working day, it adds to the working day count. If a day is a weekend, it adds to the weekend count. If a day is a holiday, it adds to the holiday count. The total duration is then determined based on the employee's category. For local employees, it includes working days, weekends, and holidays. For non-local employees, it only includes working days. The formula returns the total duration of the leave period.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave') THEN ( l_he = 0 l_we = 0 l_wd =0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY>0 THEN ( IF L_DAY = 8 THEN (L_WD = L_WD+1) IF L_DAY = 4 THEN (L_WD = L_WD+.5) ) IF L_DAY = 0 Then ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( l_we = l_we + 1 )ELSE ( l_he = l_he +1 ) ) l_date = add_days(l_date,1) ) l_he = 0 IF PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY != 'AKF_LOCAL' THEN ( l_total_duration_d = l_wd )ELSE ( l_total_duration_d = l_wd + l_we + l_he ) ) ) DURATION = l_total_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula simply converts the string '31-12-2024' into a date format and returns it as the enrollment end date. The returned value is the date December 31, 2024.\n\n***answer***: enrollmentEndDate = TO_DATE('31-12-2024','DD-MM-YYYY') RETURN enrollmentEndDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the accrual amount based on the hire date and the accrual period. If the hire date is on or before the start of the accrual period, the full accrual amount is used, with an additional 8 units added if the month is January. If the hire date is after the start of the accrual period, the accrual amount is prorated based on the number of days from the hire date to the end of the accrual period, with an additional 8 units added if the month is January. The formula returns the calculated accrual amount.\n\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL,IV_ACCRUALPERIODSTARTDATE (DATE),IV_ACCRUALPERIODENDDATE (DATE), IV_PLANENROLLMENTSTARTDATE (DATE), IV_PLANENROLLMENTENDDATE (DATE) hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) hr_person_id = GET_CONTEXT(PERSON_ID,0) l_month = to_char(IV_ACCRUALPERIODENDDATE,'MM') l_log = ess_log_write('l_month.:'||(l_month)) L_HIRE_DATE = IV_PLANENROLLMENTSTARTDATE L_ACCRUAL = IV_ACCRUAL IF (L_HIRE_DATE <= IV_ACCRUALPERIODSTARTDATE) THEN ( L_ACCRUAL = IV_ACCRUAL If (l_month = '01') then (L_ACCRUAL = L_ACCRUAL + 8) ) ELSE IF (L_HIRE_DATE > IV_ACCRUALPERIODSTARTDATE) THEN ( L_DAYS = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_PLANENROLLMENTSTARTDATE) +1 L_TOTAL= DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE) +1 If (l_month = '01') then (L_ACCRUAL = L_ACCRUAL + 8) L_ACCRUAL = L_ACCRUAL*L_DAYS/L_TOTAL ) accrual = L_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates the total annual leave hours taken by an employee. It calculates the total approved absence hours for the year, including any carryover hours. If the total approved absence hours exceed the calculated valid absence hours (which is based on the employee's full-time equivalent value and carryover), it returns an error message indicating that the leave cannot be applied for more than the valid hours in a year. If the total approved absence hours are within the valid limit, it returns a validation success message.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT for IV_TOTALDURATION IS 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 IS -1 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION, IV_ATTRIBUTE_NUMBER1(number), IV_START_TIME, IV_END_TIME ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' l_approved_abs_hours =0 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_LEG_ID = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_effective_date = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') l_eff_end_date = TO_DATE('3112'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') ln_default_duration=0 ln_half_duration = 0 L_CARRYOVER =0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||'00:01','DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_person_id = to_char(GET_CONTEXT(PERSON_ID,0)) ld_effective_date= '01-01-'||TO_CHAR(IV_START_DATE,'YYYY') L_CARRYOVER =to_number(GET_VALUE_SET('AKF_AFG_ANNUAL_LEAVE_CARRYOVER','|=P_ID='''||ln_person_id||''''||'|P_DATE='''||ld_effective_date||'''')) CHANGE_CONTEXTS(START_DATE=l_effective_date, END_DATE=l_eff_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_app_stat = ANC_ABS_ENTRS_APPROVAL_STATUS_CD l_abs_stat = ANC_ABS_ENTRS_ABSENCE_STATUS_CD if ( l_abs_typ_name ='Annual Leave' AND l_abs_stat ='SUBMITTED' AND (l_app_stat='APPROVED') ) then ( l_approved_abs_hours = l_approved_abs_hours + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE ='Annual Leave') THEN ( L_TOTAL_ABSENCE = 0 L_DATE = TO_DATE('0101'||TO_CHAR(iv_start_date,'YYYY'),'DDMMYYYY') CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VALID_ABSENCE = (176 * PER_ASG_FTE_VALUE) + L_CARRYOVER L_TOTAL_ABSENCE = TRUNC(l_approved_abs_hours + IV_TOTALDURATION,2) IF L_TOTAL_ABSENCE > L_VALID_ABSENCE THEN ( TOKEN = 'You have applied '|| to_char(L_TOTAL_ABSENCE)|| ' hours of total allocated absence hours. You can not apply this leave for more than '|| to_char(L_VALID_ABSENCE) ||' hours in a year. Please reduce the absence hours.' VALID = 'N' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN ) ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the total duration of an absence period in days. It considers the start and end dates of the absence and iterates through each day within write a  period. For each day, it checks the availability and assigns a duration based on the number of hours available. If the available hours are between 0 and 4, it assigns 4 hours; if more than 4, it assigns 8 hours. The total duration is then accumulated by adding the assigned hours for each day. The formula returns the total duration in days.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = 0 L_ASSIGNMENT_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_date = iv_start_date l_schedule = GET_VALUE_SET('AKF_ABSENCE_WORK_SCHEDULE_NAME','|=ASG_ID='''||to_char(L_ASSIGNMENT_ID)||''''||'|EFF_DATE='''||to_char(l_date,'DD-MM-YYYY')||'''') WHILE (l_date <= iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') l_debug = ess_log_write('L_DAY: ' + to_char(L_DAY)) L_DAY = trunc(L_DAY,1) l_debug = ess_log_write('L_DAY: ' + to_char(L_DAY)) IF (L_DAY>0 AND L_DAY<=4) THEN (L_DAY = 4) IF (L_DAY>4) THEN (L_DAY =8) l_debug = ess_log_write('L_DAY: ' + to_char(L_DAY)) l_debug = ess_log_write('l_date: ' +to_char(l_date)) l_debug = ess_log_write('iv_start_date: ' +to_char(iv_start_date)) l_debug = ess_log_write('l_ed: ' +to_char(l_ed)) l_debug = ess_log_write('iv_end_date: ' +to_char(iv_end_date)) l_debug = ess_log_write('l_schedule: ' +l_schedule) l_debug = ess_log_write('l_total_duration_d: ' +to_char(l_total_duration_d)) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) DURATION = l_total_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the total duration of specific types of leave (Hajj Leave and Maternity Leave) in hours. It considers the start and end dates of the leave and iterates through each day within write a  period. For each day, it checks the availability and assigns a duration based on whether the day is a weekend or not. If the day is a weekend (Saturday or Sunday), it assigns 8 hours; otherwise, it assigns 0 hours. The total duration is then accumulated by adding the assigned hours for each day. The formula returns the total duration in hours.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_WORKER_ASSIGNMENT_EMPLOYEE_CATEGORY IS 'XX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_start_date = To_date(to_char(iv_start_date, 'DDMMYYYY'),'DDMMYYYY') l_end_date = To_date(to_char(iv_end_date, 'DDMMYYYY'),'DDMMYYYY') l_total_duration_d = days_between(l_end_date,l_start_date)+1 L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Hajj Leave - AKF Pakistan V1') AND (L_ABS_TYPE = 'Maternity Leave - AKF Pakistan V1') THEN ( l_total_duration_d = 0 l_date = iv_start_date WHILE (l_date < iv_end_date) loop ( l_ed = add_days(l_date,1) IF l_ed > iv_end_date then (l_ed = iv_end_date) L_DAY = GET_PAY_AVAILABILITY('ASSIGN' ,l_date ,l_ed ,'Y' ,'Y' ,'Y' ,'Y' ,'H') IF L_DAY = 0 THEN ( L_SH_DAY = GET_DATE_DAY_OF_WEEK(l_date) IF( L_SH_DAY = 'SAT' OR L_SH_DAY = 'SUN') THEN ( L_DAY = 8 ) ELSE ( L_DAY = 0 ) ) l_total_duration_d = l_total_duration_d + L_DAY l_date = add_days(l_date,1) ) ) ) DURATION = l_total_duration_d * 8 RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates various types of leave for employees in AKF Pakistan. Here's the business logic:\n\nAnnual, Casual, and Compensatory Leave: The formula checks if the leave start date is before the end of the probation period. If it is, the leave application is invalid.\n\nMaternity and Paternity Leave: The formula checks if the employee has completed one year of service. If not, the leave application is invalid. Additionally, for paternity leave, it ensures that the total leave taken in a rolling year does not exceed 80 hours. For maternity leave, it ensures that the total leave taken in a rolling year does not exceed 600 hours.\n\nHajj Leave: The formula checks if the employee has completed one year of service. If not, the leave application is invalid. It also ensures that the total duration for Hajj leave does not exceed 240 hours and for Umrah leave does not exceed 120 hours.\n\nIf any of these conditions are not met, the formula returns an error message indicating the specific reason for the invalid leave application\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ORIGINAL_DATE_OF_HIRE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_LENGTH_OF_SERVICE_BY_HIRE IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date), IV_ABSENCE_REASON (text), IV_TOTALDURATION ERROR_MESSAGE = 'AKF_ABS_VALIDATION' ERROR_CODE = 'E' VALID='Y' L_ABSENCE_TYPE_ID = GET_CONTEXT(ABSENCE_TYPE_ID,-1) CHANGE_CONTEXTS(ABSENCE_TYPE_ID = L_ABSENCE_TYPE_ID) ( L_ABS_TYPE = ANC_ABS_TYP_NAME IF (L_ABS_TYPE = 'Annual Leave - AKF Pakistan V1' OR L_ABS_TYPE= 'Casual Leave - AKF Pakistan V1' OR L_ABS_TYPE = 'Compensatory Leave - AKF Pakistan V1') then ( L_DATE = PER_ASG_DATE_PROBATION_END IF L_DATE > iv_start_date THEN ( TOKEN = 'You can not apply '||l_abs_type||' before completion of probation period.' VALID = 'N' ) ) IF (L_ABS_TYPE = 'Maternity Leave - AKF Pakistan V1' OR L_ABS_TYPE = 'Paternity Leave - AKF Pakistan V1') THEN ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF l_period<1 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of one year of service.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Paternity Leave - AKF Pakistan V1' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = (GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,add_days(iv_start_date,-1))*8) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 80 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 80 Hours in a rolling year.' VALID = 'N' ) ) IF L_ABS_TYPE = 'Maternity Leave - AKF Pakistan V1' THEN ( L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) L_TOTAL_ABSENCE = 0 L_DATE = ADD_DAYS(iv_start_date,-365) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_TOTAL_ABSENCE = (GET_ABSENCE_DAYS_PER_TYPE(L_ABS_TYPE,l_date,add_days(iv_start_date,-1))*8) ) L_TOTAL_ABSENCE = L_TOTAL_ABSENCE + IV_TOTALDURATION IF L_TOTAL_ABSENCE > 600 THEN ( TOKEN = 'You can not apply '||l_abs_type||' for more than 600 Hours in a rolling year.' VALID = 'N' ) ) ) IF (L_ABS_TYPE = 'Hajj Leave - AKF Pakistan V1') THEN ( change_contexts(EFFECTIVE_DATE=iv_start_date ) ( l_period = PER_REL_LENGTH_OF_SERVICE_BY_HIRE IF l_period<1 then ( TOKEN = 'You can not apply '||l_abs_type||' before completion of one year of service.' VALID = 'N' ) ) IF (IV_ABSENCE_REASON = 'Hajj' and IV_TOTALDURATION > 240) then ( TOKEN = 'You can not apply this leave for more than 240 Hours.' VALID = 'N' ) ELSE IF (IV_ABSENCE_REASON = 'Umrah' and IV_TOTALDURATION > 120) then ( TOKEN = 'You can not apply this leave for more than 120 Hours.' VALID = 'N' ) ) ) IF VALID = 'N' THEN ( TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = TOKEN RETURN VALID, ERROR_CODE, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE, TOKEN )ELSE ( RETURN VALID )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the total duration of nursing leave in hours. It considers the start and end dates of the leave and iterates through each day within write a  period. For each day, it checks the availability and assigns a duration based on the number of hours available. If the available hours are 2 or more, it assigns 2 hours. If the start time is 14:00 and the end time is 17:30, it assigns 0 hours. The total duration is then accumulated by adding the assigned hours for each day. The formula returns the total duration in hours.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DURATION IS 0 DEFAULT FOR IV_END_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_DURATION, IV_END_DURATION, IV_ABS_START_DATE (date), IV_ABS_END_DATE (date), IV_START_TIME (Text), IV_END_TIME (Text) p_IV_START_DATE = TO_DATE(TO_CHAR(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') p_IV_END_DATE = TO_DATE(TO_CHAR(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') DURATION = 0 ln_entry_duration_d = 0 l_total_duration_d = 0 l_debug = ESS_LOG_WRITE('Nursing Leave Calculation Start') IF (TRUNC(p_IV_START_DATE) <= TRUNC(p_IV_END_DATE)) THEN ( p_IV_START_DATE=to_date(to_char(IV_START_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') p_IV_END_DATE=to_date(to_char(IV_END_DATE,'DD/MM/RRRR'),'DD/MM/RRRR') WHILE (TRUNC(p_IV_START_DATE) <= TRUNC(p_IV_END_DATE)) LOOP ( l_debug = ESS_LOG_WRITE('IV_START_TIME ' + (IV_START_TIME)) l_debug = ESS_LOG_WRITE('IV_END_TIME ' + (IV_END_TIME)) ld_period_start_date_SG = to_date(to_char(p_IV_START_DATE,'DD/MM/RRRR')||' '||'00:00','DD/MM/RRRR HH24:MI:SS') ld_period_end_date_SG = to_date(to_char(p_IV_START_DATE,'DD/MM/RRRR')||' '||'23:59','DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d1 = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date_SG, ld_period_end_date_SG, 'Y', 'Y', 'Y', 'Y', 'H') ln_entry_duration_d = ln_entry_duration_d1 If (ln_entry_duration_d >= 2) THEN (ln_entry_duration_d = 2) If ( IV_START_TIME = '14:00' AND IV_END_TIME = '17:30' ) THEN (ln_entry_duration_d = 0) l_total_duration_d = l_total_duration_d + ln_entry_duration_d l_debug = ESS_LOG_WRITE('l_total_duration_d ' + TO_CHAR(l_total_duration_d)) p_IV_START_DATE = ADD_DAYS(p_IV_START_DATE, 1) l_debug = ESS_LOG_WRITE('p_IV_START_DATE ' + TO_CHAR(p_IV_START_DATE)) ) DURATION = l_total_duration_d l_debug = ESS_LOG_WRITE('DURATION1 ' + TO_CHAR(DURATION)) ) ELSE ( DURATION = ln_entry_duration_d l_debug = ESS_LOG_WRITE('DURATION2 ' + TO_CHAR(DURATION)) ) l_debug = ESS_LOG_WRITE('Nursing Leave Total Duration: ' + TO_CHAR(DURATION)) l_debug = ESS_LOG_WRITE('Nursing Leave Calculation END') RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates a sickness absence entry. Here's a simple explanation of what it does:\n\nIt checks if the employee has multiple assignments on the given date.\nIf the employee has only one assignment, it sets the validation to \"N\" (not valid) and returns an error message indicating that the unpaid leave is invalid for a single assignment.\nIf the employee has multiple assignments, it sets the validation to \"Y\" (valid).\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'Vision' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TITLE_ARR is EMPTY_TEXT_NUMBER INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_TITLE_ARR DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT for l_asg_primary is 'X' DEFAULT FOR l_asg_primary_non_primary is 'X' DEFAULT FOR PER_SYS_DATE_TIME IS '4712/12/31 00:00:00' VALID='N' l_debug = ess_log_write('In Single ASG Flag Formula') l_debug = ess_log_write('Asg Number: '+PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Flag: '+PER_ASG_PRIMARY_FLAG) l_debug = ess_log_write('PER_SYS_DATE_TIME: '+PER_SYS_DATE_TIME) i = 0 l_input_date = get_context(Effective_Date ,'0001/01/01' (date)) l_debug = ess_log_write('l_input_date: ' + to_char(l_input_date)) l_hr_per_id = to_char(GET_CONTEXT(PERSON_ID,0)) l_asg_primary ='Z' l_asg_primary_non_primary ='Z' start_date = to_char(IV_START_DATE) count_assignment = 0 l_yyyy=SUBSTR(start_date,1,4) l_mm=SUBSTR(start_date,6,2) l_dd=SUBSTR(start_date,9,2) l_debug = ess_log_write('l_yyyy: '+l_yyyy) l_debug = ess_log_write('l_mm: '+l_mm) l_debug = ess_log_write('l_dd: '+l_dd) l_asg_count=to_number(GET_VALUE_SET('BC_PAY_GET_ASSIGNMENT_COUNT','|=P_PERSON_ID='''||(l_hr_per_id)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) l_debug = ess_log_write('l_asg_count: ' + to_char(l_asg_count)) l_asg_primary=(GET_VALUE_SET('BC_PAY_GET_ASSIGNMENT_EXIST','|=P_PERSON_ID='''||(l_hr_per_id)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) if ISNULL(l_asg_count) = 'N' then ( VALID = 'N' ERROR_MESSAGE = '\"The unpaid leave you have chosen is invalid at this date this is usually due to the employee having single assignment at this date. Please check employee and date track to the correct time period to use the correct Unpaid leave type.\"' RETURN VALID, ERROR_MESSAGE ) VALID = 'Y' RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write an absence plan entitlement formua for:\nService Calculation:\n\nIt calculates the employee's length of service in years based on the seniority date and the matching date.\nPrimary Assignment Check:\n\nIf the employee has at least one year of service and the primary assignment flag is 'Y', it checks an additional attribute (ANC_ABS_ENTRS_ATTRIBUTE3).\nIf write a  attribute contains 'Y', it sets the pay factors and entitlements for four bands as follows:\nBand 1: 100% pay, 0 days entitlement\nBand 2: 90% pay, 42 days entitlement\nBand 3: 50% pay, 84 days entitlement\nBand 4: 0% pay, 147 days entitlement\nIf the attribute does not contain 'Y', it sets the pay factors and entitlements for four bands as follows:\nBand 1: 100% pay, 0 days entitlement\nBand 2: 90% pay, 42 days entitlement\nBand 3: 50% pay, 0 days entitlement\nBand 4: 0% pay, 147 days entitlement\nDefault Values:\n\nIf the employee does not meet the primary assignment check, it sets the pay factors and entitlements for four bands as follows:\nBand 1: 100% pay, 0 days entitlement\nBand 2: 90% pay, 0 days entitlement\nBand 3: 50% pay, 0 days entitlement\nBand 4: 0% pay, 0 days entitlement\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 is ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 IS 'N' DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_MATCHING_DATE(date), IV_ATTRIBUTE_1(text), IV_INFORMATION_DATE1 (date), IV_PLANNEDSTARTDATE (date), IV_PLANNEDENDDATE (date) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 l_debug = ess_log_write(' OAP Entitlement IV_START_DATE = '+to_char(IV_START_DATE)) Service_days=0 l_fte=0 l_contract_fte = 0 l_start_dt='0001/01/01 00:00:00' (date) l_ed_date = IV_START_DATE l_seniority_date ='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_MATCHING_DATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>=1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE3 Like '%Y')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 42 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 42 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 ) l_debug = ess_log_write('ANC_ABS_ENTRS_ATTRIBUTE3 '+ ANC_ABS_ENTRS_ATTRIBUTE3) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT, BAND4ENTITLEMENT, BAND4PAYFACTOR",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the total duration of an absence in days, excluding weekends. Here's a simple explanation of what it does:\n\nIt calculates the total number of days between the start and end dates.\nIt loops through each day from the start date to the end date.\nFor each day, it checks if the day is a Saturday or Sunday.\nIf the day is a weekend, it increments the count of leave days.\nIt subtracts the count of leave days from the total number of days to get the total duration of the absence, excluding weekends.\nIt rounds the total duration to the nearest whole number and returns it.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR ASG_HR_ASG_ID IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) Count_leave = 0 l_start = trunc(IV_START_DATE) l_end = trunc(IV_END_DATE) date_loop = l_start Total_days = DAYS_BETWEEN(l_end, l_start) + 1 ( i=1 CHANGE_CONTEXTS(START_DATE=l_start, END_DATE=l_end) ( l_debug = ess_log_write('l_end= '+ to_char((l_end))) l_debug = ess_log_write('l_start= '+ to_char((l_start))) WHILE date_loop <= l_end LOOP ( Day = GET_DATE_DAY_OF_WEEK(date_loop) l_debug = ess_log_write('Inside While Loop ') l_debug = ess_log_write('Day= '+ (Day)) IF((DAY = 'SAT') OR (DAY = 'SUN')) THEN ( Count_leave = Count_leave+1 l_debug = ess_log_write('Count_leave= '+ to_char((Count_leave))) ) date_loop = ADD_DAYS(date_loop, 1) l_debug = ess_log_write('date_loop= '+ to_char((date_loop))) ) ) ) Total_duration = Total_days - count_leave l_debug = ess_log_write('Total_duration= '+ to_char((Total_duration))) DURATION = round(Total_duration) RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates a sickness absence entry. Here's a simple explanation of what it does:\n\nIt checks if the employee has multiple assignments on the given date.\nIf the employee has multiple assignments, it sets the validation to \"N\" (not valid) and returns an error message indicating that the unpaid leave is invalid for multiple assignments.\nIf the employee has only one assignment, it sets the validation to \"Y\" (valid).\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_ORG_LEGAL_EMPLOYER_NAME is 'Vision' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TITLE_ARR is EMPTY_TEXT_NUMBER INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_TITLE_ARR DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_PRIMARY_FLAG is 'N' DEFAULT for l_asg_primary is 'X' DEFAULT FOR l_asg_primary_non_primary is 'X' DEFAULT FOR PER_SYS_DATE_TIME IS '4712/12/31 00:00:00' VALID='N' l_debug = ess_log_write('In Single ASG Flag Formula') l_debug = ess_log_write('Asg Number: '+PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Flag: '+PER_ASG_PRIMARY_FLAG) l_debug = ess_log_write('PER_SYS_DATE_TIME: '+PER_SYS_DATE_TIME) i = 0 l_input_date = get_context(Effective_Date ,'0001/01/01' (date)) l_debug = ess_log_write('l_input_date: ' + to_char(l_input_date)) l_hr_per_id = to_char(GET_CONTEXT(PERSON_ID,0)) l_asg_primary ='Z' l_asg_primary_non_primary ='Z' start_date = to_char(IV_START_DATE) count_assignment = 0 l_yyyy=SUBSTR(start_date,1,4) l_mm=SUBSTR(start_date,6,2) l_dd=SUBSTR(start_date,9,2) l_debug = ess_log_write('l_yyyy: '+l_yyyy) l_debug = ess_log_write('l_mm: '+l_mm) l_debug = ess_log_write('l_dd: '+l_dd) l_asg_count=to_number(GET_VALUE_SET('BC_PAY_GET_ASSIGNMENT_COUNT','|=P_PERSON_ID='''||(l_hr_per_id)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) l_debug = ess_log_write('l_asg_count: ' + to_char(l_asg_count)) l_asg_primary=(GET_VALUE_SET('BC_PAY_GET_ASSIGNMENT_EXIST','|=P_PERSON_ID='''||(l_hr_per_id)||''''||'|P_YEAR='''||(l_yyyy)||''''|| '|P_MONTH=''' ||(l_mm)||''''||'|P_DAY='''||(l_dd)||'''')) if ISNULL(l_asg_count) = 'Y' then ( VALID = 'N' ERROR_MESSAGE = '\"The unpaid leave you have chosen is invalid at this date this is usually due to the employee having multiple assignment at this date. Please check employee and date track to the correct time period to use the correct Unpaid leave type.\"' RETURN VALID, ERROR_MESSAGE ) VALID = 'Y' RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the number of service days for an employee and determines their pay factors and entitlements based on their length of service and whether they have a primary assignment flag set to 'Y'. It also checks if an attribute contains 'Y' to adjust the entitlements. Specifically, it sets the pay factors and entitlements for three bands as follows:\n\nBand 1: Pay factor is 90, entitlement is 42 days.\nBand 2: Pay factor is 50, entitlement is 84 days.\nBand 3: Pay factor is 0, entitlement is 147 days.\nIf the attribute does not contain 'Y', the entitlements for Band 2 are set to 0 days. If the employee has less than one year of service or the primary assignment flag is not 'Y', the entitlements for all bands are set to 0 days.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_FLAG IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE2 IS 'N' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>=1 AND PER_ASG_PRIMARY_FLAG = 'Y') THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE2 Like '%Y')THEN ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 84 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 147 ) ELSE ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 42 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 147 ) ) ELSE ( BAND1PAYFACTOR = 90 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) l_debug = ess_log_write('ANC_ABS_ENTRS_ATTRIBUTE2 '+ ANC_ABS_ENTRS_ATTRIBUTE2) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3ENTITLEMENT, BAND3PAYFACTOR",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the number of service days for an employee and determines their pay factors and entitlements based on their length of service. It adjusts the expected childbirth date to the nearest Monday and calculates the total service days. If the employee has more than 26 weeks of service, they receive a pay factor of 100 and an entitlement of 7 days for Band 1, while Bands 2 and 3 have no entitlements.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_START_DATE l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-105) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days = DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service = Service_days/365 Weeks_of_service = Year_of_service * 52.143 IF(Weeks_of_service > 26) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula evaluates the duration of an absence plan based on the worker's type and status. It calculates the duration of the absence by considering the start and end dates, start and end times, and specific conditions such as whether the worker's assignment status is active and if the primary flag is set. The formula adjusts the duration based on whether the absence starts on a weekday and logs relevant information for debugging purposes. Ultimately, it returns the calculated duration of the absence.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR ASG_HR_ASG_ID IS 0 DEFAULT FOR IV_ABS_START_DURATION IS 0 DEFAULT FOR IV_ABS_END_DURATION IS 0 DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '1900/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_MEANING IS 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE IS 'Y' INPUTS ARE IV_START_DATE (date) , IV_END_DATE (date) , IV_START_TIME(text) , IV_END_TIME(text) , IV_ABS_START_DURATION , IV_ABS_END_DURATION , IV_ABS_START_DATE (date) , IV_ABS_END_DATE (date) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' l_debug = ess_log_write('IV_ABS_START_DURATION - ' +to_char(IV_ABS_START_DURATION)) l_debug = ess_log_write('PER_ASG_MEANING - ' +(PER_ASG_ASSIGNMENT_STATUS_TYPE_MEANING)) l_debug = ess_log_write('PER_ASG_ASSIGNMENT_STATUS_TYPE - ' +(PER_ASG_ASSIGNMENT_STATUS_TYPE)) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') IF PER_ASG_ASSIGNMENT_STATUS_TYPE = 'ACTIVE' THEN ( l_hr_asg_id = ASG_HR_ASG_ID l_debug = ess_log_write('l_hr_asg_id - ' +to_char(l_hr_asg_id)) l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF IV_START_DATE = IV_ABS_START_DATE THEN ( ln_entry_duration_d = IV_ABS_START_DURATION ) ELSE ( ln_entry_duration_d = 1 ) ) ELSE ( ln_entry_duration_d=0 ) if l_primary_flag ='N' THEN ( ln_entry_duration_d=0 ) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) ) ELSE DURATION = 0 RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for maternity leave based on the employee's length of service and a specific attribute. Here's the business logic:\n\nSeniority Date Calculation: The formula determines the seniority date based on either the statutory absence service start date or the assignment start date.\n\nService Days Calculation: It calculates the number of service days from the seniority date to 77 days before the expected childbirth date. It then converts the service days into years of service.\n\nEntitlement and Pay Factor Determination:\n\nIf the employee has more than one year of service, the formula checks a specific attribute (ANC_ABS_ENTRS_ATTRIBUTE2).\nIf the attribute contains 'Y', the entitlements are set to 56 days at 100% pay, 126 days at 50% pay, and 182 days at 0% pay.\nIf the attribute does not contain 'Y', the entitlements are set to 56 days at 100% pay, 0 days at 50% pay, and 182 days at 0% pay.\nIf the employee has less than one year of service, the entitlements are set to 0 days at 100% pay, 0 days at 50% pay, and 0 days at 0% pay.\nThe formula returns the pay factors and entitlements for the three bands based on these calculations\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE2 IS 'N' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>1) OR (Year_of_service=1) THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE2 Like '%Y%')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 126 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 182 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 182 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 0 BAND3ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pro-rated duration for absence entries based on the full-time equivalent (FTE) value. It considers the start and end dates and times of the absence period and calculates the total duration in days. The duration is then rounded to two decimal places and returned. The formula also logs relevant information during the calculation process.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT_DATA_VALUE FOR PAY_PAYROLL_ASG_ASSIGNMENT_ID IS -1 DEFAULT FOR l_assignment_detail IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 IV_TOTALDURATION=0 Assignment=0 l_assignment_detail=0 i=1 j=0 l_person_id=0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') start=to_char(IV_START_DATE,'DD') end=to_char(IV_END_DATE,'DD') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') l_person_id=GET_CONTEXT(PERSON_ID,0) l_debug = ess_log_write('l_person_id= '+ to_char(l_person_id)) l_debug = ess_log_write('start= '+ start) l_debug = ess_log_write('end= '+ end) ln_entry_duration_d=1 DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for employees based on their length of service. Here's the business logic:\n\nSeniority Date Calculation: The formula determines the seniority date based on either the statutory absence service start date or the assignment start date.\n\nService Days Calculation: It calculates the number of service days from the seniority date to the start date of the absence. It then converts the service days into years and months of service.\n\nEntitlement and Pay Factor Determination:\n\nFor employees with less than 1 year of service, the entitlements are set to 22 days at 100% pay and 43 days at 50% pay.\nFor employees with 1 to 2 years of service, the entitlements are set to 43 days at 100% pay and 43 days at 50% pay.\nFor employees with 2 to 3 years of service, the entitlements are set to 87 days at 100% pay and 87 days at 50% pay.\nFor employees with 3 to 5 years of service, the entitlements are set to 108 days at 100% pay and 108 days at 50% pay.\nFor employees with more than 5 years of service, the entitlements are set to 130 days at 100% pay and 130 days at 50% pay.\nThe formula returns the pay factors and entitlements for the two bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_START IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) Service_days=DAYS_BETWEEN(l_seniority_date,IV_START_DATE)+1 Year_of_service=Service_days/365 Months_of_service = MONTHS_BETWEEN(IV_START_DATE,l_seniority_date) IF(Year_of_service > 0 AND Year_of_service < 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 22 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service >= 1 AND Year_of_service < 2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 43 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service >= 2 AND Year_of_service < 3) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 87 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 87 ) ELSE IF(Year_of_service >= 3 AND Year_of_service < 5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 108 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 108 ) ELSE IF(Year_of_service >= 5) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for employees based on their length of service. Here's the business logic:\n\nSeniority Date Calculation: The formula determines the seniority date based on either the statutory absence service start date or the assignment start date.\n\nService Days Calculation: It calculates the number of service days from the seniority date to the start date of the absence. It then converts the service days into years and months of service.\n\nEntitlement and Pay Factor Determination:\n\nFor employees with less than 1 year of service, the entitlements are set to 22 days at 100% pay and 43 days at 50% pay.\nFor employees with 1 to 2 years of service, the entitlements are set to 43 days at 100% pay and 43 days at 50% pay.\nFor employees with 2 to 3 years of service, the entitlements are set to 87 days at 100% pay and 87 days at 50% pay.\nFor employees with 3 to 5 years of service, the entitlements are set to 108 days at 100% pay and 108 days at 50% pay.\nFor employees with more than 5 years of service, the entitlements are set to 130 days at 100% pay and 130 days at 50% pay.\nThe formula returns the pay factors and entitlements for the two bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_START IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) Service_days=DAYS_BETWEEN(IV_START_DATE,l_seniority_date)+1 Year_of_service=Service_days/365 Months_of_service = MONTHS_BETWEEN(IV_START_DATE,l_seniority_date) IF(Year_of_service > 0 AND Year_of_service < 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 22 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service >= 1 AND Year_of_service < 2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 43 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service >= 2 AND Year_of_service < 3) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 87 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 87 ) ELSE IF(Year_of_service >= 3 AND Year_of_service < 5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 108 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 108 ) ELSE IF(Year_of_service >= 5) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for employees based on their length of service and primary assignment status. Here's the business logic:\n\nSeniority Date Calculation: The formula determines the seniority date based on either the statutory absence service start date or the assignment start date.\n\nService Days Calculation: It calculates the number of service days from the seniority date to the start date of the absence. It then converts the service days into years and weeks of service.\n\nEntitlement and Pay Factor Determination:\n\nIf the employee has at least one year of service and the primary assignment flag is 'Y', the entitlements are set to 14 days at 100% pay.\nIf the employee has less than one year of service or the primary assignment flag is not 'Y', the entitlements are set to 0 days at 100% pay.\nThe formula returns the pay factors and entitlements for the two bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 is ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_MATCHING_DATE(date), IV_ATTRIBUTE_1(text), IV_INFORMATION_DATE1 (date), IV_PLANNEDSTARTDATE (date), IV_PLANNEDENDDATE (date) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 l_debug = ess_log_write(' OPA Entitlement IV_START_DATE = '+to_char(IV_START_DATE)) Service_days=0 l_fte=0 l_contract_fte = 0 l_start_dt='0001/01/01 00:00:00' (date) l_ed_date = IV_START_DATE l_seniority_date ='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_START_DATE Service_days = DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service = Service_days/365 Weeks_of_service = Year_of_service * 52.143 IF(Year_of_service >= 1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a fast formula for calculating UK Statutory Sick Pay (SSP) entitlement:\n\nPartial Days and Shift Type: The formula first determines if the absence includes partial days and identifies the type of shift (regular or alternate). write a  helps in accurately calculating the duration of the absence.\n\nShort Sickness Check: If the absence is shorter than 4 calendar days, it does not qualify for SSP. write a  is because SSP is only payable for absences that are at least 4 days long.\n\nLinked Absences Evaluation: The formula evaluates previous linked absences to count the total qualified days (waiting days) and SSP weeks. It checks if there are any disqualifying certificates in the history that would affect the current absence.\n\nSickness During Maternity Check: If the current sickness is linked to a preceding sickness during maternity within 56 days, the current sickness is considered linked and unpaid.\n\nEarnings Check: For the first absence in a chain, the formula checks if the person had earnings above the Lower Earnings Limit (LEL). If the earnings are below the LEL, the absence does not qualify for SSP.\n\nEntitlement Calculation:\n\nWaiting Days: The formula calculates the number of waiting days to serve based on the accumulated qualified days from previous absences. The statutory waiting days are 3. If the employee has already served some waiting days in previous absences, the remaining waiting days are calculated.\nPaid Days: The formula calculates the number of paid days until the limit of 28 weeks or 3 years is reached. The SSP weeks to go are determined by subtracting the total SSP weeks from the statutory week limit.\nReturn Values: The formula returns the pay factors and entitlements for the waiting days and paid days based on these calculations. If the absence is not eligible for SSP, it returns 0 for the entitlement.\n\nIn summary, the formula ensures that the SSP entitlement is calculated accurately based on the employee's absence history, earnings, and other relevant factors. If any conditions are not met, such as the absence being too short or earnings being below the LEL, the absence does not qualify for SSP\n\n***answer***: DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='Y' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='Y' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id )( set_input('IV_L_START_DATE',l_start_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='Y' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 if (continue_to_count='Y') then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DATE=l_start_date, END_DATE=l_end_date, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( p_ssp_weeks_linked=l_total_ssp_weeks p_waiting_days_to_serve=band1entitlement if (FLEX_CONSUMED_SSP_WEEKS > 0 and 0 = p_ssp_weeks_linked) then ( p_ssp_weeks_linked = FLEX_CONSUMED_SSP_WEEKS ) ssp_weeks_to_go = statutory_week_limit - p_ssp_weeks_linked waiting_days_processed_count=0 entitlement_days=0 l_running_week_start_date='4712-12-31T00:00:00.000Z' (DATE) day_scheduled_value=0 l_continue_flag=1 /* check entry status, absenc",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the entitlement for UK Statutory Sick Pay (SSP) based on several factors. Here's the detailed calculation logic:\n\nPartial Days and Shift Type: The formula first determines if the absence includes partial days and identifies the type of shift (regular or alternate). write a  helps in accurately calculating the duration of the absence.\n\nShort Sickness Check: If the absence is shorter than 4 calendar days, it does not qualify for SSP. write a  is because SSP is only payable for absences that are at least 4 days long.\n\nLinked Absences Evaluation: The formula evaluates previous linked absences to count the total qualified days (waiting days) and SSP weeks. It checks if there are any disqualifying certificates in the history that would affect the current absence.\n\nSickness During Maternity Check: If the current sickness is linked to a preceding sickness during maternity within 56 days, the current sickness is considered linked and unpaid.\n\nEarnings Check: For the first absence in a chain, the formula checks if the person had earnings above the Lower Earnings Limit (LEL). If the earnings are below the LEL, the absence does not qualify for SSP.\n\nEntitlement Calculation:\n\nWaiting Days: The formula calculates the number of waiting days to serve based on the accumulated qualified days from previous absences. The statutory waiting days are 3. If the employee has already served some waiting days in previous absences, the remaining waiting days are calculated.\nPaid Days: The formula calculates the number of paid days until the limit of 28 weeks or 3 years is reached. The SSP weeks to go are determined by subtracting the total SSP weeks from the statutory week limit.\nReturn Values: The formula returns the pay factors and entitlements for the waiting days and paid days based on these calculations. If the absence is not eligible for SSP, it returns 0 for the entitlement.\n\nIn summary, the formula ensures that the SSP entitlement is calculated accurately based on the employee's absence history, earnings, and other relevant factors. If any conditions are not met, such as the absence being too short or earnings being below the LEL, the absence does not qualify for SSP.\n\n***answer***: DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' weeks_man_flag='N' years_man_flag='N' wait_man_flag='N' prev_man_flag='N' lel_man_flag='N' piw_man_flag='N' sdm_man_flag='N' paychg_man_flag='N' l_insuff_info_man_flag='N' multi_assign_man_flag='N' deemed_worker_man_flag='N' link_letter_man_flag='N' partial_start_man_flag='N' partial_end_man_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='Y' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='Y' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_START_DATE',l_start_date) set_input('IV_END_DATE',l_end_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='Y' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DATE=l_start_date, END_DATE=l_end_date, HR_ASSIGNMENT_ID=l_context_assignment_id ) ( p_ssp_weeks_linked=l_total_ssp_weeks p_waiting_days_to_serve=band1entitlement if (FLEX_CONSUMED_SSP_WEEKS > 0 and 0 = p_ssp_weeks_linked) then ( p_ss",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the name of the absence plan entitlement formula for the UK statutory sick pay?\n\n***answer***: DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_LNKG_LNKD_ABS_ID is EMPTY_NUMBER_NUMBER DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_AVAILABILITY_OBJ_CATEGORY_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_ABSENCE_CERTIFICATION_ID_ARR is 0 DEFAULT FOR ANC_ABS_CERTS_CLASS_CD_ARR IS EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_CLASS_CD_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR is 0 DEFAULT FOR IV_START_DURATION is 1 DEFAULT FOR IV_END_DURATION is 1 DEFAULT FOR IV_INFORMATION_3 is ' ' DEFAULT FOR IV_INFORMATION_4 is ' ' DEFAULT FOR IV_INFORMATION_NUMBER2 is 0 DEFAULT FOR IV_INFORMATION_NUMBER4 is -1 DEFAULT FOR IV_INFORMATION_DATE1(DATE) is '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_INFORMATION_ARR is EMPTY_TEXT_NUMBER DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR IS 0 DEFAULT FOR IV_UI_PER_CERT_ID IS ' ' DEFAULT FOR IV_UI_CERT_STATUS IS ' ' DEFAULT FOR IV_UI_CERT_TYPE IS ' ' DEFAULT FOR IV_UI_CERT_CREATION_TYPE IS ' ' DEFAULT FOR IV_UI_ABS_CERT_ID IS ' ' DEFAULT FOR PAYROLL_LICENSE IS ' ' DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR GET_PLSD_FSED IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR IV_ADV_ENTRY_ABS_START_DATE_ARR is EMPTY_DATE_NUMBER DEFAULT FOR IV_ADV_ENTRY_ASSIGNMENT_ID_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR IV_ADV_ENTRY_DURATION_ARR is EMPTY_NUMBER_NUMBER DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' INPUTS ARE IV_START_TIME ,IV_END_TIME , IV_START_DATE (date),IV_END_DATE (date), IV_START_DURATION,IV_END_DURATION, IV_LNKG_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_ID (NUMBER_NUMBER), IV_LNKG_LNKD_ABS_START (date_number), IV_LNKG_LNKD_ABS_END (date_number), IV_LNKG_CHAIN_ID (NUMBER_NUMBER), IV_INFORMATION_NUMBER2, IV_INFORMATION_NUMBER4, IV_INFORMATION_3(TEXT), IV_INFORMATION_4(TEXT), IV_INFORMATION_DATE1(DATE), IV_UI_PER_CERT_ID, IV_UI_CERT_TYPE, IV_UI_CERT_REVPAYSTART_DATE (date), IV_UI_CERT_REVPAYEND_DATE (date), IV_UI_CERT_REVPAY_FACTOR, IV_UI_CERT_CREATION_TYPE, IV_UI_CERT_STATUS, IV_UI_ABS_CERT_ID, IV_INFORMATION_ARR, IV_ADV_ENTRY_ABS_START_DATE_ARR, IV_ADV_ENTRY_ASSIGNMENT_ID_ARR, IV_ADV_ENTRY_DURATION_ARR v_IV_START_DATE=IV_START_DATE v_IV_END_DATE=IV_END_DATE v_IV_START_DURATION=IV_START_DURATION v_IV_END_DURATION=IV_END_DURATION v_IV_UI_PER_CERT_ID=IV_UI_PER_CERT_ID v_IV_UI_CERT_TYPE=IV_UI_CERT_TYPE v_IV_UI_CERT_REVPAYSTART_DATE=IV_UI_CERT_REVPAYSTART_DATE v_IV_UI_CERT_REVPAYEND_DATE=IV_UI_CERT_REVPAYEND_DATE v_IV_UI_CERT_REVPAY_FACTOR=IV_UI_CERT_REVPAY_FACTOR v_IV_UI_CERT_CREATION_TYPE=IV_UI_CERT_CREATION_TYPE v_IV_UI_CERT_STATUS=IV_UI_CERT_STATUS v_IV_UI_ABS_CERT_ID=IV_UI_ABS_CERT_ID FLEX_DISQUALIFIED_YN=IV_INFORMATION_3 FLEX_DISQUALIFIED_REASON=IV_INFORMATION_4 FLEX_CONSUMED_SSP_WEEKS=IV_INFORMATION_NUMBER2 FLEX_WAITING_DAYS_INPUT=IV_INFORMATION_NUMBER4 FLEX_ORIGINAL_START_DATE=IV_INFORMATION_DATE1 FLEX_ORIGINAL_START_DATE_STR=to_char(FLEX_ORIGINAL_START_DATE,'YYYY-MM-DD') FLEX_DISABLE_EARNINGS_CHECK='N' R = ess_log_write('********************************BC UK Sickness Start**********************************************') if ( IV_INFORMATION_ARR.exists(6) ) then ( FLEX_DISABLE_EARNINGS_CHECK=IV_INFORMATION_ARR[6] ) false=0 true=1 configure_lel=1 configure_multi_assign_check=0 configure_sdm_check=1 details_formula_name='ORA_HRX_GB_ABS_SSP_ENT_DETAIL' history_formula_name='ORA_HRX_GB_ABS_SSP_ENT_HISTORY' linking_letter_formula='ORA_HRX_GB_ABS_SSP_SUB_LETTER' ssp_awe_subformula='ORA_HRX_GB_ABS_SSP_SUB_AWE' cert_altcd_valueset='ORA_HRX_GB_CERT_ALTCD' e_log=('DEBUG:ENTL_MAIN_ENTER') statutory_waiting_days=3 statutory_week_limit=28 statutory_year_limit=3 end_of_time='4712/12/31 00:00:00' (DATE) CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER l_cert_index=0 disqualification_seen='N' disqualification_imported='N' cert_comments_collection=' ' continue_to_count='Y' linked_to_sdm='N' band1payfactor=0 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 LOC_API_SKIP = 'N' LOC_NUMBER_ARRAY=EMPTY_NUMBER_TEXT l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' R = ess_log_write('row 247 OWC'||to_char(v_IV_START_DATE)||'v_IV_END_DATE : '|| to_char(v_IV_END_DATE)||'end_of_time'||to_char(end_of_time)) if (v_IV_START_DATE=end_of_time) and (v_IV_END_DATE=end_of_time) then( band1payfactor=1 band1entitlement=0 band2payfactor=0 band2entitlement=99999999 return band1payfactor,band1entitlement,band2payfactor,band2entitlement ) l_context_assignment_id=0 prev_absence_entry_id = -2 prev_absence_entry_start_date = '4712-12-31T00:00:00.000Z' (DATE) l_max_years_exceed_date=end_of_time l_max_years_exceed_date_hist=end_of_time thisdate=end_of_time debugtext=' ' l_context_absence_entry_id=GET_CONTEXT(ABSENCE_ENTRY_ID,-1) l_context_person_id=GET_CONTEXT(PERSON_ID,-1) l_context_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_context_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,-1) l_context_effective_date=GET_CONTEXT(EFFECTIVE_DATE, '4712-12-31T00:00:00.000Z' (DATE)) l_absence_plan_id=GET_CONTEXT(ACCRUAL_PLAN_ID,-1) l_trunced_context_effective_date=trunc(l_context_effective_date) l_partial_start_date=trunc(IV_START_DATE) l_partial_end_date=trunc(IV_END_DATE) l_start_date=trunc(IV_START_DATE) l_end_date=trunc(IV_END_DATE) wait_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) wait_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_begin_date='4712-12-31T00:00:00.000Z' (DATE) years_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) prev_cert_end_date='4712-12-31T00:00:00.000Z' (DATE) weeks_cert_flag='N' years_cert_flag='N' wait_cert_flag='N' prev_cert_flag='N' lel_cert_flag='N' piw_cert_flag='N' sdm_cert_flag='N' paychg_cert_flag='N' l_insuff_info_cert='N' multi_assign_cert_flag='N' weeks_man_flag='N' years_man_flag='N' wait_man_flag='N' prev_man_flag='N' lel_man_flag='N' piw_man_flag='N' sdm_man_flag='N' paychg_man_flag='N' l_insuff_info_man_flag='N' multi_assign_man_flag='N' deemed_worker_man_flag='N' link_letter_man_flag='N' partial_start_man_flag='N' partial_end_man_flag='N' internal_certs=EMPTY_TEXT_TEXT internal_certs['ORA_HRX_GB_WAITING_DAYS']='Waiting Days' internal_certs['ORA_HRX_GB_LINKING_LETTER']='Linking Letter' internal_certs['ORA_HRX_GB_MAX_28WEEKS_PAID']='Maximum 28 Weeks Paid' internal_certs['ORA_HRX_GB_LEL_NOT_REACHED']='LEL Not Reached' internal_certs['ORA_HRX_GB_MAX_3YEARS_PAID']='Maximum 3 Years Paid' internal_certs['ORA_HRX_GB_NON_PAYABLE_LINKED']='Linked Absence Not Payable' internal_certs['ORA_HRX_GB_LESSTHAN_4DAYS']='Absence Less Than 4 Days' internal_certs['ORA_HRX_GB_NOT_ELIGIBLE']='Day Not Eligible For SSP' internal_certs['ORA_HRX_GB_INSUFF_INFO_AWE']='Insufficient information to perform LEL check' internal_certs['ORA_HRX_GB_MULTI_ASSIGNMENT']='Absence has multiple assignments' internal_certs['ORA_HRX_GB_LINKED_TO_SDM']='Absence linked to sickness during maternity' internal_certs['ORA_HRX_GB_PAYROLL_CHANGED']='Payroll changed during the relevant period' R = ess_log_write('row 340 OWC'||to_char(l_trunced_context_effective_date)||'IV_start_date : '|| to_char(IV_START_DATE)) if ( l_trunced_context_effective_date > trunc(IV_START_DATE) ) then ( band1payfactor=100 band1entitlement=99999990 band2payfactor=0 band2entitlement=99999990 return band1payfactor,band1entitlement ,band2payfactor,band2entitlement ) if (FLEX_DISQUALIFIED_REASON <> ' ' ) then( l_cert_index=l_cert_index+1 CERT_NAMES[l_cert_index]=FLEX_DISQUALIFIED_REASON CERT_COMMENTS[l_cert_index]='certification from imported data.' CERT_START_DATES[l_cert_index]=l_partial_start_date CERT_END_DATES[l_cert_index]=l_partial_end_date disqualification_imported='Y' ) l_asg_count = 1 if (configure_multi_assign_check<>0) then ( CHANGE_CONTEXTS(START_DATE = IV_START_DATE, END_DATE = IV_END_DATE) ( IF ORA_HRX_GB_ABS_ASG_LIST_COUNT WAS DEFAULTED THEN ( l_asg_count = 1 ) ELSE ( l_asg_count = ORA_HRX_GB_ABS_ASG_LIST_COUNT) ) if (l_asg_count > 1) then ( multi_assign_cert_flag='Y' ) ) USE_ALT_SCHEDULE='Y' type_of_reg_shift=GET_SHIFT_TYPE(l_context_assignment_id,'ASSIGN',IV_START_DATE) type_of_alt_shift=type_of_reg_shift if (type_of_reg_shift='ELAPSED') then ( if (not (IV_ADV_ENTRY_ABS_START_DATE_ARR was defaulted)) then ( v_IV_START_DURATION=-999 v_IV_END_DURATION=-999 adv_first_day_date='4712-12-31T00:00:00.000Z' (DATE) adv_last_day_date='0001-01-01T00:00:00.000Z' (DATE) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.FIRST(-1) while (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) loop ( adv_asg_id= -1 if (IV_ADV_ENTRY_ASSIGNMENT_ID_ARR.exists(ni8)) then ( adv_asg_id=IV_ADV_ENTRY_ASSIGNMENT_ID_ARR[ni8] ) adv_dur= -1 if (IV_ADV_ENTRY_DURATION_ARR.exists(ni8)) then ( adv_dur=IV_ADV_ENTRY_DURATION_ARR[ni8] ) current_day_date='0001-01-01T00:00:00.000Z' (DATE) if (IV_ADV_ENTRY_ABS_START_DATE_ARR.exists(ni8)) then ( current_day_date=IV_ADV_ENTRY_ABS_START_DATE_ARR[ni8] if (current_day_date < adv_first_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_first_day_date=current_day_date v_IV_START_DURATION=adv_dur ) ) if (current_day_date > adv_last_day_date) then ( if (adv_asg_id=-1 or adv_asg_id=l_context_assignment_id) then ( adv_last_day_date=current_day_date v_IV_END_DURATION=adv_dur ) ) ) ni8=IV_ADV_ENTRY_ABS_START_DATE_ARR.NEXT(ni8,-1) ) ) ) CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_reg_shift) set_input('USE_ALT_SCHEDULE','N') execute(details_formula_name) DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) PARTIAL_DAY_DATES_LIST = wsa_get('PARTIAL_DAY_DATES_LIST',EMPTY_DATE_TEXT) PARTIAL_DAY_STATUS_LIST = wsa_get('PARTIAL_DAY_STATUS_LIST',EMPTY_TEXT_TEXT) FIRST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['FIRST_IS_PARTIAL'] LAST_IS_PARTIAL = PARTIAL_DAY_STATUS_LIST['LAST_IS_PARTIAL'] FIRST_DAY_DATE = PARTIAL_DAY_DATES_LIST['FIRST_DAY_DATE'] LAST_DAY_DATE = PARTIAL_DAY_DATES_LIST['LAST_DAY_DATE'] ) l_start_date = FIRST_DAY_DATE l_end_date = LAST_DAY_DATE if ( FIRST_IS_PARTIAL='Y') then ( l_start_date=add_days(l_start_date,1) ) if ( LAST_IS_PARTIAL='Y' ) then ( if (l_end_date < end_of_time) then ( l_end_date=add_days(l_end_date,-1) ) ) IF ( USE_ALT_SCHEDULE='Y' AND type_of_alt_shift='TIME') THEN ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_START_DATE',IV_START_DATE) set_input('IV_END_DATE',IV_END_DATE) set_input('IV_START_DURATION',v_IV_START_DURATION) set_input('IV_END_DURATION',v_IV_END_DURATION) set_input('TYPE_OF_SHIFT',type_of_alt_shift) set_input('USE_ALT_SCHEDULE',USE_ALT_SCHEDULE) execute(details_formula_name) DAY_STATUS_LIST = EMPTY_NUMBER_TEXT DAY_STATUS_LIST = wsa_get('DAY_STATUS_LIST',EMPTY_NUMBER_TEXT) ) ) l_cal_day_duration=days_between(trunc(l_end_date),trunc(l_start_date))+1 if (l_cal_day_duration < 4) then( piw_cert_flag='Y' continue_to_count='Y' ) l_total_ssp_weeks=0 l_total_qualified_days=0 l_first_absence_start_date = l_start_date l_linked_absences_exist=0 migration_waiting_days=-1 ni=IV_LNKG_LNKD_ABS_ID.FIRST(-1) if IV_LNKG_LNKD_ABS_ID.exists(ni) then ( l_linked_absences_exist=1 CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_LNKG_ABS_ID',IV_LNKG_ABS_ID) set_input('IV_LNKG_LNKD_ABS_ID',IV_LNKG_LNKD_ABS_ID) set_input('IV_LNKG_LNKD_ABS_START',IV_LNKG_LNKD_ABS_START) set_input('IV_LNKG_LNKD_ABS_END',IV_LNKG_LNKD_ABS_END) set_input('IV_LNKG_CHAIN_ID',IV_LNKG_CHAIN_ID) set_input('IV_DETAILS_FORMULA_NAME',details_formula_name) set_input('IV_DISQUALIFICATION_SEEN',disqualification_seen) execute(history_formula_name) l_total_qualified_days=GET_OUTPUT('L_TOTAL_QUALIFIED_DAYS',0) l_total_ssp_weeks=GET_OUTPUT('L_TOTAL_SSP_WEEKS',0) migration_waiting_days=GET_OUTPUT('MIGRATION_WAITING_DAYS',-1) l_max_years_exceed_date_hist=GET_OUTPUT('L_MAX_YEARS_EXCEED_DATE_HIST',end_of_time) l_first_absence_start_date=GET_OUTPUT('L_FIRST_ABSENCE_START_DATE',l_start_date) disqualification_seen=GET_OUTPUT('DISQUALIFICATION_SEEN',disqualification_seen) ) ) if (l_max_years_exceed_date_hist < end_of_time) then ( l_max_years_exceed_date=l_max_years_exceed_date_hist ) else ( l_max_years_exceed_date = add_years(l_first_absence_start_date,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) sdm_formula_name='ORA_HRX_GB_ABS_SSP_SDM_CHECK' if ( disqualification_seen='N' ) then( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( HR_ASSIGNMENT_ID=l_context_assignment_id, PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ACCRUAL_PLAN_ID=l_absence_plan_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, ABSENCE_TYPE_ID=l_context_absence_type_id )( set_input('IV_SSP_START_DATE',trunc(IV_START_DATE)) execute(sdm_formula_name) linked_to_sdm=GET_OUTPUT('LINKED_TO_SDM',linked_to_sdm) ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (linked_to_sdm='Y') then ( sdm_cert_flag='Y' ) ) ) if ( FLEX_ORIGINAL_START_DATE < end_of_time ) then ( l_max_years_exceed_date = add_years(FLEX_ORIGINAL_START_DATE,statutory_year_limit) l_max_years_exceed_date = add_days(l_max_years_exceed_date,-1) ) link_letter_cert_flag = 'N' if (l_linked_absences_exist=0 and disqualification_seen='N') then ( if (configure_sdm_check=1) then ( CHANGE_CONTEXTS( PERSON_ID=l_context_person_id )( set_input('IV_L_START_DATE',l_start_date) execute(linking_letter_formula) link_letter_cert_flag=GET_OUTPUT('LINK_LETTER_CERT_FLAG','N') ) e_log=('DEBUG:SSP.LINKED_TO_SICK_DURING_MATERNITY linked_to_sdm: '|| linked_to_sdm) if (link_letter_cert_flag='Y') then ( continue_to_count='Y' ) ) ) do_lel_check=1 if (configure_lel=0) then ( do_lel_check=0 ) if (FLEX_DISABLE_EARNINGS_CHECK='Y') then ( do_lel_check=0 ) if (l_linked_absences_exist=1) then ( do_lel_check=0 ) if (continue_to_count='N') then ( do_lel_check=0 ) lel_cert_flag='N' l_insuff_info_cert='N' paychg_cert_flag='N' l_awe=0 if (do_lel_check=1) then ( l_hr_relationship_id=GET_CONTEXT(HR_RELATIONSHIP_ID,-1) l_payroll_relationship_id=GET_CONTEXT(PAYROLL_RELATIONSHIP_ID,-1) l_effective_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_legislative_data_group_id=GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,-1) l_payroll_id=GET_CONTEXT(PAYROLL_ID,-1) l_payroll_assignment_id=GET_CONTEXT(PAYROLL_ASSIGNMENT_ID,-1) l_hr_assignment_id=GET_CONTEXT(HR_ASSIGNMENT_ID,-1) l_payroll_term_id=GET_CONTEXT(PAYROLL_TERM_ID,-1) CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, HR_RELATIONSHIP_ID=l_hr_relationship_id, PAYROLL_RELATIONSHIP_ID=l_payroll_relationship_id, EFFECTIVE_DATE=l_effective_date, LEGISLATIVE_DATA_GROUP_ID=l_legislative_data_group_id, PAYROLL_ID=l_payroll_id, HR_ASSIGNMENT_ID=l_hr_assignment_id, PAYROLL_TERM_ID=l_payroll_term_id )( set_input('IV_L_START_DATE',l_start_date) set_input('IV_START_DATE',l_start_date) set_input('IV_END_DATE',l_end_date) execute(ssp_awe_subformula) l_insuff_info_cert=GET_OUTPUT('L_INSUFF_INFO_CERT','N') lel_cert_flag=GET_OUTPUT('LEL_CERT_FLAG','N') paychg_cert_flag=GET_OUTPUT('PAYCHG_CERT_FLAG','N') l_awe=GET_OUTPUT('L_AWE',0) ) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_insuff_info_cert: '|| l_insuff_info_cert) e_log=('DEBUG:SSP.EARNINGS_CHECK:lel_cert_flag: '|| lel_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:paychg_cert_flag: '|| paychg_cert_flag) e_log=('DEBUG:SSP.EARNINGS_CHECK:l_awe: '|| to_char(l_awe)) if (l_insuff_info_cert='Y' or lel_cert_flag='Y' or paychg_cert_flag='Y') then ( continue_to_count='Y' ) ) blocked_start_dt=EMPTY_DATE_NUMBER blocked_end_dt=EMPTY_DATE_NUMBER blocked_index=0 ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.FIRST(-1) while (ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.exists(ni6)) loop ( row_cert_status=ANC_ABS_ENTR_CERTS_STATUS_ARR[ni6] if row_cert_status='C' then ( row_update_type=ANC_ABS_ENTR_CERTS_LAST_UPDATE_TYPE_ARR[ni6] row_class_cd=ANC_ABS_CERTS_CLASS_CD_ARR[ni6] row_altcd=ANC_ABS_CERTS_ANC_ABS_CERTIFICATION_F_ALTCD_ARR[ni6] row_rev_start_dt=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[ni6] row_rev_end_dt=trunc(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[ni6]) row_per_cert_id=trunc(ANC_ABS_ENTR_CERTS_PER_CERT_ID_ARR[ni6]) row_per_cert_id_str=to_char(row_per_cert_id) if (not internal_certs.exists(row_altcd)) then ( if (row_per_cert_id_str<>v_IV_UI_PER_CERT_ID) then( blocked_index=blocked_index+1 blocked_start_dt[blocked_index]=row_rev_start_dt blocked_end_dt[blocked_index]=row_rev_end_dt ) ) ) ni6=ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR.NEXT(ni6,-1) ) band1payfactor=0 band2payfactor=100 band1entitlement=0 p_hist_waiting_days_to_serve=0 p_waiting_days_to_serve=0 if (l_linked_absences_exist=1) then ( t_limited_days=migration_waiting_days if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days t_leftover=t_days_to_serve-l_total_qualified_days p_hist_waiting_days_to_serve=t_leftover if p_hist_waiting_days_to_serve < 0 then p_hist_waiting_days_to_serve=0 band1entitlement=p_hist_waiting_days_to_serve ) else ( t_limited_days=FLEX_WAITING_DAYS_INPUT if t_limited_days < 0 then (t_limited_days=0) if t_limited_days >3 then (t_limited_days=3) t_days_to_serve=statutory_waiting_days - t_limited_days band1entitlement=t_days_to_serve ) ssp_weeks_to_go=statutory_week_limit-l_total_ssp_weeks entitlement_days=0 CHANGE_CONTEXTS( PERSON_ID=l_context_person_id, EFFECTIVE_DATE=l_context_effective_date, ABSENCE_TYPE_ID=l_context_absence_type_id, ABSENCE_ENTRY_ID=l_context_absence_entry_id, START_DA",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for employees based on their length of service. Here's the detailed business logic:\n\nThe formula first determines the seniority date based on either the statutory absence service start date or the assignment start date.\nIt calculates the number of service days from the seniority date to the start date of the absence. write a  is then converted into years and months of service.\nBased on the years of service, the formula assigns pay factors and entitlements:\nFor employees with up to 0.33 years of service, the entitlements are set to 22 days at 100% pay and 0 days at 50% pay.\nFor employees with more than 0.33 years and up to 1 year of service, the entitlements are set to 22 days at 100% pay and 43 days at 50% pay.\nFor employees with more than 1 year and up to 2 years of service, the entitlements are set to 43 days at 100% pay and 43 days at 50% pay.\nFor employees with more than 2 years and up to 3 years of service, the entitlements are set to 87 days at 100% pay and 87 days at 50% pay.\nFor employees with more than 3 years and up to 5 years of service, the entitlements are set to 108 days at 100% pay and 108 days at 50% pay.\nFor employees with more than 5 years of service, the entitlements are set to 130 days at 100% pay and 130 days at 50% pay.\nIf the employee has less than 1 year of service, the entitlements are set to 0 days at 100% pay and 0 days at 50% pay.\nThe formula returns the pay factors and entitlements for the two bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_START IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 0 Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) Service_days=DAYS_BETWEEN(IV_START_DATE,l_seniority_date)+1 Year_of_service=Service_days/365 Months_of_service = MONTHS_BETWEEN(IV_START_DATE,l_seniority_date) l_debug = ess_log_write('l_seniority_date= '+ to_char(l_seniority_date)) l_debug = ess_log_write('Year_of_service= '+ to_char(Year_of_service)) l_debug = ess_log_write('Service_days= '+ to_char(Service_days)) IF(Year_of_service > 0 AND Year_of_service <= 0.33) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 22 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 0 ) ELSE IF(Year_of_service > 0.33 AND Year_of_service <= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 22 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service > 1 AND Year_of_service <= 2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 43 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 43 ) ELSE IF(Year_of_service > 2 AND Year_of_service <= 3) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 87 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 87 ) ELSE IF(Year_of_service > 3 AND Year_of_service <= 5) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 108 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 108 ) ELSE IF(Year_of_service > 5) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 130 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 130 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for maternity leave based on the employee's length of service and primary assignment status. Here's the detailed business logic:\n\nThe formula first determines the seniority date based on either the statutory absence service start date or the assignment start date.\nIt calculates the number of service days from the seniority date to the start date of the absence. write a  is then converted into years and weeks of service.\nThe formula adjusts the date to the nearest Monday before 105 days prior to the expected childbirth date.\nBased on the weeks of service, if the employee has more than 26 weeks of service and the primary assignment flag is 'Y', the entitlements are set to 7 days at 100% pay.\nIf the conditions are not met, the entitlements are set to 0 days at 100% pay and 0 days at 50% pay.\nThe formula returns the pay factors and entitlements for the two bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_START_DATE l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-105) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days = DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service = Service_days/365 Weeks_of_service = Year_of_service * 52.143 IF(Weeks_of_service > 26 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 7 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for adoption leave based on the employee's length of service, primary assignment status, and a specific attribute. Here's the detailed business logic:\n\nThe formula first determines the seniority date based on either the statutory absence service start date or the assignment start date.\nIt calculates the number of service days from the seniority date to the start date of the absence. write a  is then converted into years of service.\nThe formula adjusts the date to the nearest Monday before the matching date.\nBased on the years of service, if the employee has at least one year of service and the primary assignment flag is 'Y', the entitlements are determined by checking a specific attribute:\nIf the attribute contains 'Y', the entitlements are set to 56 days at 100% pay, 0 days at 90% pay, 126 days at 50% pay, and 182 days at 0% pay.\nIf the attribute does not contain 'Y', the entitlements are set to 56 days at 100% pay, 0 days at 90% pay, 0 days at 50% pay, and 182 days at 0% pay.\nIf the conditions are not met, the entitlements are set to 0 days at 100% pay, 0 days at 90% pay, 0 days at 50% pay, and 0 days at 0% pay.\nThe formula returns the pay factors and entitlements for the four bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 is ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 IS 'N' DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_MATCHING_DATE(date), IV_ATTRIBUTE_1(text), IV_INFORMATION_DATE1 (date), IV_PLANNEDSTARTDATE (date), IV_PLANNEDENDDATE (date) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 l_debug = ess_log_write(' OAP Entitlement IV_START_DATE = '+to_char(IV_START_DATE)) Service_days=0 l_fte=0 l_contract_fte = 0 l_start_dt='0001/01/01 00:00:00' (date) l_ed_date = IV_START_DATE l_seniority_date ='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_MATCHING_DATE l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>=1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE3 Like '%Y')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 126 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 182 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 56 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 182 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 ) l_debug = ess_log_write('ANC_ABS_ENTRS_ATTRIBUTE3 '+ ANC_ABS_ENTRS_ATTRIBUTE3) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT, BAND4ENTITLEMENT, BAND4PAYFACTOR",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for employees based on their length of service. Here's the detailed business logic:\n\nThe formula first determines the seniority date based on either the statutory absence service start date or the assignment start date.\nIt calculates the number of service days from the seniority date to the start date of the absence. write a  is then converted into years and months of service.\nBased on the years of service, the formula assigns pay factors and entitlements:\nFor employees with up to 0.33 years of service, the entitlements are set to 25 days at 100% pay and 0 days at 50% pay.\nFor employees with more than 0.33 years and up to 1 year of service, the entitlements are set to 25 days at 100% pay and 50 days at 50% pay.\nFor employees with more than 1 year and up to 2 years of service, the entitlements are set to 50 days at 100% pay and 50 days at 50% pay.\nFor employees with more than 2 years and up to 3 years of service, the entitlements are set to 75 days at 100% pay and 75 days at 50% pay.\nFor employees with more than 3 years and up to 15 years of service, the entitlements are set to 100 days at 100% pay and 100 days at 50% pay.\nFor employees with more than 15 years and up to 20 years of service, the entitlements are set to 115 days at 100% pay and 115 days at 50% pay.\nFor employees with more than 20 years of service, the entitlements are set to 138 days at 100% pay and 138 days at 50% pay.\nThe formula returns the pay factors and entitlements for the two bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_TYPE IS ' ' DEFAULT FOR PAYROLL_NAME IS ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PAY_EARN_PERIOD_START IS '0001/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) Service_days=DAYS_BETWEEN(IV_START_DATE,l_seniority_date)+1 Year_of_service=Service_days/365 Months_of_service = MONTHS_BETWEEN(IV_START_DATE,l_seniority_date) l_debug = ess_log_write('PER_ASG_REL_DATE_START '+ to_char(PER_ASG_REL_DATE_START)) l_debug = ess_log_write('ACP_HIRE_DATE '+ to_char(ACP_HIRE_DATE)) l_debug = ess_log_write('PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE '+ to_char(PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE)) l_debug = ess_log_write('Year_of_service '+ to_char(Year_of_service)) IF(Year_of_service > 0 AND Year_of_service <= 0.33) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 0 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 0.33 AND Year_of_service <= 1) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 25 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 50 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 1 AND Year_of_service <= 2) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 50 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 50 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 2 AND Year_of_service <= 3) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 75 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 75 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 3 AND Year_of_service <= 15) THEN ( BAND1PAYFACTOR=100 BAND1ENTITLEMENT = 100 BAND2PAYFACTOR= 50 BAND2ENTITLEMENT = 100 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 15 AND Year_of_service <= 20) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 115 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 115 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) ELSE IF(Year_of_service > 20) THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 138 BAND2PAYFACTOR = 50 BAND2ENTITLEMENT = 138 l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) ) l_debug = ess_log_write('BAND1PAYFACTOR '+ to_char(BAND1PAYFACTOR)) l_debug = ess_log_write('BAND1ENTITLEMENT '+ to_char(BAND1ENTITLEMENT)) l_debug = ess_log_write('BAND2PAYFACTOR '+ to_char(BAND2PAYFACTOR)) l_debug = ess_log_write('BAND2ENTITLEMENT '+ to_char(BAND2ENTITLEMENT)) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the reference date for a rolling forward term based on the start date of an absence. Here's the detailed business logic:\n\nThe formula first determines the month of the absence start date.\nIf the month is between April and December (inclusive), the reference date is set to April 1st of the same year as the absence start date.\nIf the month is between January and March (inclusive), the reference date is set to April 1st of the previous year.\nThe formula returns the calculated reference date.\nIn summary, the formula ensures that the reference date for the rolling forward term is always April 1st, either of the same year or the previous year, depending on the month of the absence start date.\n\n***answer***: INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) l_absence_start=IV_START_DATE Absence_month=to_char(l_absence_start,'MM') If (Absence_month='04') OR (Absence_month='05') OR (Absence_month='06') OR (Absence_month='07') OR (Absence_month='08') OR (Absence_month='09') OR (Absence_month='10') OR (Absence_month='11') OR (Absence_month='12') THEN ( REFERENCEDATE=TO_DATE('01/04/'||to_char((l_absence_start),'YYYY'),'DD/MM/YYYY') ) If (Absence_month='01') OR (Absence_month='02') OR (Absence_month='03') THEN ( Absence_year=ADD_YEARS(l_absence_start,-1) REFERENCEDATE=TO_DATE('01/04/'||to_char(Absence_year,'YYYY'),'DD/MM/YYYY') ) RETURN REFERENCEDATE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for maternity leave based on the employee's length of service and primary assignment status. Here's the detailed business logic:\n\nThe formula first determines the seniority date based on either the statutory absence service start date or the assignment start date.\nIt calculates the number of service days from the seniority date to the start date of the absence. write a  is then converted into years and weeks of service.\nBased on the years of service, if the employee has at least one year of service and the primary assignment flag is 'Y', the entitlements are set to 14 days at 100% pay.\nIf the conditions are not met, the entitlements are set to 0 days at 100% pay and 0 days at 50% pay.\nThe formula returns the pay factors and entitlements for the two bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = IV_START_DATE Service_days = DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service = Service_days/365 Weeks_of_service = Year_of_service * 52.143 IF(Year_of_service >= 1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 14 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 0 BAND2ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the duration of an absence for teachers based on various factors. Here's the detailed business logic:\n\nThe formula first determines the start and end dates and times of the absence period.\nIt checks if the employee has a primary assignment. If not, the duration is set to 0.\nIt calculates the availability of the employee during the absence period.\nIt checks if the absence falls on a term-off day. If it does, the duration is set to 0.\nIf the absence starts on the same date as the absence start date, the duration is set to the absence start duration. Otherwise, it is set to 1 day.\nIf the absence falls on a weekend, the duration is set to 0.\nThe formula rounds the calculated duration to two decimal places and returns it.\nIn summary, the formula ensures that the duration of the absence is accurately calculated based on the employee's availability, term-off days, and primary assignment status.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_LOC_REGION2 IS ' XXXXXXXXXX' DEFAULT FOR IV_ABS_START_DURATION IS 0 DEFAULT FOR IV_ABS_END_DURATION IS 0 DEFAULT FOR IV_ABS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '1900/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_END_TIME(text), IV_ABS_START_DURATION, IV_ABS_END_DURATION, IV_ABS_START_DATE (date), IV_ABS_END_DATE (date) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 DURATION=0 l_primary_flag='X' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') l_debug = ess_log_write('Inside Teachers Duration Formula') l_debug = ess_log_write('IV_ABS_START_DURATION - ' +to_char(IV_ABS_START_DURATION)) l_hr_asg_id = ASG_HR_ASG_ID l_eff_date=ld_period_start_date SET_INPUT ('hr_id', l_hr_asg_id) SET_INPUT ('eff_date', l_eff_date) SET_INPUT ('mode', 'PER_ASG_PRIMARY_FLAG') EXECUTE('XX_GET_HR_DATA') l_primary_flag = GET_OUTPUT('X_OUTPUT_TEXT', l_primary_flag ) l_debug = ess_log_write('l_primary_flag= '+ (l_primary_flag)) ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ld_period_start_date=to_date(to_char(IV_START_DATE,'DD/MM/RRRR')) ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')) l_debug = ess_log_write('P_DAY= '+ to_char(ld_period_start_date,'DD-MM-YYYY')) Term_off = GET_VALUE_SET('BC_PAY_TEACHERS_TERM_OFF_DAYS','|=P_DAY='''||to_char(ld_period_start_date,'DD-MM-YYYY')||'''') Day=GET_DATE_DAY_OF_WEEK(ld_period_start_date) IF (DAY='MON') OR (DAY='TUE') OR (DAY='WED') OR (DAY='THU') OR (DAY='FRI') THEN ( IF Term_off='Y' THEN ( ln_entry_duration_d=0 ) ELSE ( IF IV_START_DATE = IV_ABS_START_DATE THEN ( ln_entry_duration_d = IV_ABS_START_DURATION ) ELSE ln_entry_duration_d=1 ) ) ELSE ( ln_entry_duration_d=0 ) If l_primary_flag ='N' THEN ( ln_entry_duration_d=0 ) l_debug = ess_log_write('IV_START_DATE - ' + to_char(IV_START_DATE)) l_debug = ess_log_write('IV_ABS_START_DATE - ' +to_char(IV_ABS_START_DATE)) l_debug = ess_log_write('ld_period_start_date - ' + to_char(ld_period_start_date)) l_debug = ess_log_write('Term_off - ' + (Term_off)) l_debug = ess_log_write('ln_entry_duration_d - ' +to_char(ln_entry_duration_d)) DURATION = ROUND(ln_entry_duration_d,2) RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for adoption leave based on the employee's length of service, primary assignment status, and a specific attribute. Here's the detailed business logic:\n\nThe formula first determines the seniority date based on either the statutory absence service start date or the assignment start date.\nIt calculates the number of service days from the seniority date to the start date of the absence. write a  is then converted into years of service.\nThe formula adjusts the date to the nearest Monday before 77 days prior to the matching date.\nBased on the years of service, if the employee has at least one year of service and the primary assignment flag is 'Y', the entitlements are determined by checking a specific attribute:\nIf the attribute contains 'Y', the entitlements are set to 28 days at 100% pay, 14 days at 90% pay, 84 days at 50% pay, and 147 days at 0% pay.\nIf the attribute does not contain 'Y', the entitlements are set to 28 days at 100% pay, 14 days at 90% pay, 0 days at 50% pay, and 147 days at 0% pay.\nIf the conditions are not met, the entitlements are set to 0 days at 100% pay, 0 days at 90% pay, 0 days at 50% pay, and 0 days at 0% pay.\nThe formula returns the pay factors and entitlements for the four bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_MATCHING_DATE IS '0001/01/01 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_1 is ' ' DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE3 IS 'N' DEFAULT FOR PER_ASG_PRIMARY_ASSIGNMENT_FLAG IS 'X' INPUTS ARE IV_START_DATE(date), IV_MATCHING_DATE(date), IV_ATTRIBUTE_1(text), IV_INFORMATION_DATE1 (date), IV_PLANNEDSTARTDATE (date), IV_PLANNEDENDDATE (date) BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 l_debug = ess_log_write(' OAP Entitlement IV_START_DATE = '+to_char(IV_START_DATE)) Service_days=0 l_fte=0 l_contract_fte = 0 l_start_dt='0001/01/01 00:00:00' (date) l_ed_date = IV_START_DATE l_seniority_date ='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_MATCHING_DATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN( l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>=1 AND PER_ASG_PRIMARY_ASSIGNMENT_FLAG = 'Y') THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE3 Like '%Y')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 ) l_debug = ess_log_write('ANC_ABS_ENTRS_ATTRIBUTE3 '+ ANC_ABS_ENTRS_ATTRIBUTE3) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT, BAND4ENTITLEMENT, BAND4PAYFACTOR",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for maternity leave based on the employee's length of service and a specific attribute. Here's the detailed business logic:\n\nThe formula first determines the seniority date based on either the statutory absence service start date or the assignment start date.\nIt calculates the number of service days from the seniority date to the start date of the absence. write a  is then converted into years of service.\nThe formula adjusts the date to the nearest Monday before 77 days prior to the expected childbirth date.\nBased on the years of service, if the employee has at least one year of service, the entitlements are determined by checking a specific attribute:\nIf the attribute contains 'Y', the entitlements are set to 28 days at 100% pay, 14 days at 90% pay, 84 days at 50% pay, and 147 days at 0% pay.\nIf the attribute does not contain 'Y', the entitlements are set to 28 days at 100% pay, 14 days at 90% pay, 0 days at 50% pay, and 147 days at 0% pay.\nIf the conditions are not met, the entitlements are set to 0 days at 100% pay, 0 days at 90% pay, 0 days at 50% pay, and 0 days at 0% pay.\nThe formula returns the pay factors and entitlements for the four bands based on these calculations.\n\n***answer***: DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (date) DEFAULT FOR IV_START_DATE is '0001/01/01 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE1 IS ' ' DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE2 IS 'N' INPUTS ARE IV_START_DATE(date), IV_EXPECTEDCHILDBIRTHDATE(date), IV_PLANNEDSTARTDATE, IV_PLANNEDENDDATE BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 Service_days=0 l_start_dt='0001/01/01 00:00:00' (date) IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE ) l_Date = ADD_DAYS(IV_EXPECTEDCHILDBIRTHDATE,-77) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) l_input_date = IV_START_DATE While(l_Day<>'MON') LOOP ( l_Date = ADD_DAYS(l_date,-1) l_Day = GET_DATE_DAY_OF_WEEK(l_Date) ) Service_days=DAYS_BETWEEN(l_Date ,l_seniority_date) Year_of_service=Service_days/365 IF(Year_of_service>1) OR (Year_of_service=1) THEN ( IF (ANC_ABS_ENTRS_ATTRIBUTE2 Like '%Y%')THEN ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 84 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 28 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 14 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 147 ) ) ELSE ( BAND1PAYFACTOR = 100 BAND1ENTITLEMENT = 0 BAND2PAYFACTOR = 90 BAND2ENTITLEMENT = 0 BAND3PAYFACTOR = 50 BAND3ENTITLEMENT = 0 BAND4PAYFACTOR = 0 BAND4ENTITLEMENT = 0 ) RETURN BAND1PAYFACTOR, BAND1ENTITLEMENT, BAND2PAYFACTOR, BAND2ENTITLEMENT, BAND3PAYFACTOR, BAND3ENTITLEMENT, BAND4PAYFACTOR, BAND4ENTITLEMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the pay factors and entitlements for paternity leave based on the employee's length of service and primary assignment status. Here's the detailed business logic:\n\nThe formula first determines the seniority date based on either the statutory absence service start date or the assignment start date.\nIt calculates the number of service days from the seniority date to the start date of the absence. write a  is then converted into years of service.\nBased on the years of service, if the employee has at least one year of service and the primary assignment flag is 'Y', the entitlements are set to 14 days at 100% pay.\nIf the conditions are not met, the entitlements are set to 0 days at 100% pay and 0 days at 50% pay.\nThe formula returns the pay factors and entitlements for the two bands based on these calculations.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_early_birth_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) l_awe_factor = 1 l_calculated_awe = 0 l_awe=0 l_ret_bal=0 LOC_API_SKIP = 'N' l_chk_payroll_tfr = 'Y' l_skip_payroll_trf_dbi = 'N' l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' l_create_diff_payrolls_cert = 'N' l_cert_index = 1 band1name = 'Band1Pay' band1payfactor = 100 band1entitlement = 273 band2name = 'Band2Pay' band2payfactor = 0 band2entitlement = 91 l_cert_id_being_changed = IV_UI_ABS_CERT_ID l_cert_status = IV_UI_CERT_STATUS l_altcd_of_changed_cert = 'XYZ' CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER IF l_cert_id_being_changed != ' ' THEN ( l_altcd_of_changed_cert = GET_VALUE_SET('ORA_HRX_GB_CERT_ALTCD' ,'|=CURRENT_CERT_ID='||l_cert_id_being_changed ) ) l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_qweek) is = '|| to_char(trunc(l_qweek))) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_complete_qweek) is = '|| to_char(trunc(l_complete_qweek))) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_period_start_date = ORA_HRX_GB_PAY_PERIOD_START l_period_end_date = ORA_HRX_GB_PAY_PERIOD_END IF l_awe_eff_date = l_period_end_date THEN ( l_relevant_period_end_date = l_period_end_date l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ELSE ( l_relevant_period_end_date = ADD_DAYS( l_period_start_date,-1) l_relevant_period_start_date = ADD_DAYS(l_relevant_period_end_date, -55) ) ) IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( l_rel_period_end_for_awe_calc = l_relevant_period_end_date CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_start_date)) ( l_rel_period_start_for_awe_calc = ORA_HRX_GB_PAY_PERIOD_START ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_curr_prd_end = ORA_HRX_GB_PAY_PERIOD_END IF (l_complete_qweek = l_curr_prd_end ) THEN l_rel_period_end_for_awe_calc = l_curr_prd_end ELSE l_rel_period_end_for_awe_calc = ADD_DAYS ( l_curr_prd_start, -1) l_56_days_prior_date = ADD_DAYS( l_rel_period_end_for_awe_calc, -55) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_56_days_prior_date)) ( l_curr_prd_start = ORA_HRX_GB_PAY_PERIOD_START l_rel_period_start_for_awe_calc = l_curr_prd_start ) ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_relevant_period_end_date)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_relevant_period_end_date,1) l_awe_eff_date = l_relevant_period_end_date_mod ) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_rel_period_end_for_awe_calc) is = '|| to_char(trunc(l_rel_period_end_for_awe_calc))) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0 ) l_dummy = ess_log_write( 'MAT_Entitlement >> get context payroll is l_payroll_id = '|| to_char(l_payroll_id)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE l_dummy = ess_log_write( 'MAT_Entitlement >> l_paydate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'MAT_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'MAT_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 1 = ' ||l_insuff_info_cert) ) ELSE ( IF (l_seniority_date > l_relevant_period_start_date) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 2 = ' ||l_insuff_info_cert) ) ) ELSE ( if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) ) ) ) ) l_calculated_awe = l_awe l_dummy = ess_log_write( 'MAT_Entitlement >> l_calculated_awe = ' ||to_char(l_calculated_awe)) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_length_of_service < 25 ) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Maximum Weeks Paid')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Maximum Weeks Paid' CERT_COMMENTS[l_cert_index] = 'Payments completed for the maximum number of weeks payable' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF (l_complete_qweek > PER_ASG_REL_ACTUAL_TERMINATION_DATE) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_EMPLOYED_QWEEK' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Not Employed in Qualifying Week')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Not Employed in Qualifying Week' CERT_COMMENTS[l_cert_index] = 'The employee was not employed in the qualifying week.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) ) l_days_bef = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 l_days_after = mod(l_days_bef,7) IF( l_days_after >= 1) THEN ( l_create = 'N' l_cert_start_date = trunc(add_days(l_end_date, (l_days_after*-1) + 1)) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LESSTHAN_7DAYS' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Bereavement Leave\n\nMax 3 days allowed.\nPaternity Leave\n\nMax 10 days in the past one year.\nMaternity Leave\n\nAllowed only after probation and 80 days of service.\nDuration:\n182 days if the employee has less than 2 children.\n84 days if the employee has 2 or more children.\nMarriage Leave\n\nRequires marriage date input.\nCan only be taken within 5 days before or after the marriage date.\nUnpaid Leave\n\nAllowed only if Annual Leave balance is zero.\nMax 15 days.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_PER_CERT_ID is ' ' DEFAULT FOR IV_UI_ABS_CERT_ID is ' ' DEFAULT FOR IV_UI_CERT_TYPE is ' ' DEFAULT FOR IV_UI_CERT_REVPAYSTART_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAYEND_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_UI_CERT_REVPAY_FACTOR is 0 DEFAULT FOR IV_UI_CERT_CREATION_TYPE is ' ' DEFAULT FOR IV_UI_CERT_STATUS is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_STATUS_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_STATUS_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_INFORMATION1_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_INFORMATION1_ARR is ' ' DEFAULT FOR ANC_ABS_CERTS_NAME_ARR is EMPTY_TEXT_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_CERTS_NAME_ARR is ' ' DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is EMPTY_DATE_NUMBER DEFAULT_DATA_VALUE for ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR is '4712/12/31 00:00:00' (DATE) DEFAULT FOR PAYROLL_LICENSE IS 'XXX' DEFAULT for IV_INFORMATION_NUMBER1 IS 0 DEFAULT FOR PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_ASG_LIST_COUNT IS 1 DEFAULT FOR LOC_NUMBER_ARRAY IS EMPTY_NUMBER_TEXT DEFAULT FOR LOC_STRING_ARRAY IS EMPTY_TEXT_TEXT DEFAULT FOR LOC_DATE_ARRAY IS EMPTY_DATE_TEXT DEFAULT FOR LOC_API_SKIP is 'N' DEFAULT for PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR is 'N' DEFAULT FOR PAY_PRIMARY_PAYROLL_NAME_NF is 'XXX' DEFAULT FOR ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS is 0 DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_DEFAULT_PAYDATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_TIME,IV_END_TIME,IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_UI_PER_CERT_ID,IV_UI_ABS_CERT_ID,IV_UI_CERT_TYPE,IV_UI_CERT_REVPAYSTART_DATE,IV_UI_CERT_REVPAYEND_DATE,IV_UI_CERT_REVPAY_FACTOR,IV_UI_CERT_CREATION_TYPE,IV_UI_CERT_STATUS,IV_INFORMATION_NUMBER1 l_dummy = ess_log_write( 'MAT_Entitlement >> Start of Formula') l_trunc_eff_date = TRUNC(GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date))) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_expected_child_birth = IV_ACTUALCHILDBIRTHDATE ) l_expected_child_birth = IV_EXPECTEDCHILDBIRTHDATE CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE WAS DEFAULTED THEN ( l_seniority_date = PER_ASG_REL_DATE_START ) ELSE ( l_seniority_date = PER_PPS_LEG_DDF_GB_STAT_ABS_SER_START_DATE) ) l_early_birth_indicator = 'N' l_absence_type = 'ORA_HRX_GB_SM' l_perform_awe_check = 'Y' l_rate_def_name = 'ORA_HRX_GB_ABSENCE_CHILDBIRTH_56DAY' l_early_birth_rate_def_name = 'ORA_HRX_GB_ABSENCE_NORMAL_56DAY' l_awe_formula = 'UK_ABSENCES_AWE_OVERRIDE_FORMULA' l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) l_awe_factor = 1 l_calculated_awe = 0 l_awe=0 l_ret_bal=0 LOC_API_SKIP = 'N' l_chk_payroll_tfr = 'Y' l_skip_payroll_trf_dbi = 'N' l_payroll_name_a = 'ABC' l_payroll_name_b = 'ABC' l_create_diff_payrolls_cert = 'N' l_cert_index = 1 band1name = 'Band1Pay' band1payfactor = 100 band1entitlement = 273 band2name = 'Band2Pay' band2payfactor = 0 band2entitlement = 91 l_cert_id_being_changed = IV_UI_ABS_CERT_ID l_cert_status = IV_UI_CERT_STATUS l_altcd_of_changed_cert = 'XYZ' CERT_NAMES=EMPTY_TEXT_NUMBER CERT_START_DATES=EMPTY_DATE_NUMBER CERT_END_DATES=EMPTY_DATE_NUMBER CERT_COMMENTS=EMPTY_TEXT_NUMBER IF l_cert_id_being_changed != ' ' THEN ( l_altcd_of_changed_cert = GET_VALUE_SET('ORA_HRX_GB_CERT_ALTCD' ,'|=CURRENT_CERT_ID='||l_cert_id_being_changed ) ) l_deemed_worker = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( IF PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR WAS NOT DEFAULTED THEN ( l_deemed_worker = PER_PERSON_LEGISLATIVE_DATA_LEG_DDF_GB_ORA_HRX_GB_OFF_PAY_WKR ) ) IF l_deemed_worker = 'Y' THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORX_HRX_GB_OFFPAYROLL_WORKER' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Off-payroll Worker Subject to 2020 Rules')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules' CERT_COMMENTS[l_cert_index] = 'Off-payroll Worker Subject to 2020 Rules is not eligible for statutory absence payment.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 RETURN band1name, band1payfactor, band1entitlement,band2name, band2payfactor, band2entitlement,CERT_NAMES,CERT_START_DATES,CERT_END_DATES,CERT_COMMENTS,LOC_NUMBER_ARRAY ,LOC_STRING_ARRAY ,LOC_DATE_ARRAY, LOC_API_SKIP ) ) l_emplmt_start_date = PER_ASG_REL_DATE_START l_day_of_week = GET_DATE_DAY_OF_WEEK(l_expected_child_birth) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_expected_child_birth) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_expected_child_birth,-6)) l_qweek = add_days(l_ewc,-105) l_complete_qweek = add_days(l_qweek,6) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_qweek) is = '|| to_char(trunc(l_qweek))) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_complete_qweek) is = '|| to_char(trunc(l_complete_qweek))) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_actual_birth_date = IV_ACTUALCHILDBIRTHDATE IF ( l_actual_birth_date (date) < l_complete_qweek (date)) THEN ( dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Early birth indicator is Y') l_early_birth_indicator = 'Y' l_day_of_week = GET_DATE_DAY_OF_WEEK(l_actual_birth_date) IF(l_day_of_week = 'SUN') THEN ( l_ewc = l_actual_birth_date) ELSE IF(l_day_of_week = 'MON') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-1)) ELSE IF (l_day_of_week = 'TUE') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-2)) ELSE IF (l_day_of_week = 'WED') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-3)) ELSE IF (l_day_of_week = 'THU') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-4)) ELSE IF (l_day_of_week = 'FRI') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-5)) ELSE IF (l_day_of_week = 'SAT') THEN (l_ewc = ADD_DAYS(l_actual_birth_date,-6)) IF (l_day_of_week = 'SAT' ) THEN l_ewc = l_actual_birth_date ELSE l_ewc = ADD_DAYS (l_ewc , -1) l_rate_def_name = l_early_birth_rate_def_name ) ) l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01' (date)) l_license = 'XXX' l_license = PAYROLL_LICENSE l_bal_periodicity = 'UNK' l_lel = 0 l_awe_eff_date = l_ewc CHANGE_CONTEXTS(EFFECTIVE_DATE=l_trunc_eff_date) ( l_rel_asg_date_start = PER_ASG_REL_DATE_START ) l_insuff_info_cert = 'N' l_altawe_cert = 'N' l_awe_lel_chk_pass = 'N' l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 l_override_awe = 0 IF IV_INFORMATION_NUMBER1 WAS DEFAULTED THEN ( l_override_awe = 0 ) ELSE ( l_override_awe = IV_INFORMATION_NUMBER1 ) l_char_lel='0' l_char_lel = GET_VALUE_SET('ORA_HRX_GB_GET_WEEKLY_LEL','|=CURRENT_EFFDATE='''||TO_CHAR(trunc(l_eff_date),'YYYY/MM/DD')||'''') l_lel = to_number(l_char_lel) IF ((l_license <> 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( IF l_override_awe = 0 THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') OR (l_absence_type = 'ORA_HRX_GB_SS') THEN ( IF IS_EXECUTABLE(l_awe_formula) THEN ( SET_INPUT ('IV_ABS_TYPE', l_absence_type) SET_INPUT ('IV_ABS_START_DATE', l_start_date) SET_INPUT ('IV_ABS_END_DATE', l_end_date) SET_INPUT ('IV_ABS_QUAL_WEEK',l_qweek ) SET_INPUT ('IV_ABS_EDC',l_expected_child_birth ) l_pay_asg_id = PER_ASG_PAYROLL_INFO_PAYROLL_ASSIGNMENT_ID SET_INPUT ('IV_PAY_ASG_ID', l_pay_asg_id) EXECUTE(l_awe_formula) l_override_awe = GET_OUTPUT('OP_AWE_OVERRIDE', 0) ) ) ) IF l_override_awe <> 0 THEN ( l_altawe_cert = 'Y' ) ) IF ((l_license = 'PAY') AND ( l_perform_awe_check = 'Y')) THEN ( l_awe=0 IF (l_override_awe <> 0) AND ((l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB')) THEN ( l_altawe_cert = 'Y' ) ELSE ( IF (l_chk_payroll_tfr = 'Y') THEN ( IF (l_early_birth_indicator = 'Y') THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement Early Birth >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_complete_qweek)) ( l_relevant_period_end_date = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_relevant_period_end_date_56 = ADD_DAYS(l_relevant_period_end_date, -56) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_relevant_period_end_date_56)) ( l_pay_date_56 = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE ) l_relevant_period_start_date = ADD_DAYS(l_pay_date_56,1) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_pay_date_56 '||to_char(l_pay_date_56)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_relevant_period_end_date '||to_char(l_relevant_period_end_date)) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_relevant_period_start_date '||to_char(l_relevant_period_start_date)) l_rel_period_start_for_awe_calc = l_relevant_period_start_date l_rel_period_end_for_awe_calc = l_relevant_period_end_date ) If l_rel_asg_date_start > l_rel_period_end_for_awe_calc THEN (l_skip_payroll_trf_dbi = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check not to be performed as ASG start later than relevant period end date') ) ELSE IF l_rel_asg_date_start > l_rel_period_start_for_awe_calc THEN (l_rel_period_start_for_awe_calc = l_rel_asg_date_start dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check . ASG start date is later than relevant period start date') ) dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Payroll Name Check Dates are : ' || to_char(l_rel_period_start_for_awe_calc) ||' and ' || to_char(l_rel_period_end_for_awe_calc)) IF l_skip_payroll_trf_dbi = 'N' THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_b = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_b : ' || l_payroll_name_b) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( IF ( PAY_PRIMARY_PAYROLL_NAME_NF WAS NOT DEFAULTED) THEN l_payroll_name_a = PAY_PRIMARY_PAYROLL_NAME_NF dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> l_payroll_name_a : ' || l_payroll_name_a) ) IF ( l_payroll_name_a <> l_payroll_name_b) THEN ( l_create_diff_payrolls_cert = 'Y' dummy = ESS_LOG_WRITE ( 'MAT_Entitlement >> Create Different Payrolls certificate is Y') ) ) if ( l_create_diff_payrolls_cert = 'Y' ) then ( l_create = 'N' IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_PAYROLL_CHANGED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Payroll changed during the relevant period')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Payroll changed during the relevant period' CERT_COMMENTS[l_cert_index] = 'AWE may be incorrect as payroll has changed during the relevant period.' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) ) IF (l_early_birth_indicator = 'Y') AND ( trunc(l_ewc) = trunc(l_rel_period_end_for_awe_calc)) THEN ( l_relevant_period_end_date_mod = ADD_DAYS(l_rel_period_end_for_awe_calc,1) l_awe_eff_date = l_relevant_period_end_date_mod ) l_dummy = ess_log_write( 'MAT_Entitlement >> trunc(l_rel_period_end_for_awe_calc) is = '|| to_char(trunc(l_rel_period_end_for_awe_calc))) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0 ) l_dummy = ess_log_write( 'MAT_Entitlement >> get context payroll is l_payroll_id = '|| to_char(l_payroll_id)) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_end_for_awe_calc)) ( l_paydate = ORA_HRX_GB_ABS_PAY_PERIOD_REG_PROC_DATE l_dummy = ess_log_write( 'MAT_Entitlement >> l_paydate for end of relevant period is = '|| to_char(l_paydate )) ) CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_paydate)) ( l_no_of_payroll_runs = ORA_HRX_GB_ABS_COUNT_PAYROLL_RUNS l_dummy = ess_log_write( 'MAT_Entitlement >> l_no_of_payroll_runs is = '|| to_char(l_no_of_payroll_runs)) ) IF ( l_no_of_payroll_runs = 0) THEN ( l_insuff_info_cert = 'Y' ) IF ( l_insuff_info_cert = 'N' ) THEN ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_awe_eff_date)) ( call_formula('RATE ENGINE' ,l_rate_def_name > 'rate_name' ,l_ret_bal < 'out_amount' default 0 ,l_bal_periodicity < 'out_periodicity' default 'UNKNOWN' ) l_dummy = ess_log_write( 'MAT_Entitlement >> Rate Engine return is l_ret_bal is = '|| to_char(l_ret_bal)) ) ) l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) l_awe_factor = 1 IF (l_ret_bal = 0) THEN ( l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 1 = ' ||l_insuff_info_cert) ) ELSE ( IF (l_seniority_date > l_rel_period_start_for_awe_calc) THEN ( IF (l_absence_type = 'ORA_HRX_GB_SM') OR (l_absence_type = 'ORA_HRX_GB_SPA') OR (l_absence_type = 'ORA_HRX_GB_SPB') OR (l_absence_type = 'ORA_HRX_GB_SA') OR (l_absence_type = 'ORA_HRX_GB_SPLA') OR (l_absence_type = 'ORA_HRX_GB_SPLB') THEN ( l_insuff_info_cert = 'Y' l_dummy = ess_log_write( 'MAT_Entitlement >>l_insuff_info_cert 2 = ' ||l_insuff_info_cert) ) ) ELSE ( CHANGE_CONTEXTS(EFFECTIVE_DATE=trunc(l_rel_period_start_for_awe_calc)) ( l_src_periodicity = UPPER(PAYROLL_PERIOD_TYPE) ) if (l_src_periodicity = 'YEAR') then (l_awe_factor = 1/52) else if (l_src_periodicity = 'SEMI-YEAR') then (l_awe_factor = 2/52) else if (l_src_periodicity = 'QUARTER') then (l_awe_factor = 4/52) else if (l_src_periodicity = 'WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'BI-WEEK') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'LUNAR MONTH') then (l_awe_factor = 1/8) else if (l_src_periodicity = 'CALENDAR MONTH') then (l_awe_factor = 6/52) else if (l_src_periodicity = 'BI-MONTH') then (l_awe_factor = 6/52) l_awe = (l_ret_bal * l_awe_factor) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) ) ) ) ) l_calculated_awe = l_awe l_dummy = ess_log_write( 'MAT_Entitlement >> l_calculated_awe = ' ||to_char(l_calculated_awe)) IF l_altawe_cert = 'Y' THEN ( l_awe = l_override_awe ) l_dummy = ess_log_write( 'MAT_Entitlement >> l_awe = ' ||to_char(l_awe)) IF (l_awe >= l_lel) AND (l_insuff_info_cert = 'N')THEN ( l_awe_lel_chk_pass = 'Y' ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'N') AND ( l_perform_awe_check = 'Y') then ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_LEL_NOT_REACHED' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'LEL Not Reached')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'LEL Not Reached' CERT_COMMENTS[l_cert_index] = 'The employee must have earnings more than or equal to the Lower Earnings Limit' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) if (l_awe_lel_chk_pass = 'N') and (l_insuff_info_cert = 'Y') AND ( l_perform_awe_check = 'Y') then ( IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_INSUFF_INFO_AWE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Insufficient information to perform LEL check')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Insufficient information to perform LEL check' CERT_COMMENTS[l_cert_index] = 'Insufficient information available to calculate Average Weekly Earnings' CERT_START_DATES[l_cert_index] = l_start_date CERT_END_DATES[l_cert_index] = l_end_date l_cert_index = l_cert_index + 1 ) ) l_no_of_days = DAYS_BETWEEN(l_complete_qweek(date),l_seniority_date) l_length_of_service=Floor(l_no_of_days/7) IF ( l_no_of_days < 176) THEN ( l_create = 'N' l_cert_start_date = l_start_date l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_NOT_ENOUGH_SERVICE' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date) and (TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_END_DT_ARR[l_array_index]) = TRUNC(l_cert_end_date)) and (ANC_ABS_ENTR_CERTS_STATUS_ARR[l_array_index] = 'V') and (ANC_ABS_CERTS_NAME_ARR[l_array_index]= 'Employed Less Than 26 Weeks')) THEN ( l_create = 'N' ) l_array_index=ANC_ABS_CERTS_NAME_ARR.NEXT(l_array_index,-1) ) ) ) IF ( l_create = 'Y' ) THEN ( CERT_NAMES[l_cert_index] = 'Employed Less Than 26 Weeks' CERT_COMMENTS[l_cert_index] = 'The employee must be employed for more than 26 weeks.' CERT_START_DATES[l_cert_index] = l_cert_start_date CERT_END_DATES[l_cert_index] = l_cert_end_date l_cert_index = l_cert_index + 1 ) ) l_days_of_absence = DAYS_BETWEEN(trunc(l_end_date),trunc(l_start_date)) +1 IF (l_days_of_absence > 273) THEN ( l_create = 'N' l_cert_start_date = add_days(l_start_date,273) l_cert_end_date = l_end_date IF ( l_altcd_of_changed_cert = 'XYZ' ) THEN l_create = 'Y' ELSE ( IF ( l_altcd_of_changed_cert = 'ORA_HRX_GB_MAXIMUM_WEEKS_PAID' ) THEN l_create = 'N' ELSE IF ( l_altcd_of_changed_cert != 'XYZ' ) THEN ( l_create = 'Y' l_array_index=ANC_ABS_CERTS_NAME_ARR.FIRST(-1) while (ANC_ABS_CERTS_NAME_ARR.exists(l_array_index)) loop ( if(TRUNC(ANC_ABS_ENTR_CERTS_REV_PAY_START_DT_ARR[l_array_index])= TRUNC(l_cert_start_date)",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the formula for CIMB_ANNUAL_LEAVE_ACCRUAL?\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_PLANENROLLMENTENDDATE , IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_PLANENROLLMENTENDDATE , IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ) ) mn=mn+1 ) ) ELSE( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) + 1 l_no_of_days2 = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, l_band_chg_dt1) + 1 ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to determine the enrollment end date for an absence plan. The logic checks if the effective date plus one day is before the actual termination date. If it is, the enrollment end date is set to the effective date. Otherwise, it is set to one day before the effective date. write a  formula is used to ensure that the enrollment end date is correctly calculated based on the effective date and the termination date.\n\n***answer***: DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'Worker' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) EffDt = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) IF ADD_DAYS(EffDt,1) < PER_ASG_REL_ACTUAL_TERMINATION_DATE THEN enrollmentEndDate = EffDt ELSE enrollmentEndDate = ADD_DAYS(EffDt,-1) RETURN enrollmentEndDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the monthly accrual for an absence plan by considering band changes and excluding Unpaid, Maternity, Emergency, and Hajj Leave days. It first determines the balance of the annual leave plan at the end of the previous year. The accrual for the current period is then calculated, ensuring that it does not exceed 6 days. The formula returns the calculated accrual and any necessary adjustments. write a  ensures that the monthly accrual is accurately prorated based on band changes and restricted for the specified leave types.\n\n***answer***: DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_ann_plan_name = 'Annual Leave Plan' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) accrual = 0 l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) l_acrl_balance_year = 0 change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_ann_plan_name) ) l_log =ess_log_write('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)) accrual = LEAST(6,l_acrl_balance_year) l_log =ess_log_write('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)||'ACCRUAL'||TO_CHAR(accrual)) Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to validate annual leave requests for CIMB NIAGA employees. Here's the detailed calculation logic:\n\nProbation End Date Check: If the system date is after the probation end date, the leave request is valid. Otherwise, it is invalid, and an error message is returned.\n\nDecimal Duration Check: If the total duration of the leave request has a decimal part, the leave request is invalid, and an error message is returned.\n\nBlock Leave Validation: The formula checks for overlapping block leave entries and ensures that there are no subsequent block leave entries within one day of the current leave request. If there are, the leave request is invalid, and an error message is returned.\n\nNew Joiner Check: If the employee joined in April or later of the current year and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\nAge Check: If the employee is 54 years or older, the leave request is valid.\n\nTermination Date Check: If the employee has an actual termination date, the leave request is valid.\n\nGrade and Year Band Calculation: The formula calculates the grade band and year band based on the employee's grade and hire year.\n\nBlock Leave Accrual Calculation: The formula retrieves the block leave accrual value from a table based on the grade band and year band.\n\nCurrent and Previous Duration Calculation: The formula calculates the total duration of block leave taken so far and adds the current leave request duration to it.\n\nBlock Leave Accrual Check: If the total block leave duration exceeds the block leave accrual value, the leave request is valid. Otherwise, the formula checks the annual leave balance and ensures that the remaining balance is sufficient for the leave request. If not, the leave request is invalid, and an error message is returned.\n\nwrite a  ensures that the annual leave requests are validated based on probation end date, decimal duration, block leave rules, new joiner status, age, termination date, grade, and leave balance.\n\n***answer***: DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS ' ' DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_hire_month=to_number(to_char(PER_ASG_REL_DATE_START,'MM')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' IF (PER_ASG_DATE_PROBATION_END WAS NOT DEFAULTED) THEN ( if (l_sys_date > l_prob_end_date) then ( VALID = 'Y' ) ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_PROB_END_DT_MISSING' RETURN VALID, ERROR_MESSAGE ) ) l_dur=0 l_dur=IV_TOTALDURATION floored_accrual = floor(l_dur) decimal_accrual = l_dur - floored_accrual IF (decimal_accrual > 0) THEN ( VALID='N' ERROR_MESSAGE='CIMB_NIAGA_DECIMAL_ERROR' RETURN VALID,ERROR_MESSAGE ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave' ) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54) THEN ( VALID = 'Y' RETURN VALID ) IF(PER_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED) THEN ( VALID = 'Y' RETURN VALID ) IF(l_grade_name LIKE 'G3%') THEN l_grade_band='G3' IF(l_grade_name LIKE 'U1%') THEN l_grade_band='U1' IF(l_grade_name LIKE 'U2%') THEN l_grade_band='U2' IF(l_grade_name LIKE 'U3%') THEN l_grade_band='U3' IF(l_grade_name LIKE 'U4%') THEN l_grade_band='U4' IF(l_grade_name LIKE 'U5%') THEN l_grade_band='U5' IF(l_grade_name LIKE 'U6%') THEN l_grade_band='U6' IF(l_grade_name LIKE 'U7%') THEN l_grade_band='U7' IF(l_grade_name LIKE 'U8%') THEN l_grade_band='U8' IF(l_grade_name LIKE 'U9%') THEN l_grade_band='U9' IF(l_grade_name LIKE 'U10%') THEN l_grade_band='U10' IF(l_grade_name LIKE 'U11%') THEN l_grade_band='U11' IF(l_grade_name LIKE 'MT%') THEN l_grade_band='MT' IF(l_hire_year+10 <=to_number(to_char(IV_START_DATE,'YYYY'))) THEN ( l_year_band='BLK_10' ) ELSE IF(l_hire_year+4 <=to_number(to_char(IV_START_DATE,'YYYY'))) THEN ( l_year_band='BLK_4_10' ) ELSE ( l_year_band='BLK_1_4' ) L_blk_accrual = TO_NUMBER(GET_TABLE_VALUE('CIMB_ID_ANNUAL_LEAVE',l_grade_name,l_year_band,'0')) l_blk_curr_prev_dur = l_abs_duration + IV_TOTALDURATION l_asg_cat=' ' IF (l_absence_reason = 'Block Leave' AND l_blk_curr_prev_dur >= L_blk_accrual) then ( VALID = 'Y' RETURN VALID ) ELSE ( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, PERSON_ID = l_person_id, EFFECTIVE_DATE = ld_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_ann_bal = GET_PLAN_BALANCE('Annual Leave') l_asg_cat = PER_ASG_EMPLOYMENT_CATEGORY ) if (count = 1) then ( l_ann_bal = l_ann_bal + l_duration ) l_curr_bal = l_ann_bal - IV_TOTALDURATION l_block_minus=L_blk_accrual-l_blk_curr_prev_dur IF(l_block_minus<0) THEN ( l_block_minus=0 ) if (l_curr_bal>0 AND l_curr_bal <= l_block_minus AND l_absence_reason = 'Non Block Leave' AND l_blk_curr_prev_dur < L_blk_accrual) then ( if (l_abs_duration < L_blk_accrual) then ( l_years_contract=(to_number(to_char(PER_ASG_PROJECTED_ASSIGNMENT_END_DATE,'YYYY'))-l_hire_year) IF(l_asg_cat='CONTRACT' AND PER_ASG_PROJECTED_ASSIGNMENT_END_DATE WAS NOT DEFAULTED) THEN ( VALID = 'Y' ) ELSE IF(l_asg_cat='PERMANENT' AND l_hire_year=to_number(to_char(l_start_date,'YYYY')) AND l_hire_month>=4) THEN ( VALID = 'Y' ) ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG' RETURN VALID, ERROR_MESSAGE ) ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to validate annual leave requests for Cambodia employees. Here's the detailed calculation logic:\n\nProbation End Date Check: If the leave start date is before the probation end date, the formula calculates the earned leave days based on the initial balance and the number of completed months. If the requested leave duration exceeds the earned days, the leave request is invalid, and an error message is returned.\n\nOverlap Check: The formula checks if the leave request overlaps between two calendar years. If it does and the employee is not on a contract, the leave request is invalid, and an error message is returned.\n\nBalance Check: If the leave end date is within the current year and the remaining balance after the leave request is less than zero, the leave request is invalid, and an error message is returned.\n\nFuture Absence Check: If the leave reason is not \"Emergency Leave\" and the leave start date is more than two days in advance, the formula checks the next working day. If the next working day is after the leave start date, the leave request is invalid, and an error message is returned.\n\nHalf-Day Check: If the leave duration is not a multiple of 0.5, the leave request is invalid, and an error message is returned.\n\nCompulsory Leave Check: The formula checks if the leave reason is \"Compulsory Leave\" and the total duration is less than 5 days. If so, the leave request is invalid, and an error message is returned. If the leave end date is in the next year and the remaining balance for the next year is less than zero, the leave request is invalid, and an error message is returned. If the total duration is 5 days or more and the leave reason is not \"Compulsory Leave,\" the leave request is invalid, and a warning message is returned.\n\nwrite a  ensures that the annual leave requests are validated based on probation end date, overlap between calendar years, leave balance, future absence rules, half-day increments, and compulsory leave requirements.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 0 l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_union = GET_VALUE_SET('CIMB_GET_UNION','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan') l_plan_name = 'Annual Leave Plan' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 1 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance_emp) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance_emp),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_comp_limit = 5 IF IV_TOTALDURATION < l_comp_limit AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF IV_END_DATE > l_year_end_date AND (0079657 - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= l_comp_limit AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to validate annual leave requests for Cambodia employees. Here's the detailed calculation logic:\n\nProbation End Date Check: If the leave start date is before the probation end date, the formula calculates the earned leave days based on the initial balance and the number of completed months. If the requested leave duration exceeds the earned days, the leave request is invalid, and an error message is returned.\n\nOverlap Check: The formula checks if the leave request overlaps between two calendar years. If it does and the employee is not on a contract, the leave request is invalid, and an error message is returned.\n\nBalance Check: If the leave end date is within the current year and the remaining balance after the leave request is less than zero, the leave request is invalid, and an error message is returned.\n\nFuture Absence Check: If the leave reason is not \"Emergency Leave\" and the leave start date is more than two days in advance, the formula checks the next working day. If the next working day is after the leave start date, the leave request is invalid, and an error message is returned.\n\nHalf-Day Check: If the leave duration is not a multiple of 0.5, the leave request is invalid, and an error message is returned.\n\nCompulsory Leave Check: The formula checks if the leave reason is \"Compulsory Leave\" and the total duration is less than 5 days. If so, the leave request is invalid, and an error message is returned. If the leave end date is in the next year and the remaining balance for the next year is less than zero, the leave request is invalid, and an error message is returned. If the total duration is 5 days or more and the leave reason is not \"Compulsory Leave,\" the leave request is invalid, and a warning message is returned.\n\nwrite a  ensures that the annual leave requests are validated based on probation end date, overlap between calendar years, leave balance, future absence rules, half-day increments, and compulsory leave requirements.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 0 l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_union = GET_VALUE_SET('CIMB_GET_UNION','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_comp_limit = 5 IF IV_TOTALDURATION < l_comp_limit AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Minimum 5 days required for Compulsory Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF IV_END_DATE > l_year_end_date AND (0079657 - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= l_comp_limit AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to validate sick leave requests for Cambodia employees. Here's the detailed calculation logic:\n\nDate Check: If the leave start date is before September 23, 2019, the leave request is invalid, and an error message is returned.\n\nManager Status Check: If the manager's assignment status is not active or the manager ID is zero, the leave request is invalid, and an error message is returned.\n\nSick Leave Limit: The formula sets a sick leave limit of 14 days for employees with grades starting with 'C' and 180 days for others. If the requested leave duration exceeds write a  limit, the leave request is invalid, and an error message is returned.\n\nFuture Absence Check: If the leave start date is after the effective date plus one day, the leave request is invalid, and an error message is returned.\n\nShift Check: If the employee is on a 2-shift, 3-shift, or 7-days banking schedule and the leave duration is not a whole number, the leave request is invalid, and an error message is returned.\n\nHalf-Day Check: If the leave duration is not a multiple of 0.5, the leave request is invalid, and an error message is returned.\n\nMedical Leave Without Certificate: If the leave reason is \"Medical Leave Without Certificate\" and the duration is more than one day, the leave request is invalid, and an error message is returned.\n\nSick Leave Utilization Check: The formula checks the total sick leave days taken so far in the current year. If the total sick leave days plus the requested duration exceed the sick leave limit, the leave request is invalid, and an error message is returned.\n\nConsecutive Sick Leave Check: If the leave reason is \"Medical Leave Without Certificate\" and the total duration of consecutive sick leave days exceeds three days, the leave request is invalid, and an error message is returned.\n\nOverlap Check: The formula checks if the leave request overlaps between two calendar years. If it does and the employee is not on a contract, the leave request is invalid, and an error message is returned.\n\nMedical Certificate Attachment: If the leave reason is not \"Medical Leave Without Certificate\" and the duration is one day or less, the formula checks if a medical certificate is attached. If not, the leave request is invalid, and an error message is returned.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 180 IF ADD_DAYS(EffDate,1) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( L_without_cert_duration = 0 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND l_abs_typ_name_check = 'Sick Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD ='SUBMITTED' AND (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000115262932 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000117139859 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755198 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755055 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014) THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Sick Leave for more than one (1) consecutive day will require a medical certificate. Please change reason for Sick Leave and attached Medical Certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION ) ) ) ) j = j + 1 ) ) IF (IV_ABSENCE_REASON = 'Medical Leave Without Certificate' AND (L_without_cert_duration + l_duration) > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = IV_ABSENCE_REASON||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_without_cert_duration)|| ' day(s). Please submit Medical Leave With Certificate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (IV_ABSENCE_REASON != 'Medical Leave Without Certificate' AND IV_TOTALDURATION <=1 ) THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attach your Medical Certificate and click \"Save and Close\". Go to \"Existing Leave\", click on \"Pencil\" icon next to saved \"Sick Leave\" and click \"Submit\"' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to validate Brought Forward Leave (BFL) requests for Cambodia employees. Here's the detailed calculation logic:\n\nBalance Check: The formula checks if the employee has a balance in either the \"Brought Forward Leave Plan No Expiry\" or the \"Brought Forward Leave Plan 3 Years Expiry\" (including Year 1, Year 2, and Year 3). If the balance is zero in both plans, the leave request is invalid, and an error message is returned.\n\nOverlap Check: The formula checks if the leave request overlaps between two calendar years. If it does, the leave request is invalid, and an error message is returned.\n\nFuture Absence Check: If the leave reason is not \"Emergency Leave\" and the leave start date is more than two days in advance, the formula checks the next working day. If the next working day is after the leave start date, the leave request is invalid, and an error message is returned.\n\nShift and Grade Check: If the employee is on a 2-shift, 3-shift, or 7-days banking schedule and the grade does not end with 'C', or if the grade starts with '32' or '33' and the union is \"National Union of Bank Employees (NUBE)\", and the leave duration is not a whole number, the leave request is invalid, and an error message is returned.\n\n***answer***: DEFAULT FOR per_asg_date_probation_end IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT FOR global_pay_interface_extraction_date IS '1951/01/01' DEFAULT FOR iv_attribute_1 IS 'X' DEFAULT FOR iv_absence_reason IS 'X' DEFAULT FOR anc_abs_entrs_user_mode IS 'X' DEFAULT FOR per_asg_manager_user_person_id IS 0 DEFAULT FOR per_per_person_number IS 'X' DEFAULT FOR per_asg_attribute7 IS 'X' DEFAULT FOR per_asg_bargaining_unit_code_name IS 'X' DEFAULT FOR per_asg_grade_name IS 'X' inputs are iv_start_date (date),iv_end_date (date),iv_caledarstartdate (date), iv_caledarenddate (date),iv_totalduration (Number), iv_absence_reason (Text), iv_attribute_1 (Text) valid = 'Y' l_duration = iv_totalduration l_bfl_noexp_acrl_balance = 0 l_grade_name = per_asg_grade_name l_person_id = get_context(person_id,0) l_bfl_3y_acrl_balance = 0 effdate = to_date(global_pay_interface_extraction_date ,'rrrr/mm/dd') l_ldg_id = get_context(legislative_data_group_id,0) l_year_begin_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-12-31','YYYY-MM-DD') l_nxt_working_day = '1951/01/01 00:00:00' (date) l_chk_nxt_wrk_dur = 0 l_msg = 'X' l_shift = per_asg_bargaining_unit_code_name l_union = per_asg_attribute7 l_effective_date = get_context(effective_date,'4712/12/31 00:00:00'(date)) l_absence_entry_id = get_context(absence_entry_id,0) l_hr_assign_id = get_context(hr_assignment_id,0) l_fnd_person_number = get_value_set('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' change_contexts(hr_assignment_id = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = per_asg_manager_user_person_id ) change_contexts(effective_date = l_year_end_date, legislative_data_group_id = l_ldg_id) ( l_bfl_noexp_acrl_balance = get_plan_balance('Brought Forward Leave Plan No Expiry') l_bfl_3y_acrl_balance = get_plan_balance('Brought Forward Leave Plan 3 Years Expiry - Year 3') l_bfl_3y_acrl_balance = l_bfl_3y_acrl_balance + get_plan_balance('Brought Forward Leave Plan 3 Years Expiry - Year 2') l_bfl_3y_acrl_balance = l_bfl_3y_acrl_balance + get_plan_balance('Brought Forward Leave Plan 3 Years Expiry - Year 1') ) change_contexts(effective_date=l_effective_date,absence_entry_id = l_absence_entry_id) ( l_user_mode=anc_abs_entrs_user_mode ) IF (l_user_mode != 'ADMIN' AND per_per_person_number = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF l_bfl_noexp_acrl_balance > 0 OR l_bfl_3y_acrl_balance > 0 THEN valid = 'Y' ELSE ( valid = 'N' error_message = 'CIMB_ABS_INSUFF_BAL' RETURN valid, error_message ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( valid = 'N' error_message = 'CIMB_ABS_OVERLAP' RETURN valid, error_message ) IF iv_absence_reason <> 'Emergency Leave' THEN ( l_msg = 'In' l_nxt_working_day = add_days(effdate,1) l_chk_nxt_wrk_dur = get_pay_availability ('ASSIGN', add_days(effdate,1), add_days(effdate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(l_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(l_chk_nxt_wrk_dur) IF l_chk_nxt_wrk_dur < 1 THEN ( WHILE (l_chk_nxt_wrk_dur < 1) LOOP ( l_nxt_working_day = add_days(l_nxt_working_day,1) l_chk_nxt_wrk_dur = get_pay_availability ('ASSIGN', add_days(effdate,1), add_days(l_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(l_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(l_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(l_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( valid = 'N' error_message = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN valid, error_message ) ) IF (((l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND l_grade_name NOT LIKE '%.C') OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%') AND l_union = 'National Union of Bank Employees (NUBE)')) AND MOD(l_duration,1) <> 0 THEN ( valid = 'N' error_message = 'CIMB_HALFDAY_NOTALLOW' RETURN valid, error_message ) ) RETURN valid",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to validate leave requests for CIMB NIAGA employees based on specific conditions. Here's the detailed calculation logic:\n\nDuration Check: If the leave is categorized as \"Outside Town/Country,\" the maximum allowed duration is 5 days. If it is categorized as \"Within Town/Country,\" the maximum allowed duration is 2 days. If the requested duration exceeds these limits, the leave request is invalid, and an error message is returned.\n\nBlock Leave Validation: The formula checks for overlapping block leave entries and ensures that there are no subsequent block leave entries within one day of the current leave request. If there are, the leave request is invalid, and an error message is returned.\n\nNew Joiner Check: If the employee joined in April or later of the current year and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\nAge Check: If the employee is 54 years or older and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\n***answer***: DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_ATTRIBUTE_2(TEXT),IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' IF (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_5DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 2) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_2DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to handle the accrual of annual leave for partial periods. The logic is straightforward: it takes the input value for accrual and returns it as the output. write a  formula is used to ensure that the correct amount of leave is accrued based on the provided input value\n\n***answer***: INPUTS ARE IV_ACCRUAL accrual = IV_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to validate voluntary leave requests for CIMB MY employees. Here's the detailed calculation logic:\n\nDate Check: If the leave start date is before September 23, 2019, the leave request is invalid, and an error message is returned.\n\nUser Mode and Manager Check: The formula checks if the user mode is not 'ADMIN' and if the person number matches the found person number or if the manager ID matches the person ID. If these conditions are met, the formula proceeds with the validation.\n\n***answer***: DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the duration of an absence type by looping through each day from the start date to the end date. For each day, it checks if it is the last day of the absence period. If it is, the formula calculates the duration based on the start and end times, ensuring that the end time is greater than the start time. It then calculates the duration in hours.\n\nNext, the formula checks for published shift details for the current day. If there are any, it calculates the total assigned hours for the day and adds it to the total duration. If there are no published shift details, the formula checks for assigned shift details and calculates the total assigned hours for the day, adding it to the total duration.\n\nThe formula then checks if the total assigned hours for the day are less than 4 hours. If so, it adds 0 to the total duration. If the total assigned hours are greater than or equal to 4 hours, it adds 1 to the total duration.\n\nFinally, the formula sums up the durations for each day in the absence period to calculate the final duration. write a  ensures that the duration of the absence type is accurately calculated based on the work schedule, roster, and half-day increments.\n\n\n***answer***: DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DURATION_ARR IS 0 INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_start_dt = IV_START_DATE l_end_dt = iv_end_date l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 l_start_min_time = '4712/12/31 00:00:00' (date) l_end_max_time = '4712/12/31 00:00:00' (date) multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 L_object_id = 'X' L_prv_object_id = 'X' L_hours = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date WHILE (l_date <= l_end_date) LOOP ( L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_asg_shift_end_date = TO_DATE(l_shift_end_date,'YYYY-MM-DD HH24:MI') L_hours = get_measure_from_time(l_start_dt,IV_END_DATE) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE IF l_end_time = l_start_time THEN l_entry_duration_m = 0 ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL CHECK last day:'||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)||'L_hours'||TO_CHAR(L_hours)) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_PUBLISHED_SHIFT_DETAILS_ARR EXISTS 1:1') WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_object_id = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,3)+1,INSTR(L_pub_details,'|',1,4)-INSTR(L_pub_details,'|',1,3)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_start_min_time = TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') L_END_MAX_TIME = l_asg_shift_end_date IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND L_object_id != L_prv_object_id AND SUBSTR(l_asg_shift_st_date_CHAR,12,5) <= l_end_time THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) ELSE IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 L_prv_object_id = L_object_id l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF l_entry_duration_h > 0 THEN ( IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ) ELSE( ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS 1:2') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = l_date, END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') OR SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) l_date = ADD_DAYS(l_date,1) l_start_dt = ADD_DAYS(l_start_dt,1) ) DURATION = ln_unrounded_duration_d return DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate leave requests for CIMB NIAGA employees based on specific conditions. Here's the business logic it addresses:\n\nBlock Leave Validation: The formula checks for overlapping block leave entries and ensures that there are no subsequent block leave entries within one day of the current leave request. If there are, the leave request is invalid, and an error message is returned.\n\nNew Joiner Check: If the employee joined in April or later of the current year and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\nAge Check: If the employee is 54 years or older and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\nLeave Balance Check: The formula calculates the total duration of block leave taken so far and adds the current leave request duration to it. If the total block leave duration exceeds the block leave accrual value, the leave request is invalid, and an error message is returned.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate compassionate leave requests for CIMB NIAGA employees based on specific conditions. Here's the business logic it addresses:\n\nCompassionate Leave Duration: The formula sets maximum allowable durations for compassionate leave based on the relationship to the deceased and whether the leave is taken within or outside the town/country. For example, for the death of a spouse, parent, spouse's parent, or child, the maximum duration is 8 days if outside town/country and 5 days if within town/country. Similar rules apply for other relationships with varying durations.\n\nBlock Leave Validation: The formula checks for overlapping block leave entries and ensures that there are no subsequent block leave entries within one day of the current leave request. If there are, the leave request is invalid, and an error message is returned.\n\nNew Joiner Check: If the employee joined in April or later of the current year and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\nAge Check: If the employee is 54 years or older and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\n***answer***: DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'NA' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_ATTRIBUTE_2(TEXT),IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' IF ((IV_ATTRIBUTE_2 = 'Spouse Death') OR (IV_ATTRIBUTE_2 = 'Parent Death') OR (IV_ATTRIBUTE_2 = 'Spouse Parent Death') OR (IV_ATTRIBUTE_2 = 'Child Death')) AND (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 8) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_8DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Spouse Death') OR (IV_ATTRIBUTE_2 = 'Parent Death') OR (IV_ATTRIBUTE_2 = 'Spouse Parent Death') OR (IV_ATTRIBUTE_2 = 'Child Death')) AND (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_5DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Sibling Death') OR (IV_ATTRIBUTE_2 = 'Grandparent Death')) AND (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 6) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_6DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Sibling Death') OR (IV_ATTRIBUTE_2 = 'Grandparent Death')) AND (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_3DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Son-in-law Death') OR (IV_ATTRIBUTE_2 = 'Daughter-in-law Death')) AND (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_5DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF ((IV_ATTRIBUTE_2 = 'Son-in-law Death') OR (IV_ATTRIBUTE_2 = 'Daughter-in-law Death')) AND (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 2) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_2DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF (IV_ATTRIBUTE_2 = 'Death of Other family member in one roof') AND (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 4) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_4DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF (IV_ATTRIBUTE_2 = 'Death of Other family member in one roof') AND (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_1DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to determine the enrollment start date for an absence plan based on the employee's hire date. The business logic it addresses includes:\n\nHire Date-Based Enrollment: The formula sets the enrollment start date to the employee's hire date by default.\n\nSpecific Start Date Check: If a specific start date (in write a  case, January 1, 2020) is later than the hire date, the formula updates the enrollment start date to write a  specific date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) l_hire_date = PER_ASG_REL_DATE_START enrollmentStartDate = l_hire_date l_start_date = to_date('2020-01-01','YYYY-MM-DD') IF(l_start_date >=l_hire_date) THEN ( enrollmentStartDate=l_start_date RETURN enrollmentStartDate ) RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to calculate the annual leave accrual for CIMB ID employees based on various factors. Here's the business logic it addresses:\n\nAccrual Calculation: The formula calculates the annual leave accrual based on the employee's hire date, grade, and employment category. It determines the accrual start and end dates, and calculates the monthly accrual rate.\n\nProbation Period: The formula considers a probation period of three months from the hire date. If the employee is still within the probation period, the accrual is adjusted accordingly.\n\nEmployment Category: The formula differentiates between permanent, contract, and other employment categories. It adjusts the accrual calculation based on the specific rules for each category.\n\nLeave Balance Carryover: The formula checks for any carryover leave balance from the previous year. It calculates the carryover amount and adjusts the current year's accrual accordingly.\n\nLeave Adjustments: The formula accounts for various adjustments such as approved absences, collective leave, and special adjustments. It calculates the impact of these adjustments on the total accrual.\n\nGrade and Year Band: The formula determines the employee's grade and year band based on their hire date and current year. It uses write a  information to look up the appropriate accrual rate from a predefined table.\n\nContract End Date: For contract employees, the formula considers the projected assignment end date and adjusts the accrual calculation if the contract ends within the accrual period.\n\nSpecial Adjustments: The formula includes logic to handle special adjustments such as collective leave and other specific conditions that may affect the accrual.\n\n***answer***: DEFAULT FOR PER_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ADJUSTED_SVC_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR BASE_SENIORITY_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for PER_SENDT_F_V3_SENIORITY_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for PER_SENDT_F_V3_SENIORITY_DATE_CODE IS ' ' DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_PERSON_NUMBER IS ' ' DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PER_ACCRUAL_ENTRY_ID IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_TYPE IS ' ' DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PROCD_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_VALUE IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_ENT_PL_ID IS ' ' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS ' ' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' INPUTS ARE IV_ACCRUAL,IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date),IV_ACCRUALPERIODSTARTDATE (date),IV_ACCRUALPERIODENDDATE (date) l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') accrual_x=0 final_accrual=0 l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_current_date = IV_ACCRUALPERIODENDDATE l_term_date = PER_REL_ACTUAL_TERMINATION_DATE l_current_date = to_date('31/12/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') l_grade_name = 'X' l_prev_grade_name ='bb' l_prev_year_band = 'x' l_approved_abs_days=0 l_accrual_prev = 0 L_prv_Ann_Acrl_Balance=0 l_exp_amount = 0 l_covr = 0 l_adj = 0 l_jan_abs_ent = 0 l_feb_june_abs_ent = 0 l_half_exp_amount = 0 l_total_exp_amount = 0 L_prv_year_end_date=to_date('31/12/' || to_char(ADD_YEARS(IV_CALEDARSTARTDATE,-1),'YYYY'),'dd/mm/yyyy') L_prv_year_start_date = to_date('01/01/' || to_char(ADD_YEARS(IV_CALEDARSTARTDATE,-1),'YYYY'),'dd/mm/yyyy') accrual = 0 l_hire_date = '1951/01/01 00:00:00' (date) l_svc_date= '4712/12/31 00:00:00' (date) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_termination= PER_REL_ACTUAL_TERMINATION_DATE l_asg_cat = PER_ASG_EMPLOYMENT_CATEGORY l_contract_end=PER_ASG_PROJECTED_ASSIGNMENT_END_DATE ) i_sen=1 CHANGE_CONTEXTS(PERSON_ID=l_person_id,EFFECTIVE_DATE= l_current_date) ( WHILE PER_SENDT_F_V3_SENIORITY_DATE.exists(i_sen) LOOP ( IF (PER_SENDT_F_V3_SENIORITY_DATE_CODE[i_sen]='CIMB_LE_SENIORITY_RULE') THEN ( l_svc_date=PER_SENDT_F_V3_SENIORITY_DATE[i_sen] ) i_sen=i_sen+1 ) ) l_hire_year= to_number(to_char(l_hire_date,'YYYY')) l_acc_year = to_number(to_char(IV_ACCRUALPERIODSTARTDATE,'YYYY')) l_prev_year = to_number(to_char(L_prv_year_start_date,'YYYY')) Actual_Accrual_Start_Date=GREATEST(IV_CALEDARSTARTDATE,l_hire_date, IV_ACCRUALPERIODSTARTDATE) Actual_Accrual_End_Date=LEAST(IV_CALEDARENDDATE,l_termination,IV_ACCRUALPERIODENDDATE) Accrual_Probation_Start_Date=ADD_MONTHS(l_hire_date,3) l_year_band = 'X' L_Ann_accrual_char='X' L_Ann_accrual=0 l_covr_flag = 'N' l_prev_serv_mon = 0 l_prev_per_month_acc = 0 l_service_months = 0 L_DEBUG = ess_log_write('Data:' ||l_asg_cat || '.contract:'|| to_char(l_contract_end) ||'.l_svc_date:' || to_char(l_svc_date)||'.l_hire_date='||to_char(l_hire_date)) L_DEBUG = ess_log_write('Dates Accrual:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD') || ','||to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')||'.Calendar:'|| TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD') || ','||to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')||'.Planned:'||to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')||','||to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) IF (to_char(IV_CALEDARSTARTDATE,'YYYY')='2020' and l_hire_date<to_date('01/10/2020','DD/MM/YYYY')) THEN ( accrual=IV_ACCRUAL return accrual ) if ( l_asg_cat = 'CIMB_DP' OR l_asg_cat = 'CIMB_OTH_DP') then ( l_row = l_asg_cat if (l_asg_cat = 'CIMB_DP' OR l_asg_cat = 'CIMB_OTH_DP') then ( l_row = 'MT_OTHERS' ) L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_ID_ANNUAL_LEAVE','Entitlement',l_row,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_per_mon_acc = L_Ann_accrual/12 l_service_months = MONTHS_BETWEEN(Actual_Accrual_End_Date,Actual_Accrual_Start_Date) accrual_x = l_per_mon_acc * l_service_months floored_accrual = floor(accrual_x) decimal_accrual = accrual_x - floored_accrual IF (decimal_accrual = 0) THEN ( final_accrual = floored_accrual ) IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN ( final_accrual = floored_accrual + 1 ) IF (decimal_accrual > 0.5) THEN ( final_accrual = floored_accrual + 1 ) accrual = final_accrual RETURN accrual ) else if (l_asg_cat = 'PERMANENT' OR l_asg_cat = 'CONTRACT') THEN ( IF(l_asg_cat='CONTRACT' AND to_char(IV_ACCRUALPERIODENDDATE,'YYYY')=to_char(l_contract_end,'YYYY')) THEN ( Actual_Accrual_End_Date=LEAST(IV_CALEDARENDDATE,l_termination,IV_ACCRUALPERIODENDDATE,l_contract_end) L_DEBUG = ess_log_write('Override:'|| TO_CHAR(Actual_Accrual_End_Date)) ) IF(l_hire_year+10 <=to_number(to_char(IV_ACCRUALPERIODSTARTDATE,'YYYY'))) THEN ( l_year_band='ENT_10' ) ELSE IF(l_hire_year+4 <=to_number(to_char(IV_ACCRUALPERIODSTARTDATE,'YYYY'))) THEN ( l_year_band='ENT_4_10' ) ELSE ( l_year_band='ENT_1_4' ) L_DEBUG = ess_log_write('Grade Name Current Year:'||l_grade_name||'Current Year Band :'||l_year_band) L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_ID_ANNUAL_LEAVE',l_grade_name,l_year_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF(l_grade_name='MT') THEN ( IF(l_sys_date <to_date(to_char(ADD_YEARS(l_hire_date,1),'YYYY') ||'/'|| to_char(l_hire_date,'MM/DD'),'YYYY/MM/DD')) THEN ( accrual = 0 RETURN accrual ) ELSE ( L_Ann_accrual=12 ) ) l_per_mon_acc = L_Ann_accrual/12 IF(l_hire_year = l_acc_year) THEN ( l_service_months=to_number(to_char(Actual_Accrual_End_Date,'MM'))-to_number(to_char(Actual_Accrual_Start_Date,'MM'))+1 accrual_x = l_per_mon_acc * l_service_months ) ELSE IF (l_hire_year != l_acc_year) THEN ( IF (PER_REL_ACTUAL_TERMINATION_DATE WAS DEFAULTED) then ( IF(l_asg_cat='CONTRACT' AND to_char(IV_ACCRUALPERIODENDDATE,'YYYY')=to_char(l_contract_end,'YYYY')) THEN ( l_service_months=to_number(to_char(Actual_Accrual_End_Date,'MM'))-to_number(to_char(Actual_Accrual_Start_Date,'MM'))+1 accrual_x = l_per_mon_acc * l_service_months ) ELSE ( accrual_x=L_Ann_accrual ) ) ELSE ( l_service_months=to_number(to_char(Actual_Accrual_End_Date,'MM'))-to_number(to_char(Actual_Accrual_Start_Date,'MM'))+1 accrual_x = l_per_mon_acc * l_service_months ) ) floored_accrual = floor(accrual_x) decimal_accrual = accrual_x - floored_accrual IF (decimal_accrual = 0) THEN ( final_accrual = floored_accrual ) IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN ( final_accrual = floored_accrual + 1 ) IF (decimal_accrual > 0.5) THEN ( final_accrual = floored_accrual + 1 ) accrual = final_accrual L_DEBUG = ess_log_write('Balance:'|| to_char(accrual) || '.month_between:'|| to_char(l_service_months)) IF(l_hire_year=to_number(to_char(IV_CALEDARSTARTDATE,'YYYY'))) THEN ( L_DEBUG = ess_log_write('return') return accrual ) if (l_hire_year <= l_prev_year) then ( l_covr_flag = 'Y' IF(l_hire_year+10 <=to_number(to_char(L_prv_year_start_date,'YYYY'))) THEN ( l_prev_year_band='ENT_10' ) ELSE IF(l_hire_year+4 <=to_number(to_char(L_prv_year_start_date,'YYYY'))) THEN ( l_prev_year_band='ENT_4_10' ) ELSE ( l_prev_year_band='ENT_1_4' ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = L_prv_year_end_date) ( l_prev_grade_name = PER_ASG_GRADE_NAME ) L_prev_Ann_accrual = TO_NUMBER(GET_TABLE_VALUE('CIMB_ID_ANNUAL_LEAVE',l_prev_grade_name,l_prev_year_band,'0')) l_prev_per_month_acc = L_prev_Ann_accrual/12 if (l_hire_year = l_prev_year) THEN ( l_prev_serv_mon = MONTHS_BETWEEN(L_prv_year_end_date,l_hire_date) l_accrual_prev=l_prev_per_month_acc * l_prev_serv_mon l_accrual_prev = L_prev_Ann_accrual ) else ( l_accrual_prev = L_prev_Ann_accrual ) floored_accrual = floor(l_accrual_prev) decimal_accrual = l_accrual_prev - floored_accrual IF (decimal_accrual = 0) THEN ( final_accrual = floored_accrual ) IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN ( final_accrual = floored_accrual + 1 ) IF (decimal_accrual > 0.5) THEN ( final_accrual = floored_accrual + 1 ) l_accrual_prev = final_accrual L_DEBUG = ess_log_write('Grade Name Previous Year:'||l_prev_grade_name||'Previous Year Band :'||l_prev_year_band) L_DEBUG = ess_log_write('Previous Year Annual Accrual: '||to_char(l_accrual_prev)) ) if (l_covr_flag = 'Y') then ( L_DEBUG = ess_log_write('Carryover Loop') l_start_date = to_date('01/01/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') l_end_date = to_date('30/06/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/01/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') L_Accrual_id = GET_CONTEXT(ACCRUAL_PLAN_ID, 0) l_abs_ent = 0 l_entry_value = 0 l_entry_type = 'abc' l_proc_date = TO_DATE('1951/1/1','YYYY/MM/DD') o=1 CHANGE_CONTEXTS(START_DATE = l_start_date, END_DATE = l_end_date, PERSON_ID = l_person_id) ( WHILE ABS_EXT_ACR_ENT_PER_ACCRUAL_ENTRY_ID.exists(o) LOOP ( CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = L_Accrual_id) ( l_proc_date = ABS_EXT_ACR_ENT_PROCD_DATE[o] l_entry_type = ABS_EXT_ACR_ENT_TYPE[o] l_entry_value = ABS_EXT_ACR_ENT_VALUE[o] IF (l_proc_date >= l_start_date) AND (l_proc_date <= l_end_date) THEN ( IF (l_entry_type = 'COVR') THEN ( l_covr = l_entry_value ) ELSE IF (l_entry_type = 'ADJOTH') THEN ( l_adj = l_adj + l_entry_value ) ELSE IF (l_entry_type = 'ABS') then ( IF (l_proc_date <= ld_end_date) then ( l_jan_abs_ent = l_jan_abs_ent + l_entry_value ) else ( l_feb_june_abs_ent = l_feb_june_abs_ent + l_entry_value ) ) ) ) o=o+1 ) ) ) l_jan_abs_ent = l_jan_abs_ent * -1 l_feb_june_abs_ent = l_feb_june_abs_ent * -1 l_half_acc_amount = floor(l_accrual_prev/2) l_jan_bal = l_covr - l_jan_abs_ent l_log = ess_log_write('l_covr: '||to_char(l_covr)) l_log = ess_log_write('l_jan_abs_ent: '||to_char(l_jan_abs_ent)) l_log = ess_log_write('l_feb_june_abs_ent: '||to_char(l_feb_june_abs_ent)) l_log = ess_log_write('l_half_acc_amount: '||to_char(l_half_acc_amount)) q=1 j=0 l_total_exp_date = to_date('01/07/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') l_half_exp_date = to_date('01/02/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') j=j+1 while(q < 4) Loop ( L_DEBUG = ess_log_write('Adjustment Main Loop') if(q=1 AND l_current_date >= l_half_exp_date) THEN ( l_total_exp_amount = l_covr - (l_jan_abs_ent + l_feb_june_abs_ent) ) if ((q=1) and (l_covr > l_half_acc_amount) AND l_current_date >= l_half_exp_date) then ( l_total_exp_amount=l_covr- (l_jan_abs_ent + l_feb_june_abs_ent) IF(l_jan_abs_ent<l_half_acc_amount) THEN ( L_DEBUG = ess_log_write('Feb Adjustment Loop') l_carryover_bal_red = l_covr - l_half_acc_amount - l_jan_abs_ent IF (l_carryover_bal_red < 0) THEN ( l_carryover_bal_red = 0 ) l_total_exp_amount = l_covr - (l_carryover_bal_red + l_jan_abs_ent + l_feb_june_abs_ent) p_half_exp_reason = 'CIMB_COVR_LV_RIGHT' adjustmentvalues[j] = l_carryover_bal_red * -1 adjustmentdates[j] = l_half_exp_date adjustmenttypes[j] = p_half_exp_reason l_log = ess_log_write('Half Expiry Value: '|| to_char(adjustmentvalues[j])) l_log = ess_log_write('Half Expiry Date: '||to_char(j)||': '||to_char(adjustmentdates[j])) j=j+1 ) ) else if ((q=2) and (l_total_exp_amount > 0 AND l_current_date >= l_total_exp_date)) then ( L_DEBUG = ess_log_write('Total expiry Loop') p_tot_exp_reason = 'CIMB_COVR_EXP' adjustmentvalues[j] = l_total_exp_amount * -1 adjustmentdates[j] = l_total_exp_date adjustmenttypes[j] = p_tot_exp_reason l_log = ess_log_write('Full Expiry Value: '|| to_char(adjustmentvalues[j])) l_log = ess_log_write('Full Expiry Date: '||to_char(j)||': '||to_char(adjustmentdates[j])) j=j+1 ) else if (q=3) then ( l_year='YEAR_'||TO_CHAR(IV_ACCRUALPERIODENDDATE,'YYYY') l_attribute_date1='1951/01/01' l_attribute_date2='1951/01/01' l_attribute_date3='1951/01/01' l_attribute_date4='1951/01/01' l_attribute_date5='1951/01/01' l_attribute_date6='1951/01/01' l_attribute_date7='1951/01/01' l_attribute_date8='1951/01/01' l_attribute_date1 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE1','1951/01/01') l_attribute_date2 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE2','1951/01/01') l_attribute_date3 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE3','1951/01/01') l_attribute_date4 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE4','1951/01/01') l_attribute_date5 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE5','1951/01/01') l_attribute_date6 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE6','1951/01/01') l_attribute_date7 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE7','1951/01/01') l_attribute_date8 = GET_TABLE_VALUE('CIMB_ID_COLLECTIVE_LEAVE',l_year,'ATTRIBUTE8','1951/01/01') l_log = ess_log_write('l_attribute_date: '|| l_attribute_date1||'.'||l_attribute_date2||'.'||l_attribute_date3||'.'||l_attribute_date4) l_validate=0 IF(l_attribute_date1 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date1,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date2 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date2,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date3 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date3,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date4 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date4,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date5 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date5,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date6 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date6,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date7 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date7,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF(l_attribute_date8 <>'1951/01/01') THEN ( IF(Actual_Accrual_End_Date> TO_DATE(l_attribute_date8,'YYYY/MM/DD')) THEN ( l_validate=l_validate+1 ) ) IF l_validate >0 THEN ( adjustmentvalues[j] = (-1* l_validate) l_total_exp_date = to_date('01/01/' + to_char(IV_ACCRUALPERIODENDDATE,'YYYY'),'DD/MM/YYYY') adjustmentdates[j] = l_total_exp_date adjustmenttypes[j] = 'CIMB_SPECIAL_ADJ' j=j+1 ) ) q=q+1 ) ) return accrual, adjustmentvalues, adjustmentdates, adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate annual leave requests for CIMB UK employees based on specific conditions. Here's the business logic it addresses:\n\n1. **Probation Period Check**: If the leave start date is within the probation period, the formula calculates the earned leave days based on the initial balance and the number of completed months. If the requested leave duration exceeds the earned days, the leave request is invalid, and an error message is returned.\n\n2. **Overlap Check**: The formula checks if the leave request overlaps between two calendar years. If it does and the employee is not on a contract, the leave request is invalid, and an error message is returned.\n\n3. **Balance Check**: If the leave end date is within the current year and the remaining balance after the leave request is less than zero, the leave request is invalid, and an error message is returned.\n\n4. **Future Absence Check**: If the leave reason is not \"Emergency Leave\" and the leave start date is less than one day from the current date, the leave request is invalid, and an error message is returned.\n\n5. **Emergency Leave Remark**: If the leave reason is \"Emergency Leave\" and no remark is provided, the leave request is invalid, and an error message is returned.\n\n6. **Half-Day Check**: If the leave duration is not a multiple of 0.5, the leave request is invalid, and an error message is returned.\n\n7. **Compulsory Leave Check**: The formula sets minimum duration requirements for compulsory leave based on the employee's grade. If the leave reason is \"Compulsory Leave\" and the total duration is less than the minimum requirement, the leave request is invalid, and an error message is returned. If the leave end date is in the next year and the remaining balance for the next year is less than zero, the leave request is invalid, and an error message is returned. If the total duration is equal to or more than the compulsory leave requirement and the leave reason is not \"Compulsory Leave,\" the leave request is invalid, and a warning message is returned.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 1 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance_emp) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance_emp),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change Absence Reason to Emergency Leave because your Start Date is less than 1 day from today/submission date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please provide Remark for Emergency Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ( l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' OR l_grade_name = 'U1.' OR l_grade_name = 'U2.' OR l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = '36' OR l_grade_name = '35' OR l_grade_name = '34' ) THEN ( l_comp_limit = '5' ) IF ( l_grade_name = 'U9.' OR l_grade_name = 'U10.' OR l_grade_name = 'U11.' OR l_grade_name = '33S' OR l_grade_name = '33' OR l_grade_name = '32' ) THEN ( l_comp_limit = '3' ) IF ( l_grade_name = 'C1.' OR l_grade_name = 'C2.' OR l_grade_name = 'C3.' OR l_grade_name = 'C4.' OR l_grade_name = 'C5.' OR l_grade_name = 'C6.' OR l_grade_name = 'C7.' OR l_grade_name = 'C8.' OR l_grade_name = 'C9.' OR l_grade_name = 'C10.' OR l_grade_name = 'C11.' ) THEN ( l_comp_limit = '3' ) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Minimun duration requirement for your Grade is '||l_comp_limit||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF IV_END_DATE > l_year_end_date AND (L_Ann_Acrl_Balance_emp - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change your end date to avoid insufficient balance in next year.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your leave duration is equal or more than the Compulsory Leave and the reason for this leave is regular leave. If you proceed, it will remain as regular leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate leave requests for CIMB NIAGA employees based on specific conditions. Here's the business logic it addresses:\n\nDuration Check: The formula sets maximum allowable durations for leave based on whether the leave is taken within or outside the town/country. For example, if the leave is categorized as \"Outside Town/Country,\" the maximum allowed duration is 9 days. If it is categorized as \"Within Town/Country,\" the maximum allowed duration is 6 days. If the requested duration exceeds these limits, the leave request is invalid, and an error message is returned.\n\nBlock Leave Validation: The formula checks for overlapping block leave entries and ensures that there are no subsequent block leave entries within one day of the current leave request. If there are, the leave request is invalid, and an error message is returned.\n\nNew Joiner Check: If the employee joined in April or later of the current year and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\nAge Check: If the employee is 54 years or older and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\nwrite a  ensures that the leave requests are validated based on duration, block leave rules, new joiner status, and age.\n\n***answer***: DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_ATTRIBUTE_2(TEXT),IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' IF (IV_ATTRIBUTE_1 = 'Outside Town/Country') THEN ( IF (IV_TOTALDURATION > 9) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_9DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF (IV_ATTRIBUTE_1 = 'Within Town/Country') THEN ( IF (IV_TOTALDURATION > 6) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_6DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate unpaid leave requests for CIMB NIAGA employees based on specific conditions. Here's the business logic it addresses:\n\nDuration Check: The formula sets maximum allowable durations for unpaid leave based on the reason for the leave. For example, if the leave reason is \"UP_ON DUTY,\" \"UP_PREGNANCY MEDICATION,\" \"UP_PROLONGED ILLNESS FAMILY,\" \"PILGRIMAGE,\" \"UP_PROLONGED_ILLNESS,\" or \"UP_FURTHER EDUCATION,\" the maximum allowed duration is 180 days. If the leave reason is \"UP_OTHER,\" the maximum allowed duration is 365 days. If the leave reason is \"JEDA KONTRAK,\" the maximum allowed duration is 31 days. If the requested duration exceeds these limits, the leave request is invalid, and an error message is returned.\n\nBlock Leave Validation: The formula checks for overlapping block leave entries and ensures that there are no subsequent block leave entries within one day of the current leave request. If there are, the leave request is invalid, and an error message is returned.\n\nNew Joiner Check: If the employee joined in April or later of the current year and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\nAge Check: If the employee is 54 years or older and the leave reason is \"Block Leave,\" the leave request is invalid, and an error message is returned.\n\n***answer***: DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'NA' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_ATTRIBUTE_2(TEXT),IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID='Y' IF ((IV_ATTRIBUTE_2 = 'UP_ON DUTY') OR (IV_ATTRIBUTE_2 = 'UP_PREGNANCY MEDICATION') OR (IV_ATTRIBUTE_2 = 'UP_PROLONGED ILLNESS FAMILY') OR (IV_ATTRIBUTE_2 = 'PILGRIMAGE') OR (IV_ATTRIBUTE_2 = 'UP_PROLONGED_ILLNESS') OR (IV_ATTRIBUTE_2 = 'UP_FURTHER EDUCATION')) THEN ( IF (IV_TOTALDURATION > 180) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_180DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF(IV_ATTRIBUTE_2 = 'UP_OTHER') THEN ( IF (IV_TOTALDURATION > 365) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_365DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF(IV_ATTRIBUTE_2='JEDA KONTRAK') THEN ( IF (IV_TOTALDURATION > 31) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_31DAYS_MAX_DUR' RETURN VALID, ERROR_MESSAGE ) ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531) then ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_start_date>=ANC_ABS_ENTRS_START_DATE) THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')=to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_prev_date=GREATEST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_prev_date) ) ) IF(ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000582652531 AND l_end_date<=ANC_ABS_ENTRS_END_DATE) THEN ( IF(to_char(l_next_date,'YYYY/MM/DD') = to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE) ) ELSE ( l_next_date=LEAST(ANC_ABS_ENTRS_START_DATE,ANC_ABS_ENTRS_END_DATE, l_next_date) ) ) ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration = l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) IF(to_char(l_end_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_next_date,-1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF (to_char(l_next_date,'YYYY/MM/DD')<>to_char(l_end_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_next_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) IF(to_char(l_start_date,'YYYY/MM/DD')<>to_char(ADD_DAYS(l_prev_date,1),'YYYY/MM/DD') AND l_absence_reason = 'Block Leave') THEN ( IF(to_char(l_prev_date,'YYYY/MM/DD')<>to_char(l_start_date,'YYYY/MM/DD')) THEN ( l_days_diff= GET_PAY_AVAILABILITY('ASSIGN',to_date(to_char(l_prev_date,'YYYY/MM/DD'),'YYYY/MM/DD'),to_date(to_char(l_start_date,'YYYY/MM/DD'),'YYYY/MM/DD'),'Y','Y','N','Y','D') IF(l_days_diff>1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_SUBSEQUENT' RETURN VALID, ERROR_MESSAGE ) ) ) l_age=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_current_date) ( l_grade_name = PER_ASG_GRADE_NAME l_hire_date = PER_ASG_REL_DATE_START l_age=PER_ASG_PERSON_AGE ) l_job_name = PER_ASG_JOB_NAME ln_hire_date='1951/01/01 00:00:00' (date) ln_hire_date=PER_ASG_REL_DATE_START IF(TO_CHAR(ld_end_date,'YYYY')=TO_CHAR(ln_hire_date,'YYYY') AND TO_NUMBER(TO_CHAR(ln_hire_date,'MM')) >=4 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_NEWJOIN' RETURN VALID, ERROR_MESSAGE ) IF(l_age>=54 AND l_absence_reason = 'Block Leave') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_NIAGA_BLK_LV_MSG_AGE' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to calculate the duration of an absence type, specifically for half-day durations, considering various work schedules and rosters. Here's the business logic it addresses:\n\nAccurate Duration Calculation: The formula ensures that the duration of an absence is calculated accurately based on the start and end times, taking into account the specific work schedules and rosters of the employee.\n\nHalf-Day Increments: The formula supports the calculation of absence durations in half-day increments, ensuring that partial days are accounted for correctly.\n\nShift and Roster Consideration: The formula considers both published and assigned shift details to determine the total assigned hours for each day in the absence period. write a  ensures that the calculation is aligned with the employee's actual work schedule.\n\nCompliance with Work Hours: The formula checks if the total assigned hours for a day are less than 4 hours and adjusts the duration accordingly. write a  ensures compliance with work hour regulations and policies.\n\nSupport for Multiple Days: The formula can handle absences that span multiple days, summing up the durations for each day to calculate the final duration.\n\n\n***answer***: DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DURATION_ARR IS 0 INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_start_dt = IV_START_DATE l_end_dt = iv_end_date l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 l_start_min_time = '4712/12/31 00:00:00' (date) l_end_max_time = '4712/12/31 00:00:00' (date) multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 L_object_id = 'X' L_prv_object_id = 'X' L_hours = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date WHILE (l_date <= l_end_date) LOOP ( L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_asg_shift_end_date = TO_DATE(l_shift_end_date,'YYYY-MM-DD HH24:MI') L_hours = get_measure_from_time(l_start_dt,IV_END_DATE) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE IF l_end_time = l_start_time THEN l_entry_duration_m = 0 ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL CHECK last day:'||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)||'L_hours'||TO_CHAR(L_hours)) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_PUBLISHED_SHIFT_DETAILS_ARR EXISTS 1:1') WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_object_id = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,3)+1,INSTR(L_pub_details,'|',1,4)-INSTR(L_pub_details,'|',1,3)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_start_min_time = TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') L_END_MAX_TIME = l_asg_shift_end_date IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND L_object_id != L_prv_object_id AND SUBSTR(l_asg_shift_st_date_CHAR,12,5) <= l_end_time THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) ELSE IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 L_prv_object_id = L_object_id l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF l_entry_duration_h > 0 THEN ( IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ) ELSE( ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS 1:2') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = l_date, END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') OR SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) l_date = ADD_DAYS(l_date,1) l_start_dt = ADD_DAYS(l_start_dt,1) ) DURATION = ln_unrounded_duration_d return DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to determine the enrollment start date for an absence plan based on the employee's hire date and assignment effective start date. The business logic it addresses includes:\n\nHire Date-Based Enrollment: The formula sets the enrollment start date to the employee's hire date if it is on or after a specific start date (in write a  case, September 23, 2019).\n\nAssignment Effective Start Date: If the assignment effective start date is on or after the hire date, the formula updates the enrollment start date to the assignment effective start date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00'(date) DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' l_hire_date = PER_ASG_REL_DATE_START l_hr_assignment_id = get_context(HR_ASSIGNMENT_ID,0) l_start_date = to_date('2019-09-23','yyyy-MM-dd') l_asg_eff_st_date = to_date('2019-09-23','yyyy-MM-dd') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_value = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE = l_eff_date) ( l_person_number = PER_PER_PERSON_NUMBER ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_eff_date,HR_ASSIGNMENT_ID = l_hr_assignment_id) ( l_asg_eff_st_date = PER_ASG_EFFECTIVE_START_DATE ) IF ( l_hire_date >= l_start_date) THEN ( enrollmentStartDate = l_hire_date ) Else IF l_asg_eff_st_date >= l_hire_date THEN ( enrollmentStartDate = l_asg_eff_st_date ) RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to calculate the proration factor for leave accruals. The proration factor is set to 1, which means that the leave accrual is not prorated and is calculated at the full rate. write a  ensures that the leave accrual is not adjusted based on the employee's hire date, termination date, or any other factors\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' prorationFactor = 1 return prorationFactor",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to calculate the annual leave accrual for CIMB employees based on various factors. Here's the business logic it addresses:\n\nProration Based on Band Change: The formula prorates the leave accrual based on changes in the employee's band during the accrual period. It captures the band change dates and calculates the accrual rates before and after each band change.\n\nRestriction on Monthly Accrual: The formula restricts the monthly leave accrual for certain types of leave, such as Unpaid Leave, Maternity Leave, Emergency Leave, and Hajj Leave. If an employee takes any of these leaves during the accrual period, the formula adjusts the accrual accordingly.\n\nAccrual Calculation: The formula calculates the leave accrual based on the employee's hire date, band change dates, and the duration of the accrual period. It considers the number of days in the accrual period and adjusts the accrual for any approved absences.\n\nFTE (Full-Time Equivalent) Changes: The formula accounts for changes in the employee's FTE value during the accrual period. It captures the FTE change dates and calculates the accrual based on the FTE value for each period.\n\nLeave Balance Adjustments: The formula includes logic to handle adjustments to the leave balance, such as carryover balances from the previous year and any special adjustments.\n\nGrade and Action Code: The formula captures the employee's grade and action code before and after each band change. write a  information is used to determine the appropriate accrual rates and adjustments\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ) ) mn=mn+1 ) ) ELSE( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) + 1 l_no_of_days2 = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, l_band_chg_dt1) + 1 ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual rate for an employee's absence based on their length of service and the specific month of hire or termination. It determines the number of days between the employee's hire date and the current effective date to calculate the length of service. If the employee's termination date falls within the current month and year, the formula adjusts the accrual rate based on the proportion of days worked in that month. Similarly, if the hire date falls within the current month and year, the formula adjusts the accrual rate based on the proportion of days worked since the hire date. The final accrual rate is then multiplied by the input accrual value to determine the total accrual for the period.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' INPUTS ARE IV_ACCRUAL,IV_CALEDARSTARTDATE (date),IV_CALEDARENDDATE(date) l_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_accrual = 1 l_length_of_service=(l_no_of_days) hire_year_number = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'yyyy')) current_year_number = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'yyyy')) hire_month_no= to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'mm')) current_month_no = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'mm')) no_of_days_month = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd')) Last_month_day = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'dd')) l_last_date_of_term_month = to_num(to_char(LAST_DAY(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),'dd')) term_year_number = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'yyyy')) term_month_no= to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'mm')) no_of_days_term_month = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd')) if( term_year_number=current_year_number AND term_month_no = current_month_no) then ( l_accrual = (no_of_days_term_month/l_last_date_of_term_month) ) if( hire_year_number = current_year_number AND hire_month_no = current_month_no) then ( l_accrual = l_no_of_days/Last_month_day ) accrual = l_accrual*IV_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual of leave for employees based on changes in their employment band and excludes accrual for days taken as unpaid leave, maternity leave, emergency leave, and Hajj leave. If the plan enrollment start date is September 5, 2019, and the accrual period start date is before the plan enrollment start date (and the start date is not the hire date), the accrual is set to zero. Otherwise, the accrual is set to the input accrual value. write a  ensures that the leave accrual is accurately calculated based on the employee's band changes and specific leave types.\n\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/05 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL L_DATA = ESS_LOG_WRITE('HOS IV_ACCRUALPERIODSTARTDATE::'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')|| 'IV_CALEDARSTARTDATE:'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')||'IV_CALEDARENDDATE:'||TO_CHAR(IV_CALEDARENDDATE,'YYYY/MM/DD')) RETURN ACCRUAL",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the duration of half-day absences for employees in Singapore based on their work schedules and rosters. It determines if an absence is a full day or half day by comparing the entered absence hours to the total assigned shift hours, ensuring half-day absences are only counted as 0.5 days if the duration is less than half of the shift hours or meets specific time criteria, like starting or ending at midnight.\n\n***answer***: DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT FOR IV_ABS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION (NUMBER), IV_END_TIME(text), IV_ABS_START_DATE (DATE), IV_ABS_END_DATE (DATE) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_time_entered = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_time_entered = get_measure_from_time(IV_START_DATE,IV_END_DATE) IF l_date = l_end_date OR (ADD_DAYS(l_date,1) = l_end_date AND IV_END_TIME = '00:00' AND l_time_entered > 8) THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_DATA = ESS_LOG_WRITE('SG_DUR_CAL PLAN ANC_PUBLISHED_SHIFT_DETAILS_ARR'||ANC_PUBLISHED_SHIFT_DETAILS_ARR[i]) L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND l_date = IV_ABS_END_DATE AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'DD-MM-YYYY')||' '||IV_END_TIME,'DD-MM-YYYY HH24:MI') AND TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY')||' '||IV_START_TIME,'DD-MM-YYYY HH24:MI') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('SG_DUR_CAL PLAN 1:1:1 IN') ) ELSE IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'DD-MM-YYYY')||' '||IV_END_TIME,'DD-MM-YYYY HH24:MI') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_ABS_START_DATE,'DD-MM-YYYY HH24:MI'),'DD-MM-YYYY HH24:MI') OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD HH24:MI')) THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('SG_DUR_CAL PLAN 1:1:2 IN') ) i = i + 1 l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/L_tot_asg_hours) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('PLAN ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 IF IV_START_TIME = '00:00' AND IV_END_TIME = SUBSTR(l_asg_shift_end_date_CHAR,12,5) THEN ln_unrounded_duration_d = 1 ) ) ) DURATION = ln_unrounded_duration_d return DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the accrual for the \"Brought Forward Leave Plan 3 Years Expiry - Year 1.\" It determines the length of service in months by calculating the number of months between the start of the accrual period and the hire date. It retrieves the balance for the specified leave plan as of the end date of the previous year. The accrual is then set to write a  retrieved balance. The formula returns the calculated accrual along with any adjustment values, dates, and types.\n\n***answer***: DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_bfl_acrl_balance = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 1' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) accrual = 0 l_acrl_balance_year = 0 change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_bfl_plan_name) ) accrual = l_acrl_balance_year l_log =ess_log_write('L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)||'l_prv_year_end_date'||TO_CHAR(l_prv_year_end_date)) Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the accrual for the \"Brought Forward Leave Plan 3 Years Expiry - Year 2.\" It determines the length of service in months by calculating the number of months between the start of the accrual period and the hire date. It retrieves the balance for the specified leave plan as of the end date of the previous year. The accrual is then set to write a  retrieved balance. The formula returns the calculated accrual along with any adjustment values, dates, and types.\n\n***answer***: DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_bfl_acrl_balance = 0 l_bfl_acrl_balance_carry = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 2' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_bfl_plan_name) ) accrual = l_acrl_balance_year Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the duration of half-day absences for employees in Malaysia based on their work schedules and rosters. It determines the duration by comparing the entered absence hours to the total assigned shift hours, counting half-day absences as 0.5 days if the duration is less than half the shift hours, with adjustments for time criteria like starting before 2 PM or ending at midday. The formula returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text), IV_ABS_START_DATE (DATE), IV_ABS_END_DATE (DATE) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_day = 0 L_half_shift = 0 L_half_shift_DUR = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 L_tot_asg_hours_DAY = 0 l_entry_duration_DAY=0 l_new_st_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD HH24_MI') l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 l_pb_oh = 0 l_hours = 0 L_exc = 'X' L_DNP = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date L_FULL_DAY = 0 IF (IV_START_TIME = '00:00' AND IV_END_TIME = '23:59') THEN L_exc = 'Y' l_date = l_start_date L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN l_new_st_date:'|| TO_CHAR(IV_START_DATE,'YYYY/MM/DD HH24:MI')||'l_new_END_date:'||TO_CHAR(IV_END_DATE,'YYYY/MM/DD HH24:MI')||'IV_START_DATE'||TO_CHAR(IV_START_DATE,'yyyy-mm-dd')||'IV_START_TIME'||IV_START_TIME||'IV_END_DATE'||TO_CHAR(IV_END_DATE,'yyyy-mm-dd')||'IV_END_TIME'||IV_END_TIME||'IV_ABS_START_DATE'||TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD HH24:MI')||'IV_ABS_END_DATE'||TO_CHAR(IV_ABS_END_DATE,'YYYY/MM/DD HH24:MI')) L_count = 0 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN'||'v_person_id:'||TO_CHAR(v_person_id)||'v_assignment_id'||TO_CHAR(v_assignment_id)) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN l_date'||TO_CHAR(l_date,'yyyy-mm-dd')||'l_end_date'||TO_CHAR(l_end_date,'yyyy-mm-dd')||'L_exc'||L_exc) IF (l_date = l_end_date) THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL NEW LOOP l_date'||TO_CHAR(l_date,'yyyy-mm-dd')) l_day = 0 L_tot_asg_hours = 0 L_asg_hours = 0 L_half_shift = 0 IF l_date = l_end_date AND TO_CHAR(IV_START_DATE,'YYYY/MM/DD HH24:MI') != TO_CHAR(IV_END_DATE,'YYYY/MM/DD HH24:MI') THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_h = get_measure_from_time(IV_START_DATE,IV_END_DATE) l_entry_duration_DAY=get_measure_from_time(IV_ABS_START_DATE,IV_ABS_END_DATE) l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') L_DATA = ESS_LOG_WRITE('MY_DUR_CAL l_duration_char:'||l_duration_char) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_PUBLISHED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_PUBLISHED_SHIFT_DETAILS_ARR l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)||'shift end time:'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)) IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1:1') IF SUBSTR(l_asg_shift_end_date_CHAR,12,5) != '00:00' AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1 L_tot_asg_hours IN :'||TO_CHAR(L_tot_asg_hours)) ) IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND ROUND(l_entry_duration_h,0) = 24 THEN ( l_day = 1 ) ) ELSE IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,1),'DD-MM-YYYY') AND ( SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1 L_tot_asg_hours IN 5 :'||TO_CHAR(L_tot_asg_hours)) l_pb_oh = 1 ) i = i + 1 ) IF l_entry_duration_h < 5 THEN L_half_shift_DUR = 1 IF ((L_half_shift_DUR = 1 AND l_entry_duration_h = L_tot_asg_hours) OR (l_entry_duration_h > 0 AND l_entry_duration_h < L_tot_asg_hours AND (L_half_shift_DUR = 1 OR L_half_shift = 1))) THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1:1') ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY') AND IV_END_TIME = SUBSTR(l_asg_shift_end_date_CHAR,12,5) THEN ln_unrounded_duration_d = 1 ) ELSE IF L_half_shift_DUR = 0 AND l_entry_duration_h = L_tot_asg_hours THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ELSE IF l_pb_oh = 1 THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1:2') IF L_half_shift_DUR = 1 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF l_day = 1 THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:1:3') IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF L_tot_asg_hours > 3 AND ROUND(l_entry_duration_h,0) = 24 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF l_duration_char = '1' AND L_exc <> 'Y' AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('PLAN ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_ASSIGNED_SHIFT_DETAILS_ARR l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)) l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL INSIDE LOOP l_end_time:'||l_end_time||'shift_end_date_CHAR'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)||'l_start_time'||l_start_time ||'shift_st_date_CHAR'||SUBSTR(l_asg_shift_st_date_CHAR,12,5)||'l_duration_char'||l_duration_char) IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_count = 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1 L_tot_asg_hours IN:') ) ELSE IF l_end_time = SUBSTR(l_asg_shift_end_date_CHAR,12,5) OR l_start_time = SUBSTR(l_asg_shift_st_date_CHAR,12,5) THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_tot_asg_hours_DAY = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:2 L_tot_asg_hours IN:'||TO_CHAR(L_tot_asg_hours)) L_half_shift = 1 IF L_tot_asg_hours >= 7 THEN L_count = 1 ELSE L_count = 0 ) ELSE( L_tot_asg_hours_DAY = L_tot_asg_hours_DAY + L_asg_hours ) ) ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL checknew INSIDE LOOP L_count:'|| TO_CHAR(L_count)||'l_entry_duration_h:'||TO_CHAR(l_entry_duration_h)||'L_tot_asg_hours'||TO_CHAR(L_tot_asg_hours)|| 'L_tot_asg_hours_DAY'||TO_CHAR(L_tot_asg_hours_DAY)||'l_entry_duration_DAY' ||TO_CHAR(l_entry_duration_DAY)||'IV_ABS_END_DATE'||TO_CHAR(IV_ABS_END_DATE,'YYYY/MM/DD HH24:MI')||'IV_END_DATE'||TO_CHAR(IV_END_DATE,'YYYY/MM/DD HH24:MI')) IF L_count = 1 THEN ( IF SUBSTR(l_asg_shift_end_date_CHAR,12,5) = l_end_time THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:1 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) ELSE ( IF l_entry_duration_h = 0 or (l_entry_duration_h/L_tot_asg_hours) <= 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:2 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) ) ELSE IF l_entry_duration_h = L_tot_asg_hours OR (l_entry_duration_h > 0 AND l_entry_duration_h < L_tot_asg_hours) THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:3 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) ELSE IF l_entry_duration_h > 0 AND l_entry_duration_h >= L_tot_asg_hours AND L_tot_asg_hours > 0 THEN ( IF L_tot_asg_hours < 5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:4 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) IF TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD') = TO_CHAR(IV_ABS_END_DATE,'YYYY/MM/DD') THEN ( IF l_entry_duration_h < l_entry_duration_DAY AND (ROUND((l_entry_duration_DAY/(L_tot_asg_hours_DAY+1)),2) <= 0.55 AND (l_entry_duration_h <= 2)) AND IV_START_TIME < '14:00' THEN ln_unrounded_duration_d = 0 ELSE IF IV_START_TIME = '14:00' AND l_entry_duration_h < 0.5 AND l_entry_duration_DAY > 2 AND TO_DATE(TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD HH24:MI')) < TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD HH24:MI')) THEN ln_unrounded_duration_d = 0 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN 1:2:1:5 ln_unrounded_duration_d IN:'||to_char(ln_unrounded_duration_d)) ) ELSE IF TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD') = TO_CHAR(l_date,'YYYY/MM/DD') AND TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD') != TO_CHAR(IV_ABS_END_DATE,'YYYY/MM/DD')THEN ( IF l_entry_duration_h < 0.5 AND IV_END_TIME = '13:00' THEN ln_unrounded_duration_d = 0 ) ) ) ) ) DURATION = ln_unrounded_duration_d L_DATA = ESS_LOG_WRITE('MY_DUR_CAL PLAN DURATION:'||TO_CHAR(DURATION)) return DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates paternity leave applications for UK employees. It ensures the leave start date is within 15 weeks before or after the actual or expected child birth date and checks if a medical certificate (MAT B1) is uploaded. If these conditions are not met, it rejects the application. The formula returns a validity status along with an error message and tokens if the application is invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_reason = 'Maternity Leave' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_birth = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_birth = IV_ACTUALCHILDBIRTHDATE IF ADD_DAYS(IV_START_DATE, 105) < l_child_birth THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Start Date applied exceeding maximum of 15 weeks from Actual/Schedule Child Birthdate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please upload your certificate (MAT B1) from registered medical practitione or registered midwife, stating the expected week of childbirth. ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the carryover limit for annual leave in Singapore. It sets the limit to 5 days for grades U1 to U11, MA, G1 to G3, and S1 to S12, unless the employee was hired within 4 months of the accrual period start, in which case no carryover is allowed for grades U9, U10, and U11. The formula returns the calculated carryover limit.\n\n***answer***: DEFAULT FOR PER_ASG_BUSINESS_UNIT_NAME IS ' ' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) carryover = 0 l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_name = 'X' L_los_in_months = MONTHS_BETWEEN(IV_ACCRUALPERIODENDDATE, PER_ASG_REL_DATE_START) l_hire_date = PER_ASG_REL_DATE_START CHANGE_CONTEXTS(EFFECTIVE_DATE = IV_ACCRUALPERIODENDDATE, HR_ASSIGNMENT_ID = l_hr_assign_id) ( l_grade_name = PER_ASG_GRADE_NAME ) IF (l_grade_name = 'U9.' AND l_grade_name = 'U10.' AND l_grade_name = 'U11.') THEN ( IF l_hire_date > ADD_MONTHS(IV_ACCRUALPERIODSTARTDATE,-4) AND l_hire_date < IV_ACCRUALPERIODSTARTDATE THEN carryover = 5 ELSE carryover = 0 ) ELSE IF (l_grade_name = 'U1.' OR l_grade_name = 'U2.' OR l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'MA.' OR l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3' OR l_grade_name = 'S4' OR l_grade_name = 'S5' OR l_grade_name = 'S6' OR l_grade_name = 'S7' OR l_grade_name = 'S8' OR l_grade_name = 'S9' OR l_grade_name = 'S10' OR l_grade_name = 'S11' OR l_grade_name = 'S12') THEN carryover = 5 RETURN carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the duration of half-day absences for employees in Thailand based on their work schedules and rosters. It determines the duration by comparing the entered absence hours to the total assigned shift hours, counting half-day absences as 0.5 days if the duration is less than half the shift hours or spans midnight, and full days if it matches or exceeds shift hours. The formula returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 l_prv_duration_char = 'X' IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date WHILE (l_date <= l_end_date) LOOP ( L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( L_DATA = ESS_LOG_WRITE('TH_DUR_CAL LAST DAY l_date'||TO_CHAR(l_date,'yyyy-mm-dd')) l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_shift_st_date_prv = TO_CHAR(ADD_DAYS(l_date,-1),'yyyy-mm-dd')||' '||'00:00' l_shift_end_date_prv = TO_CHAR(ADD_DAYS(l_date,-1),'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') l_prv_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date_prv||''''||'|P_EFF_END_DATE='''|| l_shift_end_date_prv||'''') IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= IV_START_DATE OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_START_DATE) AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) ELSE IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF (l_duration_char = '1' OR (IV_END_TIME = '00:00' AND l_prv_duration_char = '1')) AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD')||IV_END_TIME,'YYYY/MM/DD HH24:MI') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD')||' '||IV_START_TIME,'YYYY/MM/DD HH24:MI') OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD')||' '||IV_START_TIME,'YYYY/MM/DD HH24:MI')) AND TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') != IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours IF L_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE IF l_duration_char = '1' AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') THEN ( IF TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') = TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') AND TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') = L_date THEN ( IF L_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') = L_date OR (ADD_DAYS(TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY'),1) = L_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5)= '00:00')THEN ( L_DATA = ESS_LOG_WRITE('TH_DUR_CAL 2:2:2 ADD DURATION') IF L_asg_hours < 5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) i = i + 1 ) ) ) ) l_date = ADD_DAYS(l_date,1) ) DURATION = ln_unrounded_duration_d return DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates half-pay maternity leave applications in Malaysia. It ensures the duration does not exceed 90 days, is applied after 90 days of full-pay maternity leave, and starts the day after the full-pay maternity leave ends. It also verifies the manager\u2019s active status and limits applications to the fifth child. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 l_maternity_fp_dur = 0 l_maternity_hp_dur = 0 L_without_cert_duration = 0 l_sl_balance = 0 L_grade_name = PER_ASG_GRADE_NAME l_limit = 0 L_prv_found = 'X' child_person_id[1] = 0 child_dob[1] = '1951/01/01 00:00:00' (date) j = 1 k = 1 l_contact_dob_char = 'X' l_contact_type = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') L_duration_days = ROUND(DAYS_BETWEEN(iv_end_date,iv_start_date),0) l_limit_DAYS = 90 l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_HP_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_type = 'X' l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( child_person_id[k] = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(PER_PER_CONT_REL_CONTACT_PERSON_ID[j])) child_dob[k] = TO_DATE(l_contact_dob_char) k = k + 1 ) j = j + 1 ) ) IF k > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_5_CHILD' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= add_months(iv_start_date,-12) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Maternity Leave - 1st Time Mothers' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_ONCE_YEAR' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_abs_typ_name_check = 'Maternity Leave' THEN ( l_maternity_fp_dur = l_maternity_fp_dur + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE)+1 IF ADD_DAYS(IV_START_DATE,-1) = ANC_ABS_ENTRS_END_DATE THEN L_prv_found = 'Y' ) ELSE IF l_abs_typ_name_check = 'Maternity Leave - Half Pay' THEN ( l_maternity_hp_dur = l_maternity_hp_dur + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE)+1 IF l_maternity_hp_dur + L_duration_days > 98 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_HP_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ) ) ) ) i = i + 1 ) IF l_maternity_fp_dur < 98 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_HP' RETURN VALID, ERROR_MESSAGE ) ELSE IF L_prv_found <> 'Y' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_HP_NEXTDAY_FP' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates first-time maternity leave applications in Malaysia. It ensures the duration does not exceed 180 days, the employee has worked at least 3 months, and the leave starts within 30 days after the actual or expected child birth date. It also checks the manager\u2019s active status and prohibits leave during probation for contract employees. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') L_duration_days = ROUND(DAYS_BETWEEN(iv_end_date,iv_start_date),0) l_mgr_asg_status = 'X' l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_birth = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_birth = IV_ACTUALCHILDBIRTHDATE IF L_duration_days > 180 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your leave duration exceeded 180 days. ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF (l_asg_category = 'CONTRACT' AND PER_ASG_DATE_PROBATION_END > iv_start_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF ADD_DAYS(l_child_birth,30) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EDOB_30_DAYS_LATER' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( IF PER_PER_CONT_REL_CONTACT_TYPE[j] = 'C' THEN ( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) IF ADD_MONTHS(l_contact_dob,7) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_MAT_FIRST_ERROR' RETURN VALID, ERROR_MESSAGE ) ) ELSE ELIGIBLE = 'Y' j = j + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates extended sick leave applications in Malaysia. It ensures they are only applied after 8 weeks of maternity leave have been utilized, preventing overlap with available sick leave balances. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_sl_balance = 0 l_person_id = GET_CONTEXT(PERSON_ID,-1) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) VALID = 'Y' change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_sl_balance = GET_PLAN_BALANCE('Sick Leave Plan') ) IF l_sl_balance > 0 THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'Employee can apply for more then Extended Maternity Leave only after 8 weeks of Maternity Leave have been utilized' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates pilgrimage leave applications in Malaysia. It ensures the duration does not exceed 7 days, the employee has 10 years of service, and no prior Hajj leave of 30 days has been taken. It also checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_TOTALDURATION > 7 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(7) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF MONTHS_BETWEEN(iv_start_date,PER_ASG_REL_DATE_START) < 120 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= l_hire_date , END_DATE= ADD_DAYS(IV_START_DATE,-1)) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check LIKE 'Hajj Leave%' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_hl_duration = l_hl_duration + ANC_ABS_ENTRS_DURATION IF l_hl_duration = 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_hl_duration > 23 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-l_hl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates pilgrimage or Umrah leave applications in Malaysia. It ensures the duration does not exceed 7 or 10 days (depending on grade and religion), the employee has 5 or 10 years of service (based on grade and religion), and no prior Hajj leave exceeds the entitlement (30 or 40 days). It also checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_LOCATION_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_LDG_LEGISLATION_CODE IS 'NULL' DEFAULT_DATA_VALUE FOR PER_EXT_RELIGION_NAME IS 'NULL' DEFAULT_DATA_VALUE FOR PER_EXT_RELIGION_LEGISLATION_CODE IS 'NULL' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' l_person_religion = ' ' l_location = PER_ASG_LOCATION_NAME l_union = PER_ASG_ATTRIBUTE7 IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (l_grade_name LIKE 'G%' OR l_grade_name LIKE 'U%' ) THEN l_entitlement = 40 ELSE l_entitlement = 30 IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name = '70' OR l_grade_name ='71' OR l_grade_name ='72' OR l_grade_name = '35' OR l_grade_name ='36' OR l_grade_name ='73' OR l_grade_name ='74') THEN ( IF PER_LDG_LEGISLATION_CODE WAS NOT DEFAULTED THEN ( L_LEGISLATION_CODE = PER_LDG_LEGISLATION_CODE I = 1 WHILE PER_EXT_RELIGION_LEGISLATION_CODE.EXISTS(I) LOOP ( IF (PER_EXT_RELIGION_LEGISLATION_CODE[I] = TRIM(L_LEGISLATION_CODE)) THEN ( l_person_religion = PER_EXT_RELIGION_NAME[I] ) I = I + 1 ) ) l_person_religion = l_person_religion ) IF (ADD_MONTHS(l_hire_date,60) > IV_START_DATE) AND ((l_grade_name = 'G1.' OR l_grade_name ='G2.' OR l_grade_name ='G3.' OR l_grade_name like 'U1%' OR l_grade_name like 'U2%' OR l_grade_name like 'U3%' OR l_grade_name like 'U4%' OR l_grade_name like 'U5%' OR l_grade_name like 'U6%' OR l_grade_name like 'U7%' OR l_grade_name like 'U8%' OR l_grade_name like 'U9%' OR l_grade_name like 'U10%'OR l_grade_name like 'U11%' OR l_grade_name ='75' OR l_grade_name ='76' OR l_grade_name ='77' OR l_grade_name ='78' OR l_grade_name ='79' OR l_grade_name ='80' OR l_grade_name ='81' OR l_grade_name like '%.DE')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not elgible for Umrah/Pilgrimage Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((l_grade_name LIKE 'G%' OR l_grade_name LIKE 'U%' OR l_grade_name LIKE '8%' OR l_grade_name LIKE '%DE' OR l_grade_name = '75' OR l_grade_name = '76' OR l_grade_name = '77' OR l_grade_name = '78' OR l_grade_name = '79') AND(IV_TOTALDURATION > 7)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You maximum entitlement is 7 days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_TOTALDURATION > 7 AND (l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '34%'))THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You maximum entitlement is 7 days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) < 120) AND ( l_grade_name LIKE '34%') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (UPPER(l_person_religion) = 'ISLAM') AND (ADD_MONTHS(l_hire_date,60) < IV_START_DATE) THEN ( IF (IV_TOTALDURATION > 10 AND (l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72' OR l_grade_name = '73' OR l_grade_name ='74'))THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You maximum entitlement is 10 days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_TOTALDURATION > 10 AND (l_grade_name = '35' OR l_grade_name ='36' AND (l_union = 'CIMB Bank Berhad Executive Staff Union (CIMBESU) - Peninsular')))THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Umrah Leave for Muslim CIMBESU members is 10 days per service.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) < 120) AND (l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72' OR l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '34%') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) < 60) AND (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '73' OR l_grade_name ='74') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for this leave only after 5 years of service.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= l_hire_date , END_DATE= ADD_DAYS(IV_START_DATE,-1)) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check LIKE 'Hajj Leave%' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_hl_duration = l_hl_duration + ANC_ABS_ENTRS_DURATION IF l_hl_duration = l_entitlement THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_entitlement - l_hl_duration <= 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_entitlement - l_hl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates unpaid leave applications in Malaysia. It ensures no annual leave balance remains, the leave does not overlap calendar years, and for emergency leave, a reason is provided. It also prohibits leave during probation unless all annual and sick leave are exhausted, and checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: default for per_asg_date_probation_end is '1951/01/01 00:00:00' (date) default for per_asg_rel_date_start is '1951/01/01 00:00:00' (date) default for per_asg_grade_name is 'X' default for per_asg_sex is 'X' default for global_pay_interface_extraction_date is '1951/01/01' default for iv_attribute_1 is 'X' default for per_asg_action_code is 'X' default for per_asg_job_name is 'X' default for per_asg_user_person_type is 'X' default_data_value for anc_per_abs_entrs_absence_entry_id_arr is 0 default for anc_abs_entrs_duration is 0 default for anc_abs_typ_name is ' ' default for anc_abs_entrs_absence_status_cd is ' ' default for anc_abs_entrs_end_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_start_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_absence_type_id is 0 default for anc_abs_entrs_approval_status_cd is 'X' default for anc_abs_entrs_user_mode is 'X' default for per_asg_manager_user_person_id is 0 default for per_per_person_number is 'X' default for per_asg_employment_category is 'X' inputs are iv_start_date (date),iv_end_date (date),iv_caledarstartdate (date), iv_caledarenddate (date),iv_totalduration (number), iv_absence_reason (text), iv_attribute_1 (text) valid = 'Y' l_duration = iv_totalduration l_grade_name = per_asg_grade_name effdate = to_date(global_pay_interface_extraction_date ,'rrrr/mm/dd') l_hr_assign_id = get_context(hr_assignment_id,0) l_ldg_id = get_context(legislative_data_group_id,0) l_person_id = get_context(person_id,0) l_probation_end = per_asg_date_probation_end l_ann_acrl_balance_emp = 0 l_ann_acrl_balance_contr = 0 l_ann_acrl_balance = 0 l_year_start_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_hire_date = per_asg_rel_date_start l_job_name = per_asg_job_name l_user_person_type = per_asg_user_person_type l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = get_context(absence_entry_id,0) l_absence_entry_id = to_char(l_abs_entry_id) l_sl_days = 0 i = 1 l_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = get_context(effective_date,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(hr_assignment_id,0) l_person_id = get_context(person_id,0) l_asg_category = per_asg_employment_category l_fnd_person_number = get_value_set('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' if MOD(l_duration,0.5) <> 0 then ( valid = 'N' error_message = 'CIMB_MIN_DAYS_REQ' token_name[1] = 'MSG' token_value[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' return valid, error_message, token_name, token_value ) if isnull(l_fnd_person_number) = 'N' then l_fnd_person_number = 'N' change_contexts(hr_assignment_id = l_hr_assign_id, effective_date = effdate) ( l_manager_id = per_asg_manager_user_person_id ) l_mgr_asg_status = get_value_set('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = get_value_set('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date=l_effective_date,absence_entry_id = l_abs_entry_id) ( l_user_mode=anc_abs_entrs_user_mode ) if (l_user_mode != 'ADMIN' and per_per_person_number = l_fnd_person_number) or (l_user_mode != 'ADMIN' and l_manager_id = TO_NUMBER(l_fnd_person_number_id)) then ( if iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') then ( valid = 'N' error_message = 'CIMB_PRIOR_DM' return valid, error_message ) if l_mgr_asg_status <> 'ACTIVE' or l_manager_id = 0 then ( valid = 'N' error_message = 'CIMB_INACTIVE_MGR_ERROR' return valid, error_message ) change_contexts(effective_date = l_year_end_date, legislative_data_group_id = l_ldg_id) ( if l_asg_category != 'CONTRACT' then ( l_ann_acrl_balance_emp = get_plan_balance('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) else ( l_ann_acrl_balance_contr = get_plan_balance('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) ) if (iv_start_date > per_asg_date_probation_end and per_asg_date_probation_end < ADD_MONTHS(l_hire_date,24)) then ( if l_ann_acrl_balance_emp > 0 and iv_absence_reason <> 'Adoption' then ( valid = 'N' error_message = 'CIMB_UNPAID_ERROR' return valid, error_message ) if l_ann_acrl_balance_contr > 0 and iv_absence_reason <> 'Adoption' then ( valid = 'N' error_message = 'CIMB_UNPAID_ERROR' return valid, error_message ) ) if iv_absence_reason <> 'Emergency Leave' then ( l_msg = 'In' l_nxt_working_day = add_days(effdate,1) l_chk_nxt_wrk_dur = get_pay_availability ('ASSIGN', add_days(effdate,1), add_days(effdate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(l_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(l_chk_nxt_wrk_dur) if l_chk_nxt_wrk_dur < 1 then ( while (l_chk_nxt_wrk_dur < 1) loop ( l_nxt_working_day = add_days(l_nxt_working_day,1) l_chk_nxt_wrk_dur = get_pay_availability ('ASSIGN', add_days(effdate,1), add_days(l_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(l_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(l_chk_nxt_wrk_dur) ) ) if TO_DATE(TO_CHAR(l_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') then ( valid = 'N' error_message = 'CIMB_ABS_AL_FUTURE_ABSENCE' return valid, error_message ) ) if iv_absence_reason = 'Emergency Leave' and iv_attribute_1 = 'X' then ( valid = 'N' error_message = 'CIMB_ABS_AL_EMRG_ABSENCE' return valid, error_message ) if (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) or (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) then ( valid = 'N' error_message = 'CIMB_ABS_OVERLAP' return valid, error_message ) if iv_absence_reason = 'Adoption' and per_asg_sex = 'M' then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Unpaid Leave - Adoption.' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Adoption' and iv_totalduration > 30 then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'Maximum entitlement for Unpaid Adoption Leave per Adopted Child is 30 days' return valid, error_message, token_name, token_value ) ) return valid,error_message",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates extended no-pay maternity leave applications in Singapore. It ensures the leave is applied within 12 months of the child\u2019s birth, follows 56 days of maternity leave, and does not exceed 28 days in total across multiple blocks. It also checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,-1) l_absence_entry_id = to_char(l_abs_entry_id) l_ml_duration = 0 l_msg = 'X' l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_ml_end_date = '1951/01/01 00:00:00' (date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_prv_found = 'X' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_dob = IV_ACTUALCHILDBIRTHDATE IF ADD_MONTHS(l_child_dob,12) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_PRV_YEAR_CHILD' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_MONTHS(l_child_dob,-12) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Extended Maternity Leave - No Pay' OR l_abs_typ_name_check = 'Maternity Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Maternity Leave' THEN ( l_ml_duration = l_ml_duration + ANC_ABS_ENTRS_DURATION IF ADD_DAYS(IV_START_DATE,-1) = ANC_ABS_ENTRS_END_DATE THEN L_prv_found = 'Y' ) ELSE IF l_abs_typ_name_check = 'Extended Maternity Leave - No Pay' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > 28 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EXT_MAP_NP_MAX' RETURN VALID, ERROR_MESSAGE ) ) ) ) ) i = i + 1 ) ) IF l_ml_duration < 56 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_BAL_AVL' RETURN VALID, ERROR_MESSAGE ) ELSE IF L_prv_found <> 'Y' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EXT_MAT_AFT_MAT' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates national service committee leave applications in Singapore. It ensures the application does not occur before September 23, 2019, and the manager is active. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) VALID = 'Y' l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates lieu leave applications in Singapore. It ensures the leave is not applied for a day worked before or on the hire date, and the manager is active. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF IV_ATTRIBUTE_DATE1 <= PER_ASG_REL_DATE_START THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply in Lieu of a day worked prior to or on hire date' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates unpaid leave applications in Thailand. It ensures no annual leave balance remains, the leave is applied after probation (more than 6 months or probation end), and all sick leave (90 days) is exhausted. It also checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_comp_limit = 'X' l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_grade_band = 'X' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance_Year = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) i = 1 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) L_sl_duration = 0 L_esl_duration = 0 l_usl_duration = 0 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY L_hire_date = PER_ASG_REL_DATE_START l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ELSE L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') ) IF L_Annual_Acrl_Balance > 0 AND l_start_date > ADD_DAYS(PER_ASG_DATE_PROBATION_END,1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_UP_AL_BAL_AVL' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates sick leave applications in Malaysia. It ensures the duration does not exceed 14\u201330 days (based on grade), does not allow half-days for shift workers, and requires a medical certificate for durations over 1 day. It checks the manager\u2019s active status, prevents overlap between calendar years for non-contract employees, and limits sick leave without a certificate to 5 days per year. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START l_asg_end = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE 'C%' OR l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' OR l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN ( l_sl_limit = 14 L_year_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_CONTRACT_RENEWAL_DATE','|=P_PERSON_ID='||to_char(l_person_id)),'YYYY-MM-DD') L_year_end_date = EffDate ) ELSE IF l_grade_name LIKE 'XT' THEN l_sl_limit = 21 ELSE l_sl_limit = 30 IF IV_ABSENCE_REASON != 'Sick Leave without Certificate' AND (IV_ATTRIBUTE_1 = 'X' or IV_ATTRIBUTE_2 = 'X') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WITHO_CERT' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = ' Your leave duration is '||to_char(l_duration)||' day(s), Please change to Full day' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' Your leave duration exceed '||to_char(l_sl_limit)||' day(s) Annual Provision' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Sick Leave without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION ) ) ) i = i + 1 ) ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( IF IV_ABSENCE_REASON = 'Sick Leave without Certificate' THEN ( CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( L_without_cert_duration = 0 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF (l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND l_abs_typ_name_check = 'Sick Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755198 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755055 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014)) THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Sick Leave for more than one (1) consecutive day will require a medical certificate. Please change reason for Sick Leave and attached Medical Certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION ) ) ) ) j = j + 1 ) ) IF (L_without_cert_duration + l_duration) > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = IV_ABSENCE_REASON||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_without_cert_duration)|| ' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (IV_ABSENCE_REASON != 'Sick Leave without Certificate' AND IV_TOTALDURATION <=1 ) THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attach your Medical Certificate and click \"Save and Close\". Go to \"Existing Leave\", click on \"Pencil\" icon next to saved \"Sick Leave\" and click \"Submit\"' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates hospitalization leave applications in Singapore. It ensures sufficient balance exists in the hospitalization leave plan, the leave does not overlap calendar years, and the manager is active. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance = 0 VALID = 'Y' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave (Including Sick Leave)') ) IF L_Acrl_Balance - IV_TOTALDURATION < 0 THEN ( VALID = 'N' ERROR_MESSAGE= 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates hospitalization leave applications in Malaysia. It ensures sufficient balance exists in the hospitalization leave plan, the leave does not overlap calendar years, and half-days are not allowed for shift workers or union members. It checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance = 0 l_plan_name = 'X' VALID = 'Y' L_user_person_type = PER_ASG_USER_PERSON_TYPE l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_duration = IV_TOTALDURATION l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_grade_name = PER_ASG_GRADE_NAME l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave Plan (Including Sick Leave)') l_plan_name = 'Hospitalization Leave Plan(Including Sick Leave)' ) ELSE ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave Plan Contractor (Including Sick Leave)') l_plan_name = 'Hospitalization Leave Plan Contractor (Including Sick Leave)' ) ) IF L_Acrl_Balance - IV_TOTALDURATION < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (((l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND l_grade_name NOT LIKE '%.C') OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%') AND l_union = 'National Union of Bank Employees (NUBE)')) AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates hospitalization leave applications in Malaysia. It ensures sufficient balance exists in the hospitalization leave plan, the leave does not overlap calendar years, and half-days are not allowed for shift workers or union members. It checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance = 0 l_plan_name = 'X' VALID = 'Y' L_user_person_type = PER_ASG_USER_PERSON_TYPE l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_duration = IV_TOTALDURATION l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_grade_name = PER_ASG_GRADE_NAME l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave Plan') l_plan_name = 'Hospitalization Leave Plan' ) ELSE ( L_Acrl_Balance = GET_PLAN_BALANCE('Hospitalization Leave Plan Contractor') l_plan_name = 'Hospitalization Leave Plan Contractor' ) ) IF L_Acrl_Balance - IV_TOTALDURATION < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (((l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND l_grade_name NOT LIKE '%.C') OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%') AND l_union = 'National Union of Bank Employees (NUBE)')) AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the enrollment start date for absence plans in Malaysia. It uses the later of the employee\u2019s hire date or September 23, 2019, as the start date. The formula returns the calculated enrollment start date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) l_hire_date = PER_ASG_REL_DATE_START l_start_date = to_date('2019-09-23','yyyy-MM-dd') IF ( l_hire_date > l_start_date) THEN ( enrollmentStartDate = l_hire_date ) Else ( enrollmentStartDate = l_start_date ) RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the enrollment start date for absence plans in Thailand. It uses the later of the employee\u2019s hire date or September 5, 2019, as the start date. The formula returns the calculated enrollment start date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) l_hire_date = PER_ASG_REL_DATE_START l_start_date = to_date('2019-09-05','yyyy-MM-dd') IF ( l_hire_date > l_start_date) THEN ( enrollmentStartDate = l_hire_date ) Else ( enrollmentStartDate = l_start_date ) RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the enrollment start date for absence plans in Singapore. It uses the later of the employee\u2019s hire date or September 23, 2019, as the start date. The formula returns the calculated enrollment start date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) l_hire_date = PER_ASG_REL_DATE_START l_start_date = to_date('2019-09-23','yyyy-MM-dd') IF ( l_hire_date > l_start_date) THEN ( enrollmentStartDate = l_hire_date ) Else ( enrollmentStartDate = l_start_date ) RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates retirement leave applications in Malaysia. It ensures the leave is applied within one month of the last working day and the manager is active. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date < ADD_MONTHS(PER_ASG_REL_ACTUAL_TERMINATION_DATE,-1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_RET_LEAVE_MONTH' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates voluntary leave applications in Malaysia. It ensures the duration is in full or half-day increments, the leave does not overlap calendar years, and the manager is active. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_mgr_asg_status = 'X' l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates unpaid leave applications in Singapore. It ensures no annual leave balance remains, the leave does not overlap calendar years, and for emergency leave, a reason is provided. It also prohibits leave during the first 3 months or probation period unless all annual leave is exhausted, and checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date < LEAST(l_probation_end,ADD_MONTHS(L_hire_date,3)) THEN ( change_contexts(effective_date = iv_start_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) ) IF (L_Ann_Acrl_Balance_emp > 0 OR L_Ann_Acrl_Balance_contr > 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_UNPAID_ERROR' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates unpaid leave applications in Thailand. It ensures no annual leave balance remains, the leave is applied after probation (more than 6 months), and all sick leave (90 days) is exhausted. It also checks the manager\u2019s active status. The formula returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF L_user_person_type != 'Fixed Term Contract' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) ) IF (iv_start_date > PER_ASG_DATE_PROBATION_END AND PER_ASG_DATE_PROBATION_END < ADD_MONTHS(L_hire_date,6)) THEN ( CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Extended Sick Leave' OR l_abs_typ_name_check = 'Unpaid Sick Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,L_year_start_date) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(L_year_end_date,ANC_ABS_ENTRS_START_DATE) + 1 ) ) ) I = I + 1 ) ) IF (L_Ann_Acrl_Balance_emp > 0 OR L_Ann_Acrl_Balance_contr > 0) OR L_sl_days < 90 THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply for Unpaid Leave only after using Annual Leave and Sick Leave' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the duration of absences based on work schedules. It adds 1 day for each non-public holiday day between the start and end dates, adjusting for half-day starts or ends by subtracting 0.5 days. The formula returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION lc_use_sch_asg_y = 'N' lc_use_sch_inh_y = 'N' lc_include_noshift_y = 'N' lc_include_calevents_y = 'Y' lc_calc_units_d = 'D' l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_ph = 'X' l_date_st = 'X' WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) IF ln_start_duration = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates the duration of absences based on work schedules. It uses a pay availability function to determine working days between start and end dates, adjusting for half-day starts or ends by subtracting 0.5 days, and adds 1 day for each non-public holiday day if no working days are found. The formula returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION lc_use_sch_asg_y = 'N' lc_use_sch_inh_y = 'N' lc_include_noshift_y = 'N' lc_include_calevents_y = 'Y' lc_calc_units_d = 'D' l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') l_date = l_start_date l_ph = 'X' l_date_st = 'X' ln_unrounded_duration_d = GET_PAY_AVAILABILITY (lc_asg_resource_type, ld_period_start_date, ld_period_end_date, lc_use_sch_asg_y, lc_use_sch_inh_y, lc_include_noshift_y, lc_include_calevents_y, lc_calc_units_d) IF ln_unrounded_duration_d = 0 THEN ( WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) ) IF ln_unrounded_duration_d < 0.5 AND ln_unrounded_duration_d > 0 THEN ln_unrounded_duration_d = 0.5 IF IV_START_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for contractors in Thailand based on band changes. Determines the number of band changes within the accrual period, assigns accrual rates before and after each change, and restricts accrual during unpaid, maternity, emergency, or Hajj leave. Adjusts accrual based on absence days and returns the final prorated accrual value.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_9_yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_grade_band = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_hire_date = PER_ASG_REL_DATE_START l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ann_year_start_dt = '4712/12/31 00:00:00' (date) L_ann_year_end_dt = '1951/01/01 00:00:00' (date) l_worked_days = 0 l_total_days = 0 L_Accrual_Prd_Strt_Dt = IV_ACCRUALPERIODSTARTDATE L_Accrual_Prd_End_Dt = IV_ACCRUALPERIODENDDATE l_adj_value = 0 accrual1 = 0 l_dm_date = '2019/09/05 00:00:00' (date) L_ann_year_start_dt = TO_DATE(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')) L_ann_year_end_dt = ADD_DAYS(TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY'))+1)||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')),-1) L_Accrual_Prd_Strt_Dt = L_ann_year_start_dt L_Accrual_Prd_End_Dt = L_ann_year_end_dt IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ACCRUAL = 0 ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) l_hire_date = PER_ASG_REL_DATE_START r = ess_log_write('l_hire_date:'||to_char(l_hire_date)) r = ess_log_write('L_ann_year_start_dt:'||to_char(L_ann_year_start_dt)) r = ess_log_write('L_ann_year_end_dt:'||to_char(L_ann_year_end_dt)) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = TO_DATE(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY')||'-'||TO_CHAR(PER_ASG_REL_DATE_START,'MM')||'-'||TO_CHAR(PER_ASG_REL_DATE_START,'DD')) period_end_date = LEAST(PER_ASG_REL_ACTUAL_TERMINATION_DATE , ADD_DAYS(ADD_MONTHS(period_start_date,12),-1)) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Contractor Annual Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan') THEN ( CHANGE_CONTEXTS(START_DATE = IV_CALEDARSTARTDATE,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Training Leave') THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('period_end_date: '|| TO_CHAR(period_end_date)||'period_start_date'||TO_CHAR(period_start_date)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, period_start_date) l_no_of_days2 = DAYS_BETWEEN(period_end_date, l_band_chg_dt1) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) ) IF ( L_Accrual_Prd_Strt_Dt < l_band_chg_dt2 AND L_Accrual_Prd_End_Dt > l_band_chg_dt2) THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, period_start_date) l_no_of_days2 = DAYS_BETWEEN(l_band_chg_dt2, l_band_chg_dt1) l_no_of_days3 = DAYS_BETWEEN(period_end_date, l_band_chg_dt2) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) l_accrued_period3 = ROUND(((l_accrued_period3 * (l_no_of_days3 - l_approved_abs_days3))/ l_acrl_per_duration), 3) ) ACCRUAL = l_accrued_period1 + l_accrued_period2 + l_accrued_period3 l_log = ESS_LOG_WRITE('l_no_of_days1: '|| TO_CHAR(l_no_of_days1)) l_log = ESS_LOG_WRITE('l_no_of_days2: '|| TO_CHAR(l_no_of_days2)) l_log = ESS_LOG_WRITE('l_no_of_days3: '|| TO_CHAR(l_no_of_days3)) l_log = ESS_LOG_WRITE('Total Absences: '|| TO_CHAR(l_approved_abs_days1 + l_approved_abs_days2 + l_approved_abs_days3)) l_log = ESS_LOG_WRITE('l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('Accrual: '|| TO_CHAR(Accrual)) ) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual <= 0.25) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.25 and decimal_accrual <= 0.75) THEN final_accrual = floored_accrual+ 0.5 IF (decimal_accrual > 0.75) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN ACCRUAL",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates study leave applications in Thailand. Ensures the leave start date is not before September 5, 2019, and the manager is active. Returns a validity status along with an error message if the application is invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates maternity leave applications in Thailand. Ensures the duration does not exceed 105 days for Laos branches or 98 days (45 full pay, 53 no pay) for others, checks if full-pay maternity leave is fully utilized before no-pay, verifies the manager\u2019s active status, and ensures the application is not before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_LOCATION_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_duration = IV_TOTALDURATION l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_Mat_Balance = 0 l_dob = '1951/01/01 00:00:00' (date) I = 1 L_mlfp_duration = 0 L_mlnp_duration = 0 L_ml_limit = 0 L_ml_duration = 0 L_Dep_name = PER_ASG_ORG_DEPARTMENT_NAME l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = TO_CHAR(l_absence_entry_id_num) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_limit_DAYS_mlfp = 45 l_limit_DAYS_mlnp = 53 l_msg = 'X' l_loc_name = PER_ASG_LOCATION_NAME CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_dob = IV_ACTUALCHILDBIRTHDATE IF (l_loc_name = 'Vientiane Branch, Laos' OR l_loc_name = 'Vientiane, Laos Branch') THEN L_ml_limit = 105 ELSE( L_ml_limit = 98 IF IV_ABSENCE_REASON = 'Full Pay' THEN L_ml_limit = l_limit_DAYS_mlfp ELSE L_ml_limit = l_limit_DAYS_mlnp ) IF l_duration > L_ml_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MAT_LEAVE_MAX' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(L_ml_limit) TOKEN_NAME[2] = 'ABS_TYPE' IF IV_ABSENCE_REASON = 'Full Pay' THEN TOKEN_VALUE[2] = 'Maternity Leave Full Pay' ELSE TOKEN_VALUE[2] = 'Maternity Leave No Pay' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(iv_start_date,-12), END_DATE = iv_start_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Maternity Leave' THEN ( l_msg = l_msg||'reas:'||to_char(ANC_ABS_ENTRS_ABSENCE_REASON_ID) IF ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000473222989 THEN ( L_mlfp_duration = L_mlfp_duration + ANC_ABS_ENTRS_DURATION IF IV_ABSENCE_REASON = 'Full Pay' THEN L_ml_duration = L_mlfp_duration + L_ml_duration ) ELSE IF ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000473222991 THEN ( L_mlnp_duration = L_mlnp_duration + ANC_ABS_ENTRS_DURATION IF IV_ABSENCE_REASON = 'No Pay' THEN L_ml_duration = L_mlnp_duration + L_ml_duration ) ) ) ) ) i = i + 1 ) ) IF L_ml_duration + l_duration > L_ml_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MAT_LEAVE_MAX' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(L_ml_limit) TOKEN_NAME[2] = 'ABS_TYPE' IF IV_ABSENCE_REASON = 'Full Pay' THEN TOKEN_VALUE[2] = 'Maternity Leave Full Pay' ELSE TOKEN_VALUE[2] = 'Maternity Leave No Pay' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF IV_ABSENCE_REASON = 'No Pay' AND L_mlfp_duration <> l_limit_DAYS_mlfp THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MAT_LEAVE_NPAFP' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sick leave applications in Malaysia. Ensures the duration does not exceed 14\u201330 days (based on grade), prohibits half-days for shift workers, requires a medical certificate for durations over 1 day, checks the manager\u2019s active status, prevents overlap between calendar years for non-contract employees, and limits sick leave without a certificate to 5 days per year. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 30 IF IV_ABSENCE_REASON != 'Sick Leave without Certificate' AND (IV_ATTRIBUTE_1 = 'X' or IV_ATTRIBUTE_2 = 'X') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WITHO_CERT' RETURN VALID, ERROR_MESSAGE ) IF ((l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days of Banking') AND l_grade_name NOT LIKE '%.C') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Sick Leave without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) IF ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000002463386 AND IV_ABSENCE_REASON = 'Sick Leave without Certificate' THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_PRV_NXT_DAY' RETURN VALID, ERROR_MESSAGE ) ELSE( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION IF (L_without_cert_duration + l_duration) > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_MAX_5' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) ) ) i = i + 1 ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON != 'Sick Leave without Certificate' THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE= 'CIMB_ABS_MEDCERT_MANDATORY' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates adoption/paternity leave applications in Malaysia. Ensures the leave start date matches the child\u2019s birth date, the employee has worked at least 3 months, prohibits leave during probation for contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' j = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_child_birth = '1951/01/01 00:00:00' (date) L_child_exists = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN l_child_birth = IV_ACTUALCHILDBIRTHDATE ELSE l_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF (l_child_birth <> iv_start_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_APL_CHILD_DOB' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( l_count = 0 WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( IF PER_PER_CONT_REL_CONTACT_TYPE[j] = 'C' THEN ( l_count = l_count + 1 ) j = j +1 ) IF l_count > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_APL_FIRST_CHILD' RETURN VALID, ERROR_MESSAGE ) ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates compassionate leave applications in Malaysia. Ensures the duration does not exceed 3\u20135 days (based on grade and reason), prohibits overlap between calendar years for non-contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_SEX IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_cl_duration = 0 l_grade_name = PER_ASG_GRADE_NAME l_abs_reason = IV_ABSENCE_REASON L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_cl_balance = 0 L_hire_date = PER_ASG_REL_DATE_START l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) L_cl_limit_days = 10 l_mgr_asg_status = 'X' l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name = 'INTERN' OR l_grade_name = 'MT' OR l_grade_name = 'MA' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_NE_GRADES' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND PER_ASG_EMPLOYMENT_CATEGORY != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_abs_reason = 'Death in Family' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_abs_reason = 'Serious Illness' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(2) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '34' ) AND l_abs_reason = 'Serious Illness' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name LIKE '33%') AND l_abs_reason = 'Disaster' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name <> '34' OR l_grade_name <> '32' OR l_grade_name <> '33' OR l_grade_name <> '33S') AND IV_ABSENCE_REASON <> 'Paternity' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_ABSENCE_REASON = 'Paternity' AND l_duration > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_PL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_ABSENCE_REASON = 'Paternity' AND PER_ASG_SEX <> 'M' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_PL_FEMALE_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_EMPLOYMENT_CATEGORY = 'CONTRACT' THEN ( L_year_start_date = L_HIRE_date IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' OR l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN L_cl_limit_days = 5 IF TO_CHAR(L_HIRE_date,'MM') > TO_CHAR(iv_start_date,'MM') THEN ( L_year_start_date = TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(iv_start_date,'YYYY'))-1)||'/'||TO_CHAR(L_HIRE_date,'MM')||'/'||TO_CHAR(L_HIRE_date,'DD'),'YYYY/MM/DD') L_year_end_date = ADD_MONTHS(L_year_start_date,12) ) ELSE( L_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'/'||TO_CHAR(L_HIRE_date,'MM')||'/'||TO_CHAR(L_HIRE_date,'DD'),'YYYY/MM/DD') L_year_end_date = ADD_MONTHS(L_year_start_date,12) ) IF PER_ASG_PROJECTED_ASSIGNMENT_END_DATE WAS NOT DEFAULTED THEN L_year_end_date = PER_ASG_PROJECTED_ASSIGNMENT_END_DATE ) IF l_grade_name NOT LIKE 'C%' THEN ( CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > L_cl_limit_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_10_DAYS_MORE' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) ) ELSE IF l_grade_name LIKE 'C%' THEN ( IF l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_CONTRACT_3_DAYS' RETURN VALID, ERROR_MESSAGE ) i = 1 l_cl_duration = 0 CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_CONTRACT_3_DAYS' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates compassionate leave applications in Malaysia. Ensures the duration does not exceed 3\u20135 days (based on grade and reason), prohibits overlap between calendar years for non-contract employees, verifies the manager\u2019s active status, restricts applications before September 23, 2019, and checks leave duration increments (half-day or full-day). Returns a validity status with an error message if invalid.\n\n***answer***: default for anc_abs_entrs_duration is 0 default for iv_totalduration is 0 default for anc_abs_entrs_approval_status_cd is ' ' default_data_value for anc_per_abs_entrs_absence_entry_id_arr is 0 default for anc_abs_entrs_absence_type_id is 0 default for anc_abs_entrs_duration is 0 default for anc_abs_typ_name is ' ' default for anc_abs_entrs_absence_status_cd is ' ' default for anc_abs_entrs_end_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_start_date is '4712/12/31 00:00:00' (date) default for iv_start_date is '4712/12/31 00:00:00' (date) default for iv_end_date is '4712/12/31 00:00:00' (date) default for iv_caledarstartdate is '4712/12/31 00:00:00' (date) default for iv_caledarenddate is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_absence_reason_id is 0 default for per_asg_grade_name is 'X' default for iv_absence_reason is 'X' default for per_asg_rel_date_start is '1951/01/01 00:00:00' (date) default for per_asg_projected_assignment_end_date is '4712/12/31 00:00:00' (date) default for global_pay_interface_extraction_date is '1951/01/01' default for per_asg_user_person_type is 'X' default for per_asg_sex is 'X' default for per_asg_employment_category is 'X' default for anc_abs_entrs_user_mode is 'X' default for per_asg_manager_user_person_id is 0 default for per_per_person_number is 'X' default for per_asg_date_probation_end is '4712/12/31 00:00:00' (date) inputs are iv_start_date (date),iv_end_date (date),iv_caledarstartdate (date), iv_caledarenddate (date),iv_totalduration (number), iv_absence_reason (text) valid = 'Y' l_duration = iv_totalduration l_abs_entry_id = get_context(absence_entry_id,0) l_absence_entry_id = to_char(l_abs_entry_id) effdate = to_date(global_pay_interface_extraction_date ,'rrrr/mm/dd') l_year_start_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_cl_duration = 0 l_grade_name = per_asg_grade_name l_abs_reason = iv_absence_reason l_ldg_id = get_context(legislative_data_group_id,0) l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_cl_balance = 0 l_hire_date = per_asg_rel_date_start l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = get_value_set('CIMB_ATTACHMENTS',l_param) l_effective_date = get_context(effective_date,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(hr_assignment_id,0) l_person_id = get_context(person_id,0) l_cl_limit_days = 10 l_mgr_asg_status = 'X' l_fnd_person_number = get_value_set('CIMB_GET_FND_PERSON') if MOD(l_duration,0.5) <> 0 then ( valid = 'N' error_message = 'CIMB_MIN_DAYS_REQ' token_name[1] = 'MSG' token_value[1] = 'You leave duration is incorrect. Please enter start time or end time according to your half day working hours' return valid, error_message, token_name, token_value ) if isnull(l_fnd_person_number) = 'N' then l_fnd_person_number = 'N' change_contexts(hr_assignment_id = l_hr_assign_id, effective_date = effdate) ( l_manager_id = per_asg_manager_user_person_id ) change_contexts(effective_date=l_effective_date,absence_entry_id = l_abs_entry_id) ( l_user_mode=anc_abs_entrs_user_mode ) l_mgr_asg_status = get_value_set('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = get_value_set('CIMB_GET_FND_PERSON_ID') if (l_user_mode != 'ADMIN' and per_per_person_number = l_fnd_person_number) or (l_user_mode != 'ADMIN' and l_manager_id = TO_NUMBER(l_fnd_person_number_id)) then ( if iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') then ( valid = 'N' error_message = 'CIMB_PRIOR_DM' return valid, error_message ) if l_mgr_asg_status <> 'ACTIVE' or l_manager_id = 0 then ( valid = 'N' error_message = 'CIMB_INACTIVE_MGR_ERROR' return valid, error_message ) if l_grade_name = 'INTERN' or l_grade_name = 'MT' or l_grade_name = 'MA' then ( valid = 'N' error_message = 'CIMB_CL_NE_GRADES' return valid, error_message ) if (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) or (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) and per_asg_employment_category != 'CONTRACT' then ( valid = 'N' error_message = 'CIMB_ABS_OVERLAP' return valid, error_message ) if l_abs_reason = 'Death in Family' and l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_MAXDAYS' token_name[1] = 'ABS_REASON' token_value[1] = l_abs_reason token_name[2] = 'MAX_CL_DAYS' token_value[2] = TO_CHAR(3) return valid, error_message,token_name,token_value ) if l_abs_reason = 'Serious Illness' then ( if (l_grade_name = '32' or l_grade_name = '33' or l_grade_name = '33S') then ( if l_duration > 2 then ( valid = 'N' error_message = 'CIMB_CL_MAXDAYS' token_name[1] = 'ABS_REASON' token_value[1] = l_abs_reason token_name[2] = 'MAX_CL_DAYS' token_value[2] = TO_CHAR(2) return valid, error_message,token_name,token_value ) ) else ( if l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_MAXDAYS' token_name[1] = 'ABS_REASON' token_value[1] = l_abs_reason token_name[2] = 'MAX_CL_DAYS' token_value[2] = TO_CHAR(3) return valid, error_message,token_name,token_value ) ) ) if (l_grade_name = '34' or l_grade_name = '32' or l_grade_name like '33%') and l_abs_reason = 'Disaster' and l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_MAX_DAYS' return valid, error_message ) if iv_absence_reason = 'Paternity' and l_duration > 5 then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'Compassionate Leave - Paternity cannot be applied for more than 5 days' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Adoption' and l_duration > 5 then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'Compassionate Leave - Adoption cannot be applied for more than 5 days' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Paternity' and per_asg_sex <> 'M' then ( valid = 'N' error_message = 'CIMB_CL_PL_FEMALE_ERROR' return valid, error_message ) if iv_absence_reason = 'Adoption' and per_asg_employment_category = 'CONTRACT' then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Compassionate Leave - Adoption. Please check your Employment Category.' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Adoption' and per_asg_sex <> 'M' then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Compassionate Leave - Adoption. If you are Female, please change your Leave type to Adoption Leave.' return valid, error_message, token_name, token_value ) if iv_absence_reason = 'Adoption' and (iv_start_date <= per_asg_date_probation_end) then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Compassionate Leave - Adoption. Please check you Probation Status' return valid, error_message, token_name, token_value ) if per_asg_employment_category = 'CONTRACT' then ( if iv_absence_reason = 'Adoption' then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'You are not eligible for Compassionate Leave - Adoption. Please check your employement category. ' return valid, error_message, token_name, token_value ) else ( l_year_start_date = l_hire_date if l_grade_name = '75.DE' or l_grade_name = '76.DE' or l_grade_name = '77.DE' or l_grade_name = '78.DE'or l_grade_name = '79.DE' or l_grade_name = '80.DE' or l_grade_name = '81.DE' or l_grade_name = '75.D' or l_grade_name = '76.D' or l_grade_name = '77.D' or l_grade_name = '78.D' or l_grade_name = '79.D' or l_grade_name = '80.D' or l_grade_name = '81.D' or l_grade_name = '74.D' or l_grade_name = '73.D' or l_grade_name = '72.D' or l_grade_name = '71.D' or l_grade_name = '70.D' then l_cl_limit_days = 5 if TO_CHAR(l_hire_date,'MM') > TO_CHAR(iv_start_date,'MM') then ( l_year_start_date = TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(iv_start_date,'YYYY'))-1)||'/'||TO_CHAR(l_hire_date,'MM')||'/'||TO_CHAR(l_hire_date,'DD'),'YYYY/MM/DD') l_year_end_date = ADD_MONTHS(l_year_start_date,12) ) else ( l_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'/'||TO_CHAR(l_hire_date,'MM')||'/'||TO_CHAR(l_hire_date,'DD'),'YYYY/MM/DD') l_year_end_date = ADD_MONTHS(l_year_start_date,12) ) if per_asg_projected_assignment_end_date was not defaulted then l_year_end_date = per_asg_projected_assignment_end_date ) if (l_grade_name not like 'C1%' or l_grade_name not like 'C2%' or l_grade_name not like 'C3%' or l_grade_name not like 'C4%' or l_grade_name not like 'C5%' or l_grade_name not like 'C6%'or l_grade_name not like 'C7%' or l_grade_name not like 'C8%'or l_grade_name not like 'C9%'or l_grade_name not like 'C10%') then ( change_contexts (start_date= l_year_start_date , end_date= l_year_end_date) ( while (anc_per_abs_entrs_absence_entry_id_arr.exists(i)) loop ( change_contexts(absence_entry_id = anc_per_abs_entrs_absence_entry_id_arr[i]) ( change_contexts (absence_type_id = anc_abs_entrs_absence_type_id) ( l_abs_typ_name_check = anc_abs_typ_name if l_abs_entry_id <> anc_per_abs_entrs_absence_entry_id_arr[i] and l_abs_typ_name_check = 'Compassionate Leave' and anc_abs_entrs_absence_status_cd <> 'ORA_WITHDRAWN' and anc_abs_entrs_approval_status_cd <> 'DENIED' and anc_abs_entrs_absence_status_cd <> 'SAVED' then ( l_cl_duration = l_cl_duration + anc_abs_entrs_duration if l_cl_duration + l_duration > l_cl_limit_days then ( valid = 'N' error_message = 'CIMB_CL_10_DAYS_MORE' return valid, error_message ) ) ) ) i = i + 1 ) ) ) else if (l_grade_name like 'C1%' or l_grade_name like 'C2%' or l_grade_name like 'C3%' or l_grade_name like 'C4%' or l_grade_name like 'C5%' or l_grade_name like 'C6%'or l_grade_name like 'C7%' or l_grade_name like 'C8%'or l_grade_name like 'C9%'or l_grade_name like 'C10%') then ( if l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_CONTRACT_3_DAYS' return valid, error_message ) i = 1 l_cl_duration = 0 change_contexts (start_date= l_year_start_date , end_date= l_year_end_date) ( while (anc_per_abs_entrs_absence_entry_id_arr.exists(i)) loop ( change_contexts(absence_entry_id = anc_per_abs_entrs_absence_entry_id_arr[i]) ( change_contexts (absence_type_id = anc_abs_entrs_absence_type_id) ( l_abs_typ_name_check = anc_abs_typ_name if l_abs_entry_id <> anc_per_abs_entrs_absence_entry_id_arr[i] and l_abs_typ_name_check = 'Compassionate Leave' and anc_abs_entrs_absence_status_cd <> 'ORA_WITHDRAWN' and anc_abs_entrs_approval_status_cd <> 'DENIED' and anc_abs_entrs_absence_status_cd <> 'SAVED' then ( l_cl_duration = l_cl_duration + anc_abs_entrs_duration if l_cl_duration + l_duration > 3 then ( valid = 'N' error_message = 'CIMB_CL_CONTRACT_3_DAYS' return valid, error_message ) ) ) ) i = i + 1 ) ) ) ) if (l_grade_name like 'EQ.1%' or l_grade_name like 'EQ.2%' or l_grade_name like 'EQ.3%' or l_grade_name like 'EQ.4%' ) then ( if l_abs_reason != 'Death in Family' then ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are only entitle to Compassionate Leave - Death of family members (Parents, Parents in law, Spouse, Children and Siblings)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) if l_duration > 2 then ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your leave duration exceed 2 days limit per ocassion' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) if isnull(l_value) = 'N' then ( l_value = '0' ) if l_value = '0' then ( valid = 'N' error_code = 'W' error_message= 'CIMB_DOCUMENT_MANDATORY' return valid, error_message ) ) return valid",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates marriage leave applications in Malaysia. Ensures the duration does not exceed 5\u201310 days (based on grade), the leave is applied within 6 months of the marriage registration or ceremony date, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MARITAL_STATUS IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 5 AND (l_grade_name <> '35' AND l_grade_name <> '36' AND l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '33' AND l_grade_name <> '33S') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 10 AND (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE ,TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 3 AND (l_grade_name = 'EQ.1' OR l_grade_name = 'EQ.2' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.4' ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE ,TOKEN_NAME, TOKEN_VALUE ) IF ADD_MONTHS(IV_ATTRIBUTE_DATE1,6) < iv_start_date AND ADD_MONTHS(IV_ATTRIBUTE_DATE2,6) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MRGL_REG_CER_DATE' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sports leave applications in Malaysia. Ensures the duration does not exceed 3 days, prohibits leave during probation, prevents overlap between calendar years, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_prv_duration = 0 EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_TOTALDURATION > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sports Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF l_prv_duration + IV_TOTALDURATION > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates Hajj leave applications in Malaysia. Ensures the duration does not exceed 30\u201340 days (based on grade), the employee has 5\u201310 years of service, no prior Hajj leave exceeds the entitlement, departure and arrival dates are valid, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_assignment_category = PER_ASG_EMPLOYMENT_CATEGORY l_job_name = PER_ASG_JOB_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_pl_duration = 0 l_msg = 'X' l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_departure_dt = IV_ATTRIBUTE_DATE1 l_arrival_dt = IV_ATTRIBUTE_DATE2 IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_assignment_category = 'CONTRACT' AND (l_grade_name = 'GCEO.' OR l_job_name LIKE '%Chief%JF0008') THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for this leave for up to 40 days only' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= l_year_begin_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND l_abs_typ_name_check LIKE 'Hajj Leave%'THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 40) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(40-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ELSE IF (l_grade_name <> '35' AND l_grade_name <> '36' AND l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '70' AND l_grade_name <> '71' AND l_grade_name <> '72' AND l_grade_name <> '33' AND l_grade_name <> '33S' AND l_grade_name NOT LIKE '81%' AND l_grade_name NOT LIKE '80%' AND l_grade_name NOT LIKE '79%' AND l_grade_name NOT LIKE '78%' AND l_grade_name NOT LIKE '77%' AND l_grade_name NOT LIKE '76%' AND l_grade_name NOT LIKE '75%' AND l_grade_name NOT LIKE '74%' AND l_grade_name NOT LIKE '73%') THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for this leave for up to 40 days only' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= l_year_begin_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND l_abs_typ_name_check LIKE 'Hajj Leave%'THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 40) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(40-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ELSE IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S' OR l_grade_name LIKE '81%' OR l_grade_name LIKE '80%' OR l_grade_name LIKE '79%' OR l_grade_name LIKE '78%' OR l_grade_name LIKE '77%' OR l_grade_name LIKE '76%' OR l_grade_name LIKE '75%' OR l_grade_name LIKE '74%' OR l_grade_name LIKE '73%' OR l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72') THEN ( IF (l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '33' AND l_grade_name <> '33S' AND l_grade_name <> '70' AND l_grade_name <> '71' AND l_grade_name <> '72') AND ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ELSE IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S' OR l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72') AND ADD_MONTHS(PER_ASG_REL_DATE_START,120) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for this leave for up to 30 days only' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) I = 1 L_year_end_date = TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'-12-31','YYYY-MM-DD') CHANGE_CONTEXTS (START_DATE= l_hire_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S' OR l_grade_name = '70' OR l_grade_name = '71' OR l_grade_name = '72') THEN ( IF l_abs_typ_name_check = 'Pilgrimage Leave or Umrah Leave' THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ELSE IF l_abs_typ_name_check LIKE 'Hajj%' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_ONCE_SVCPERIOD' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) IF l_arrival_dt < l_departure_dt OR l_departure_dt > iv_start_date OR l_arrival_dt < TRUNC(IV_END_DATE) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_HAJJ_ARLTDEP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates Hajj leave applications in Malaysia. Ensures the duration does not exceed 30\u201340 days (based on grade), the employee has 5\u201310 years of service, no prior Hajj leave exceeds the entitlement, departure and arrival dates are valid, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_pl_duration = 0 l_msg = 'X' l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_departure_dt = IV_ATTRIBUTE_DATE1 l_arrival_dt = IV_ATTRIBUTE_DATE2 IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name <> '35' AND l_grade_name <> '36' AND l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '33' AND l_grade_name <> '33S' AND l_grade_name NOT LIKE '81%' AND l_grade_name NOT LIKE '80%' AND l_grade_name NOT LIKE '79%' AND l_grade_name NOT LIKE '78%' AND l_grade_name NOT LIKE '77%' AND l_grade_name NOT LIKE '76%' AND l_grade_name NOT LIKE '75%' AND l_grade_name NOT LIKE '74%' AND l_grade_name NOT LIKE '73%') THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_DAYS_ERROR' TOKEN_NAME[1] = 'LEAVE_DAYS' TOKEN_VALUE[1] = TO_CHAR(40) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= l_year_begin_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND l_abs_typ_name_check LIKE 'Hajj Leave%'THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 40) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(40-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ELSE IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S' OR l_grade_name LIKE '81%' OR l_grade_name LIKE '80%' OR l_grade_name LIKE '79%' OR l_grade_name LIKE '78%' OR l_grade_name LIKE '77%' OR l_grade_name LIKE '76%' OR l_grade_name LIKE '75%' OR l_grade_name LIKE '74%' OR l_grade_name LIKE '73%') THEN ( IF (l_grade_name <> '34' AND l_grade_name <> '32' AND l_grade_name <> '33' AND l_grade_name <> '33S') AND ADD_MONTHS(PER_ASG_REL_DATE_START,60) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ELSE IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND ADD_MONTHS(PER_ASG_REL_DATE_START,120) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(10) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_DAYS_ERROR' TOKEN_NAME[1] = 'LEAVE_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) I = 1 L_year_end_date = TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'-12-31','YYYY-MM-DD') CHANGE_CONTEXTS (START_DATE= l_hire_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') THEN ( IF l_abs_typ_name_check = 'Pilgrimage Leave or Umrah Leave' THEN ( l_pl_duration = l_pl_duration + ANC_ABS_ENTRS_DURATION IF (l_pl_duration + l_duration > 30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_REM_DAYS_ERROR' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-l_pl_duration) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ELSE IF l_abs_typ_name_check LIKE 'Hajj%' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_ONCE_SVCPERIOD' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) IF l_arrival_dt < l_departure_dt OR l_departure_dt > iv_start_date OR l_arrival_dt < TRUNC(IV_END_DATE) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_HAJJ_ARLTDEP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates transfer leave applications in Malaysia. Ensures the duration does not exceed 3\u20135 days (based on grade and union membership), is applied within 12 months of the transfer date, restricts to union members, verifies the manager\u2019s active status, and prohibits applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION l_person_id = GET_CONTEXT(PERSON_ID,0) l_union_code = 'X' l_union_code = PER_ASG_ATTRIBUTE7 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' L_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') I = 1 L_tl_days = 0 l_tl_limit = 0 CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ISNULL(l_union_code) = 'N' THEN l_union_code = 'X' IF PER_ASG_EMPLOYMENT_CATEGORY = 'CONTRACT' OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%') AND l_union_code <> 'Sarawak Bank Employees Union (SBEU)') THEN ( VALID = 'N' ERROR_MESSAGE = 'You are not eligible to apply for this leave' RETURN VALID, ERROR_MESSAGE ) IF ((l_grade_name = '34' OR l_grade_name = '72' OR l_grade_name = '71' OR l_grade_name = '70') OR ((l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '34%') AND l_union_code = 'Sarawak Bank Employees Union (SBEU)')) THEN ( l_tl_limit = 3 IF l_duration > l_tl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TL_MAX_LIMIT' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ELSE ( l_tl_limit = 5 IF l_duration > l_tl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TL_MAX_LIMIT' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) IF ADD_MONTHS(IV_ATTRIBUTE_DATE1,12) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE= 'CIMB_MY_TRANSFER_12_MTHS' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-5) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Transfer Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( L_tl_days = L_tl_days + ANC_ABS_ENTRS_DURATION IF L_tl_days > l_tl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TL_MAX_LIMIT' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_tl_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the duration of half-day absences for employees in Singapore based on work schedules and rosters. Determines if an absence is a full day or half day by comparing entered absence hours to total assigned shift hours, counting half-day absences as 0.5 days if less than half the shift hours, and full days if equal to or exceeding shift hours, with adjustments for midnight spans. Returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 l_prv_duration_char = 'X' IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date WHILE (l_date <= l_end_date) LOOP ( L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) L_DATA = ESS_LOG_WRITE('SG_DUR_CAL CHECK last day:'||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_shift_st_date_prv = TO_CHAR(ADD_DAYS(l_date,-1),'yyyy-mm-dd')||' '||'00:00' l_shift_end_date_prv = TO_CHAR(ADD_DAYS(l_date,-1),'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') l_prv_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date_prv||''''||'|P_EFF_END_DATE='''|| l_shift_end_date_prv||'''') IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= IV_START_DATE OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_START_DATE) AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) ELSE IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) i = i + 1 l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF (l_duration_char = '1' OR (IV_END_TIME = '00:00' AND l_prv_duration_char = '1')) AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/L_tot_asg_hours) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR DOES NOT EXISTS') ) ) ELSE( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD')||IV_END_TIME,'YYYY/MM/DD HH24:MI') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD')||' '||IV_START_TIME,'YYYY/MM/DD HH24:MI') OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD')||' '||IV_START_TIME,'YYYY/MM/DD HH24:MI')) AND TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') != IV_END_DATE THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours IF L_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) ) ELSE IF l_duration_char = '1' AND ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION','|=P_PERSON_NUMBER='||PER_PER_PERSON_NUMBER||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') THEN ( IF TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') = TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') AND TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') = L_date THEN ( IF L_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF TO_DATE(SUBSTR(l_asg_shift_end_date_CHAR,1,10),'DD-MM-YYYY') = L_date OR (ADD_DAYS(TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY'),1) = L_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5)= '00:00')THEN ( IF L_asg_hours < 5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ) i = i + 1 ) ) ) ) l_date = ADD_DAYS(l_date,1) ) DURATION = ln_unrounded_duration_d return DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment end date for absence plans for contractors in Malaysia. Uses the employee\u2019s actual termination date if available, otherwise defaults to the context end date. Returns the calculated enrollment end date.\n\n***answer***: DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'Worker' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) EffDt = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) l_End_Date = GET_CONTEXT(END_DATE, '4712/12/31 00:00:00' (date)) IF PER_ASG_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN enrollmentEndDate = PER_ASG_REL_ACTUAL_TERMINATION_DATE ELSE enrollmentEndDate = l_End_Date RETURN enrollmentEndDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates pilgrimage leave applications in Malaysia. Ensures sick leave and hospitalization leave balances are zero, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hl_balance = 0 l_sl_balance = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') valid = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_hl_balance = GET_PLAN_BALANCE('Hospitalization Leave') l_sl_balance = GET_PLAN_BALANCE('Sick Leave') ) IF l_hl_balance > 0 OR l_sl_balance > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply for this only if Sick Leave and Hospitalization Leave have been completely used' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates no-pay leave applications in Malaysia. Ensures the annual leave balance is zero, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_al_balance = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_al_balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ) IF l_al_balance = 0 THEN ( l_al_balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') ) IF l_al_balance > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply for this only if Annual Leave has been completely used' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates exam leave applications in Malaysia. Ensures the duration does not exceed 5\u20137 days (based on grade), the leave start date matches the exam date, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_study_prv_duration = 0 l_exam_prv_duration = 0 i = 1 l_limit = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF (PER_ASG_EMPLOYMENT_CATEGORY = 'CONTRACT' and (l_grade_name NOT LIKE 'G%' AND l_grade_name NOT LIKE 'U%' AND l_grade_name NOT LIKE '%DE' )) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CONTRACTOR_NOT_ALLOWED' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name NOT LIKE '35' AND l_grade_name NOT LIKE '36' AND l_grade_name NOT LIKE '34' AND l_grade_name NOT LIKE '32' AND l_grade_name NOT LIKE '33%' ) THEN ( l_limit = 5 IF l_duration > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) IF (l_grade_name LIKE '35' OR l_grade_name LIKE '36' OR l_grade_name LIKE '34' OR l_grade_name LIKE '32.' OR l_grade_name LIKE '33%' ) THEN ( l_limit = 7 IF l_duration > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(7) ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Examination Leave' OR l_abs_typ_name_check = 'Study Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Examination Leave' THEN ( l_exam_prv_duration = l_exam_prv_duration + ANC_ABS_ENTRS_DURATION IF l_exam_prv_duration + IV_TOTALDURATION > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) ELSE l_study_prv_duration = l_study_prv_duration + ANC_ABS_ENTRS_DURATION IF l_study_prv_duration + l_exam_prv_duration + l_duration > 10 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EXAM_STUDY_TOTAL' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) IF TO_DATE(TO_CHAR(IV_ATTRIBUTE_DATE1,'YYYY/MM/DD'),'YYYY/MM/DD') <> TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SG_EXAM_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates study leave applications in Malaysia. Ensures the duration does not exceed 5 days, the leave start date is within 14 days of the exam/study date, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (Date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_prv_duration = 0 EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_study_duration = 0 L_MSG = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF TO_DATE(TO_CHAR(IV_ATTRIBUTE_DATE1,'YYYY/MM/DD'),'YYYY/MM/DD') < iv_start_date OR TO_DATE(TO_CHAR(IV_ATTRIBUTE_DATE1,'YYYY/MM/DD')) > ADD_DAYS(iv_start_date,14) THEN ( VALID = 'N' TOKEN_NAME[1] = 'EXAM_DATE' TOKEN_VALUE[1] = '14' ERROR_MESSAGE = 'CIMB_EXAM_DATE_ERROR' RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Examination Leave' OR l_abs_typ_name_check = 'Study Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_grade_name = '35' OR l_grade_name = '36' OR l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_prv_duration + l_duration > 10 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EXAM_STUDY_TOTAL' RETURN VALID, ERROR_MESSAGE ) IF l_abs_typ_name_check = 'Study Leave' THEN ( L_study_duration = L_study_duration + ANC_ABS_ENTRS_DURATION IF L_study_duration + l_duration > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_STUDY_LEAVE_ERROR' RETURN VALID, ERROR_MESSAGE ) ) ) ) ) i = i + 1 ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates leave for CSR in Malaysia. Ensures the employee has at least 2 years of service, prohibits leave during probation, prevents overlap between calendar years, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_mgr_asg_status = 'X' l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ELSE IF ADD_MONTHS(PER_ASG_REL_DATE_START,24) > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HJ_MIN_YOS_ERROR' TOKEN_NAME[1] = 'YOS' TOKEN_VALUE[1] = TO_CHAR(2) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates exam leave applications in Singapore. Ensures the duration does not exceed 3 days, the leave start date matches the exam date, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_prv_duration = 0 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date < PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF TO_DATE(TO_CHAR(IV_ATTRIBUTE_DATE1,'YYYY/MM/DD'),'YYYY/MM/DD') <> TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SG_EXAM_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Examination Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION ) IF l_prv_duration + L_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) i = i + 1 ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates maternity leave applications in Singapore. Ensures the employee has worked at least 3 months, the duration does not exceed 56 days, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_msg = 'X' L_person_id = GET_CONTEXT(PERSON_ID,-1) l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates extended maternity leave applications in Singapore. Ensures the leave is applied within 12 months of the child\u2019s birth, follows 56 days of maternity leave, and does not exceed 28 days total across multiple blocks, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR i_st_date IS '1951/01/01 00:00:00' (date) DEFAULT FOR l_ed_date IS '4712/12/31 23:59:59' (date) INPUTS ARE IV_START_DATE (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_abs_typ_name_check = ANC_ABS_TYP_NAME l_person_id = GET_CONTEXT(PERSON_ID,-1) l_absence_entry_id = to_char(l_abs_entry_id) l_ml_duration = 0 l_msg = 'X' l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_age = MONTHS_BETWEEN(IV_START_DATE,IV_ACTUALCHILDBIRTHDATE) L_prv_found = 'X' l_child_dob = IV_ACTUALCHILDBIRTHDATE (date) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_effective_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(IV_ACTUALCHILDBIRTHDATE,12) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Child age above 12 months. Birth date : '|| to_char(IV_ACTUALCHILDBIRTHDATE,'dd-mon-yyyy')|| ', '|| to_char(IV_START_DATE,'dd-mon-yyyy hh:mi:ss')||', '|| to_char(l_age)||' months' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) l_st_date = IV_ACTUALCHILDBIRTHDATE l_ed_date = IV_START_DATE l_eml_days_cnt = trunc(GET_ABSENCE_DAYS_PER_TYPE('Extended Maternity Leave',l_st_date,l_ed_date)) IF (l_eml_days_cnt) > 56 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized '||to_char(l_prv_duration)|| ' Days of your '||' Extended Maternity Leave entitlement from '|| to_char(l_st_date,'dd-mon-yyyy')|| ' to '|| to_char(l_ed_date,'dd-mon-yyyy')||'.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) l_st_date = ADD_MONTHS(IV_ACTUALCHILDBIRTHDATE,-1) l_ed_date = IV_START_DATE l_ml_days_cnt = trunc(GET_ABSENCE_DAYS_PER_TYPE('Maternity Leave',l_st_date,l_ed_date)) IF l_ml_days_cnt < 56 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Maternity Leave duration from '|| to_char(l_st_date,'dd-mon-yyyy')|| ' to '|| to_char(l_ed_date,'dd-mon-yyyy')||' is '|| to_char(l_ml_days_cnt)||' Days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Retrieves compensation data for absence plans in Thailand. Checks for specific absence types (e.g., annual, sick, Hajj, monkhood) with block leave reasons within a specified period, determining if compensation limits are exceeded. Returns a status indicating whether compensation data exists.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 ,check_start_date (date) ,check_end_date (date) ,comp_limit (number) ,CURR_YR_ST_date (date) ,CURR_YR_END_date (date) l_abs_typ_name_check = 'X' I = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_start_date = check_start_date L_end_date = check_end_date Z = 1 l_abs_start_dt = '4712/12/31 00:00:00' (date) l_abs_end_dt = '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_job_name = PER_ASG_JOB_NAME L_RETURN_VALUE ='N' l_comp_limit_ch = 'X' l_comp_limit = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_curr_yr_st_dt = CURR_YR_ST_date l_curr_yr_END_dt = CURR_YR_END_date L_nxt_working_st_day = '4712/12/31 00:00:00' (date) L_nxt_working_day = '4712/12/31 00:00:00' (date) Annual[1] = '4712/12/31 00:00:00' (date) BFL[1] = '4712/12/31 00:00:00' (date) L_prv_duration = 0 l_log =ESS_LOG_WRITE('[GET COMP DATE] l_person_id'||TO_CHAR(l_person_id)||'L_start_date:'||TO_CHAR(L_start_date)||'L_END_DATE:'||TO_CHAR(L_END_DATE)||'comp_limit:'||TO_CHAR(comp_limit)) CHANGE_CONTEXTS (START_DATE= L_start_date , END_DATE= L_END_DATE) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND (ANC_ABS_ENTRS_END_DATE > l_curr_yr_st_dt AND ANC_ABS_ENTRS_START_DATE < l_curr_yr_END_dt) THEN ( l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside l_abs_typ_name_check:'||l_abs_typ_name_check||'ANC_ABS_ENTRS_START_DATE'||TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD')||'ANC_ABS_ENTRS_END_DATE'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE,'YYYY/MM/DD')||'DUR:'||TO_CHAR(ANC_ABS_ENTRS_DURATION)) IF ((l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Hajj Leave' OR l_abs_typ_name_check = 'Monkhood Leave') AND ( ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000021047780 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300004155060729 OR ANC_ABS_ENTRS_ATTRIBUTE1 like 'Block Leave%')) OR ( ANC_ABS_ENTRS_ATTRIBUTE1 like 'Block Leave%') THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 1') EXIT ) ) ) ) i = i + 1 ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] L_RETURN_VALUE'||L_RETURN_VALUE) RETURN L_RETURN_VALUE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates compassionate leave applications in Singapore. Ensures the duration does not exceed 1\u20137 days (based on reason, e.g., death of immediate family or sibling/grandparents), verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_reason = IV_ABSENCE_REASON L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_abs_reason = 'Death of Spouse' OR l_abs_reason = 'Death of Parents' OR l_abs_reason = 'Death of Parents-in-Law' OR l_abs_reason = 'Death of Children') AND (l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_CL_IMMFAM' RETURN VALID, ERROR_MESSAGE ) ELSE IF (l_abs_reason = 'Death of Sibling' OR l_abs_reason = 'Death of Grandparents') AND l_duration > 1 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_CL_FAM' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates no-pay leave applications in Singapore. Ensures annual leave and sick leave (60 days) are fully utilized, prohibits leave during the first 3 months or probation unless all leave is exhausted, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) ) IF (iv_start_date > PER_ASG_DATE_PROBATION_END AND PER_ASG_DATE_PROBATION_END < ADD_MONTHS(L_hire_date,6)) THEN ( IF (L_Ann_Acrl_Balance_emp > 0 OR L_Ann_Acrl_Balance_contr > 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_UNPAID_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates paternity leave applications in Singapore. Ensures the employee has worked at least 3 months, the leave start date is within 16 weeks of the child\u2019s birth, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number),IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_dob = IV_ACTUALCHILDBIRTHDATE IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(PER_PER_CONT_REL_CONTACT_PERSON_ID[j])) l_contact_dob = TO_DATE(l_contact_dob_char) IF PER_PER_CONT_REL_CONTACT_TYPE[j] = 'C' THEN ( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_child_exists = 'Y' CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] ) ) j = j + 1 ) ) IF ADD_DAYS(l_child_dob,365) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PAT_16W_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates adoption leave applications in Singapore. Ensures the duration does not exceed 84 days, the child is under 12 months, the employee has worked at least 3 months, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date),IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_TOTALDURATION > 84 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(84) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_dob = IV_ACTUALCHILDBIRTHDATE IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > l_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(l_child_dob,12) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ADL_12_MONTHS' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates shared parental leave applications in Singapore. Ensures the duration does not exceed 28 days, the child is under 12 months, the employee has worked at least 3 months, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_DATE1 (date), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_msg = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_child_dob = '1951/01/01 00:00:00' (date) i = 1 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_dob = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_dob = IV_ACTUALCHILDBIRTHDATE CHANGE_CONTEXTS (START_DATE= ADD_MONTHS(l_child_dob,-12) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Shared Parental Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > 28 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(28) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF ADD_MONTHS(l_child_dob,12) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ADL_12_MONTHS' RETURN VALID, ERROR_MESSAGE ) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates critical illness leave applications in Singapore. Ensures the duration does not exceed 2 days per instance and 10 days per year for illness of immediate family, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) L_duration = IV_TOTALDURATION l_abs_reason = IV_ABSENCE_REASON VALID = 'Y' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') I = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_prv_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF L_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CIL_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Critical Illness Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION ) IF l_prv_duration + L_duration > 10 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CIL_MAX_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates child care leave applications in Singapore. Ensures the duration does not exceed 6 days for Singaporean children or 2 days for non-Singaporean children, the youngest child is under 7 years, the employee has worked at least 3 months, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'Singapore' l_duration = IV_TOTALDURATION VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_service_months = 0 l_elg_leave_days = 0 l_contact_person_id = 0 l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) K = 1 g = 1 child_person_id[1] = 0 child_citizen[1] = 'X' child_dob[1] = '1951/01/01 00:00:00' (date) youngest_person_id = 0 youngest_citizen = 'X' youngest_dob = '1951/01/01 00:00:00' (date) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_msg = 'X' l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = 'X' l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH','|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] ) child_person_id[k] = l_contact_person_id child_citizen[k] = l_child_citizen child_dob[k] = l_contact_dob k = k + 1 ) j = j + 1 ) ) IF l_child_exists = 'Y' THEN ( youngest_person_id = child_person_id[1] youngest_citizen = child_citizen[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_citizen = child_citizen[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) l_service_months = MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) IF l_service_months > 12 THEN ( IF TO_DATE(TO_CHAR(ADD_MONTHS(youngest_dob,84),'YYYY')||'-12-31','YYYY-MM-DD') < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CCL_LT_7' RETURN VALID, ERROR_MESSAGE ) ELSE IF TO_DATE(TO_CHAR(ADD_MONTHS(youngest_dob,84),'YYYY')||'-12-31','YYYY/MM/DD') >= IV_START_DATE THEN ( IF youngest_citizen = 'Singapore' THEN ( l_elg_leave_days = 6 IF l_duration > 6 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CCL_SG_MAX' RETURN VALID, ERROR_MESSAGE ) ) ELSE IF youngest_citizen != 'Singapore' THEN ( l_elg_leave_days = 2 IF l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CCL_NSG_MAX' RETURN VALID, ERROR_MESSAGE ) ) ELSE VALID = 'Y' I = 1 CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Child Care Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > l_elg_leave_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are entitle for '||to_char(l_elg_leave_days)|| ' days. You current balance is '||to_char(l_elg_leave_days - l_prv_duration)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ) ELSE( IF TO_DATE(TO_CHAR(ADD_MONTHS(youngest_dob,84),'YYYY')||'-12-31','YYYY-MM-DD') < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CCL_LT_7' RETURN VALID, ERROR_MESSAGE ) ELSE IF youngest_citizen = 'Singapore' THEN ( l_elg_leave_days = ROUND(l_service_months/12 * 6,0) IF l_duration > l_elg_leave_days THEN ( VALID = 'N' TOKEN_NAME[1] = 'CCL_SG_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_elg_leave_days) ERROR_CODE = 'E' ERROR_MESSAGE = 'CIMB_CCL_SG_MAX_MM' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) ) ELSE( l_elg_leave_days = ROUND(l_service_months/12 * 6,0) IF l_duration > l_elg_leave_days THEN ( VALID = 'N' TOKEN_NAME[1] = 'CCL_NSG_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_elg_leave_days) ERROR_CODE = 'E' ERROR_MESSAGE = 'CIMB_CCL_NSG_MAX_MM' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= PER_ASG_REL_DATE_START , END_DATE= ADD_MONTHS(PER_ASG_REL_DATE_START,12)) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Child Care Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > l_elg_leave_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are eligible for '||to_char(l_elg_leave_days)|| ' days. You have utilized '|| to_char(l_prv_duration) ||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_CHILD_NO_UPD' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates extended child care leave applications in Singapore. Ensures the employee has worked at least 3 months, the youngest child is between 7 and 12 years old, the duration does not exceed 2 days for Singaporean children, prohibits leave for non-Singaporean children, prevents overlap between calendar years, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'Singapore' l_duration = IV_TOTALDURATION VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_service_months = 0 l_elg_leave_days = 0 l_contact_person_id = 0 l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) K = 1 g = 1 child_person_id[1] = 0 child_citizen[1] = 'X' child_dob[1] = '1951/01/01 00:00:00' (date) youngest_person_id = 0 youngest_citizen = 'X' youngest_dob = '1951/01/01 00:00:00' (date) youngest_age = 0 l_msg = 'X' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_contact_type = 'X' l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = 'X' l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] ) child_person_id[k] = l_contact_person_id child_citizen[k] = l_child_citizen child_dob[k] = l_contact_dob k = k + 1 ) j = j + 1 ) ) IF l_child_exists = 'Y' THEN ( youngest_person_id = child_person_id[1] youngest_citizen = child_citizen[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_citizen = child_citizen[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) youngest_age = FLOOR(DAYS_BETWEEN(IV_START_DATE, youngest_dob)/365) IF youngest_age < 7 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot apply Extended Child Care Leave as youngest child age is '||TO_CHAR(youngest_age)||', younger than minimum of 7 years old' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF youngest_age > 12 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot apply Extended Child Care Leave as youngest child age '||TO_CHAR(youngest_age)||' , older than maximum of 12 years old' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( IF l_duration > 2 AND youngest_citizen = 'Singapore' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ECCL_SG_MAX' RETURN VALID, ERROR_MESSAGE ) ELSE IF youngest_citizen != 'Singapore' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ECCL_NSG_ERROR' RETURN VALID, ERROR_MESSAGE ) ELSE VALID = 'Y' ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Extended Child Care' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF l_prv_duration + l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ECCL_SG_MAX' RETURN VALID, ERROR_MESSAGE ) ) ) ) ) i = i + 1 ) ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_CHILD_NO_UPD' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment end date for absence plans for contractors. Uses the employee\u2019s actual termination date if available, otherwise defaults to the effective date. Returns the calculated enrollment end date.\n\n***answer***: DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'Worker' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) EffDt = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) l_End_Date = GET_CONTEXT(END_DATE, '4712/12/31 00:00:00' (date)) IF PER_ASG_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN enrollmentEndDate = PER_ASG_REL_ACTUAL_TERMINATION_DATE ELSE enrollmentEndDate = EffDt RETURN enrollmentEndDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Cambodia with 3-year expiry, year 1. Checks the previous year\u2019s balance, restricts accrual during unpaid, maternity, emergency, or Hajj leave, and limits accrual to 6 days. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_ann_plan_name = 'Annual Leave Plan' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) accrual = 0 l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) l_acrl_balance_year = 0 change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_ann_plan_name) ) l_log =ess_log_write('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)) accrual = LEAST(6,l_acrl_balance_year) l_log =ess_log_write('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)||'ACCRUAL'||TO_CHAR(accrual)) Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Cambodia with 3-year expiry, year 2. Carries over the balance from year 1, restricts accrual during unpaid, maternity, emergency, or Hajj leave. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_bfl_acrl_balance = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 1' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) accrual = 0 l_acrl_balance_year = 0 change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_bfl_plan_name) ) accrual = l_acrl_balance_year l_log =ess_log_write('L_Acrl_Balance_Year'||TO_CHAR(l_acrl_balance_year)||'l_prv_year_end_date'||TO_CHAR(l_prv_year_end_date)) Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Cambodia with 3-year expiry, year 3. Carries over the balance from year 2, restricts accrual during unpaid, maternity, emergency, or Hajj leave. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR per_asg_person_number IS 'X' DEFAULT for anc_abs_typ_name is 'X' DEFAULT for anc_abs_pln_name is 'A' DEFAULT FOR per_asg_rel_date_start IS '1951/01/01 00:00:00' (date) DEFAULT FOR per_asg_grade_name IS 'X' DEFAULT for adjustmentvalues is empty_number_number DEFAULT for adjustmentdates is empty_date_number DEFAULT for adjustmenttypes is empty_text_number inputs are iv_accrual ,iv_accrualperiodenddate (date) ,iv_accrualperiodstartdate (date) ,iv_planenrollmentstartdate (date) ,iv_planenrollmentenddate (date) ,iv_caledarenddate (date) ,iv_caledarstartdate (date) m = 0 l_ldg_id = get_context(legislative_data_group_id,0) l_ann_acrl_balance = 0 l_bfl_acrl_balance = 0 l_bfl_acrl_balance_carry = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 2' l_dm_date = '2019/06/01 00:00:00' (date) l_hire_date = per_asg_rel_date_start l_person_id = get_context(person_id,-1) l_los_in_months = MONTHS_BETWEEN(add_days(iv_accrualperiodstartdate,-1),l_hire_date) l_hr_assign_id = get_context(hr_assignment_id,0) l_prv_year_end_date = add_days(iv_accrualperiodstartdate,-1) change_contexts(effective_date = l_prv_year_end_date, legislative_data_group_id = l_ldg_id) ( l_acrl_balance_year = get_plan_balance(l_bfl_plan_name) ) accrual = l_acrl_balance_year Return accrual,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates maternity leave applications in Cambodia. Ensures the duration does not exceed 90 days, prohibits leave during probation, requires the start date to be within 30 days after the child\u2019s birth, and verifies the manager\u2019s active status. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_reason = 'Maternity Leave' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_birth = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_birth = IV_ACTUALCHILDBIRTHDATE IF IV_TOTALDURATION > 90 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_DAYS' TOKEN_VALUE[2] = TO_CHAR(90) TOKEN_NAME[3] = 'OUM_TYPE' TOKEN_VALUE[3] = 'days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF PER_ASG_DATE_PROBATION_END > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ELSE IF ADD_DAYS(l_child_birth,-30) > IV_START_DATE THEN ( l_min_start_date = ADD_DAYS(l_child_birth,-30) VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your leave start date must not exceeding 30 days from Actual/Expected Child Birthdate.Earliest date allow is ' ||to_char(l_min_start_date,'DD-MON-YYYY') RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sick leave applications in the UK. Ensures the duration does not exceed 30 days, requires a medical certificate for durations over 7 days, checks the manager\u2019s active status, and prevents overlap between calendar years for non-contract employees. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( l_sl_limit = 30 IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,L_year_start_date) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(L_year_end_date,ANC_ABS_ENTRS_START_DATE) + 1 IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) ELSE IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply only for '||TO_CHAR(l_sl_limit-L_sl_days)||' of Sick Leave' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) IF l_duration > 7 THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE= 'CIMB_ABS_MEDCERT_MANDATORY' RETURN VALID, ERROR_CODE, ERROR_MESSAGE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates maternity leave applications in the UK. Ensures the start date is within 11 weeks before or on the child\u2019s birth date, the duration does not exceed 77 days, prohibits leave during probation, requires a medical certificate (MAT B1), and verifies the manager\u2019s active status. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_reason = 'Maternity Leave' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF IV_ACTUALCHILDBIRTHDATE WAS DEFAULTED THEN l_child_birth = IV_EXPECTEDCHILDBIRTHDATE ELSE l_child_birth = IV_ACTUALCHILDBIRTHDATE IF ADD_DAYS(IV_START_DATE, 77) < l_child_birth THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Start Date applied exceeding maximum of 11 weeks from Actual/Schedule Child Birthdate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF PER_ASG_DATE_PROBATION_END > iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_child_birth < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Start Date applied must be within 11 weeks before Actual/Schedule Child Birthdate or on the same date as Actual/Schedule Child Birthdate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please upload your certificate (MAT B1) from registered medical practitione or registered midwife, stating the expected week of childbirth. ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates compassionate leave applications in the UK. Ensures the duration does not exceed 3 days for immediate family, 2 days for siblings, or 1 day for grandparents, prohibits overlap between calendar years for non-contract employees, requires a medical certificate, and verifies the manager\u2019s active status. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_SEX IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_cl_duration = 0 l_grade_name = PER_ASG_GRADE_NAME l_abs_reason = IV_ABSENCE_REASON L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_cl_balance = 0 L_hire_date = PER_ASG_REL_DATE_START l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND PER_ASG_EMPLOYMENT_CATEGORY != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP'||PER_ASG_EMPLOYMENT_CATEGORY RETURN VALID, ERROR_MESSAGE ) IF l_abs_reason = 'Civil Partner, Spouse, Children, Parents or Parents-In-Law' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Compassionate Leave applied exceeding maximum of 3 days entitlement.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_abs_reason = 'Brothers or Sisters' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Compassionate Leave applied exceeding maximum of 2 days entitlement.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_abs_reason = 'Grandparents' AND l_duration > 1 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Compassionate Leave applied exceeding maximum of 1 days entitlement.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > 7 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Total Compassionate Leave applied exceeding maximum of 7 days entitlement per year.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE= 'CIMB_DOCUMENT_MANDATORY' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates marriage leave applications in Singapore. Ensures the duration does not exceed 5 days, the leave is applied within 6 months of the marriage date, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_msg = 'X' l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date < PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ELSE IF ADD_MONTHS(IV_ATTRIBUTE_DATE1,6) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MRGL_REG_CER_DATE' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in Malaysia. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years for non-contract employees, checks sufficient balance, restricts applications before September 23, 2019, and verifies the manager\u2019s active status. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' OR l_grade_name LIKE 'GCEO.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT.' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA.' THEN l_grade_band = 'MA' ELSE IF l_grade_name = '80' OR l_grade_name = '79' OR l_grade_name = '78' OR l_grade_name = '77' OR l_grade_name = '76' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name = '75' OR l_grade_name = '74' OR l_grade_name = '73' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name = '72' THEN l_grade_band = 'G_72' ELSE IF l_grade_name = '71' OR l_grade_name = '70' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' THEN l_grade_band = 'GRADE_81DE_TO_75DE' ELSE IF l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' THEN l_grade_band = 'GRADE_81D_TO_75D' ELSE IF l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_74D_TO_73D' ELSE IF l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name LIKE 'C%' THEN l_grade_band = 'C' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'GRADE_32_TO_33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' OR l_grade_band = 'GRADE_81DE_TO_75DE' OR l_grade_band = 'GRADE_81D_TO_75D' OR l_grade_band = 'GRADE_74D_TO_73D' OR l_grade_band = 'GRADE_72D_TO_70D' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band ,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND l_asg_category != 'CONTRACT' AND (L_Ann_accrual - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in Malaysia. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years for non-contract employees, checks sufficient balance, restricts applications before September 23, 2019, and verifies the manager\u2019s active status. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE 'GCEO.%' OR l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' OR l_grade_name LIKE 'GCEO.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT%' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA%' THEN l_grade_band = 'MA' ELSE IF l_grade_name = '80' OR l_grade_name = '79' OR l_grade_name = '78' OR l_grade_name = '77' OR l_grade_name = '76' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name = '75' OR l_grade_name = '74' OR l_grade_name = '73' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name = '72' THEN l_grade_band = 'G_72' ELSE IF l_grade_name = '71' OR l_grade_name = '70' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' THEN l_grade_band = 'GRADE_81DE_TO_75DE' ELSE IF l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' THEN l_grade_band = 'GRADE_81D_TO_75D' ELSE IF l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_74D_TO_73D' ELSE IF l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name LIKE 'C%' THEN l_grade_band = 'C' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'GRADE_32_TO_33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' OR l_grade_band = 'GRADE_81DE_TO_75DE' OR l_grade_band = 'GRADE_81D_TO_75D' OR l_grade_band = 'GRADE_74D_TO_73D' OR l_grade_band = 'GRADE_72D_TO_70D' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band ,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND l_asg_category != 'CONTRACT' AND (L_Ann_accrual - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in Malaysia. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years for non-contract employees, checks sufficient balance, restricts applications before September 23, 2019, and verifies the manager\u2019s active status. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START L_attrition_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME l_position_name = PER_ASG_POSITION_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (l_duration - FLOOR(l_duration) <> 0 AND l_duration - FLOOR(l_duration) <> 0.5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = LEAST(L_attrition_date,L_year_end_date), LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) IF (l_grade_name LIKE 'C%' OR l_grade_name LIKE '%.D' OR l_grade_name LIKE '%XT') THEN ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr IF (L_Ann_Acrl_Balance - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have insufficient leave balance. Your current leave balance as at '||TO_CHAR(L_attrition_date,'YYYY/MM/DD')||' is '||to_char(L_Ann_Acrl_Balance)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ELSE ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp IF (L_Ann_Acrl_Balance - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have insufficient leave balance. Your current leave balance as at '||TO_CHAR(l_year_end_date,'YYYY/MM/DD')||' is '||to_char(L_Ann_Acrl_Balance)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND (l_asg_category != 'CONTRACT' OR (l_asg_category = 'CONTRACT' AND (l_grade_name NOT LIKE 'G1.%' OR l_grade_name NOT LIKE 'G2.%' OR l_grade_name NOT LIKE 'G3.%'))) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE 'GCEO.%' OR l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' OR l_grade_name LIKE 'GCEO.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' OR l_grade_name LIKE 'EQ.%'THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' OR l_grade_name LIKE 'EQ%'THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT%' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA%' THEN l_grade_band = 'MA' ELSE IF l_grade_name = '80' OR l_grade_name = '79' OR l_grade_name = '78' OR l_grade_name = '77' OR l_grade_name = '76' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name = '75' OR l_grade_name = '74' OR l_grade_name = '73' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name = '72' THEN l_grade_band = 'G_72' ELSE IF l_grade_name = '71' OR l_grade_name = '70' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' THEN l_grade_band = 'GRADE_81DE_TO_75DE' ELSE IF l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' THEN l_grade_band = 'GRADE_81D_TO_75D' ELSE IF l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_74D_TO_73D' ELSE IF l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name LIKE 'C%' THEN l_grade_band = 'C' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'GRADE_32_TO_33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' OR l_grade_band = 'GRADE_81DE_TO_75DE' OR l_grade_band = 'GRADE_81D_TO_75D' OR l_grade_band = 'GRADE_74D_TO_73D' OR l_grade_band = 'GRADE_72D_TO_70D' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band ,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND l_asg_category != 'CONTRACT' AND (L_Ann_accrual - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in Singapore. Ensures the duration aligns with grade and service-based entitlements, prohibits overlap between calendar years, checks sufficient balance, restricts applications before September 23, 2019, and verifies the manager\u2019s active status. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_comp_limit = 'X' l_grade_band = 'X' L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_Ann_accrual_char = 'X' L_Ann_accrual = 0 L_leave_current_yr = 0 L_leave_next_yr = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_hire_date = PER_ASG_REL_DATE_START l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) L_svc_months = 0 L_svc_band = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_msg = 'X' l_init_bal_char = '0' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_init_bal = 0 l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_covrex = 0 l_mgr_asg_status = 'X' l_contract_yr_end_dt = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD'),'YYYY-MM-DD') l_person_number = PER_PER_PERSON_NUMBER l_covrex_CHAR = '0' IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') <= TO_DATE(TO_CHAR(EffDate,'YYYY/MM/DD'),'YYYY/MM/DD') AND IV_ABSENCE_REASON <> 'Emergency Leave' AND EffDate > TO_DATE('2019/10/17','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SG_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF l_asg_category != 'CONTRACT' THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) IF iv_end_date <= TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'/04/01','YYYY/MM/DD') AND iv_START_date > TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'/01/01','YYYY/MM/DD') THEN l_covrex_CHAR = GET_VALUE_SET('CIMB_GET_COVREX_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_LEG_CODE='''|| 'SG'||''''||'|P_EFF_DATE='''||TO_CHAR(iv_end_date,'YYYY')||'/04/01'||'''') L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp + TO_NUMBER(l_covrex_CHAR) *-1 l_msg = 'COVREX'||l_covrex_CHAR ) ELSE ( IF (l_person_number = '0061470' OR l_person_number = '5325154' OR l_person_number = '0037823' OR l_person_number = '0042777' OR l_person_number = '0078091' OR l_person_number = '0049436' OR l_person_number = '0035534' OR l_person_number = '0035606' OR l_person_number = '0035869' OR l_person_number = '0035878' OR l_person_number = '0035885' OR l_person_number = '0059716' OR l_person_number = '0013947' OR l_person_number = '5387529') THEN ( change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('Annual Leave Plan Employee') l_plan_name = 'Annual Leave Plan Employee' ) IF iv_end_date <= TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'/04/01','YYYY/MM/DD') AND iv_START_date > TO_DATE(TO_CHAR(iv_end_date,'YYYY')||'/01/01','YYYY/MM/DD') THEN l_covrex_CHAR = GET_VALUE_SET('CIMB_GET_COVREX_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_LEG_CODE='''|| 'SG'||''''||'|P_EFF_DATE='''||TO_CHAR(iv_end_date,'YYYY')||'/04/01'||'''') L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp + TO_NUMBER(l_covrex_CHAR) *-1 l_msg = 'COVREX'||l_covrex_CHAR ) ELSE ( change_contexts(effective_date = l_contract_yr_end_dt, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('Annual Leave Plan Contractor') l_plan_name = 'Annual Leave Plan Contractor' ) L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (L_Ann_Acrl_Balance - l_duration) < 0 AND (IV_END_DATE <= l_year_end_date AND l_asg_category != 'CONTRACT') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' OR l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'S6' OR l_grade_name = 'S7' OR l_grade_name = 'S8' OR l_grade_name = 'S9' OR l_grade_name = 'S10' OR l_grade_name = 'S11' OR l_grade_name = 'S12' THEN l_grade_band = 'U1_TO_U5' ELSE IF l_grade_name = 'U6.' OR l_grade_name = 'S4' OR l_grade_name = 'S5' THEN l_grade_band = 'U6' ELSE IF l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3' THEN l_grade_band = 'U7_TO_U9' ELSE IF l_grade_name = 'U10.' OR l_grade_name = 'U11.' THEN l_grade_band = 'U10_TO_U11' l_comp_limit = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'COMPULSORY','0') IF l_duration >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF l_duration < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SG_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE ) IF IV_END_DATE > l_year_end_date THEN ( L_svc_months = MONTHS_BETWEEN(IV_START_DATE,PER_ASG_REL_DATE_START) IF L_svc_months <= 60 THEN L_svc_band = 'LT_5' ELSE IF L_svc_months > 60 AND L_svc_months <= 120 THEN L_svc_band = 'GT_5_LT_10' ELSE L_svc_band = 'GT_10' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,L_svc_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) IF IV_START_DATE > l_year_end_date THEN ( IF L_Ann_accrual - l_duration < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE( L_leave_current_yr = GET_PAY_AVAILABILITY ( 'ASSIGN', IV_START_DATE, ADD_DAYS(l_year_end_date,1), 'Y', 'Y', 'Y', 'Y', 'D') L_leave_next_yr = l_duration - L_leave_current_yr IF (L_Ann_Acrl_Balance - L_leave_current_yr < 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF (L_Ann_accrual - L_leave_next_yr < 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for employees in Thailand based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and rounds to the nearest half-day. Returns the final accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_dm_date = '2019/09/05 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' THEN l_grade_band = 'U1_TO_U2' ELSE IF l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' THEN l_grade_band = 'U3_TO_U6' ELSE IF l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'U10.' OR l_grade_name = 'U11.' THEN l_grade_band = 'U7_TO_U11' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'ENTITLEMENT','0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Training Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual adjustmentvalues[1] = l_reduced_days * -1 adjustmenttypes [1] = 'CIMB_NEG_BAL_OFFSET' adjustmentdates[1] = TO_DATE('2018/05/02','YYYY/DD/MM') l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = 0 ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_AFTVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 l_accrual_rate3 = IV_ACCRUAL ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Annual Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = IV_CALEDARSTARTDATE,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Training Leave') THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) l_no_of_days2 = DAYS_BETWEEN(period_end_date, l_band_chg_dt1) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) l_no_of_days2 = DAYS_BETWEEN(l_band_chg_dt2, l_band_chg_dt1) l_no_of_days3 = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, l_band_chg_dt2) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) l_accrued_period3 = ROUND(((l_accrued_period3 * (l_no_of_days3 - l_approved_abs_days3))/ l_acrl_per_duration), 3) ) ACCRUAL = ROUND(l_accrued_period1 + l_accrued_period2 + l_accrued_period3,2) l_log = ESS_LOG_WRITE('l_no_of_days1: '|| TO_CHAR(l_no_of_days1)) l_log = ESS_LOG_WRITE('l_no_of_days2: '|| TO_CHAR(l_no_of_days2)) l_log = ESS_LOG_WRITE('l_no_of_days3: '|| TO_CHAR(l_no_of_days3)) l_log = ESS_LOG_WRITE('Total Absences: '|| TO_CHAR(l_approved_abs_days1 + l_approved_abs_days2 + l_approved_abs_days3)) l_log = ESS_LOG_WRITE('l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('Accrual: '|| TO_CHAR(Accrual)) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual ) change_contexts(effective_date = L_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_prv_Ann_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ) IF L_prv_Ann_Acrl_Balance <0 THEN ( adjustmentvalues[z] = L_prv_Ann_Acrl_Balance * -1 adjustmenttypes [z] = 'CIMB_NEG_BAL_OFFSET' adjustmentdates[z] = IV_ACCRUALPERIODSTARTDATE ) RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in Thailand. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years, checks sufficient balance, restricts applications before September 5, 2019, and verifies the manager\u2019s active status. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_nxt_year_end_date = ADD_MONTHS(l_year_end_date,12) l_year_mid_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-06-30','YYYY-MM-DD') l_comp_limit = 'X' l_grade_band = 'X' L_Acrl_Balance_Year = 0 L_Annual_Acrl_Balance = 0 L_Annual_Acrl_Balance_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_bu_id = '0' l_msg = 'X' l_entitlement = 0 l_entitlement_char = 'X' L_curr_year_days = 0 L_hire_date = PER_ASG_REL_DATE_START L_nxt_year_days = 0 L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') l_hdl_create = GET_VALUE_SET('CIMB_HDL_CREATE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_ABS_ENTRY_ID='''||TO_CHAR(l_abs_entry_id)||'''') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_hdl_create = 'Y' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_HDL_CREATED' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_start_date <= ADD_DAYS(PER_ASG_DATE_PROBATION_END,0) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PROB_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_start_date > TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(EffDate,'YYYY'))+1)||'/06/30','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_FUTURE_ABS_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = l_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ELSE L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') ) IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' THEN l_grade_band = 'U1_TO_U2' ELSE IF l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' THEN l_grade_band = 'U3_TO_U6' ELSE IF l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'U10.' OR l_grade_name = 'U11.' THEN l_grade_band = 'U7_TO_U11' l_comp_limit = GET_TABLE_VALUE('CIMB_TH_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'COMPULSORY',iv_start_date) l_entitlement_char = GET_TABLE_VALUE('CIMB_TH_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'ENTITLEMENT',iv_start_date) l_entitlement = TO_NUMBER(l_entitlement_char) IF L_Annual_Acrl_Balance - l_duration < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_END_DATE > l_year_end_date THEN ( L_curr_year_days = GET_PAY_AVAILABILITY ( 'ASSIGN', IV_START_DATE, ADD_DAYS(l_year_end_date,1), 'Y', 'Y', 'Y', 'Y', 'D') L_nxt_year_days = l_duration - L_curr_year_days IF iv_start_date < l_year_end_date AND L_Annual_Acrl_Balance - L_curr_year_days < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_entitlement - L_nxt_year_days < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ) IF (IV_ABSENCE_REASON <> 'Emergency Leave' AND IV_START_DATE <= EffDate) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot apply for this leave without 2 days of prior notice. In urgent case, please change the reason to Emergency and re-apply.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF EffDate < iv_start_date AND IV_ABSENCE_REASON <> 'Emergency Leave' AND EffDate > TO_DATE('2019/10/17','YYYY/MM/DD') THEN ( L_nxt_working_day = ADD_DAYS(EffDate,2) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY('ASSIGN', ADD_DAYS(EffDate,1), L_nxt_working_day, 'Y', 'Y', 'Y', 'Y', 'D') IF L_chk_nxt_wrk_dur < 2 THEN ( WHILE (L_chk_nxt_wrk_dur < 2) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), L_nxt_working_day, 'Y', 'Y', 'Y', 'Y', 'D') ) ) IF iv_start_date <= L_nxt_working_day AND iv_start_date >= EffDate THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) l_bu_id = get_value_set('CIMB_GET_BU_ID','|=P_PERSON_ID='||to_char(l_person_id)) IF l_bu_id = '300000003862329' then l_comp_limit = '3' ELSE l_comp_limit = l_comp_limit IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Block Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION > TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON != 'Block Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_TH_AL_CMPLSORY_WARN' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sick leave applications in Thailand. Ensures the duration does not exceed 30 days, requires a medical certificate for durations over 2 days, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_comp_limit = 'X' l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_grade_band = 'X' l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') L_Acrl_Balance_Year = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) i = 1 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) L_sl_duration = 0 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_user_person_type = PER_ASG_USER_PERSON_TYPE L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_HALF_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) ERROR_MESSAGE = 'CIMB_TH_SL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(START_DATE = l_year_begin_date, END_DATE = iv_start_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Sick Leave' THEN L_sl_duration = L_sl_duration + ANC_ABS_ENTRS_DURATION IF L_sl_duration + l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-L_sl_duration) ERROR_MESSAGE = 'CIMB_TH_SL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates extended sick leave applications in Thailand. Ensures the duration does not exceed 30 days, requires full-pay sick leave to be exhausted, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_comp_limit = 'X' l_grade_band = 'X' L_Acrl_Balance_Year = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) i = 1 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) L_sl_duration = 0 L_esl_duration = 0 l_abs_typ_name = 'X' l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_user_person_type = PER_ASG_USER_PERSON_TYPE L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_HALF_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) ERROR_MESSAGE = 'CIMB_TH_ESL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) IF l_asg_category != 'CONTRACT' THEN L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ELSE L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') IF L_Annual_Acrl_Balance - L_Annual_Acrl_Balance > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You still have balance in Annual Leave Plan. Your Annual Leave Plan balance is '||to_char(L_Annual_Acrl_Balance)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(START_DATE = l_year_begin_date, END_DATE = iv_start_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Sick Leave' THEN L_sl_duration = L_sl_duration + ANC_ABS_ENTRS_DURATION ELSE IF l_abs_typ_name = 'Extended Sick Leave' THEN L_esl_duration = L_esl_duration + ANC_ABS_ENTRS_DURATION IF L_esl_duration + l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'N' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-L_esl_duration) ERROR_MESSAGE = 'CIMB_TH_ESL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE ,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) i = i + 1 ) IF L_sl_duration < 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_ESL_SL_NOTUSED' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid sick leave applications in Thailand. Ensures the duration does not exceed 30 days, requires full-pay and extended sick leave to be exhausted, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 L_esl_days = 0 l_upl_days = 0 I = 1 l_absence_entry_id = to_char(GET_CONTEXT(ABSENCE_ENTRY_ID, -1)) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY L_ol_duration = 0 l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') L_esl_days = 0 L_usl_days = 0 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Employee') ELSE L_Annual_Acrl_Balance = GET_PLAN_BALANCE('Annual Leave Plan Contractor') ) IF l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) ERROR_MESSAGE = 'CIMB_TH_USL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) IF l_start_date > ADD_DAYS(PER_ASG_DATE_PROBATION_END,1) AND L_Annual_Acrl_Balance > 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_SL_AL_BAL_AVL' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Extended Sick Leave' OR l_abs_typ_name_check = 'Unpaid Sick Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN ( L_ol_duration = 0 L_ol_duration = GET_PAY_AVAILABILITY ( 'ASSIGN', L_year_start_date, ANC_ABS_ENTRS_END_DATE, 'Y', 'Y', 'Y', 'Y', 'N') IF l_abs_typ_name_check = 'Sick Leave' THEN L_sl_days = L_sl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Extended Sick Leave' THEN L_esl_days = L_esl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Unpaid Sick Leave' THEN L_usl_days = L_usl_days + L_ol_duration ) ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN ( L_ol_duration = ANC_ABS_ENTRS_DURATION IF l_abs_typ_name_check = 'Sick Leave' THEN L_sl_days = L_sl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Extended Sick Leave' THEN L_esl_days = L_esl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Unpaid Sick Leave' THEN L_usl_days = L_usl_days + L_ol_duration ) ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN ( L_ol_duration = 0 L_ol_duration = GET_PAY_AVAILABILITY ( 'ASSIGN', ANC_ABS_ENTRS_START_DATE, L_year_end_date, 'Y', 'Y', 'Y', 'Y', 'N') IF l_abs_typ_name_check = 'Sick Leave' THEN L_sl_days = L_sl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Extended Sick Leave' THEN L_esl_days = L_esl_days + L_ol_duration ELSE IF l_abs_typ_name_check = 'Unpaid Sick Leave' THEN L_usl_days = L_usl_days + L_ol_duration ) ) ) ) I = I + 1 ) ) IF L_usl_days + l_duration > 30 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(30-L_usl_days) ERROR_MESSAGE = 'CIMB_TH_USL_BAL_NAVL' RETURN VALID, ERROR_MESSAGE, ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) IF L_sl_days < 30 OR L_esl_days < 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_USL_SL_ESL_NOTUSED' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the duration of half-day absences for employees in Malaysia based on work schedules and rosters. Determines if an absence is a full day or half day by comparing entered absence hours to total assigned shift hours, with adjustments for shift patterns. Returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DURATION_ARR IS 0 INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION, IV_END_TIME(text) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_start_dt = IV_START_DATE l_end_dt = iv_end_date l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 l_start_min_time = '4712/12/31 00:00:00' (date) l_end_max_time = '4712/12/31 00:00:00' (date) l_entry_first_day = 0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_new_start_date = '4712/12/31 23:59:00' (date) l_new_end_date = '4712/12/31 23:59:00' (date) l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 L_object_id = 'X' L_prv_object_id = 'X' L_hours = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE IV_START_DATE'||TO_CHAR(IV_START_DATE,'yyyy-mm-dd')||'IV_START_TIME'||IV_START_TIME||'IV_END_DATE'||TO_CHAR(IV_END_DATE,'yyyy-mm-dd')||'IV_END_TIME'||IV_END_TIME) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE l_date'||TO_CHAR(l_date,'yyyy-mm-dd')||'l_end_date'||TO_CHAR(l_end_date,'yyyy-mm-dd')) WHILE (l_date <= l_end_date) LOOP ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL NEW LOOP l_date'||TO_CHAR(l_date,'yyyy-mm-dd')) L_tot_asg_hours = 0 IF l_date = l_end_date THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_asg_shift_end_date = TO_DATE(l_shift_end_date,'YYYY-MM-DD HH24:MI') L_hours = get_measure_from_time(l_start_dt,IV_END_DATE) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE IF l_end_time = l_start_time THEN l_entry_duration_m = 0 ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL CHECK last day:'||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)||'L_hours'||TO_CHAR(L_hours)) IF l_entry_duration_h > 24 THEN l_entry_duration_h = l_entry_duration_h - 24 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_PUBLISHED_SHIFT_DETAILS_ARR EXISTS 1:1') l_entry_duration_h = 0 WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_object_id = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,3)+1,INSTR(L_pub_details,'|',1,4)-INSTR(L_pub_details,'|',1,3)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_start_min_time = TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') L_END_MAX_TIME = l_asg_shift_end_date L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_PUBLISHED_SHIFT_DETAILS_ARR 1:1 l_start_min_time:'||TO_CHAR(l_start_min_time,'DD-MM-YYYY HH24:MI')||'L_END_MAX_TIME'|| TO_CHAR(L_END_MAX_TIME,'DD-MM-YYYY HH24:MI')||'l_entry_duration_h'||TO_CHAR(l_entry_duration_h)) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_PUBLISHED_SHIFT_DETAILS_ARR 1:1 l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)||'DATE'||TO_CHAR(ADD_DAYS(l_date,-1),'DD-MM-YYYY')||'TIME:'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)) L_DATA = ESS_LOG_WRITE('L_object_id'||L_object_id||'L_prv_object_id'||L_prv_object_id||'l_asg_shift_end_date_CHAR'||SUBSTR(l_asg_shift_end_date_CHAR,1,10)||'l_date'||TO_CHAR(l_date,'DD-MM-YYYY')) IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) != '00:00' THEN ( l_entry_duration_h = l_entry_duration_h + get_measure_from_time(l_start_min_time,L_END_MAX_TIME) L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1 L_tot_asg_hours:'||'TIME:'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)||'l_end_time'||l_end_time) ) ELSE IF SUBSTR(l_asg_shift_st_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(ADD_DAYS(l_date,1),'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < l_asg_shift_end_date AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN ( l_entry_duration_h = l_entry_duration_h + get_measure_from_time(l_start_min_time,L_END_MAX_TIME) L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:2 L_tot_asg_hours:'||'TIME:'||SUBSTR(l_asg_shift_end_date_CHAR,12,5)||'l_end_time'||l_end_time) ) i = i + 1 IF L_tot_asg_hours > 0 THEN L_prv_object_id = L_object_id L_DATA = ESS_LOG_WRITE('L_object_id 2 chk'||L_object_id||'L_prv_object_id'||L_prv_object_id||'L_tot_asg_hours'||to_char(L_tot_asg_hours)) l_chk = l_chk + 1 ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1:n4 L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)||'l_entry_duration_h'||to_char(l_entry_duration_h)) IF L_tot_asg_hours < 3 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF l_entry_duration_h > 0 THEN ( L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1:in L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) IF (l_entry_duration_h/L_tot_asg_hours) <= 0.5 OR L_tot_asg_hours < 5.5 THEN ( ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1:1 l_entry_duration_h:'||TO_CHAR(l_entry_duration_h)||'L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)||'PCT:'|| TO_CHAR(l_entry_duration_h/L_tot_asg_hours)) ) ELSE( ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1:2 l_entry_duration_h:'||TO_CHAR(l_entry_duration_h)||'L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)||'PCT:'|| TO_CHAR(l_entry_duration_h/L_tot_asg_hours)) ) ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:1 ln_unrounded_duration_d:'||TO_CHAR(ln_unrounded_duration_d)||'L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS 1:2') l_entry_duration_h = 0 WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_ASSIGNED_SHIFT_DETAILS_ARR l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)) l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE 1:2 l_duration_char:' ||l_duration_char||'l_asg_shift_st_date_CHAR'||SUBSTR(l_asg_shift_st_date_CHAR,1,10)||'l_asg_shift_end_date_CHAR'||SUBSTR(l_asg_shift_end_date_CHAR,1,10)) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE IV_START_DATE'||TO_CHAR(IV_START_DATE,'yyyy-mm-dd')||'IV_START_TIME'||IV_START_TIME||'IV_END_DATE'||TO_CHAR(IV_END_DATE,'yyyy-mm-dd')||'IV_END_TIME'||IV_END_TIME) IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND IV_END_TIME != '00:00' AND TO_CHAR(l_date,'DD-MM-YYYY') = TO_CHAR(IV_END_DATE,'DD-MM-YYYY') THEN ( IF IV_START_DATE < TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') THEN l_new_start_date = TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') ELSE l_new_start_date = IV_START_DATE IF IV_END_DATE > TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') THEN l_new_end_date = TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') ELSE l_new_end_date = IV_END_DATE IF TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') < IV_END_DATE THEN l_entry_duration_h = l_entry_duration_h + get_measure_from_time(l_new_start_date,l_new_end_date) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE :'||to_char(l_new_start_date,'DD-MM-YYYY HH24:MI')||'L_new_end_time'|| to_char(l_new_end_date,'DD-MM-YYYY HH24:MI')||'l_entry_duration_h'||to_char(l_entry_duration_h)) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE 1:2 L_tot_asg_hours IN:') L_tot_asg_hours = L_tot_asg_hours + L_asg_hours ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:2 TYPE L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) l_chk = l_chk + 1 ) IF L_tot_asg_hours < 3 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF ROUND((l_entry_duration_h/(L_tot_asg_hours+1)),2) <= 0.5 OR L_tot_asg_hours <= 5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 1:2 ln_unrounded_duration_d:'||TO_CHAR(ln_unrounded_duration_d)||'L_tot_asg_hours'||TO_CHAR(L_tot_asg_hours)) ) ) ) ELSE( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = l_date, END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL VALUE CHECK 2:1 ANC_PUBLISHED_SHIFT_START_ARR:'||TO_CHAR(ANC_PUBLISHED_SHIFT_START_ARR[i],'DD-MM-YYYY HH24:MI')|| 'ANC_PUBLISHED_SHIFT_END_ARR:'||TO_CHAR(ANC_PUBLISHED_SHIFT_END_ARR[i],'DD-MM-YYYY HH24:MI') ||'ANC_PUBLISHED_SHIFT_DURATION_ARR:'||TO_CHAR(ANC_PUBLISHED_SHIFT_DURATION_ARR[i])) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL ANC_PUBLISHED_SHIFT_DETAILS_ARR l_asg_shift_st_date_CHAR:'||l_asg_shift_st_date_CHAR||'l_asg_shift_end_date_CHAR'||l_asg_shift_end_date_CHAR||'l_asg_shift_hours_CHAR'||l_asg_shift_hours_CHAR|| 'L_asg_hours'||TO_CHAR(L_asg_hours)) IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') OR SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '00:00' THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours i = i + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:1 ln_unrounded_duration_d:'||TO_CHAR(ln_unrounded_duration_d)||'L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( L_DATA = ESS_LOG_WRITE('ANC_ASSIGNED_SHIFT_DETAILS_ARR EXISTS 2:2') WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') L_DATA = ESS_LOG_WRITE('MY_DUR_CAL l_duration_char:' ||l_duration_char||'l_asg_shift_st_date_CHAR'||SUBSTR(l_asg_shift_st_date_CHAR,1,10)||'l_date'||TO_CHAR(l_date,'DD-MM-YYYY')||'IV_START_DATE'||TO_CHAR(IV_START_DATE,'DD-MM-YYYY')||'L_asg_hours'||TO_CHAR(L_asg_hours)) IF l_duration_char = '1' AND TO_DATE(SUBSTR(l_asg_shift_st_date_CHAR,1,10),'DD-MM-YYYY') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY'),'DD-MM-YYYY') AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours IF TO_CHAR(IV_START_DATE,'DD-MM-YYYY') = TO_CHAR(l_date,'DD-MM-YYYY') THEN ( l_entry_first_day = GET_MEASURE_FROM_TIME(IV_START_DATE,TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI')) IF IV_START_DATE >= TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') THEN ( L_tot_asg_hours = 0 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2:1 INSIDE assign exclude') ) ELSE IF l_entry_first_day < .5 AND SUBSTR(l_asg_shift_end_date_CHAR,12,5) = '13:00' THEN ( L_tot_asg_hours = 0 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2:2 INSIDE assign exclude') ) ) L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2 ADD DURATION') L_DATA = ESS_LOG_WRITE('l_entry_first_day:'||TO_CHAR(l_entry_first_day)) ) i = i + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2 TYPE L_tot_asg_hours:'||TO_CHAR(L_tot_asg_hours)) ) IF L_tot_asg_hours > 0 AND L_tot_asg_hours <= 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE IF L_tot_asg_hours > 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 L_DATA = ESS_LOG_WRITE('MY_DUR_CAL 2:2 FINAL ln_unrounded_duration_d:'||TO_CHAR(ln_unrounded_duration_d)) ) ) ) l_date = ADD_DAYS(l_date,1) l_start_dt = ADD_DAYS(l_start_dt,1) ) DURATION = ln_unrounded_duration_d L_DATA = ESS_LOG_WRITE('MY_DUR_CAL TYPE DURATION:'||TO_CHAR(DURATION)) return DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates personal leave applications in Thailand. Ensures the duration does not exceed 10 days, limits marriage or graduation leave to 2 days, prohibits paternity leave for females, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_SEX IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') L_pl_duration = 0 i = 1 l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_HALF_DAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 10 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(10) ERROR_MESSAGE = 'CIMB_TH_PL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE , ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_ABSENCE_REASON = 'Marriage (Self)' OR IV_ABSENCE_REASON = 'Graduation (Self)') AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PL_MRGGRAD' RETURN VALID, ERROR_MESSAGE ) ELSE IF PER_ASG_SEX = 'F' AND IV_ABSENCE_REASON = 'Paternity Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PL_BOC' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(START_DATE = l_year_begin_date, END_DATE = l_year_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Personal Leave' THEN L_pl_duration = L_pl_duration + ANC_ABS_ENTRS_DURATION IF L_pl_duration + l_duration > 10 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(10-L_pl_duration) ERROR_MESSAGE = 'CIMB_TH_PL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE , ERROR_CODE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates Hajj leave applications in Thailand. Ensures the duration does not exceed 10 days, requires at least 2 years of service, requires 30 days advance notice, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_value = 'X' EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = to_char(l_absence_entry_id_num) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_start_date < ADD_MONTHS(PER_ASG_REL_DATE_START,24) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MHL_2_YRS' RETURN VALID, ERROR_MESSAGE ) IF l_start_date < ADD_DAYS(EffDate,30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_30_DAYS_ADV' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates monkhood leave applications in Thailand. Ensures the duration does not exceed 30 days, requires at least 2 years of service, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_TOTALDURATION > 30 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAX_DAYS_ERROR' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(30) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_start_date < ADD_MONTHS(PER_ASG_REL_DATE_START,24) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MHL_2_YRS' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sterilization leave applications in Thailand. Ensures the duration is valid, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_value = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_value = GET_VALUE_SET('CIMB_ATTACHMENTS','|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates military service leave applications in Thailand. Ensures the duration does not exceed 60 days, requires at least 2 years of service, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION l_value = 'X' l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = to_char(l_absence_entry_id_num) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS','|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id) I = 1 l_year_begin_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_ms_duration = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 60 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(60) ERROR_MESSAGE = 'CIMB_TH_MILT_LEAVE_BAL_NAVL' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(START_DATE = l_year_begin_date, END_DATE = l_year_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME IF l_absence_entry_id_num <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( IF l_abs_typ_name = 'Military Service Leave' THEN l_ms_duration = l_ms_duration + ANC_ABS_ENTRS_DURATION IF l_ms_duration + l_duration > 60 THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(60-l_ms_duration) ERROR_MESSAGE = 'CIMB_TH_MILT_LEAVE_BAL_NAVL' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) IF iv_start_date < ADD_MONTHS(PER_ASG_REL_DATE_START,24) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_MHL_2_YRS' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates training leave applications in Thailand. Ensures the duration is valid, requires 7 days advance notice, checks the manager\u2019s active status, and restricts applications before September 5, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' ERROR_CODE = 'W' l_duration = IV_TOTALDURATION EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_absence_entry_id_num = GET_CONTEXT(ABSENCE_ENTRY_ID, -1) l_absence_entry_id = to_char(l_absence_entry_id_num) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS','|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id_num) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/05','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_TH_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_start_date < ADD_DAYS(EffDate,7) THEN ( VALID = 'N' ERROR_MESSAGE= 'CIMB_TH_TL_7DAYS_NOTICE' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sick leave applications in Singapore. Ensures the duration does not exceed 14\u201330 days (based on grade), requires a medical certificate for durations over 1 day, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_sl_balance = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' l_asg_start = PER_ASG_REL_DATE_START L_year_start_date = GREATEST(TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD'),l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 ERROR_CODE = 'W' l_grade = 'X' EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_sl_days = 0 l_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_ol_duration = 0 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_user_mode != 'ADMIN' THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF EffDate < TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = LEAST(L_year_end_date,PER_ASG_REL_ACTUAL_TERMINATION_DATE)) ( l_grade = PER_ASG_GRADE_NAME ) IF l_grade = 'MA.' OR l_grade = 'MA' OR l_grade = 'U8.' OR l_grade = 'U7.' OR l_grade = 'U6.' OR l_grade = 'U5.' OR l_grade = 'U4.' OR l_grade = 'U3.' OR l_grade = 'U2.' OR l_grade = 'U1.' OR l_grade = 'G1.' OR l_grade = 'G2.' OR l_grade = 'G3.' OR l_grade = 'S1' OR l_grade = 'S1A' OR l_grade = 'S1B' OR l_grade = 'S1a' OR l_grade = 'S1b' OR l_grade = 'S2' OR l_grade = 'S3' OR l_grade = 'S4' OR l_grade = 'S5' OR l_grade = 'S6' OR l_grade = 'S7' OR l_grade = 'S8' OR l_grade = 'S9' OR l_grade = 'S10' OR l_grade = 'S11' OR l_grade = 'S12' THEN l_limit = 14 ELSE IF (l_grade = 'U9.' OR l_grade = 'U10.' OR l_grade = 'U11.') THEN l_limit = 30 IF l_duration > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'ABS_REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) ERROR_MESSAGE = 'CIMB_ABS_REM_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Sick Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Sick Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN ( L_ol_duration = 0 L_ol_duration = GET_PAY_AVAILABILITY ( 'ASSIGN', L_year_start_date, ANC_ABS_ENTRS_END_DATE, 'Y', 'Y', 'Y', 'Y', 'N') L_sl_days = L_sl_days + L_ol_duration ) ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN ( L_ol_duration = 0 L_ol_duration = GET_PAY_AVAILABILITY ( 'ASSIGN', ANC_ABS_ENTRS_START_DATE, L_year_end_date, 'Y', 'Y', 'Y', 'Y', 'N') L_sl_days = L_sl_days + L_ol_duration ) IF L_sl_days > l_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) IF (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000004145323 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014) THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) AND IV_ABSENCE_REASON = 'Sick Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_PRV_NXT_DAY' RETURN VALID, ERROR_MESSAGE ) ELSE( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION IF (L_without_cert_duration + l_duration) > 5 AND IV_ABSENCE_REASON = 'Sick Leave Without Certificate' THEN ( VALID = 'N' TOKEN_NAME[1] = 'MAX_DAYS' TOKEN_VALUE[1] = TO_CHAR(5) ERROR_MESSAGE = 'CIMB_SL_WOC_MAX_5' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) ) ) ) ) i = i + 1 ) IF L_sl_days + l_duration > l_limit THEN ( VALID = 'N' TOKEN_NAME[1] = 'ABS_REM_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit-L_sl_days) ERROR_MESSAGE = 'CIMB_ABS_REM_DAYS_ERROR' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME,TOKEN_VALUE ) ) IF IV_ABSENCE_REASON != 'Sick Leave Without Certificate' THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE= 'CIMB_ABS_MEDCERT_MANDATORY' RETURN VALID, ERROR_MESSAGE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates brought forward leave applications in Malaysia. Ensures sufficient balance in no-expiry or 3-year expiry plans, prohibits overlap between calendar years, checks the manager\u2019s active status, restricts applications before September 23, 2019, and verifies leave duration increments. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION L_BFL_noexp_Acrl_Balance = 0 l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) L_BFL_3y_Acrl_Balance = 0 EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_msg = 'X' l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' l_grade_band = 'X' l_comp_limit = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_BFL_noexp_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan No Expiry') L_BFL_3y_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 3') L_BFL_3y_Acrl_Balance = L_BFL_3y_Acrl_Balance + GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 2') L_BFL_3y_Acrl_Balance = L_BFL_3y_Acrl_Balance + GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 1') ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (L_BFL_noexp_Acrl_Balance - l_duration) >= 0 OR (L_BFL_3y_Acrl_Balance - l_duration) >= 0 THEN VALID = 'Y' ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates brought forward leave applications in Malaysia. Ensures sufficient balance in no-expiry or 3-year expiry plans, prohibits overlap between calendar years, checks the manager\u2019s active status, restricts applications before September 23, 2019, and verifies leave duration increments. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION L_BFL_noexp_Acrl_Balance = 0 L_BFL_6Month_Acrl_Balance = 0 l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) L_BFL_3y_Acrl_Balance = 0 EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_msg = 'X' l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_union = PER_ASG_ATTRIBUTE7 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' l_grade_band = 'X' l_comp_limit = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_BFL_noexp_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan No Expiry') L_BFL_3y_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 3') L_BFL_3y_Acrl_Balance = L_BFL_3y_Acrl_Balance + GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 2') L_BFL_3y_Acrl_Balance = L_BFL_3y_Acrl_Balance + GET_PLAN_BALANCE('Brought Forward Leave Plan 3 Years Expiry - Year 1') L_BFL_6Month_Acrl_Balance = GET_PLAN_BALANCE('Brought Forward Leave Plan 6 Months Expiry') ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (L_BFL_noexp_Acrl_Balance - l_duration) >= 0 OR (L_BFL_3y_Acrl_Balance - l_duration) >= 0 OR (L_BFL_6Month_Acrl_Balance - l_duration) >= 0 THEN VALID = 'Y' ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_FUTURE_ABSENCE' RETURN VALID, ERROR_MESSAGE ) ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON = 'Emergency Leave' AND IV_ATTRIBUTE_1 = 'X' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_EMRG_ABSENCE' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name = '71' OR l_grade_name = '71' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '72' THEN l_grade_band = 'G_72' l_comp_limit = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,'COMPULSORY','0') IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' AND IV_ABSENCE_REASON <> 'Emergency Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for employees in Malaysia based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and rounds to the nearest half-day. Returns the final accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period_x0000_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for employees in Malaysia based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and rounds to the nearest half-day. Returns the final accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('Line 147 - l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START,IV_PLANENROLLMENTSTARTDATE) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE,IV_PLANENROLLMENTENDDATE) l_log =ESS_LOG_WRITE('Line 152 - fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('Line 160 - fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_x0000_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Malaysia with no expiry. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and tracks balance carryover. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave Plan No Expiry' l_acrl_days_char = 'X' l_acrl_days = 0 l_init_days_char = 'X' l_init_days = 0 L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_PERSON_ENTERPRISE_HIRE_DATE l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) L_udt_row = 'X' l_carryover_limit = 0 l_grade_name = PER_ASG_GRADE_NAME l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_avl_days = 0 accrual = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_BFL_Acrl_Balance = GET_PLAN_BALANCE(l_bfl_plan_name) ) L_DATA = ESS_LOG_WRITE('CIMB_MY_BFL_NOEXP_LEAVE_ACCRUAL L_Acrl_Balance_Year:'||TO_CHAR(L_Acrl_Balance_Year)||'L_BFL_Acrl_Balance'||TO_CHAR(L_BFL_Acrl_Balance)) IF (l_grade_name = 'EQ.1' OR l_grade_name = 'EQ.2' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.4') THEN ( l_avl_days = GREATEST(L_Acrl_Balance_Year,0) accrual = GREATEST(L_BFL_Acrl_Balance,0) IF accrual < 0 THEN accrual = 0 ) IF (l_grade_name = '35' OR l_grade_name = '36') THEN ( IF l_los_in_months <= 60 THEN l_carryover_limit = 12 ELSE IF l_los_in_months > 60 THEN l_carryover_limit = 15 l_avl_days = LEAST(l_carryover_limit,GREATEST(L_Acrl_Balance_Year,0)) accrual = LEAST(30,GREATEST(L_BFL_Acrl_Balance,0) + l_avl_days) ) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Malaysia with 3-year expiry. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and tracks balance across years. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 L_BFL_Acrl_Balance_carry = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry' l_acrl_days_char = 'X' l_acrl_days = 0 l_init_days_char = 'X' l_init_days = 0 L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) L_udt_row = 'X' l_carryover_limit = 0 l_grade_name = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_avl_days = 0 l_carry_limit_3yr = 0 l_los_in_months_3yr = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_BFL_Acrl_Balance = GET_PLAN_BALANCE(l_bfl_plan_name) ) change_contexts(effective_date = ADD_MONTHS(l_prv_year_end_date,-24), LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_BFL_Acrl_Balance_carry = GET_PLAN_BALANCE(l_bfl_plan_name) IF ADD_MONTHS(l_prv_year_end_date,-36) > L_hire_date THEN l_los_in_months_3yr = MONTHS_BETWEEN(ADD_MONTHS(l_prv_year_end_date,-36),L_hire_date) IF l_los_in_months_3yr > 0 AND l_los_in_months_3yr <= 24 THEN l_carry_limit_3yr = 6 ELSE IF l_los_in_months_3yr > 24 AND l_los_in_months_3yr <= 48 THEN l_carry_limit_3yr = 4 ELSE IF l_los_in_months_3yr > 48 AND l_los_in_months_3yr <= 180 THEN l_carry_limit_3yr = 7 ELSE IF l_los_in_months_3yr > 180 THEN l_carry_limit_3yr = 10 ) ACCRUAL = L_BFL_Acrl_Balance - LEAST(L_BFL_Acrl_Balance,LEAST(L_BFL_Acrl_Balance_carry,l_carry_limit_3yr)) IF L_los_in_months <= 24 THEN ACCRUAL = ACCRUAL + LEAST(6,L_Acrl_Balance_Year) ELSE IF L_los_in_months > 24 AND L_los_in_months <= 48 THEN ACCRUAL = ACCRUAL + LEAST(4,L_Acrl_Balance_Year) ELSE IF L_los_in_months > 48 AND L_los_in_months <= 180 THEN ACCRUAL = ACCRUAL + LEAST(7,L_Acrl_Balance_Year) ELSE IF L_los_in_months > 180 THEN ACCRUAL = ACCRUAL + LEAST(10,L_Acrl_Balance_Year) adjustmentvalues[1] = ACCRUAL adjustmenttypes [1] = 'CIMB_CF_CARRYOVER' adjustmentdates[1] = TO_DATE(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'dd/mm/yyyy'),'dd/mm/yyyy') ACCRUAL = 0 Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for employees in Singapore based on grade and service tenure. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and ensures compliance with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_9_yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_grade_band = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_hire_date = PER_ASG_REL_DATE_START l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) final_accrual = 0 l_svc_period = 0 l_dm_date = '2019/09/23 00:00:00' (date) z = 1 l_reduced_days = 0 l_approved_abs_days = 0 l_grade_band = 'X' l_grade_name = PER_ASG_GRADE_NAME L_seniority_date_char = 'X' l_person_id = GET_CONTEXT(PERSON_ID,0) adjustmentvalues[1] = 1 adjustmenttypes [1] = 'XXX' adjustmentdates[1] = TO_DATE('1951/01/01','YYYY/DD/MM') l_log =ESS_LOG_WRITE('l_ann_rate_1_char'||l_ann_rate_1_char||'l_ann_rate_2_char'||l_ann_rate_2_char||'l_yr_ann_date'||TO_CHAR(l_yr_ann_date)) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF L_svc_months <= 60 THEN L_svc_band = 'LT_5' ELSE IF L_svc_months > 60 AND L_svc_months <= 120 THEN L_svc_band = 'GT_5_LT_10' ELSE L_svc_band = 'GT_10' IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' OR l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'S10' OR l_grade_name = 'S11' OR l_grade_name = 'S12' OR l_grade_name = 'U5.' OR l_grade_name = 'S6' OR l_grade_name = 'S7' OR l_grade_name = 'S8' OR l_grade_name = 'S9' THEN l_grade_band = 'U1_TO_U5' ELSE IF l_grade_name = 'U6.' OR l_grade_name = 'S4' OR l_grade_name = 'S5' THEN l_grade_band = 'U6' ELSE IF l_grade_name = 'MA.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3' THEN l_grade_band = 'U7_TO_U9' ELSE IF l_grade_name = 'U10.' OR l_grade_name = 'U11.' THEN l_grade_band = 'U10_TO_U11' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,L_svc_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual adjustmentvalues[1] = l_reduced_days * -1 adjustmenttypes [1] = 'CIMB_NEG_BAL_OFFSET' adjustmentdates[1] = TO_DATE('2018/05/02','YYYY/DD/MM') l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = l_reduced_days * -1 RETURN ACCRUAL ) ELSE( L_seniority_date_char = GET_VALUE_SET('CIMB_GET_SENIORITY_DATE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''|| TO_CHAR(LEAST(IV_ACCRUALPERIODENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE),'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('L_seniority_date_char'||L_seniority_date_char) IF ISNULL(L_seniority_date_char) = 'N' THEN L_seniority_date = L_hire_date ELSE L_seniority_date = TO_DATE(L_seniority_date_char,'YYYY/MM/DD') l_5yr_ann_date = ADD_MONTHS(L_seniority_date,60) l_9_yr_ann_date = ADD_MONTHS(L_seniority_date,108) l_10_yr_ann_date = ADD_MONTHS(L_seniority_date,108) l_log =ESS_LOG_WRITE('l_5yr_ann_date'||TO_CHAR(l_5yr_ann_date)) l_log =ESS_LOG_WRITE('l_10_yr_ann_date'||TO_CHAR(l_10_yr_ann_date)) IF (l_5yr_ann_date > IV_ACCRUALPERIODSTARTDATE AND l_5yr_ann_date < IV_ACCRUALPERIODENDDATE) THEN ( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_5yr_ann_date) ( L_grade_anniv = PER_ASG_GRADE_NAME ) l_log =ESS_LOG_WRITE('l_5yr_ann_date::L_grade_anniv'||L_grade_anniv) IF L_grade_anniv = 'G1.' OR L_grade_anniv = 'G2.' OR L_grade_anniv = 'G3.' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name = 'U1.' OR L_grade_anniv = 'U1.' OR l_grade_name = 'U2.' OR L_grade_anniv = 'U2.' OR l_grade_name = 'U3.' OR L_grade_anniv = 'U3.' OR l_grade_name = 'U4.' OR L_grade_anniv = 'U4.' OR l_grade_name = 'U5.' OR L_grade_anniv = 'U5.' OR l_grade_name = 'S6' OR l_grade_anniv = 'S6' OR l_grade_name = 'S7' OR L_grade_anniv = 'S7' OR l_grade_name = 'S8' OR L_grade_anniv = 'S8' OR l_grade_name = 'S9' OR L_grade_anniv = 'S9' OR l_grade_name = 'S10' OR L_grade_anniv = 'S10' OR l_grade_name = 'S11' OR L_grade_anniv = 'S11' OR l_grade_name = 'S12' OR L_grade_anniv = 'S12' THEN l_grade_band = 'U1_TO_U5' ELSE IF l_grade_name = 'U6.' OR l_grade_anniv = 'U6.' OR l_grade_name = 'S4' OR l_grade_anniv = 'S4' OR l_grade_name = 'S5' OR l_grade_anniv = 'S5' OR l_grade_name = 'S6' OR l_grade_anniv = 'S6' THEN l_grade_band = 'U6' ELSE IF l_grade_name = 'MA.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S2' OR l_grade_name = 'S3' OR l_grade_anniv = 'U7.' OR l_grade_anniv = 'U8.' OR l_grade_anniv = 'U9.' OR l_grade_anniv = 'S1' OR l_grade_anniv = 'S1a' OR l_grade_anniv = 'S1b' OR l_grade_anniv = 'S2' OR l_grade_anniv = 'S3' THEN l_grade_band = 'U7_TO_U9' ELSE IF L_grade_anniv = 'U10.' OR L_grade_anniv = 'U11.' THEN l_grade_band = 'U10_TO_U11' l_ann_rate_1_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'LT_5',IV_ACCRUALPERIODSTARTDATE) l_ann_rate_1 = TO_NUMBER(l_ann_rate_1_char) l_ann_rate_2_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'GT_5_LT_10',IV_ACCRUALPERIODSTARTDATE) l_ann_rate_2 = TO_NUMBER(l_ann_rate_2_char) l_yr_ann_date = l_5yr_ann_date ) ELSE IF (l_10_yr_ann_date > IV_ACCRUALPERIODSTARTDATE AND l_10_yr_ann_date < IV_ACCRUALPERIODENDDATE) THEN ( CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = GREATEST(l_10_yr_ann_date, IV_PLANENROLLMENTSTARTDATE)) ( L_grade_anniv = PER_ASG_GRADE_NAME ) l_log =ESS_LOG_WRITE('l_10_yr_ann_date::L_grade_anniv'||L_grade_anniv) IF L_grade_anniv = 'G1.' OR L_grade_anniv = 'G2.' OR L_grade_anniv = 'G3.' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name = 'U1.' OR L_grade_anniv = 'U1.' OR l_grade_name = 'U2.' OR L_grade_anniv = 'U2.' OR l_grade_name = 'U3.' OR L_grade_anniv = 'U3.' OR l_grade_name = 'U4.' OR L_grade_anniv = 'U4.' OR l_grade_name = 'U5.' OR L_grade_anniv = 'U5.' OR l_grade_name = 'S7' OR L_grade_anniv = 'S7' OR l_grade_name = 'S8' OR L_grade_anniv = 'S8' OR l_grade_name = 'S9' OR L_grade_anniv = 'S9' OR l_grade_name = 'S10' OR L_grade_anniv = 'S10' OR l_grade_name = 'S11' OR L_grade_anniv = 'S11' OR l_grade_name = 'S12' OR L_grade_anniv = 'S12' THEN l_grade_band = 'U1_TO_U5' ELSE IF l_grade_name = 'U6.' OR l_grade_name = 'S4' OR l_grade_name = 'S5' OR l_grade_name = 'S6' THEN l_grade_band = 'U6' ELSE IF l_grade_name = 'MA.' OR l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3' THEN l_grade_band = 'U7_TO_U9' ELSE IF L_grade_anniv = 'U10.' OR L_grade_anniv = 'U11.' THEN l_grade_band = 'U10_TO_U11' l_log =ESS_LOG_WRITE('l_10_yr_ann_date:'||l_grade_band) l_ann_rate_1_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'GT_5_LT_10',IV_ACCRUALPERIODSTARTDATE) l_ann_rate_1 = TO_NUMBER(l_ann_rate_1_char) l_ann_rate_2_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'GT_10',IV_ACCRUALPERIODSTARTDATE) l_ann_rate_2 = TO_NUMBER(l_ann_rate_2_char) l_yr_ann_date = l_10_yr_ann_date ) l_log =ESS_LOG_WRITE('l_ann_rate_1_char'||l_ann_rate_1_char||'l_ann_rate_2_char'||l_ann_rate_2_char||'l_yr_ann_date'||TO_CHAR(l_yr_ann_date)) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_yr_ann_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') AND l_band_chg_dt1 <> l_yr_ann_date AND l_band_chg_dt2 <> l_yr_ann_date THEN ( IF l_band_chg_dt1 > l_yr_ann_date THEN ( l_band_chg_dt2 = l_band_chg_dt1 l_band_chg_dt1 = l_yr_ann_date l_accrued_period3 = l_accrued_period2 l_accrued_period2 = l_ann_rate_2 l_accrued_period1 = l_ann_rate_1 l_log =ESS_LOG_WRITE('BAND 1') ) ELSE IF l_band_chg_dt1 < l_yr_ann_date AND l_band_chg_dt1 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt2 = l_yr_ann_date l_accrued_period3 = l_ann_rate_2 l_log =ESS_LOG_WRITE('BAND 2') ) ELSE IF l_band_chg_dt1 < IV_ACCRUALPERIODSTARTDATE AND l_yr_ann_date > IV_ACCRUALPERIODSTARTDATE THEN ( l_log =ESS_LOG_WRITE('BAND 3') l_band_chg_dt1 = l_yr_ann_date l_accrued_period1 = l_ann_rate_1 l_accrued_period2 = l_ann_rate_2 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Annual Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( l_absence_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,0) i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( IF (l_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) THEN ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave') THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration _x0000_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for contractors in Singapore. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with contractor-specific policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_9_yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_grade_band = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_hire_date = PER_ASG_REL_DATE_START l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ann_year_start_dt = '4712/12/31 00:00:00' (date) L_ann_year_end_dt = '1951/01/01 00:00:00' (date) l_worked_days = 0 l_total_days = 0 L_Accrual_Prd_Strt_Dt = IV_ACCRUALPERIODSTARTDATE L_Accrual_Prd_End_Dt = IV_ACCRUALPERIODENDDATE l_adj_value = 0 accrual1 = 0 l_dm_date = '2019/09/23 00:00:00' (date) l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_grade_name = PER_ASG_GRADE_NAME L_ann_year_start_dt = TO_DATE(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')) L_ann_year_end_dt = ADD_DAYS(TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY'))+1)||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')),-1) L_Accrual_Prd_Strt_Dt = L_ann_year_start_dt L_Accrual_Prd_End_Dt = L_ann_year_end_dt IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF l_grade_name = 'G1.' OR l_grade_name = 'G2.' OR l_grade_name = 'G3.' THEN l_grade_band = 'G1' ELSE IF l_grade_name = 'U1.' OR l_grade_name = 'U2.' THEN l_grade_band = 'U1_TO_U2' ELSE IF l_grade_name = 'U3.' OR l_grade_name = 'U4.' OR l_grade_name = 'U5.' OR l_grade_name = 'U6.' OR l_grade_name = 'S4' OR l_grade_name = 'S5' OR l_grade_name = 'S6' OR l_grade_name = 'S7' OR l_grade_name = 'S8' OR l_grade_name = 'S9' OR l_grade_name = 'S10' OR l_grade_name = 'S11' OR l_grade_name = 'S12' THEN l_grade_band = 'U3_TO_U6' ELSE IF l_grade_name = 'U7.' OR l_grade_name = 'U8.' OR l_grade_name = 'U9.' OR l_grade_name = 'U10.' OR l_grade_name = 'U11.' OR l_grade_name = 'S1' OR l_grade_name = 'S1a' OR l_grade_name = 'S1b' OR l_grade_name = 'S1A' OR l_grade_name = 'S1B' OR l_grade_name = 'S2' OR l_grade_name = 'S3'THEN l_grade_band = 'U7_TO_U11' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_SG_ANNUAL_LEAVE_EMPLOYEE',l_grade_band,'ENTITLEMENT','0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = L_ann_year_end_dt) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = l_reduced_days * -1 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) l_hire_date = PER_ASG_REL_DATE_START r = ess_log_write('l_hire_date:'||to_char(l_hire_date)) r = ess_log_write('L_ann_year_start_dt:'||to_char(L_ann_year_start_dt)) r = ess_log_write('L_ann_year_end_dt:'||to_char(L_ann_year_end_dt)) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = TO_DATE(TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY')||'-'||TO_CHAR(PER_ASG_REL_DATE_START,'MM')||'-'||TO_CHAR(PER_ASG_REL_DATE_START,'DD')) period_end_date = ADD_DAYS(ADD_MONTHS(period_start_date,12),-1) period_end_date = LEAST(ADD_DAYS(ADD_MONTHS(period_start_date,12),-1), iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Annual Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan') THEN ( CHANGE_CONTEXTS(START_DATE = IV_CALEDARSTARTDATE,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave') THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('period_end_date: '|| TO_CHAR(period_end_date)||'period_start_date'||TO_CHAR(period_start_date)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, period_start_date) l_no_of_days2 = DAYS_BETWEEN(period_end_date, l_band_chg_dt1) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) ) IF ( L_Accrual_Prd_Strt_Dt < l_band_chg_dt2 AND L_Accrual_Prd_End_Dt > l_band_chg_dt2) THEN ( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, period_start_date) l_no_of_days2 = DAYS_BETWEEN(l_band_chg_dt2, l_band_chg_dt1) l_no_of_days3 = DAYS_BETWEEN(period_end_date, l_band_chg_dt2) + 1 l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_abs_days2))/ l_acrl_per_duration), 3) l_accrued_period3 = ROUND(((l_accrued_period3 * (l_no_of_days3 - l_approved_abs_days3))/ l_acrl_per_duration), 3) ) ACCRUAL = l_accrued_period1 + l_accrued_period2 + l_accrued_period3 l_log = ESS_LOG_WRITE('l_no_of_days1: '|| TO_CHAR(l_no_of_days1)) l_log = ESS_LOG_WRITE('l_no_of_days2: '|| TO_CHAR(l_no_of_days2)) l_log = ESS_LOG_WRITE('l_no_of_days3: '|| TO_CHAR(l_no_of_days3)) l_log = ESS_LOG_WRITE('Total Absences: '|| TO_CHAR(l_approved_abs_days1 + l_approved_abs_days2 + l_approved_abs_days3)) l_log = ESS_LOG_WRITE('l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) l_log = ESS_LOG_WRITE('Accrual: '|| TO_CHAR(Accrual)) IF PER_ASG_PROJECTED_ASSIGNMENT_END_DATE > period_start_date AND PER_ASG_PROJECTED_ASSIGNMENT_END_DATE < period_end_date THEN ( ACCRUAL = ACCRUAL * (MONTHS_BETWEEN(PER_ASG_PROJECTED_ASSIGNMENT_END_DATE,period_start_date)+1)/(MONTHS_BETWEEN(period_end_date,period_start_date)+1) ) ) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN ACCRUAL",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for contractors in Malaysia. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with contractor-specific policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_2yr_ann_date = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_15_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' L_ann_year_start_dt = '4712/12/31 00:00:00' (date) L_ann_year_end_dt = '1951/01/01 00:00:00' (date) L_Accrual_Prd_Strt_Dt = IV_ACCRUALPERIODSTARTDATE L_Accrual_Prd_End_Dt = IV_ACCRUALPERIODENDDATE l_dm_date = '2019/09/23 00:00:00' (date) L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_grade_name = PER_ASG_GRADE_NAME l_year_band = 'X' l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) l_prv_year_st_date = '1951/01/01 00:00:00' (date) L_init_acrl = 0 L_act_acrl = 0 L_ann_year_start_dt = TO_DATE(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')) L_ann_year_end_dt = ADD_DAYS(TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY'))+1)||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')),-1) L_Accrual_Prd_Strt_Dt = L_ann_year_start_dt L_Accrual_Prd_End_Dt = L_ann_year_end_dt CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT.' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA.' THEN l_grade_band = 'MA' ELSE IF l_grade_name LIKE '80.%' OR l_grade_name LIKE '79.%' OR l_grade_name LIKE '78.%' OR l_grade_name LIKE '77.%' OR l_grade_name LIKE '76.%' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name LIKE '75.%' OR l_grade_name LIKE '74.%' OR l_grade_name LIKE '73.%' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name LIKE '72.%' THEN l_grade_band = 'G_72' ELSE IF l_grade_name LIKE '71.%' OR l_grade_name LIKE '70.%' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_81D_TO_73D' ELSE IF l_grade_name = '72D.' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'G32_TO_G33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = l_reduced_days * -1 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( l_log =ESS_LOG_WRITE('l_ann_rate_1_char'||l_ann_rate_1_char||'l_ann_rate_2_char'||l_ann_rate_2_char||'l_yr_ann_date'||TO_CHAR(l_yr_ann_date)) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = IV_CALEDARSTARTDATE period_end_date = IV_CALEDARENDDATE period_end_date_term = LEAST(period_end_date, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Period Start Date: '|| to_char(period_start_date,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Period End Date: '|| to_char(period_end_date,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_x0000_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for contractors in Malaysia. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with contractor-specific policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_2yr_ann_date = '1951/01/01 00:00:00' (date) l_5yr_ann_date = '1951/01/01 00:00:00' (date) l_10_yr_ann_date = '1951/01/01 00:00:00' (date) l_15_yr_ann_date = '1951/01/01 00:00:00' (date) l_yr_ann_date = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' L_ann_year_start_dt = '4712/12/31 00:00:00' (date) L_ann_year_end_dt = '1951/01/01 00:00:00' (date) L_Accrual_Prd_Strt_Dt = IV_ACCRUALPERIODSTARTDATE L_Accrual_Prd_End_Dt = IV_ACCRUALPERIODENDDATE l_dm_date = '2019/09/23 00:00:00' (date) L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_grade_name = PER_ASG_GRADE_NAME l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_year_band = 'X' l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) l_prv_year_st_date = '1951/01/01 00:00:00' (date) L_init_acrl = 0 L_act_acrl = 0 l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_ann_year_start_dt = TO_DATE(TO_CHAR(IV_CALEDARSTARTDATE,'YYYY')||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')) L_ann_year_end_dt = ADD_DAYS(TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY'))+1)||'-'||TO_CHAR(l_hire_date,'MM')||'-'||TO_CHAR(l_hire_date,'DD')),-1) L_Accrual_Prd_Strt_Dt = L_ann_year_start_dt l_log =ESS_LOG_WRITE('Line 149 L_Accrual_Prd_Strt_Dt : '||TO_CHAR(L_Accrual_Prd_Strt_Dt)) L_Accrual_Prd_End_Dt = L_ann_year_end_dt l_log =ESS_LOG_WRITE('Line 149 L_Accrual_Prd_End_Dt : '||TO_CHAR(L_Accrual_Prd_End_Dt)) CHANGE_CONTEXTS(EFFECTIVE_DATE = L_ann_year_start_dt) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('Line 155 l_prv_fte : '||TO_CHAR(l_prv_fte)||' IV_CALEDARSTARTDATE : '||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE, IV_PLANENROLLMENTSTARTDATE) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE, IV_ACCRUALPERIODENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('Line 159 fte_start_date[mn] : '||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||' fte_value[mn] : '||TO_CHAR(fte_value[mn])||' MN : '||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('Line 167 fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE, PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('Line 195 fte_end_date[mn-1] - IV_PLANENROLLMENTENDDATE'||TO_CHAR(IV_PLANENROLLMENTENDDATE)) l_log =ESS_LOG_WRITE('Line 196 fte_end_date[mn-1] - IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODENDDATE)) l_log =ESS_LOG_WRITE('Line 197 fte_end_date[mn-1] - PER_ASG_REL_ACTUAL_TERMINATION_DATE'||TO_CHAR(PER_ASG_REL_ACTUAL_TERMINATION_DATE)) l_log =ESS_LOG_WRITE('Line 198 fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1])) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ( ACCRUAL = 0 L_svc_months = MONTHS_BETWEEN(IV_PLANENROLLMENTENDDATE,PER_ASG_REL_DATE_START) IF l_grade_name LIKE 'GCEO.%' OR l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%' THEN l_grade_band = 'G1_TO_G3' ELSE IF l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%' THEN l_grade_band = 'U1_TO_U6' ELSE IF l_grade_name LIKE 'U7.%' THEN l_grade_band = 'U7' ELSE IF l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' THEN l_grade_band = 'U8_TO_U9' ELSE IF l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%' OR l_grade_name LIKE 'C11.%' THEN l_grade_band = 'U10_TO_U11' ELSE IF l_grade_name LIKE '34%' THEN l_grade_band = 'G_34' ELSE IF l_grade_name LIKE '35%' OR l_grade_name LIKE '36%' THEN l_grade_band = 'G_35_TO_36' ELSE IF l_grade_name LIKE '32%' OR l_grade_name LIKE '33%' OR l_grade_name LIKE '33S%' THEN l_grade_band = 'GRADE_32_TO_33S' ELSE IF l_grade_name LIKE 'MT.' THEN l_grade_band = 'MT' ELSE IF l_grade_name LIKE 'MA.' THEN l_grade_band = 'MA' ELSE IF l_grade_name LIKE 'C%' THEN l_grade_band = 'C' ELSE IF l_grade_name LIKE '80.%' OR l_grade_name LIKE '79.%' OR l_grade_name LIKE '78.%' OR l_grade_name LIKE '77.%' OR l_grade_name LIKE '76.%' THEN l_grade_band = 'G_80_TO_76' ELSE IF l_grade_name LIKE '75.%' OR l_grade_name LIKE '74.%' OR l_grade_name LIKE '73.%' THEN l_grade_band = 'G_75_TO_73' ELSE IF l_grade_name LIKE '72.%' THEN l_grade_band = 'G_72' ELSE IF l_grade_name LIKE '71.%' OR l_grade_name LIKE '70.%' THEN l_grade_band = 'G_71_TO_70' ELSE IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' THEN l_grade_band = 'GRADE_81D_TO_73D' ELSE IF l_grade_name = '72D.' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN l_grade_band = 'GRADE_72D_TO_70D' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E1.' OR l_grade_name = 'E2.' THEN l_grade_band = 'G_E1_TO_E2' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Vice President' THEN l_grade_band = 'G_E3_VP' ELSE IF l_grade_name = 'E3.' AND l_job_name = 'Senior Officer' THEN l_grade_band = 'G_E3_SO' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Assistant Vice President' THEN l_grade_band = 'G_E4_AVP' ELSE IF l_grade_name = 'E4.' AND l_job_name = 'Officer' THEN l_grade_band = 'G_E4_O' IF l_grade_band = 'G1_TO_G3' OR l_grade_band = 'U1_TO_U6' OR l_grade_band = 'U7' OR l_grade_band = 'U8_TO_U9' OR l_grade_band = 'G_80_TO_76' OR l_grade_band = 'G_E1_TO_E2' THEN l_year_band = 'LT_10' ELSE IF l_grade_band = 'U10_TO_U11' OR l_grade_band = 'G_35_TO_36' OR l_grade_band = 'G_34' OR l_grade_band = 'G_75_TO_73' OR l_grade_band = 'G_72' OR l_grade_band = 'G_71_TO_70' OR l_grade_band = 'E3_VP' OR l_grade_band = 'E4_AVP' THEN l_year_band = 'LT_5' ELSE IF l_grade_band = 'G32_TO_G33S' THEN l_year_band = 'LT_2' ELSE IF l_grade_band = 'C' OR l_grade_band = 'MT' OR l_grade_band = 'MA' OR l_grade_band = 'G_E3_SO' OR l_grade_band = 'G_E4_O' THEN l_year_band = 'FIXED_ENTITLEMENT' L_Ann_accrual_char = GET_TABLE_VALUE('CIMB_MY_ANNUAL_LEAVE',l_grade_band,l_year_band,'0') L_Ann_accrual = TO_NUMBER(L_Ann_accrual_char) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 IF PER_ASG_REL_DATE_START > IV_CALEDARSTARTDATE THEN ( L_Ann_accrual = L_Ann_accrual/l_acrl_per_duration*(DAYS_BETWEEN(IV_CALEDARENDDATE,PER_ASG_REL_DATE_START) + 1) ) l_log =ESS_LOG_WRITE('L_Ann_accrual'||L_Ann_accrual_char) CHANGE_CONTEXTS(START_DATE = l_dm_date,END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave') THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days = l_approved_abs_days + l_abs_duration l_log =ESS_LOG_WRITE('l_abs_typ_name'||l_abs_typ_name||'Duration:'||TO_CHAR(l_abs_duration)) ) ) ) ) i = i + 1 ) ) IF l_approved_abs_days > 0 THEN ( l_reduced_days = L_Ann_accrual/l_acrl_per_duration * l_approved_abs_days ) floored_accrual = floor(l_reduced_days) decimal_accrual = l_reduced_days - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 l_reduced_days = final_accrual l_log =ESS_LOG_WRITE('l_reduced_days'||TO_CHAR(l_reduced_days)) ACCRUAL = l_reduced_days * -1 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( l_log =ESS_LOG_WRITE('l_ann_rate_1_char'||l_ann_rate_1_char||'l_ann_rate_2_char'||l_ann_rate_2_char||'l_yr_ann_date'||TO_CHAR(l_yr_ann_date)) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = IV_CALEDARSTARTDATE period_end_date = IV_CALEDARENDDATE period_end_date_term = LEAST(period_end_date, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(period_end_date, period_start_date) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Period Start Date: '|| to_char(period_start_date,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Period End Date: '|| to_char(period_end_date,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('L_year_start_date : '|| to_char(L_ann_year_start_dt,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF _x0000_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Malaysia with 3-year expiry, year 1. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and tracks initial year-specific balance. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) ACCRUAL = 0 l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) L_Acrl_Balance_Year = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) ) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)) IF L_los_in_months <= 24 THEN ACCRUAL = ACCRUAL + LEAST(7,GREATEST(L_Acrl_Balance_Year,0)) ELSE IF L_los_in_months > 24 AND L_los_in_months <= 48 THEN ACCRUAL = ACCRUAL + LEAST(5,GREATEST(L_Acrl_Balance_Year,0)) ELSE IF L_los_in_months > 48 AND L_los_in_months <= 180 THEN ACCRUAL = ACCRUAL + LEAST(8,GREATEST(L_Acrl_Balance_Year,0)) ELSE IF L_los_in_months > 180 THEN ACCRUAL = ACCRUAL + LEAST(11,GREATEST(L_Acrl_Balance_Year,0)) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)||'ACCRUAL'||TO_CHAR(ACCRUAL)) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Malaysia with 3-year expiry, year 2. Carries over the balance from year 1, restricts accrual during unpaid, maternity, emergency, or Hajj leave. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 1' L_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 ) ELSE ( change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_bfl_plan_name) ) ACCRUAL = L_Acrl_Balance_Year l_log =ESS_LOG_WRITE('L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)||'l_prv_year_end_date'||TO_CHAR(l_prv_year_end_date)) ) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Malaysia with 3-year expiry, year 3. Carries over the balance from year 2, restricts accrual during unpaid, maternity, emergency, or Hajj leave. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 L_BFL_Acrl_Balance_carry = 0 l_bfl_plan_name = 'Brought Forward Leave Plan 3 Years Expiry - Year 2' L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 ) ELSE ( change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_bfl_plan_name) ) ACCRUAL = L_Acrl_Balance_Year ) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated hospital leave accrual for employees in Malaysia based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave days. If the plan enrollment start date matches September 23, 2019, and the accrual period start date is before write a  date, accrual is set to 0; otherwise, it uses the input accrual value. Returns the final accrual value.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL L_DATA = ESS_LOG_WRITE('HOS IV_ACCRUALPERIODSTARTDATE::'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')|| 'IV_CALEDARSTARTDATE:'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')||'IV_CALEDARENDDATE:'||TO_CHAR(IV_CALEDARENDDATE,'YYYY/MM/DD')) RETURN ACCRUAL",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Retrieves compensation data for absence plans in Malaysia. Checks for specific absence types (e.g., annual, sick, Hajj) with block leave reasons within a specified period, determining if compensation limits are exceeded. Returns a status indicating whether compensation data exists.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 ,check_start_date (date) ,check_end_date (date) ,comp_limit (number) ,CURR_YR_ST_date (date) ,CURR_YR_END_date (date) l_abs_typ_name_check = 'X' I = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_start_date = check_start_date L_end_date = check_end_date Z = 1 l_abs_start_dt = '4712/12/31 00:00:00' (date) l_abs_end_dt = '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_job_name = PER_ASG_JOB_NAME L_RETURN_VALUE ='N' l_comp_limit_ch = 'X' l_comp_limit = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_curr_yr_st_dt = CURR_YR_ST_date l_curr_yr_END_dt = CURR_YR_END_date L_nxt_working_st_day = '4712/12/31 00:00:00' (date) L_nxt_working_day = '4712/12/31 00:00:00' (date) Annual[1] = '4712/12/31 00:00:00' (date) j = 1 l_duration = 0 BFL[1] = '4712/12/31 00:00:00' (date) L_prv_duration = 0 l_log =ESS_LOG_WRITE('[GET COMP DATE] l_person_id'||TO_CHAR(l_person_id)||'L_start_date:'||TO_CHAR(L_start_date)||'L_END_DATE:'||TO_CHAR(L_END_DATE)||'comp_limit:'||TO_CHAR(comp_limit)) CHANGE_CONTEXTS (START_DATE= L_start_date , END_DATE= L_END_DATE) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND (ANC_ABS_ENTRS_END_DATE > l_curr_yr_st_dt AND ANC_ABS_ENTRS_START_DATE < l_curr_yr_END_dt) THEN ( l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside l_abs_typ_name_check:'||l_abs_typ_name_check||'ANC_ABS_ENTRS_START_DATE'||TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD')||'ANC_ABS_ENTRS_END_DATE'||TO_CHAR(ANC_ABS_ENTRS_END_DATE,'YYYY/MM/DD')||'DUR:'||TO_CHAR(ANC_ABS_ENTRS_DURATION)) IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Brought Forward Leave') AND ( ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755045 OR ANC_ABS_ENTRS_DURATION => comp_limit) THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 1') EXIT ) ELSE IF ((( l_abs_typ_name_check = 'Paternity Leave - 1st Time Father' OR l_abs_typ_name_check = 'Hajj Leave' OR l_abs_typ_name_check = 'Hajj Leave (Calendar Days)' OR l_abs_typ_name_check = 'Hajj Leave (Days)' OR l_abs_typ_name_check = 'Marriage Leave' OR l_abs_typ_name_check = 'Volunteerism Leave') AND ANC_ABS_ENTRS_DURATION => comp_limit) OR l_abs_typ_name_check = 'Staff Rejuvenation Leave' OR l_abs_typ_name_check = 'Sabbatical Leave' OR l_abs_typ_name_check LIKE 'Prolonged Illness Leave%' OR l_abs_typ_name_check = 'Maternity Leave' OR l_abs_typ_name_check = 'Maternity Leave - 1st Time Mothers' OR l_abs_typ_name_check = 'Pilgrimage Leave or Umrah Leave') THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 2') EXIT ) ELSE IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Brought Forward Leave') THEN ( l_duration = ANC_ABS_ENTRS_DURATION l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3'||'ANC_ABS_ENTRS_ABSENCE_REASON_ID'||TO_CHAR(ANC_ABS_ENTRS_ABSENCE_REASON_ID)) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') = TO_DATE(TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') AND (L_prv_duration + ANC_ABS_ENTRS_DURATION) => comp_limit THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:1') ) ELSE( l_msg = 'In' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:2') L_prv_duration = ANC_ABS_ENTRS_DURATION L_nxt_working_day = ADD_DAYS(ANC_ABS_ENTRS_END_DATE,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', L_nxt_working_day, ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', L_nxt_working_day, ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:2 L_nxt_working_day'||TO_CHAR(L_nxt_working_day)) ) j = 1 l_log =ESS_LOG_WRITE('[GET COMP DATE] L_comp_limit'||TO_CHAR(L_comp_limit)) CHANGE_CONTEXTS (START_DATE= ANC_ABS_ENTRS_START_DATE , END_DATE= L_nxt_working_day) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF ((ANC_ABS_TYP_NAME = 'Annual Leave' AND l_abs_typ_name_check = 'Brought Forward Leave') OR (ANC_ABS_TYP_NAME = 'Brought Forward Leave' AND l_abs_typ_name_check = 'Annual Leave') OR (ANC_ABS_TYP_NAME = 'Annual Leave' AND l_abs_typ_name_check = 'Unpaid Leave')) AND L_nxt_working_day = ANC_ABS_ENTRS_START_DATE AND (l_duration + ANC_ABS_ENTRS_DURATION => comp_limit) THEN ( L_RETURN_VALUE = 'Y' EXIT ) ) ) j = j + 1 ) ) IF L_RETURN_VALUE = 'Y' THEN EXIT ) ) ) i = i + 1 ) ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] L_RETURN_VALUE'||L_RETURN_VALUE) RETURN L_RETURN_VALUE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated hospital leave accrual for employees in Singapore based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave days. If the plan enrollment start date matches September 23, 2019, the accrual period start date is before write a  date, and the plan enrollment start date is not the hire date, accrual is set to 0; otherwise, it uses the input accrual value. For employees with grade 'INTERN', the accrual is prorated based on the proportion of days in the plan enrollment period to the total calendar period. Returns the final accrual value.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL IF l_grade_name = 'INTERN' THEN ACCRUAL = ACCRUAL * ((DAYS_BETWEEN(IV_PLANENROLLMENTENDDATE, IV_PLANENROLLMENTSTARTDATE)+1)/(DAYS_BETWEEN (IV_CALEDARENDDATE,IV_CALEDARSTARTDATE)+1)) RETURN ACCRUAL",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Retrieves compensation data for absence plans in Singapore. Checks for specific absence types (e.g., annual, sick, Hajj) with block leave reasons within a specified period, determining if compensation limits are exceeded. Returns a status indicating whether compensation data exists.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 ,check_start_date (date) ,check_end_date (date) ,comp_limit (number) ,CURR_YR_ST_date (date) ,CURR_YR_END_date (date) l_abs_typ_name_check = 'X' I = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_start_date = check_start_date L_end_date = check_end_date Z = 1 l_abs_start_dt = '4712/12/31 00:00:00' (date) l_abs_end_dt = '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_job_name = PER_ASG_JOB_NAME L_RETURN_VALUE ='N' l_comp_limit_ch = 'X' l_comp_limit = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_curr_yr_st_dt = CURR_YR_ST_date l_curr_yr_END_dt = CURR_YR_END_date L_nxt_working_st_day = '4712/12/31 00:00:00' (date) L_nxt_working_day = '4712/12/31 00:00:00' (date) Annual[1] = '4712/12/31 00:00:00' (date) BFL[1] = '4712/12/31 00:00:00' (date) L_prv_duration = 0 l_log =ESS_LOG_WRITE('[GET COMP DATE] l_person_id'||TO_CHAR(l_person_id)||'L_start_date:'||TO_CHAR(L_start_date)||'L_END_DATE:'||TO_CHAR(L_END_DATE)||'comp_limit:'||TO_CHAR(comp_limit)) CHANGE_CONTEXTS (START_DATE= L_start_date , END_DATE= L_END_DATE) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND (ANC_ABS_ENTRS_END_DATE > l_curr_yr_st_dt AND ANC_ABS_ENTRS_START_DATE < l_curr_yr_END_dt) THEN ( l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside l_abs_typ_name_check:'||l_abs_typ_name_check||'ANC_ABS_ENTRS_START_DATE'||TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD')||'ANC_ABS_ENTRS_END_DATE'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE,'YYYY/MM/DD')||'DUR:'||TO_CHAR(ANC_ABS_ENTRS_DURATION)) IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Maternity Leave' OR l_abs_typ_name_check = 'Extended Maternity Leave' OR l_abs_typ_name_check = 'Marriage Leave' OR l_abs_typ_name_check = 'Paternity Leave' OR l_abs_typ_name_check = 'Shared Parental Leave' OR l_abs_typ_name_check = 'National Service Leave') AND ( ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003790259) THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 1') EXIT ) ) ) ) i = i + 1 ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] L_RETURN_VALUE'||L_RETURN_VALUE) RETURN L_RETURN_VALUE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates full-pay maternity leave applications in Malaysia. Ensures the duration does not exceed 60 days, the employee has worked at least 3 months, prohibits leave during probation for contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 l_maternity_fp_dur = 0 l_maternity_hp_dur = 0 L_without_cert_duration = 0 l_sl_balance = 0 L_grade_name = PER_ASG_GRADE_NAME l_limit = 0 l_limit_DAYS = 0 child_person_id[1] = 0 child_dob[1] = '1951/01/01 00:00:00' (date) l_child_birth = '1951/01/01 00:00:00' (date) j = 1 k = 1 l_contact_dob_char = 'X' l_child_exists = 'X' youngest_person_id = 0 youngest_dob = '1951/01/01 00:00:00' (date) l_msg = 'X' l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) L_duration_days = ROUND(DAYS_BETWEEN(iv_end_date,iv_start_date),0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN l_child_birth = IV_ACTUALCHILDBIRTHDATE ELSE l_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF l_child_birth > ADD_DAYS(IV_START_DATE,30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EDOB_30_DAYS_LATER' RETURN VALID, ERROR_MESSAGE ) IF L_grade_name = 'C1.' OR L_grade_name = 'C1.' OR L_grade_name = 'C3.' OR L_grade_name = 'C4.' OR L_grade_name = 'C5.' OR L_grade_name = 'C6.' OR L_grade_name = 'C7.' OR L_grade_name = 'C8.' OR L_grade_name = 'C9.' THEN ( l_limit = 2 l_limit_DAYS = 60 ) ELSE( l_limit = 3 l_limit_DAYS = 90 ) IF L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_MAX_DAYS' TOKEN_NAME[1] = 'MAX_FP_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_type = 'X' l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' child_person_id[k] = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(PER_PER_CONT_REL_CONTACT_PERSON_ID[j])) child_dob[k] = TO_DATE(l_contact_dob_char) k = k + 1 ) j = j + 1 ) ) IF k > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_5_CHILD' RETURN VALID, ERROR_MESSAGE ) IF l_child_exists = 'Y' AND k = 5 THEN ( youngest_person_id = child_person_id[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) IF (youngest_dob = IV_START_DATE AND ADD_MONTHS(youngest_dob ,7) < l_effective_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your youngest DOB recorded is '|| to_char(youngest_dob,'DD-Mon-YYYY') || ' person id is ' || to_char(youngest_person_id) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= ADD_MONTHS(iv_start_date,-9) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Maternity Leave - 1st Time Mothers' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_ONCE_YEAR' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_abs_typ_name_check = 'Maternity Leave' THEN ( l_maternity_fp_dur = l_maternity_fp_dur + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE)+1 l_msg = l_msg||'dur:'||to_char(l_maternity_fp_dur)||'LD:'||TO_CHAR(l_limit_DAYS) IF l_maternity_fp_dur + L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_MAX_DAYS' TOKEN_NAME[1] = 'MAX_FP_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) ) i = i + 1 ) ) ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates full-pay maternity leave applications in Malaysia. Ensures the duration does not exceed 60 days, the employee has worked at least 3 months, prohibits leave during probation for contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 l_maternity_fp_dur = 0 l_maternity_hp_dur = 0 L_without_cert_duration = 0 l_sl_balance = 0 L_grade_name = PER_ASG_GRADE_NAME l_limit = 0 l_limit_DAYS = 0 child_person_id[1] = 0 child_dob[1] = '1951/01/01 00:00:00' (date) l_child_birth = '1951/01/01 00:00:00' (date) j = 1 k = 1 l_contact_dob_char = 'X' l_child_exists = 'X' youngest_person_id = 0 youngest_dob = '1951/01/01 00:00:00' (date) l_msg = 'X' l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) L_duration_days = ROUND(DAYS_BETWEEN(iv_end_date,iv_start_date),0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN l_child_birth = IV_ACTUALCHILDBIRTHDATE ELSE l_child_birth = IV_EXPECTEDCHILDBIRTHDATE IF l_child_birth > ADD_DAYS(IV_START_DATE,30) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_EDOB_30_DAYS_LATER' RETURN VALID, ERROR_MESSAGE ) l_limit = 3.22 l_limit_DAYS = 98 IF L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_MAX_DAYS' TOKEN_NAME[1] = 'MAX_FP_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_type = 'X' l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' child_person_id[k] = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH' ,'|=P_PERSON_ID='||TO_CHAR(PER_PER_CONT_REL_CONTACT_PERSON_ID[j])) child_dob[k] = TO_DATE(l_contact_dob_char) k = k + 1 ) j = j + 1 ) ) IF k > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_5_CHILD' RETURN VALID, ERROR_MESSAGE ) IF l_child_exists = 'Y' AND k = 5 THEN ( youngest_person_id = child_person_id[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) IF (youngest_dob = IV_START_DATE AND ADD_MONTHS(youngest_dob ,7) < l_effective_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Your youngest DOB recorded is '|| to_char(youngest_dob,'DD-Mon-YYYY') || ' person id is ' || to_char(youngest_person_id) RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= ADD_MONTHS(iv_start_date,-9) , END_DATE= iv_start_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF l_abs_typ_name_check = 'Maternity Leave - 1st Time Mothers' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_ONCE_YEAR' RETURN VALID, ERROR_MESSAGE ) ELSE IF l_abs_typ_name_check = 'Maternity Leave' THEN ( l_maternity_fp_dur = l_maternity_fp_dur + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE)+1 l_msg = l_msg||'dur:'||to_char(l_maternity_fp_dur)||'LD:'||TO_CHAR(l_limit_DAYS) IF l_maternity_fp_dur + L_duration_days > l_limit_DAYS THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MAT_FP_MAX_DAYS' TOKEN_NAME[1] = 'MAX_FP_DAYS' TOKEN_VALUE[1] = TO_CHAR(l_limit) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) ) ) ) ) i = i + 1 ) ) ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the duration of half-day absences for employees in Thailand based on work schedules and rosters. Determines if an absence is a full day or half day by comparing entered absence hours to total assigned shift hours, with adjustments for shift patterns. Returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_END_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_START_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_AVL_CODE_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DURATION_ARR IS 0 DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_NAME_ARR IS 'A' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_OBJ_CATEGORY_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_START_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_WORKWEEK_SHIFT_DATE_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ANC_AVAILABILITY_END_DATE_TIME_ARR IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_END_DATE_DURATION IS 0 DEFAULT_DATA_VALUE FOR ABS_EXT_PER_ABS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR IV_TERM_ID is 0 DEFAULT for IV_START_DURATION IS 1 DEFAULT for IV_END_DURATION IS 2 DEFAULT for IV_ABS_START_DURATION IS 1 DEFAULT for IV_ABS_END_DURATION IS 1 DEFAULT for ANC_ABS_ENTRS_SINGLE_DAY_FLAG IS 'N' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT_DATA_VALUE FOR ANC_PUBLISHED_SHIFT_DETAILS_ARR IS 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_DETAILS_ARR IS 'X' DEFAULT FOR IV_ABS_START_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABS_END_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUALPERIODENDDATE(date), IV_ACCRUALPERIODSTARTDATE (date), IV_TERM_ID, IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text), IV_TOTALDURATION(number), IV_START_DURATION(number), IV_END_DURATION (number), IV_ABS_START_DURATION (number), IV_ABS_END_DURATION (NUMBER), IV_END_TIME(text), IV_ABS_START_DATE (DATE), IV_ABS_END_DATE (DATE) L_NUM=0 l_days=0 v_person_id = get_context(PERSON_ID,0) v_assignment_id = get_context(HR_ASSIGNMENT_ID,0) abstypeid = get_context (ABSENCE_TYPE_ID, 0) l_Term_Id = IV_TERM_ID ld_pub_sch_start_time = '4712/12/31 00:00:00' (date) ld_pub_sch_end_time = '4712/12/31 00:00:00' (date) ld_wrk_sch_start_time = '4712/12/31 00:00:00' (date) ld_availability_start_date = '4712/12/31 00:00:00' (date) ld_availability = 'X' ld_wrk_sch_end_time = '4712/12/31 00:00:00' (date) l_start_date = '4712/12/31 00:00:00' (date) l_stop_date = '4712/12/31 23:59:00' (date) ld_asg_sch_date = '4712/12/31 00:00:00' (date) ld_avl_obj_name = 'A' ld_avl_obj_cat='X' temp_PS_Start_Time = 'A' ld_avl_strt_date_time = '4712/12/31 00:00:00' (date) ld_avl_end_date_time = '4712/12/31 00:00:00' (date) ld_period_start_date = '4712/12/31 00:00:00' (date) total_duration=0 multi_total_duration=0 t_Duration=10 l_ws_flag='N' l_ps_flag='N' l_duration = 1 l_x_duration = 0 l_c_duration = 0 RefPhase='ABS' ln_unrounded_duration_d = 0 l_chk = 0 L_shift_details = 'X' L_pub_details = 'X' L_tot_asg_hours = 0 l_time_entered = 0 l_asg_shift_st_date = '4712/12/31 00:00:00' (date) l_asg_shift_st_date_CHAR = 'X' l_asg_shift_end_date = '4712/12/31 00:00:00' (date) L_ASG_SHIFT_HOURS = 0 decimal_duration = 0 l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') floored_duration = 0 IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_time_entered = get_measure_from_time(IV_START_DATE,IV_END_DATE) IF l_date = l_end_date OR (ADD_DAYS(l_date,1) = l_end_date AND IV_END_TIME = '00:00' AND l_time_entered > 8) THEN ( l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||IV_END_TIME l_start_time = IV_START_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_time = IV_START_TIME l_end_time = IV_END_TIME l_start_hh = TO_NUMBER(SUBSTR(l_start_time,1,2)) l_start_mm = TO_NUMBER(SUBSTR(l_start_time,4,2)) l_end_hh = TO_NUMBER(SUBSTR(l_end_time,1,2)) l_end_mm = TO_NUMBER(SUBSTR(l_end_time,4,2)) l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm IF l_end_hh > l_start_hh THEN ( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt - l_start_tt ) ELSE( l_start_tt = (l_start_hh*60) + l_start_mm l_end_tt = (l_end_hh*60) + l_end_mm l_entry_duration_m = l_end_tt + (1440-l_start_tt ) ) l_entry_duration_h = FLOOR(l_entry_duration_m/60) + ROUND(MOD(l_entry_duration_m,60)/60,3) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = v_assignment_id, START_DATE = ADD_DAYS(l_date,-1), END_DATE = ADD_DAYS(l_date,1)) ( i = 1 l_chk = 0 IF ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_PUBLISHED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_pub_details = ANC_PUBLISHED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,10)+1,INSTR(L_pub_details,'|',1,11)-INSTR(L_pub_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,11)+1,INSTR(L_pub_details,'|',1,12)-INSTR(L_pub_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_pub_details,INSTR(L_pub_details,'|',1,9)+1,INSTR(L_pub_details,'|',1,10)-INSTR(L_pub_details,'|',1,9)-1) L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND l_date = IV_ABS_END_DATE AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'DD-MM-YYYY')||' '||IV_END_TIME,'DD-MM-YYYY HH24:MI') AND TO_DATE(l_asg_shift_end_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_START_DATE,'DD-MM-YYYY')||' '||IV_START_TIME,'DD-MM-YYYY HH24:MI') THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('TH_DUR_CAL PLAN 1:1:1 IN') ) ELSE IF SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') AND TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_END_DATE,'DD-MM-YYYY')||' '||IV_END_TIME,'DD-MM-YYYY HH24:MI') AND (TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') >= TO_DATE(TO_CHAR(IV_ABS_START_DATE,'DD-MM-YYYY HH24:MI'),'DD-MM-YYYY HH24:MI') OR TO_DATE(l_asg_shift_st_date_CHAR,'DD-MM-YYYY HH24:MI') <= TO_DATE(TO_CHAR(IV_ABS_START_DATE,'YYYY/MM/DD HH24:MI'),'YYYY/MM/DD HH24:MI')) THEN ( L_tot_asg_hours = L_tot_asg_hours + L_asg_hours L_DATA = ESS_LOG_WRITE('TH_DUR_CAL PLAN 1:1:2 IN') ) i = i + 1 l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 ) ELSE IF ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(1) THEN ( WHILE ANC_ASSIGNED_SHIFT_DETAILS_ARR.exists(i) LOOP ( L_shift_details = ANC_ASSIGNED_SHIFT_DETAILS_ARR[i] l_asg_shift_st_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,10)+1,INSTR(L_shift_details,'|',1,11)-INSTR(L_shift_details,'|',1,10)-1) l_asg_shift_end_date_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,11)+1,INSTR(L_shift_details,'|',1,12)-INSTR(L_shift_details,'|',1,11)-1) l_asg_shift_hours_CHAR = SUBSTR(L_shift_details,INSTR(L_shift_details,'|',1,9)+1,INSTR(L_shift_details,'|',1,10)-INSTR(L_shift_details,'|',1,9)-1) i = i + 1 L_asg_hours = TO_NUMBER(l_asg_shift_hours_CHAR)/60/60/1000 l_shift_st_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'00:00' l_shift_end_date = TO_CHAR(l_date,'yyyy-mm-dd')||' '||'23:59' l_duration_char = GET_VALUE_SET('CIMB_GET_SCHD_DURATION_UPD','|=P_PERSON_ID='||TO_CHAR(v_person_id)||'|P_EFF_ST_DATE='''||l_shift_st_date||''''||'|P_EFF_END_DATE='''|| l_shift_end_date||'''') IF l_duration_char = '1' AND SUBSTR(l_asg_shift_end_date_CHAR,1,10) = TO_CHAR(l_date,'DD-MM-YYYY') THEN L_tot_asg_hours = L_tot_asg_hours + L_asg_hours l_chk = l_chk + 1 ) IF L_tot_asg_hours < 4 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0 ELSE IF (l_entry_duration_h/(L_tot_asg_hours+1)) < 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 0.5 ELSE ln_unrounded_duration_d = ln_unrounded_duration_d + 1 IF IV_START_TIME = '00:00' AND IV_END_TIME = SUBSTR(l_asg_shift_end_date_CHAR,12,5) THEN ln_unrounded_duration_d = 1 ) ) ) DURATION = ln_unrounded_duration_d return DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated hospital leave accrual for contractors in Malaysia. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with contractor-specific policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND (TO_CHAR(IV_PLANENROLLMENTSTARTDATE,'YYYY') = TO_CHAR(l_hire_date,'YYYY') OR IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE) THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL L_DATA = ESS_LOG_WRITE('HOS IV_ACCRUALPERIODSTARTDATE::'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')|| 'IV_CALEDARSTARTDATE:'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')||'IV_CALEDARENDDATE:'||TO_CHAR(IV_CALEDARENDDATE,'YYYY/MM/DD')) RETURN ACCRUAL",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates maternity leave applications in China. Ensures the duration complies with local regulations, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL DELIVERY' ) AND l_duration > 98) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum days (98 Calendar Days) allowed for normal delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'CESAREAN SECTION DELIVERY' ) AND l_duration > 113) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum days (113 Calendar Days) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates adoption leave applications in Malaysia. Ensures the employee has worked at least 3 months, the leave start date matches the child\u2019s adoption date, prohibits leave during probation for contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date),IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'X' l_duration = 0 VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_child_age = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = l_effective_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_asg_category = 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not elgible for Adoption Leave. Please check your Assigment Category' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not eligible for Adoption Leave. Please check your Confirmation Status or Confirmation Date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) l_child_dob = IV_ACTUALCHILDBIRTHDATE l_child_age = FLOOR(( DAYS_BETWEEN(IV_START_DATE,l_child_dob) + 1 ) /365 ) IF l_child_age > 7 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not eligible for Adoption Leave. Only eligible for child below 7 years old .' ||to_char(l_child_age)|| ' years old. ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (l_child_age <= 2 AND (IV_TOTALDURATION > 60)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Maximum duration for adoption leave for child younger or equal to 2 years old is 60 consecutive days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (l_child_age > 2 AND (IV_TOTALDURATION > 30)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Maximum duration for adoption leave for child older than 2 years old is 30 consecutive days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates maternity leave applications in Vietnam. Ensures the duration complies with local regulations, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'SINGLETON' ) AND l_duration > 6) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 6 months) allowed for normal delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'TWINS' ) AND l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 7 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'TRIPLETS' ) AND l_duration > 8) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 8 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'QUADRUPLETS' ) AND l_duration > 9) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 9 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'QUINTUPLETS' ) AND l_duration > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 10 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'UNPAID' ) ) THEN ( CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Maternity Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION ) ) ) i = i + 1 ) ) IF (L_sl_days <> 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 10 months ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates day-off applications for Niaga employees. Ensures the duration is valid, complies with local policies, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS ' ' DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ATTRIBUTE1 IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_JOB_NAME IS ' ' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID IS 0 DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_PERSON_AGE IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS ' ' DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME IS ' ' INPUTS ARE IV_END_DATE (date), IV_START_DATE (date), IV_ATTRIBUTE_1(TEXT), IV_TOTALDURATION,IV_ABSENCE_REASON (Text) i=1 l_start_date=IV_START_DATE l_end_date=IV_END_DATE ld_start_date = to_date('1/1/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') ld_end_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id=GET_CONTEXT(PERSON_ID,0) l_abs_type_id=GET_CONTEXT(ABSENCE_TYPE_ID,0) l_prob_end_date = PER_ASG_DATE_PROBATION_END l_sys_date = TO_DATE(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE, 'YYYY/MM/DD') l_hire_year= to_number(to_char(PER_ASG_REL_DATE_START,'YYYY')) l_hire_month=to_number(to_char(PER_ASG_REL_DATE_START,'MM')) l_abs_duration = 0 l_grade_band = 'AA' l_year_band = 'BB' L_blk_accrual = 0 l_ann_bal = 0 l_curr_bal = 0 l_current_date = to_date('31/12/' + to_char(IV_START_DATE,'YYYY'),'DD/MM/YYYY') l_ent_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_reason=IV_ABSENCE_REASON count = 0 l_duration = 0 VALID = 'Y' l_dur=0 l_dur=IV_TOTALDURATION floored_accrual = floor(l_dur) decimal_accrual = l_dur - floored_accrual IF (decimal_accrual > 0) THEN ( VALID='N' ERROR_MESSAGE='CIMB_NIAGA_DECIMAL_ERROR' RETURN VALID,ERROR_MESSAGE ) l_prev_date='1951/01/01 00:00:00' (date) l_next_date='1951/01/01 00:00:00' (date) l_prev_date=l_start_date l_next_date=l_end_date CHANGE_CONTEXTS(START_DATE=ld_start_date, END_DATE=ld_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS (ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = l_abs_type_id) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD != 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' and (l_ent_id != ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) THEN ( l_abs_duration = l_abs_duration + ANC_ABS_ENTRS_DURATION ) else if (l_ent_id = ANC_ABS_ENTRS_PER_ABSENCE_ENTRY_ID) then ( count = count + 1 l_duration= l_duration + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) ld_department_name =PER_ASG_ORG_DEPARTMENT_NAME IF (l_abs_duration+l_dur) > 12 AND (ld_department_name like 'TCB Pool%' OR ld_department_name like 'The Complete Banker%') THEN ( VALID='N' ERROR_MESSAGE = 'CIMB_NIAGA_DAY_OF_TCB_VALID' RETURN VALID,ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the duration of absence types for employees in Hong Kong based on work schedules and rosters. Determines the duration by comparing entered absence hours to total assigned shift hours, with adjustments for shift patterns. Returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_ph = 'X' l_date_st = 'X' WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH_HK','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) IF ln_start_duration = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated absence accrual for employees in Hong Kong based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE '%Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[_x0000_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in Hong Kong. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years, checks sufficient balance, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(l_effective_date,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(l_effective_date,'YYYY')||'-12-31','YYYY-MM-DD') l_nyear_begin_date = TO_DATE(TO_CHAR(l_effective_date,'YYYY')||'-01-01','YYYY-MM-DD') L_nyear_end_date = TO_DATE(TO_CHAR(l_effective_date,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME l_position_name = PER_ASG_POSITION_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( IF l_asg_category != 'CONTRACT' THEN ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('HK Permanent Employee Annual Leave Plan') l_plan_name = 'HK Permanent Employee Annual Leave Plan' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) ELSE ( L_Ann_Acrl_Balance_contr = GET_PLAN_BALANCE('HK Contract Employee Annual Leave Plan') l_plan_name = 'HK Contract Employee Annual Leave Plan' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_contr ) ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) l_comp_limit = '7' IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Minimum duration for Compulsory/Block Leave is '||l_comp_limit||' days Please change your Absence Reason to Regular Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates volunteer leave applications in Singapore. Ensures the duration complies with local policies, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_RSN_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' l_abs_rsn_name_check = 'X' i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_user_person_type = PER_ASG_USER_PERSON_TYPE l_limit = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_msg = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date, ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF l_duration > 1 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration exceeding the entitlement' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_absence_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Volunteer Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,L_year_start_date) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(L_year_end_date,ANC_ABS_ENTRS_START_DATE) + 1 IF L_sl_days > 1 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have already utilized your Volunteer Leave entitlement for this year' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Duplicate entry (assumed to be the same as above, possibly a versioning or typo). Validates volunteer leave applications in Singapore. Ensures the duration complies with local policies, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_RSN_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' l_abs_rsn_name_check = 'X' l_abs_entries_duration = 0 i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_user_person_type = PER_ASG_USER_PERSON_TYPE l_limit = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_msg = 'X' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date, ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration exceeding the entitlement' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE = L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_typ_name_check = 'Volunteer Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have already utilized your Volunteer Leave entitlement for this year' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) )i = i + 1 ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the duration of absence types for employees in Vietnam based on work schedules and rosters. Determines the duration by comparing entered absence hours to total assigned shift hours, with adjustments for shift patterns. Returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 ln_floor_duration_d = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ln_unrounded_duration_d = ln_entry_duration_d * PER_ASG_FTE_VALUE IF (ln_unrounded_duration_d - FLOOR(ln_unrounded_duration_d) <> 0 AND ln_unrounded_duration_d - FLOOR(ln_unrounded_duration_d) <> 0.5) THEN ln_floor_duration_d = FLOOR(ln_unrounded_duration_d) + 0.5 ELSE ln_floor_duration_d = ln_unrounded_duration_d DURATION = ln_floor_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for GEXCO employees in Malaysia. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with GEXCO-specific policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 accrual = 24 carryover = 7 prorationFactor = 1 carryOverProration = 1 IF IV_CALEDARSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( accrual = (accrual/365) * (DAYS_BETWEEN(IV_CALEDARENDDATE, IV_PLANENROLLMENTSTARTDATE) + 1) ) IF IV_CALEDARENDDATE > IV_PLANENROLLMENTENDDATE THEN ( accrual = (accrual/365) * (DAYS_BETWEEN(IV_PLANENROLLMENTENDDATE, IV_CALEDARSTARTDATE) + 1) ) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual <= 0.5) THEN final_accrual = floored_accrual IF (decimal_accrual > 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual accrual = accrual * PER_ASG_FTE_VALUE carryover = carryover RETURN accrual, carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates severe illness leave applications in Vietnam. Ensures the duration complies with local regulations, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_Emp = GET_PLAN_BALANCE('VN Sick Leave Full Paid Plan') l_plan_name = 'VN Sick Leave Full Paid Plan' ) IF (L_Ann_Acrl_Balance_Emp > 0 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Unable to record this absence because you still have '|| to_char(L_Ann_Acrl_Balance_Emp)||' days of your Sick Leave Full Paid Plan. Please change your leave type to Sick Leave Full Paid.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates the expiry of brought forward leave (BFL) applications in the UK. Ensures the balance is within expiry limits (e.g., 3 years), checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_EXPECTEDCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR IV_ACTUALCHILDBIRTHDATE IS '4712/01/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR l_expiry_date IS '4712/01/31 00:00:00' (date) INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_EXPECTEDCHILDBIRTHDATE (DATE), IV_ACTUALCHILDBIRTHDATE (DATE) VALID = 'Y' l_year_begin_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_expiry_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-05-01','YYYY-MM-DD') j = 1 l_contact_person_id = 0 l_contact_dob = '1951/01/01 00:00:00' (date) l_contact_dob_char = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_abs_reason = 'Maternity Leave' IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = IV_START_DATE) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF IV_START_DATE >= TO_DATE('2024-01-01','YYYY-MM-DD') THEN ( IF IV_START_DATE >= l_expiry_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Brought Forward Leave Plan expired on 31 March. Please change your leave type.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF IV_END_DATE >= l_expiry_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Brought Forward Leave Plan expired on 31 March. Please split your leave application.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates paternity leave applications in Vietnam. Ensures the employee has worked at least 3 months, the leave start date is within a specified period after the child\u2019s birth, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text), IV_ACTUALCHILDBIRTHDATE (date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - SINGLETON' ) AND l_duration > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 5 days) allowed for normal delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - TWINS' ) AND l_duration > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 10 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - TRIPLETS' ) AND l_duration > 13) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 13 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - QUADRUPLETS' ) AND l_duration > 16) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 16 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL LABOR AND DELIVERY - QUINTUPLETS' ) AND l_duration > 19) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 19 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'PREMATURE BIRTH' ) AND l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 7 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'SURGICAL CESAREAN SECTION - SINGLETON' ) AND l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 7 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'SURGICAL CESAREAN SECTION - TWINS OR MORE' ) AND l_duration > 14) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 14 days ) allowed for cesarean section delivery.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates personal leave applications in Vietnam. Ensures the duration complies with local policies, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text), IV_ACTUALCHILDBIRTHDATE (date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'MARRIAGE - SELF' ) AND l_duration > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 3 days) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE 'MARRIAGE - CHILDREN' ) AND l_duration > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'DEATH - IMMEDIATE FAMILY MEMBER ' ) AND l_duration > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment end date for sick leave plans for employees in Malaysia. Uses the employee\u2019s actual termination date if available, otherwise defaults to the context end date or a specific policy date. Returns the calculated enrollment end date.\n\n***answer***: DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'Worker' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_current_date = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_end_date = GET_CONTEXT(END_DATE, '4712/12/31 00:00:00' (date)) IF PER_ASG_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_year_start_date = LEAST(TO_DATE(GET_VALUE_SET('CIMB_GET_MY_ENROL_START_DATE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_ASSG_CAT='''||l_asg_category||''''||'|P_EFF_DATE='''||TO_CHAR(l_effective_date,'YYYY/MM/DD')||''''),'YYYY-MM-DD'),l_end_date) enrollmentEndDate = LEAST(ADD_DAYS(l_year_start_date,-1),l_termination_date) RETURN enrollmentEndDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for employees in Vietnam based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE 'Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ) ) mn=mn+1 ) ) ELSE( l_no_of_days1 = DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE) + 1 l_no_of_days2 = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, l_band_chg_dt1) + 1 ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) l_accrued_period2 = ROUND(((l_accrued_period2 * (l_no_of_days2 - l_approved_ab_x0000_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates prenatal leave applications in Vietnam. Ensures the duration complies with local regulations, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text), IV_ACTUALCHILDBIRTHDATE (date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'NORMAL CONDITION' ) AND l_duration > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE 'SPECIAL CONDITION' ) AND l_duration > 2) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid leave applications in Vietnam. Ensures the duration complies with local policies, requires other leave balances (e.g., annual, sick) to be exhausted, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_Emp = GET_PLAN_BALANCE('VN Employee Annual Leave Plan') l_plan_name = 'VN Employee Annual Leave Plan' ) IF (L_Ann_Acrl_Balance_Emp >= 0.5 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Unable to record this absence because you still have '|| to_char(L_Ann_Acrl_Balance_Emp)||' days of your Annual Leave Plan. Please change your leave type to Annual Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid maternity leave applications in Vietnam. Ensures the duration complies with local regulations, requires full-pay maternity leave to be exhausted, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF (l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND l_abs_typ_name_check = 'Maternity Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') THEN ( IF (ADD_DAYS(ANC_ABS_ENTRS_END_DATE,1) <> IV_START_DATE) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Unpaid Maternity Leave must start exactly after End Date of Maternity Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) j = j + 1 ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid injury compensation leave (UICL) applications in Singapore. Ensures the duration complies with local policies, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'Singapore' l_duration = IV_TOTALDURATION VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_service_months = 0 l_elg_leave_days = 12 l_contact_person_id = 0 l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) K = 1 g = 1 child_person_id[1] = 0 child_citizen[1] = 'X' child_dob[1] = '1951/01/01 00:00:00' (date) youngest_person_id = 0 youngest_citizen = 'X' youngest_dob = '1951/01/01 00:00:00' (date) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_msg = 'X' l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF ADD_MONTHS(PER_ASG_REL_DATE_START,3) > IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_3_MONTHS_WRK' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = 'X' l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH','|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] ) child_person_id[k] = l_contact_person_id child_citizen[k] = l_child_citizen child_dob[k] = l_contact_dob k = k + 1 ) j = j + 1 ) IF l_child_exists = 'Y' THEN ( youngest_person_id = child_person_id[1] youngest_citizen = child_citizen[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_citizen = child_citizen[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) ) IF youngest_citizen != 'Singapore' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not eligible for Unpaid Infant Child Leave. Registered citizenship is' || l_child_citizen RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( IF( MONTHS_BETWEEN(IV_START_DATE, youngest_dob) > 24)THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not eligible for Unpaid Infant Child Leave. Registered Date of Birth is '|| l_contact_dob_char RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) I = 1 CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Unpaid Infant Care Leave') AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( l_prv_duration = l_prv_duration + ANC_ABS_ENTRS_DURATION IF (l_prv_duration + IV_TOTALDURATION) > l_elg_leave_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are entitle for '||to_char(l_elg_leave_days)|| ' days. You current balance is '||to_char(l_elg_leave_days - l_prv_duration)||' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CHILD_NO_UPD' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid training/union (TU) leave applications in Malaysia. Ensures the duration complies with local policies, requires other leave balances (e.g., annual, sick) to be exhausted, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates paternity/calculating days leave applications in Malaysia. Ensures the employee has worked at least 3 months, the leave start date is within a specified period after the child\u2019s birth, prohibits leave during probation for contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START l_asg_end = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 L_first_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' l_sl_limit = 10 CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (l_grade_name LIKE 'G%' OR l_grade_name LIKE 'U%' OR l_grade_name LIKE '7%' OR l_grade_name LIKE '8%' OR l_grade_name LIKE '35%' OR l_grade_name LIKE '36&') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please select Paternity Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (l_union = 'Kesatuan Pegawai-pegawai Bank Sarawak (KPPBS) - G36' OR l_union = 'Kesatuan Pegawai-pegawai Bank Sarawak (KPPBS) - G35' OR l_union = 'Kesatuan Pegawai-pegawai Bank Sarawak (KPPBS) - G34' OR l_union = 'Kesatuan Pegawai-pegawai Bank Sabah (KPPBSABAH) - G34' OR l_union = 'Sarawak Bank Employees Union (SBEU)') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please select Paternity Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name = 'EQ.1' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.4') THEN ( IF (l_duration > 7) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Paternity Leave entitlement per ocassion is 7 day(s).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ELSE ( IF (l_duration > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Paternity Leave entitlement per ocassion is 10 day(s).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Paternity Leave - 1st Time Father' OR l_abs_typ_name_check = 'Paternity Leave' OR(l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755052)) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_first_days = L_first_days + 1 ) ) ) i = i + 1 ) ) IF L_sl_days + 1 > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized '||to_char(L_sl_days)||' days of Paternity Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment end date for absence plans for contractors in Malaysia (version 2). Uses the employee\u2019s actual termination date if available, otherwise defaults to the context end date or a specific policy date. Returns the calculated enrollment end date.\n\n***answer***: DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'Worker' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) EffDt = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) l_End_Date = GET_CONTEXT(END_DATE, '4712/12/31 00:00:00' (date)) l_year_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_MY_ENROL_START_DATE','|=P_PERSON_ID='||to_char(l_person_id)),'YYYY-MM-DD') IF PER_ASG_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN enrollmentEndDate = PER_ASG_REL_ACTUAL_TERMINATION_DATE ELSE enrollmentEndDate = ADD_DAYS(l_year_start_date,-1) RETURN enrollmentEndDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the period dates for sick leave plans for employees in Malaysia. Determines the start and end dates based on employment tenure, termination dates, or policy rules, ensuring alignment with local regulations. Returns the calculated period dates.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is'4712/12/31 00:00:00'(date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00'(date) DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE IV_PLANENROLLMENTSTARTDATE(date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_hire_date = PER_ASG_REL_DATE_START l_hr_assignment_id = get_context(HR_ASSIGNMENT_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_start_date = to_date('2023-01-01','yyyy-MM-dd') l_attrition_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') l_asg_start = PER_ASG_REL_DATE_START l_asg_eff_st_date = to_date('2019-09-23','yyyy-MM-dd') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_value = 'X' L_year_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_MY_ENROL_START_DATE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_ASSG_CAT='''||l_asg_category||''''||'|P_EFF_DATE='''||TO_CHAR(l_eff_date,'YYYY/MM/DD')||''''),'YYYY-MM-DD') IF l_asg_category != 'CONTRACT' THEN anniversaryDate = GREATEST(l_year_begin_date, l_hire_date) IF l_asg_category = 'CONTRACT' THEN ( l_period_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_CONTRACT_RENEWAL_DATE','|=P_PERSON_ID='||to_char(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(l_attrition_date,'YYYY/MM/DD')||''''),'YYYY-MM-DD') anniversaryDate = GREATEST(l_hire_date,l_period_start_date) ) Return anniversaryDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment start date for sick leave plans for employees in Malaysia. Uses the employee\u2019s hire date, plan enrollment date, or a specific policy date, ensuring compliance with local regulations. Returns the calculated enrollment start date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' l_person_id = GET_CONTEXT(PERSON_ID,0) l_hire_date = PER_ASG_REL_DATE_START l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_start_date = to_date('2019-09-23','yyyy-MM-dd') l_new_date = to_date('2022-09-01','yyyy-MM-dd') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_MY_ENROL_START_DATE','|=P_PERSON_ID='||to_char(l_person_id)||'|=P_ASSG_CAT='||l_asg_category),'YYYY-MM-DD') IF l_asg_category = 'CONTRACT' THEN enrollmentStartDate = l_year_start_date ELSE ( IF ( l_year_start_date > l_effective_date) THEN ( enrollmentStartDate = l_year_start_date ) ELSE ( enrollmentStartDate = l_effective_date ) ) RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates birthday leave applications in the UK. Ensures the duration complies with local policies (e.g., typically 1 day), prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_PER_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_birthdate = PER_PER_DATE_OF_BIRTH l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' l_curr_year_birthdate = to_date(to_char(l_birthdate,'DDMM')||to_char(EffDate,'YYYY'),'DDMMYYYY') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < l_curr_year_birthdate) THEN ( l_birthdate_duration = GET_PAY_AVAILABILITY('ASSIGN',iv_start_date,l_curr_year_birthdate,'Y','Y','Y','Y','D') IF (l_birthdate_duration > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change the leave date to any dates between 5 days before and 5 days after your Birthday date.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) IF (IV_START_DATE > l_curr_year_birthdate) THEN ( l_birthdate_duration = GET_PAY_AVAILABILITY('ASSIGN',l_curr_year_birthdate,iv_start_date,'Y','Y','Y','Y','D') IF (l_birthdate_duration > 5) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change the leave date to any dates between 5 days before and 5 days after your Birthday date.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the duration of absence types for employees in Cambodia based on work schedules and rosters. Determines the duration by comparing entered absence hours to total assigned shift hours, with adjustments for shift patterns. Returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_ph = 'X' l_date_st = 'X' WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH_KH','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) IF ln_start_duration = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates marriage leave applications in the UK. Ensures the duration does not exceed a specified limit (e.g., 3\u20135 days), the leave is applied within a certain period after the marriage date, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MARITAL_STATUS IS 'X' DEFAULT FOR PER_PER_MARITAL_STATUS IS 'X' DEFAULT FOR PER_PER_MARITAL_STATUS_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (PER_PER_MARITAL_STATUS != 'S' AND ADD_MONTHS(PER_PER_MARITAL_STATUS_DATE,6)> IV_START_DATE) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are not entitled to Marriage Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) IF ( l_duration > 5 AND l_grade_name LIKE 'U%' ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for a maximum of 5 days of Marriage Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ( l_duration > 10 AND l_grade_name LIKE '3%' ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply for a maximum of 10 days of Marriage Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in Vietnam. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years, checks sufficient balance, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('VN Employee Annual Leave Plan') l_plan_name = 'VN Employee Annual Leave Plan' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND (l_asg_category != 'CONTRACT' OR (l_asg_category = 'CONTRACT' AND (l_grade_name NOT LIKE 'G1.%' OR l_grade_name NOT LIKE 'G2.%' OR l_grade_name NOT LIKE 'G3.%'))) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name LIKE 'GCEO.%' OR l_grade_name LIKE 'G1.%' OR l_grade_name LIKE 'G2.%' OR l_grade_name LIKE 'G3.%') THEN l_comp_limit = '10' ELSE IF (l_grade_name LIKE 'U1.%' OR l_grade_name LIKE 'U2.%' OR l_grade_name LIKE 'U3.%' OR l_grade_name LIKE 'U4.%' OR l_grade_name LIKE 'U5.%' OR l_grade_name LIKE 'U6.%') THEN l_comp_limit = '7' ELSE IF (l_grade_name LIKE 'U7.%' OR l_grade_name LIKE 'U8.%' OR l_grade_name LIKE 'U9.%' OR l_grade_name LIKE 'U10.%' OR l_grade_name LIKE 'U11.%') THEN l_comp_limit = '5' IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Minimum days for Compulsory Leave for your Grade '||l_grade_name||' is '|| l_comp_limit||' days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in Malaysia with 6-month expiry. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and tracks balance within the 6-month expiry period. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_CARRYOVER_VALUES ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 L_BFL_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave Plan 6 Months Expiry' l_acrl_days_char = 'X' l_acrl_days = 0 l_init_days_char = 'X' l_init_days = 0 L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) L_udt_row = 'X' l_carryover_limit = 0 l_grade_name = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_avl_days = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_BFL_Acrl_Balance = GET_PLAN_BALANCE(l_bfl_plan_name) ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_prv_year_end_date, HR_ASSIGNMENT_ID = l_hr_assign_id) ( l_grade_name = PER_ASG_GRADE_NAME ) l_carryover_limit = 7 L_DATA = ESS_LOG_WRITE('Brought Forward Leave Plan 6 Months Expiry L_Acrl_Balance_Year:'||TO_CHAR(L_Acrl_Balance_Year)||'L_BFL_Acrl_Balance'||TO_CHAR(L_BFL_Acrl_Balance)) IF L_Acrl_Balance_Year = 0 THEN accrual = 0 ELSE IF L_Acrl_Balance_Year >= 7 THEN accrual = 7 ELSE accrual = L_Acrl_Balance_Year Return ACCRUAL",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the duration of absence plan types for employees in Hong Kong based on work schedules and rosters. Determines the duration by comparing entered absence hours to total assigned shift hours, with adjustments for shift patterns. Returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR IV_START_DURATION IS 1 DEFAULT FOR IV_END_DURATION IS 1 DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'UNKNOWN' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text), IV_START_DURATION(number), IV_END_DURATION(number) l_hr_person_id = get_context(PERSON_ID,-1) l_person_id = to_char(l_hr_person_id) ln_duration = 0 ln_unrounded_duration_d = 0 lc_asg_resource_type = 'ASSIGN' ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_start_duration = IV_START_DURATION l_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') IF IV_END_DATE WAS NOT DEFAULTED THEN l_end_date = TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') ELSE l_end_date = l_start_date l_date = l_start_date l_ph = 'X' l_date_st = 'X' WHILE (l_date <= l_end_date) LOOP ( l_ph = 'X' l_date_st = TO_CHAR(l_date,'YYYY/MM/DD') l_ph = GET_VALUE_SET('CIMB_GET_PH_HK','|=P_PERSON_ID='||l_person_id||'|EFF_START_DATE='''||l_date_st||''''||'|EFF_END_DATE='''||l_date_st||'''') IF isnull(l_ph) = 'N' THEN ln_unrounded_duration_d = ln_unrounded_duration_d + 1 l_date = ADD_DAYS(l_date,1) ) IF ln_start_duration = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 IF IV_END_DURATION = 0.5 THEN ln_unrounded_duration_d = ln_unrounded_duration_d - 0.5 duration = ln_unrounded_duration_d RETURN duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates compassionate leave applications in Malaysia (version 2). Ensures the duration does not exceed 3\u20135 days (based on grade and reason), prohibits overlap between calendar years for non-contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_PROJECTED_ASSIGNMENT_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_SEX IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') i = 1 l_cl_duration = 0 l_grade_name = PER_ASG_GRADE_NAME l_abs_reason = IV_ABSENCE_REASON L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_cl_balance = 0 L_hire_date = PER_ASG_REL_DATE_START l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) L_cl_limit_days = 10 l_mgr_asg_status = 'X' l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_grade_name = 'INTERN' OR l_grade_name = 'MT' OR l_grade_name = 'MA' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_NE_GRADES' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON <> 'Paternity' AND IV_START_DATE < TO_DATE('2023/01/01','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ERROR_MSG' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please change your selected leave type to Paternity Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND PER_ASG_EMPLOYMENT_CATEGORY != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_abs_reason = 'Death in Family' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '32' OR l_grade_name = '33' OR l_grade_name = '33S') AND l_abs_reason = 'Serious Illness' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(2) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '34' ) AND l_abs_reason = 'Serious Illness' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAXDAYS' TOKEN_NAME[1] = 'ABS_REASON' TOKEN_VALUE[1] = l_abs_reason TOKEN_NAME[2] = 'MAX_CL_DAYS' TOKEN_VALUE[2] = TO_CHAR(3) RETURN VALID, ERROR_MESSAGE,TOKEN_NAME,TOKEN_VALUE ) IF (l_grade_name = '34' OR l_grade_name = '32' OR l_grade_name LIKE '33%') AND l_abs_reason = 'Disaster' AND l_duration > 2 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) IF (l_grade_name <> '34' OR l_grade_name <> '32' OR l_grade_name <> '33' OR l_grade_name <> '33S') AND IV_ABSENCE_REASON <> 'Paternity' AND l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_ABSENCE_REASON = 'Paternity' AND l_duration > 5 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_PL_MAX_DAYS' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_ABSENCE_REASON = 'Paternity' AND PER_ASG_SEX <> 'M' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_PL_FEMALE_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_EMPLOYMENT_CATEGORY = 'CONTRACT' THEN ( L_year_start_date = L_HIRE_date IF l_grade_name = '75.DE' OR l_grade_name = '76.DE' OR l_grade_name = '77.DE' OR l_grade_name = '78.DE'OR l_grade_name = '79.DE' OR l_grade_name = '80.DE' OR l_grade_name = '81.DE' OR l_grade_name = '75.D' OR l_grade_name = '76.D' OR l_grade_name = '77.D' OR l_grade_name = '78.D' OR l_grade_name = '79.D' OR l_grade_name = '80.D' OR l_grade_name = '81.D' OR l_grade_name = '74.D' OR l_grade_name = '73.D' OR l_grade_name = '72.D' OR l_grade_name = '71.D' OR l_grade_name = '70.D' THEN L_cl_limit_days = 5 IF TO_CHAR(L_HIRE_date,'MM') > TO_CHAR(iv_start_date,'MM') THEN ( L_year_start_date = TO_DATE(TO_CHAR(TO_NUMBER(TO_CHAR(iv_start_date,'YYYY'))-1)||'/'||TO_CHAR(L_HIRE_date,'MM')||'/'||TO_CHAR(L_HIRE_date,'DD'),'YYYY/MM/DD') L_year_end_date = ADD_MONTHS(L_year_start_date,12) ) ELSE( L_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'/'||TO_CHAR(L_HIRE_date,'MM')||'/'||TO_CHAR(L_HIRE_date,'DD'),'YYYY/MM/DD') L_year_end_date = ADD_MONTHS(L_year_start_date,12) ) IF PER_ASG_PROJECTED_ASSIGNMENT_END_DATE WAS NOT DEFAULTED THEN L_year_end_date = PER_ASG_PROJECTED_ASSIGNMENT_END_DATE ) IF l_grade_name NOT LIKE 'C%' THEN ( CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > L_cl_limit_days THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_10_DAYS_MORE' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) ) ELSE IF l_grade_name LIKE 'C%' THEN ( IF l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_CONTRACT_3_DAYS' RETURN VALID, ERROR_MESSAGE ) i = 1 l_cl_duration = 0 CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE= L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( l_cl_duration = l_cl_duration + ANC_ABS_ENTRS_DURATION IF l_cl_duration + l_duration > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_CL_CONTRACT_3_DAYS' RETURN VALID, ERROR_MESSAGE ) ) ) ) i = i + 1 ) ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment start date for absence plans for employees in Malaysia. Uses the employee\u2019s hire date, plan enrollment date, or a specific policy date, ensuring compliance with local regulations for permanent employees. Returns the calculated enrollment start date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' l_person_id = GET_CONTEXT(PERSON_ID,0) l_hire_date = PER_ASG_REL_DATE_START l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_start_date = to_date('2019-09-23','yyyy-MM-dd') l_new_date = to_date('2022-09-01','yyyy-MM-dd') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_year_start_date = GREATEST(PER_ASG_REL_DATE_START, TO_DATE(GET_VALUE_SET('CIMB_GET_MY_ENROL_START_DATE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_ASSG_CAT='''||l_asg_category||''''||'|P_EFF_DATE='''||TO_CHAR(l_eff_date,'YYYY/MM/DD')||''''),'YYYY-MM-DD')) IF ( l_year_start_date > l_start_date) THEN ( enrollmentStartDate = l_year_start_date ) ELSE ( enrollmentStartDate = l_start_date ) RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment start date for absence plans for contractors in Malaysia (version 2). Uses the contractor\u2019s start date, plan enrollment date, or a specific policy date, ensuring compliance with local regulations for contract employees. Returns the calculated enrollment start date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is'4712/12/31 00:00:00'(date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00'(date) DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' l_person_id = GET_CONTEXT(PERSON_ID,0) l_hire_date = PER_ASG_REL_DATE_START l_attrition_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_hr_assignment_id = get_context(HR_ASSIGNMENT_ID,0) l_start_date = to_date('2019-09-23','yyyy-MM-dd') l_asg_eff_st_date = to_date('2019-09-23','yyyy-MM-dd') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_value = 'X' l_year_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_CONTRACT_RENEWAL_DATE','|=P_PERSON_ID='||to_char(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(l_attrition_date,'YYYY/MM/DD')||''''),'YYYY-MM-DD') CHANGE_CONTEXTS(EFFECTIVE_DATE = l_eff_date) ( l_person_number = PER_PER_PERSON_NUMBER ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_eff_date,HR_ASSIGNMENT_ID = l_hr_assignment_id) ( l_asg_eff_st_date = PER_ASG_EFFECTIVE_START_DATE ) IF ( l_year_start_date >= l_start_date) THEN ( enrollmentStartDate = l_year_start_date ) ELSE ( enrollmentStartDate = l_start_date ) RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated brought forward leave accrual for employees in the UK with 2-year expiry. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and tracks balance within the 2-year expiry period. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave 2 Years Expiry' L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) ACCRUAL = 0 l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) L_Acrl_Balance_Year = 0 L_Acrl_Plan_Balance_Year = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_Acrl_Plan_Balance_Year = GET_PLAN_BALANCE(l_bfl_plan_name) ) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)) ACCRUAL = GREATEST(L_Acrl_Plan_Balance_Year,0) + GREATEST(L_Acrl_Balance_Year,0) IF ACCRUAL > 20 THEN ACCRUAL = 20 ELSE ACCRUAL = ACCRUAL l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)||'ACCRUAL'||TO_CHAR(ACCRUAL)) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Duplicate entry (assumed to be the same as above, possibly a versioning or typo). Calculates prorated brought forward leave accrual for employees in the UK with 2-year expiry. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and tracks balance within the 2-year expiry period. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) m = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_Ann_Acrl_Balance = 0 l_ann_plan_name = 'Annual Leave Plan Employee' l_bfl_plan_name = 'Brought Forward Leave 2 Years Expiry' L_dm_date = '2019/06/01 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START l_person_id = get_context(PERSON_ID,-1) ACCRUAL = 0 l_los_in_months = MONTHS_BETWEEN(ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1),L_hire_date) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) L_Acrl_Balance_Year = 0 L_Acrl_Plan_Balance_Year = 0 change_contexts(effective_date = l_prv_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Acrl_Balance_Year = GET_PLAN_BALANCE(l_ann_plan_name) L_Acrl_Plan_Balance_Year = GET_PLAN_BALANCE(l_bfl_plan_name) ) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)) ACCRUAL = GREATEST(L_Acrl_Balance_Year,0) IF ACCRUAL > 14 THEN ACCRUAL = 14 ELSE ACCRUAL = ACCRUAL l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_prv_year_end_date,'YYYY/MM/DD')||'L_Acrl_Balance_Year'||TO_CHAR(L_Acrl_Balance_Year)||'ACCRUAL'||TO_CHAR(ACCRUAL)) Return ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid parental leave applications in the UK. Ensures the duration complies with local policies, requires other leave balances (e.g., annual, sick) to be exhausted, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT_DATA_VALUE FOR ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR IS 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') i = 1 l_abs_entry_id = get_context(absence_entry_id,0) l_absence_entry_id = (l_abs_entry_id) l_cl_duration = 0 l_duration = iv_totalduration IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ELSE ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are submitting a late notification leave. Please change your leave date to minimum 3 days from current date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) CHANGE_CONTEXTS (start_date= l_year_start_date , end_date= l_year_end_date) ( while (anc_per_abs_entrs_absence_entry_id_arr.exists(i)) loop ( CHANGE_CONTEXTS(absence_entry_id = anc_per_abs_entrs_absence_entry_id_arr[i]) ( change_contexts (absence_type_id = anc_abs_entrs_absence_type_id) ( l_abs_typ_name_check = anc_abs_typ_name if l_abs_entry_id <> anc_per_abs_entrs_absence_entry_id_arr[i] and l_abs_typ_name_check = 'Unpaid Parental Leave' and anc_abs_entrs_absence_status_cd <> 'ORA_WITHDRAWN' and anc_abs_entrs_approval_status_cd <> 'DENIED' and anc_abs_entrs_absence_status_cd <> 'SAVED' then ( l_cl_duration = l_cl_duration + anc_abs_entrs_duration if l_cl_duration + l_duration > 2 then ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized your entitlement for this year' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid personal leave applications in Vietnam. Ensures the duration complies with local policies, requires other leave balances (e.g., annual, sick) to be exhausted, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text), IV_ACTUALCHILDBIRTHDATE (date) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) = 'DEATH - BIOLOGICAL BROTHER OR SISTER' ) AND l_duration > 1 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE 'DEATH - GRANDPARENTS' ) AND l_duration > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) = 'MARRIAGE - MOTHER, FATHER, BIOLOGICAL BROTHER OR BIOLOGICAL SISTER' ) AND l_duration > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You cannot record this absence because the duration exceeds the maximum entitlement ( 1 days ) allowed.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated medical leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_GRADE_NAME IS 'Associate' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 accrual = 5 carryover = 0 final_accrual = 0 floored_accrual = 0 prorationFactor = 1 carryOverProration = 1 carryover = carryover * PER_ASG_FTE_VALUE accrual = accrual * PER_ASG_FTE_VALUE floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN accrual, carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates paternity leave applications in China. Ensures the employee has worked at least 3 months, the leave start date is within a specified period after the child\u2019s birth, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_duration > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply maximum of 10 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid leave applications in China. Ensures the duration complies with local policies, requires other leave balances (e.g., annual, sick) to be exhausted, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_Emp = GET_PLAN_BALANCE('CN Annual Leave Plan Permanent Employee') l_plan_name = 'CN Annual Leave Plan Permanent Employee' ) IF (L_Ann_Acrl_Balance_Emp >= 0 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You still have '|| to_char(L_Ann_Acrl_Balance_Emp)||' days of your Annual Leave Plan. Please change your leave type to Annual Leave.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated absence accrual for employees in China based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'SUBMITTED' DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'APPROVED' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 0 Default for IV_BAND_CHG_AFTVAL1 is 0 Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL2 is 0 Default for IV_BAND_CHG_AFTVAL2 is 0 Default for IV_BAND_CHG_DT3 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL3 is 0 Default for IV_BAND_CHG_AFTVAL3 is 0 Default for IV_BAND_CHG_DT4 is '1951/01/01 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL4 is 0 Default for IV_BAND_CHG_AFTVAL4 is 0 DEFAULT for PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT_DATA_VALUE FOR PER_HIST_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 m = 0 l_chg_dt1 = '1951/01/01 00:00:00' (date) l_chg_dt2 = '1951/01/01 00:00:00' (date) l_chg_dt3 = '1951/01/01 00:00:00' (date) l_chg_dt4 = '1951/01/01 00:00:00' (date) l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrual_rate1 = 0 l_accrual_rate2 = 0 l_accrual_rate3 = 0 l_accrued_period1 = 0 l_accrued_period2 = 0 l_accrued_period3 = 0 L_hire_date = PER_ASG_REL_DATE_START l_no_of_days1 = 0 l_no_of_days2 = 0 l_no_of_days3 = 0 l_approved_abs_days1 = 0 l_approved_abs_days2 = 0 l_approved_abs_days3 = 0 floored_accrual = 0 decimal_accrual = 0 final_accrual = 0 l_person_id = GET_CONTEXT(PERSON_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_grade_1_before = 'X' l_grade_1_after = 'X' l_grade_2_before = 'X' l_grade_2_after = 'X' l_action_code_1 = 'X' l_action_code_2 = 'X' L_grade_anniv = 'X' l_ann_rate_1_char = 'X' l_ann_rate_2_char = 'X' l_ann_rate_1 = 0 l_ann_rate_2 = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) L_BFL_Acrl_Balance = 0 l_grade_band = 'X' l_dm_date = '2019/09/23 00:00:00' (date) l_prv_assign_id_char = 'X' l_prv_assign_id = 0 L_gt_bal = 0 L_prv_year_end_date = ADD_DAYS(IV_ACCRUALPERIODENDDATE,-1) L_prv_Ann_Acrl_Balance = 0 z = 1 l_grade_name = PER_ASG_GRADE_NAME l_approved_abs_days = 0 L_REDUCED_DAYS = 0 l_job_name = PER_ASG_JOB_NAME j=1 l_prv_fte = 0 l_nxt_fte = 0 fte_start_date[1] = '1951/01/01 00:00:00' (date) fte_end_date[1] = '1951/01/01 00:00:00' (date) fte_value[1]=0 mn=1 l_chk_date = '1951/01/01 00:00:00' (date) fte_change_date = IV_CALEDARSTARTDATE fte_change_date_char = 'X' fte_change_date_end_char = 'X' fte_change_date_end = '1951/01/01 00:00:00' (date) L_year_start_date = '1951/01/01 00:00:00' (date) L_year_end_date = '1951/01/01 00:00:00' (date) l_log =ESS_LOG_WRITE('l_person_id'||TO_CHAR(l_person_id)||'l_hr_assign_id'||TO_CHAR(l_hr_assign_id)||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE) ||'IV_PLANENROLLMENTSTARTDATE'||TO_CHAR(IV_PLANENROLLMENTSTARTDATE)||'l_hire_date'||TO_CHAR(l_hire_date)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) CHANGE_CONTEXTS(EFFECTIVE_DATE = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START)) ( l_prv_fte = PER_ASG_FTE_VALUE ) l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'IV_CALEDARSTARTDATE'||TO_CHAR(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) fte_start_date[mn] = GREATEST(IV_CALEDARSTARTDATE,PER_ASG_REL_DATE_START) fte_value[mn] = l_prv_fte L_year_end_date = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_log =ESS_LOG_WRITE('fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'MN'||TO_CHAR(mn)) mn=mn+1 WHILE (fte_change_date_end < IV_CALEDARENDDATE AND mn < 5) LOOP ( fte_change_date_char = 'X' fte_change_date_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn-1],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') l_log =ESS_LOG_WRITE('fte_change_date_char'||fte_change_date_char) IF isnull(fte_change_date_char) = 'N' THEN ( l_log =ESS_LOG_WRITE('EXIT') EXIT ) ELSE( fte_start_date[mn] = TO_DATE(fte_change_date_char,'YYYY/MM/DD') fte_end_date[mn-1] = ADD_DAYS(fte_start_date[mn],-1) fte_change_date=fte_start_date[mn] CHANGE_CONTEXTS(EFFECTIVE_DATE = fte_change_date) ( l_prv_fte = PER_ASG_FTE_VALUE ) fte_change_date_end_char = GET_VALUE_SET('CIMB_GET_FTE_CHANGE_END','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||''''||'|P_FTE_VAL='''|| TO_CHAR(l_prv_fte)||''''||'|P_END_DATE='''||TO_CHAR(L_year_end_date,'YYYY/MM/DD')||'''') fte_change_date_end = TO_DATE(fte_change_date_end_char,'YYYY/MM/DD') fte_value[mn] = l_prv_fte l_log =ESS_LOG_WRITE('l_prv_fte'||TO_CHAR(l_prv_fte)||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_end_date[mn-1]'||TO_CHAR(fte_end_date[mn-1],'YYYY/MM/DD')|| 'fte_change_date_end_char'||fte_change_date_end_char||'mn'||TO_CHAR(mn)) ) mn=mn+1 ) fte_end_date[mn-1] = LEAST(IV_CALEDARENDDATE,PER_ASG_REL_ACTUAL_TERMINATION_DATE) IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ( ACCRUAL = 0 RETURN ACCRUAL,adjustmentvalues,adjustmentdates,adjustmenttypes ) ELSE( IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT1 AND IV_BAND_CHG_DT1 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 l_chg_dt1 = IV_BAND_CHG_DT1 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL1 l_accrual_rate2 = IV_BAND_CHG_AFTVAL1 ) IF ( IV_ACCRUALPERIODSTARTDATE < IV_BAND_CHG_DT2 AND IV_BAND_CHG_DT2 <= IV_ACCRUALPERIODENDDATE) THEN ( m = m + 1 IF l_chg_dt1 = IV_BAND_CHG_DT1 THEN ( l_chg_dt2 = IV_BAND_CHG_DT2 (date) l_accrual_rate3 = IV_BAND_CHG_AFTVAL2 ) ELSE ( l_chg_dt1 = IV_BAND_CHG_DT2 (date) l_accrual_rate1 = IV_BAND_CHG_BEFVAL2 l_accrual_rate2 = IV_BAND_CHG_AFTVAL2 ) ) IF l_chg_dt1 < IV_ACCRUALPERIODSTARTDATE OR l_chg_dt1 = IV_ACCRUALPERIODSTARTDATE THEN ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt2 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ELSE ( l_band_chg_dt1 = '1951/01/01 00:00:00' (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = IV_ACCRUAL l_accrued_period2 = 0 l_accrued_period3 = 0 ) ) ELSE ( IF l_chg_dt2 > IV_ACCRUALPERIODSTARTDATE THEN ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = l_chg_dt2 (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = l_accrual_rate3 ) ELSE ( l_band_chg_dt1 = l_chg_dt1 (date) l_band_chg_dt2 = '1951/01/01 00:00:00' (date) l_accrued_period1 = l_accrual_rate1 l_accrued_period2 = l_accrual_rate2 l_accrued_period3 = 0 ) ) IF TO_DATE(TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:1') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt1,-1)) ( l_grade_1_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt1) ( l_grade_1_after = PER_ASG_GRADE_NAME l_action_code_1 = PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('1 OLD grade:'||l_grade_1_before||'NEW grade:'||l_grade_1_before) ) IF TO_DATE(TO_CHAR(l_band_chg_dt2,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE('1951/01/01','YYYY/MM/DD') THEN ( l_log =ESS_LOG_WRITE('Grade:2') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_band_chg_dt2,-1)) ( l_grade_2_before = PER_ASG_GRADE_NAME ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = l_band_chg_dt2) ( l_grade_2_after = PER_ASG_GRADE_NAME l_action_code_2 =PER_ASG_ACTION_CODE ) l_log =ESS_LOG_WRITE('2 OLD grade:'||l_grade_2_before||'NEW grade:'||l_grade_2_after) ) ld_current_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) period_start_date = GREATEST(IV_ACCRUALPERIODSTARTDATE, iv_planenrollmentstartdate,PER_ASG_REL_DATE_START) period_end_date = LEAST(IV_ACCRUALPERIODENDDATE, iv_planenrollmentenddate,PER_ASG_REL_ACTUAL_TERMINATION_DATE) l_acrl_per_duration = DAYS_BETWEEN(IV_ACCRUALPERIODENDDATE, IV_ACCRUALPERIODSTARTDATE) + 1 l_log =ESS_LOG_WRITE('Entering CIMB Leave Accrual Formula') l_log =ESS_LOG_WRITE('Start Person Number: '|| PER_ASG_PERSON_NUMBER) l_log =ESS_LOG_WRITE('Accrual Period Start Date: '|| to_char(IV_ACCRUALPERIODSTARTDATE ,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual Period End Date: '|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment Start Date: '|| to_char(IV_PLANENROLLMENTSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Plan Enrollment End Date: '|| to_char(IV_PLANENROLLMENTENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender Start Date: '|| to_char(IV_CALEDARSTARTDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Calender End Date: '|| to_char(IV_CALEDARENDDATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('No of Band Changes: '|| to_char(m)) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(IV_BAND_CHG_DT1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 2: '|| to_char(IV_BAND_CHG_DT2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 3: '|| to_char(IV_BAND_CHG_DT3,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 4: '|| to_char(IV_BAND_CHG_DT4,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt1,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Band Change Date - 1: '|| to_char(l_band_chg_dt2,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Accrual: '|| to_char(IV_ACCRUAL)) l_log =ESS_LOG_WRITE('PER_ASG_REL_DATE_START: '|| to_char(PER_ASG_REL_DATE_START,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('Per_Asg_Rel_Actual_Termination_Date: '|| to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE,'YYYY/MM/DD')) l_log =ESS_LOG_WRITE('l_grade_1_before: '|| l_grade_1_before) l_log =ESS_LOG_WRITE('l_grade_1_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_before: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_grade_2_after: '|| l_grade_1_after) l_log =ESS_LOG_WRITE('l_action_code_1: '|| l_action_code_1) l_log =ESS_LOG_WRITE('l_action_code_2: '|| l_action_code_2) IF (ANC_ABS_PLN_NAME LIKE '%Annual Leave Plan%') THEN ( CHANGE_CONTEXTS(START_DATE = ADD_MONTHS(IV_CALEDARSTARTDATE,-12),END_DATE = IV_CALEDARENDDATE) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD!='ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') THEN ( l_abs_typ_name = ANC_ABS_TYP_NAME IF ( l_abs_typ_name = 'Unpaid Leave' OR l_abs_typ_name = 'Prolonged Illness Leave Full Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Half Pay' OR l_abs_typ_name = 'Prolonged Illness Leave Unpaid' OR l_abs_typ_name = 'Staff Rejuvenation Leave' OR l_abs_typ_name = 'Sabbatical Leave' ) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) Accrual = 0 l_log = ESS_LOG_WRITE('Accrual :'|| TO_CHAR(Accrual)) RETURN Accrual ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After Band Change:'|| TO_CHAR(l_approved_abs_days2)) ) ) IF ( IV_ACCRUALPERIODSTARTDATE < l_band_chg_dt2 AND IV_ACCRUALPERIODENDDATE > l_band_chg_dt2) THEN ( IF ( IV_ACCRUALPERIODSTARTDATE >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt1 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period1 = 0 l_log = ESS_LOG_WRITE('l_accrued_period1 :'|| TO_CHAR(l_accrued_period1)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt1) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt1)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt1, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence Before 1st Band Change :'|| TO_CHAR(l_approved_abs_days1)) ) IF ( l_band_chg_dt1 >= ANC_ABS_ENTRS_START_DATE AND l_band_chg_dt2 < ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period2 = 0 l_log = ESS_LOG_WRITE('l_accrued_period2 :'|| TO_CHAR(l_accrued_period2)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_START_DATE < l_band_chg_dt2) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE < l_band_chg_dt2)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt1) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, ADD_DAYS(l_band_chg_dt2, -1)) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days2 = l_approved_abs_days2 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 1st Band Change :'|| TO_CHAR(l_approved_abs_days2)) ) IF ( l_band_chg_dt2 >= ANC_ABS_ENTRS_START_DATE AND IV_ACCRUALPERIODENDDATE <= ANC_ABS_ENTRS_END_DATE) THEN ( l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_accrued_period3 = 0 l_log = ESS_LOG_WRITE('l_accrued_period3 :'|| TO_CHAR(l_accrued_period3)) ) IF ( ( ANC_ABS_ENTRS_START_DATE >= l_band_chg_dt2 AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= l_band_chg_dt1 AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, l_band_chg_dt2) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days3 = l_approved_abs_days3 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Org_Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Org_Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Org_ Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calc_Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calc_Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calc_Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Absence After 2nd Band Change :'|| TO_CHAR(l_approved_abs_days3)) ) ) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF ( ( ANC_ABS_ENTRS_START_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_START_DATE <= IV_ACCRUALPERIODENDDATE) OR ( ANC_ABS_ENTRS_END_DATE >= IV_ACCRUALPERIODSTARTDATE AND ANC_ABS_ENTRS_END_DATE <= IV_ACCRUALPERIODENDDATE)) THEN ( l_abs_start_date = GREATEST(ANC_ABS_ENTRS_START_DATE, IV_ACCRUALPERIODSTARTDATE) l_abs_end_date = LEAST(ANC_ABS_ENTRS_END_DATE, IV_ACCRUALPERIODENDDATE) l_abs_duration = days_between(l_abs_end_date, l_abs_start_date) + 1 l_approved_abs_days1 = l_approved_abs_days1 + l_abs_duration l_log = ESS_LOG_WRITE('Absence Type Name :'|| ANC_ABS_TYP_NAME) l_log = ESS_LOG_WRITE('Original Absence Start Date :'|| TO_CHAR(ANC_ABS_ENTRS_START_DATE)) l_log = ESS_LOG_WRITE('Original Absence End Date :'|| TO_CHAR(ANC_ABS_ENTRS_END_DATE)) l_log = ESS_LOG_WRITE('Original Absence Duration :'|| TO_CHAR(ANC_ABS_ENTRS_DURATION)) l_log = ESS_LOG_WRITE('Calculated Absence Start Date :'|| TO_CHAR(l_abs_start_date)) l_log = ESS_LOG_WRITE('Calculated Absence End Date :'|| TO_CHAR(l_abs_end_date)) l_log = ESS_LOG_WRITE('Calculated Absence Duration :'|| TO_CHAR(l_abs_duration)) l_log = ESS_LOG_WRITE('Total Non Accrual Absence Days :'|| TO_CHAR(l_approved_abs_days1)) ) ) ) ) ) ) i=i+1 ) ) ) l_log = ESS_LOG_WRITE('Rate l_accrued_period1: '|| TO_CHAR(l_accrued_period1)) l_log = ESS_LOG_WRITE('Rate l_accrued_period2: '|| TO_CHAR(l_accrued_period2)) l_log = ESS_LOG_WRITE('Rate l_accrued_period3: '|| TO_CHAR(l_accrued_period3)) IF l_band_chg_dt1 = l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])) l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1)*fte_value[mn] mn=mn+1 ) ) l_accrued_period1 = ROUND(((l_accrued_period1 * (l_no_of_days1 - l_approved_abs_days1))/ l_acrl_per_duration), 3) ) IF l_band_chg_dt1 > l_band_chg_dt2 THEN ( IF fte_start_date.EXISTS(1) THEN ( mn=1 WHILE fte_end_date.EXISTS(mn) LOOP ( l_log = ESS_LOG_WRITE('fte_end_date[mn]: '|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')||'fte_value[mn]'||TO_CHAR(fte_value[mn])||'mn:'||TO_CHAR(mn)) IF (l_band_chg_dt1 <= fte_end_date[mn]) THEN ( IF NOT fte_end_date.EXISTS(mn-1) THEN ( IF l_no_of_days1 = 0 THEN ( l_no_of_days1 = (DAYS_BETWEEN(l_band_chg_dt1, IV_ACCRUALPERIODSTARTDATE)) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:1: IV_ACCRUALPERIODSTARTDATE:'|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'||TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:2: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days2)) ) ) IF fte_end_date.EXISTS(mn-1) THEN ( IF fte_end_date[mn-1] > l_band_chg_dt1 THEN ( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:3: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'fte_start_date[mn]:'||TO_CHAR(fte_start_date[mn],'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:4: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE( l_no_of_days2 = l_no_of_days2 + (DAYS_BETWEEN(fte_end_date[mn], l_band_chg_dt1) + 1) *fte_value[mn] l_log = ESS_LOG_WRITE('LOOP 2:5: fte_end_date[mn]:'|| TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')||'l_band_chg_dt1:'||TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')|| 'l_no_of_days2:'|| TO_CHAR(l_no_of_days2)) ) ) ELSE IF (l_band_chg_dt1 > fte_end_date[mn]) THEN ( IF fte_end_date.EXISTS(mn+1) THEN ( IF fte_end_date[mn+1] > l_band_chg_dt1 THEN ( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn], fte_start_date[mn]) + 1) *fte_value[mn] l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(l_band_chg_dt1, ADD_DAYS(fte_end_date[mn],1)) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:1: l_band_chg_dt1:'|| TO_CHAR(l_band_chg_dt1,'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| 'l_no_of_days1:'|| TO_CHAR(l_no_of_days1)) ) ELSE( l_no_of_days1 = l_no_of_days1 + (DAYS_BETWEEN(fte_end_date[mn+1], fte_end_date[mn]) + 1) *fte_value[mn+1] l_log = ESS_LOG_WRITE('LOOP 3:2: fte_end_date[mn+1]:'|| TO_CHAR(fte_end_date[mn+1],'YYYY/MM/DD')||'fte_end_date[mn]:'||TO_CHAR(fte_end_date[mn],'YYYY/MM/DD')|| _x0000_",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated ancillary parental leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies for parental leave. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' DEFAULT FOR IV_ACCRUAL IS 18 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) ln_same_year_duration = 0 lc_first_month_flag = 'N' ln_first_month_accrual = 0 ln_participation_duration = 0 ln_term_duration = 1 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ld_start_date = GREATEST (IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) ld_end_date = LEAST (IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE) ln_participation_duration = (TO_NUMBER(TO_CHAR(ld_end_date, 'yy')) - TO_NUMBER(TO_CHAR(ld_start_date, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(ld_end_date, 'mm')) - TO_NUMBER(TO_CHAR(ld_start_date, 'mm'))) + 1 l_log =ESS_LOG_WRITE('Line 27 - ln_participation_duration : '||TO_CHAR(ln_participation_duration)) ln_first_month_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) l_log =ESS_LOG_WRITE('Line 31 - ln_first_month_accrual : '||TO_CHAR(ln_first_month_accrual)) (prorated_accrual = ln_first_month_accrual) l_log =ESS_LOG_WRITE('Line 34 - ln_first_month_accrual = Y : '||TO_CHAR(prorated_accrual)) accrual = ROUND(prorated_accrual,2) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual l_log =ESS_LOG_WRITE('Line 37 - accrual'||TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_EVENT_DATES IS EMPTY_DATE_NUMBER DEFAULT FOR IV_ACCRUAL_VALUES IS EMPTY_NUMBER_NUMBER DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_ACCRUAL, IV_EVENT_DATES, IV_ACCRUAL_VALUES, IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date) i = 1 j = 2 ln_accrual_total = 0 WHILE IV_EVENT_DATES.EXISTS(j) LOOP ( ln_accrual_total = ln_accrual_total + ( (DAYS_BETWEEN(IV_EVENT_DATES[j], IV_EVENT_DATES[i]) + 1) * IV_ACCRUAL_VALUES[i] ) i = i+1 j = j+1 ) ln_term_duration = DAYS_BETWEEN(IV_CALEDARENDDATE, IV_CALEDARSTARTDATE) + 1 ln_accrual = PER_ASG_FTE_VALUE * (ln_accrual_total / ln_term_duration) accrual = ROUND(ln_accrual, 2) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated ancillary leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies for ancillary leave types. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_GRADE_NAME IS 'Associate' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 accrual = 18 carryover = 5 final_accrual = 0 floored_accrual = 0 prorationFactor = 1 carryOverProration = 1 carryover = carryover * PER_ASG_FTE_VALUE accrual = accrual * PER_ASG_FTE_VALUE floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN accrual, carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in India. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years, checks sufficient balance, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (IV_TOTALDURATION < 3 AND DAYS_BETWEEN(IV_START_DATE, EFFDATE)< 5)THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are required to submit your application 5 days in advance for obtaining approval for 1 - 2 days leave duration' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((IV_TOTALDURATION > 2 AND IV_TOTALDURATION < 6) AND (DAYS_BETWEEN(IV_START_DATE, EFFDATE) > 5 AND DAYS_BETWEEN(IV_START_DATE, EFFDATE)< 10) )THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are required to submit your application 15 days in advance for obtaining approval for 3 - 5 days leave duration' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((IV_TOTALDURATION > 5 AND IV_TOTALDURATION < 11 ) AND DAYS_BETWEEN(IV_START_DATE, EFFDATE) > 10 )THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are required to submit your application 30 days in advance for obtaining approval for 6 - 10 days leave duration' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_TOTALDURATION > 10) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Annual Leave cannot be availed for more than 10 continuous working days ' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated medical parental leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies for medical parental leave. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) ln_same_year_duration = 0 lc_first_month_flag = 'N' ln_first_month_accrual = 0 ln_participation_duration = 0 ln_term_duration = 1 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ld_start_date = GREATEST (IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) ld_end_date = LEAST (IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE) ln_participation_duration = (TO_NUMBER(TO_CHAR(ld_end_date, 'yy')) - TO_NUMBER(TO_CHAR(ld_start_date, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(ld_end_date, 'mm')) - TO_NUMBER(TO_CHAR(ld_start_date, 'mm'))) + 1 ln_first_month_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF IV_PLANENROLLMENTENDDATE < IV_CALEDARENDDATE THEN ( IF (IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE) THEN ( ln_same_year_duration = (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ) ln_participation_duration = -1 * (ln_term_duration - ln_participation_duration - ln_same_year_duration) IF ( (TO_CHAR(IV_CALEDARSTARTDATE, 'mm') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'mm')) AND (TO_CHAR(IV_CALEDARSTARTDATE, 'yyyy') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'yyyy')) ) THEN (lc_first_month_flag = 'Y') ) prorated_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF (lc_first_month_flag = 'Y') THEN (prorated_accrual = ln_first_month_accrual) accrual = ROUND(prorated_accrual,2) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sick leave applications in India. Ensures the duration does not exceed a specified limit (e.g., 10\u201330 days based on grade), requires a medical certificate for durations over 2 days, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates parental leave applications in Malaysia. Ensures the employee has worked at least 3 months, the leave start date is within a specified period after the child\u2019s birth, prohibits leave during probation for contract employees, verifies the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START l_asg_end = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 L_first_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' l_sl_limit = 5 CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Paternity Leave entitlement per ocassion is '||to_char(l_sl_limit)||' day(s).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Paternity Leave - 1st Time Father' OR l_abs_typ_name_check = 'Paternity Leave' OR(l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755052)) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_first_days = L_first_days + 1 ) ) ) i = i + 1 ) ) IF L_sl_days + 1 > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized '||to_char(L_sl_days)||' days of Paternity Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the anniversary date for employees in Malaysia to determine eligibility or adjustments for absence plans (e.g., annual leave, bonuses). Uses the employee\u2019s hire date or service tenure, ensuring alignment with local policies. Returns the calculated anniversary date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is'4712/12/31 00:00:00'(date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00'(date) DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_PLANENROLLMENTSTARTDATE(date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_hire_date = PER_ASG_REL_DATE_START l_attrition_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_hr_assignment_id = get_context(HR_ASSIGNMENT_ID,0) l_start_date = to_date('2019-09-23','yyyy-MM-dd') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) l_asg_eff_st_date = to_date('2019-09-23','yyyy-MM-dd') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_value = 'X' l_period_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_CONTRACT_RENEWAL_DATE','|=P_PERSON_ID='||to_char(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(l_attrition_date,'YYYY/MM/DD')||''''),'YYYY-MM-DD') anniversaryDate = l_period_start_date Return anniversaryDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment end date for absence plans for employees in Malaysia. Uses the employee\u2019s actual termination date if available, otherwise defaults to the context end date or a specific policy date for permanent employees. Returns the calculated enrollment end date.\n\n***answer***: DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'Worker' DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) EffDt = GET_CONTEXT(EFFECTIVE_DATE, '4712/12/31 00:00:00' (date)) l_End_Date = GET_CONTEXT(END_DATE, '4712/12/31 00:00:00' (date)) IF PER_ASG_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED THEN l_termination_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_year_start_date = LEAST(TO_DATE(GET_VALUE_SET('CIMB_GET_MY_ENROL_START_DATE_CONTRACT','|=P_PERSON_ID='||to_char(l_person_id)),'YYYY-MM-DD'),l_End_Date) enrollmentEndDate = LEAST(l_End_Date,l_termination_date) RETURN enrollmentEndDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the anniversary event date for absence plans in Hong Kong to determine eligibility or adjustments (e.g., annual leave, bonuses). Uses the employee\u2019s hire date or service tenure, ensuring alignment with local policies. Returns the calculated anniversary date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is'4712/12/31 00:00:00'(date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00'(date) DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_PLANENROLLMENTSTARTDATE(date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_hire_date = PER_ASG_REL_DATE_START l_hr_assignment_id = get_context(HR_ASSIGNMENT_ID,0) l_start_date = to_date('2019-09-23','yyyy-MM-dd') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) l_asg_eff_st_date = to_date('2019-09-23','yyyy-MM-dd') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_value = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE = l_eff_date) ( l_person_number = PER_PER_PERSON_NUMBER ) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_eff_date,HR_ASSIGNMENT_ID = l_hr_assignment_id) ( L_year_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_CONTRACT_START_DATE','|=P_PERSON_ID='||to_char(l_person_id)),'YYYY-MM-DD') ) IF ( l_year_start_date > l_start_date) THEN ( anniversaryDate = l_year_start_date ) ELSE ( anniversaryDate = l_asg_start ) Return anniversaryDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated sick leave accrual for employees in Malaysia based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_FTE_VALUE IS 1 DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_grade_name = PER_ASG_GRADE_NAME l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) accrual = 30 carryover = 0 prorationFactor = 1 carryOverProration = 1 l_log = ESS_LOG_WRITE('l_grade_name: '|| TO_CHAR(l_effective_date,'dd-mon-yyyy')) l_log = ESS_LOG_WRITE('l_grade_name: '|| l_grade_name) CHANGE_CONTEXTS(EFFECTIVE_DATE = l_effective_date, HR_ASSIGNMENT_ID = l_hr_assign_id) ( l_grade_name = PER_ASG_GRADE_NAME ) l_log = ESS_LOG_WRITE('l_grade_name: '|| TO_CHAR(l_effective_date,'dd-mon-yyyy')) l_log = ESS_LOG_WRITE('l_grade_name: '|| l_grade_name) IF ( (l_grade_name LIKE '%.D' OR l_grade_name LIKE '%.DE' OR l_grade_name LIKE 'C%' OR l_grade_name ='SLIM')) THEN accrual = 14 l_log = ESS_LOG_WRITE('l_grade_name: '|| TO_CHAR(accrual)) accrual = accrual RETURN accrual, carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sick leave applications in Cambodia. Ensures the duration does not exceed a specified limit (e.g., 10\u201330 days based on grade), requires a medical certificate for durations over 2 days, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 180 IF ADD_DAYS(EffDate,1) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Sick Leave - Inactive') AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( L_without_cert_duration = 0 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND (l_abs_typ_name_check = 'Sick Leave' AND l_abs_typ_name_check = 'Sick Leave - Inactive') AND (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000115262932 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000117139859 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755198 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755055 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Sick Leave for more than one (1) consecutive day will require a medical certificate. Please change reason for Sick Leave and attached Medical Certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION ) ) ) ) j = j + 1 ) ) IF (IV_ABSENCE_REASON = 'Medical Leave Without Certificate' AND (L_without_cert_duration + l_duration) > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = IV_ABSENCE_REASON||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_without_cert_duration)|| ' day(s). Please submit Medical Leave With Certificate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_ABSENCE_REASON != 'Medical Leave Without Certificate' AND IV_TOTALDURATION <=1 ) THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attach your Medical Certificate and click \"Save and Close\". Go to \"Existing Leave\", click on \"Pencil\" icon next to saved \"Sick Leave\" and click \"Submit\"' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates maternity leave applications in India. Ensures the duration complies with local regulations (e.g., 180 days), prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN ( l_fnd_person_number = 'N' ) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= l_asg_start , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND l_abs_typ_name_check = 'Maternity Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + 1 ) ) ) i = i + 1 ) IF (UPPER(IV_ABSENCE_REASON) != 'NORMAL DELIVERY' AND UPPER(IV_ABSENCE_REASON) != 'CESAREAN DELIVERY') AND (IV_TOTALDURATION > 30 )THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have submitted more than 1 month of leave duration. Please change your leave end date.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF (L_sl_days > 2 AND l_duration > 84 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have submitted more than 84 days / 12 weeks duration allow for 3rd occurence and above. Please change your leave end date.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates casual leave applications in India. Ensures the duration does not exceed a specified limit (e.g., 3\u20135 days based on grade), prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_hire_date = PER_ASG_REL_DATE_START l_grade_name = PER_ASG_GRADE_NAME l_duration = IV_TOTALDURATION VALID = 'Y' i = 1 l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_abs_typ_name_check = 'X' l_hl_duration = 0 l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates outstation leave applications in Singapore. Ensures the duration complies with local policies, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before September 23, 2019. Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (DATE) l_duration = IV_TOTALDURATION VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 L_without_cert_duration = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_prv_duration = 0 l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF TO_NUMBER(TO_CHAR(IV_START_DATE,'YYYY')) <> TO_NUMBER(TO_CHAR(IV_END_DATE,'YYYY')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please apply your leave separately for each calendar year as leave application cannot overlap between 2 years' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates annual leave applications in China. Ensures the duration aligns with grade-based entitlements, prohibits overlap between calendar years, checks sufficient balance, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_grade_band = 'X' l_comp_limit = 'X' l_action_code = 'X' l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 l_year_begin_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_init_bal_char = '0' l_init_bal = 0 L_hire_date = PER_ASG_REL_DATE_START l_service_months = MONTHS_BETWEEN(L_year_end_date,L_hire_date) L_completed_months = MONTHS_BETWEEN(iv_start_date,L_hire_date) L_earned_days = 0 l_prob_applied_days = 0 l_job_name = PER_ASG_JOB_NAME l_position_name = PER_ASG_POSITION_NAME L_Ann_accrual = 0 L_curr_year_days = 0 L_user_person_type = PER_ASG_USER_PERSON_TYPE l_year_band = 'X' L_Ann_accrual_char = 'X' l_msg = 'X' l_year_date = GREATEST(l_year_begin_date,l_hire_date,TO_DATE('2019/09/23','YYYY/MM/DD')) L_comp = 'COMPULSORY' L_udt_name = 'CIMB_MY_ANNUAL_LEAVE' L_nxt_working_day = '1951/01/01 00:00:00' (date) L_chk_nxt_wrk_dur = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_mgr_asg_status = 'X' l_union = PER_ASG_ATTRIBUTE7 l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, EFFECTIVE_DATE = ADD_DAYS(l_probation_end,1)) ( l_action_code =PER_ASG_ACTION_CODE ) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_emp = GET_PLAN_BALANCE('CN Annual Leave Plan Employee') l_plan_name = 'CN Annual Leave Plan Permanent Employee' L_Ann_Acrl_Balance = L_Ann_Acrl_Balance_emp ) l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') IF iv_start_date <= PER_ASG_DATE_PROBATION_END THEN ( IF TO_CHAR(l_year_date,'YYYY/MM/DD') = '2019/09/23' THEN l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS_INIT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') ELSE l_init_bal_char = GET_VALUE_SET('CIMB_GET_ACRL_DAYS','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_PLAN_NAME='''||l_plan_name||''''||'|P_EFF_DATE='''||TO_CHAR(l_year_date,'YYYY/MM/DD')||'''') l_init_bal = TO_NUMBER(l_init_bal_char) IF L_completed_months >= 0 THEN ( L_earned_days = (l_init_bal/l_service_months) * L_completed_months IF IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] = TO_CHAR(ROUND(L_earned_days,0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF (l_init_bal - L_Ann_Acrl_Balance) + IV_TOTALDURATION > L_earned_days THEN ( VALID = 'N' ERROR_CODE = 'E' TOKEN_NAME[1] = 'EARNED_DAYS' TOKEN_VALUE[1] =TO_CHAR(ROUND(L_earned_days-(l_init_bal - L_Ann_Acrl_Balance),0)) ERROR_MESSAGE = 'CIMB_ABS_AL_EARN_PROB' RETURN VALID, ERROR_MESSAGE,ERROR_CODE,TOKEN_NAME,TOKEN_VALUE ) IF L_earned_days = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) ELSE( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_AL_PROB' RETURN VALID, ERROR_MESSAGE ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_begin_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND (l_asg_category != 'CONTRACT' OR (l_asg_category = 'CONTRACT' AND (l_grade_name NOT LIKE 'G1.%' OR l_grade_name NOT LIKE 'G2.%' OR l_grade_name NOT LIKE 'G3.%'))) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ELSE IF (L_Ann_Acrl_Balance - l_duration) < 0 AND IV_END_DATE <= l_year_end_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) l_comp_limit = '5' IF IV_TOTALDURATION < TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON = 'Compulsory Leave' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MY_ANNUAL_LEAVE_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ELSE IF TO_DATE(TO_CHAR(IV_END_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND l_asg_category != 'CONTRACT' AND (L_Ann_Acrl_Balance - l_duration) < 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_NXTYR_INSUFF_BAL' RETURN VALID, ERROR_MESSAGE ) ELSE IF IV_TOTALDURATION >= TO_NUMBER(l_comp_limit) AND IV_ABSENCE_REASON <> 'Compulsory Leave' THEN ( VALID = 'N' ERROR_CODE = 'W' ERROR_MESSAGE = 'CIMB_MY_AL_MAND_CMPLSORY' RETURN VALID, ERROR_MESSAGE, ERROR_CODE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates child care time-off applications in Vietnam. Ensures the duration complies with local policies, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_DATE_OF_BIRTH IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_PERSON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_NATIONALITY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONT_REL_CONTACT_PERSON_ID IS 0 DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT_DATA_VALUE FOR PER_EXT_PERSON_CITIZENSHIP_STATUS IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) i = 1 j = 1 l_contact_person_id = 0 l_child_citizen = 'Singapore' l_duration = IV_TOTALDURATION VALID = 'Y' l_prv_duration = 0 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_child_exists = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_service_months = 0 l_elg_leave_days = 0 l_contact_person_id = 0 l_contact_dob_char = 'X' l_contact_dob = '1951/01/01 00:00:00' (date) K = 1 z = 1 g = 1 child_person_id[1] = 0 child_citizen[1] = 'X' child_dob[1] = '1951/01/01 00:00:00' (date) youngest_person_id = 0 youngest_citizen = 'X' youngest_dob = '1951/01/01 00:00:00' (date) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_msg = 'X' l_contact_type = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_mgr_asg_status = 'X' l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = iv_start_date) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = l_person_id) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(1) THEN ( WHILE PER_PER_CONT_REL_CONTACT_PERSON_ID.exists(j) LOOP( l_contact_person_id = PER_PER_CONT_REL_CONTACT_PERSON_ID[j] l_contact_type = 'X' l_contact_type = GET_VALUE_SET('CIMB_GET_CONTACT_TYPE' ,'|=P_CONTACT_PERSON_ID='||TO_CHAR(l_contact_person_id)) IF l_contact_type = 'C' THEN ( l_child_exists = 'Y' l_contact_dob_char = GET_VALUE_SET('CIMB_GET_CONTACT_DATE_OF_BIRTH','|=P_PERSON_ID='||TO_CHAR(l_contact_person_id)) l_contact_dob = TO_DATE(l_contact_dob_char) CHANGE_CONTEXTS(PERSON_ID = l_contact_person_id) ( IF PER_EXT_PERSON_CITIZENSHIP_NATIONALITY.EXISTS(1) THEN ( IF PER_EXT_PERSON_CITIZENSHIP_STATUS.EXISTS(1) THEN ( IF PER_EXT_PERSON_CITIZENSHIP_STATUS[z] = 'A' THEN ( l_child_citizen = PER_EXT_PERSON_CITIZENSHIP_NATIONALITY[1] z=z+1 ) ) ) ) child_person_id[k] = l_contact_person_id child_citizen[k] = l_child_citizen child_dob[k] = l_contact_dob k = k + 1 ) j = j + 1 ) ) IF l_child_exists = 'Y' THEN ( youngest_person_id = child_person_id[1] youngest_dob = child_dob[1] k = 2 IF child_person_id.EXISTS(k) THEN ( WHILE child_person_id.EXISTS(k) LOOP ( IF youngest_dob < child_dob[k] THEN ( youngest_person_id = child_person_id[k] youngest_dob = child_dob[k] ) k = k + 1 ) ) IF TO_DATE(TO_CHAR(ADD_MONTHS(youngest_dob,12),'YYYY')||'-12-31','YYYY-MM-DD') < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Not able to record this absence. Your youngest child is older than 12 months of age.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ELSE ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Not able to record this absence. You are not eligible to Child Care Time Off' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the anniversary event date for absence plans in Malaysia to determine eligibility or adjustments (e.g., annual leave, bonuses). Uses the employee\u2019s hire date or service tenure, ensuring alignment with local policies. Returns the calculated anniversary date.\n\n***answer***: DEFAULT for PER_ASG_REL_DATE_START is '4712/12/31 00:00:00'(date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is'4712/12/31 00:00:00'(date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '4712/12/31 00:00:00'(date) DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_PLANENROLLMENTSTARTDATE(date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_hire_date = PER_ASG_REL_DATE_START l_attrition_date = PER_ASG_REL_ACTUAL_TERMINATION_DATE l_hr_assignment_id = get_context(HR_ASSIGNMENT_ID,0) l_start_date = to_date('2019-09-23','yyyy-MM-dd') EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) l_asg_eff_st_date = to_date('2019-09-23','yyyy-MM-dd') l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_value = 'X' l_period_start_date = TO_DATE(GET_VALUE_SET('CIMB_GET_CONTRACT_RENEWAL_DATE','|=P_PERSON_ID='||to_char(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(l_attrition_date,'YYYY/MM/DD')||''''),'YYYY-MM-DD') anniversaryDate = l_period_start_date Return anniversaryDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates full-paid sick leave applications in Vietnam. Ensures the duration does not exceed a specified limit (e.g., 10\u201330 days based on grade), requires a medical certificate for durations over 2 days, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) change_contexts(effective_date = L_year_end_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( L_Ann_Acrl_Balance_Emp = GET_PLAN_BALANCE('VN Sick Leave Full Paid Plan') l_plan_name = 'VN Sick Leave Full Paid Plan' ) IF (L_Ann_Acrl_Balance_Emp = 0) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Unable to record this absence. Your '||l_plan_name|| ' balance is '|| to_char(L_Ann_Acrl_Balance_Emp)|| ' days.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Retrieves compensation data for absence plans in the UK. Checks for specific absence types (e.g., annual, sick, Hajj) with block leave reasons within a specified period, determining if compensation limits are exceeded. Returns a status indicating whether compensation data exists.\n\n***answer***: DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' DEFAULT for ANC_ABS_TYP_NAME is 'X' DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT for adjustmentvalues is EMPTY_NUMBER_NUMBER DEFAULT for adjustmentdates is EMPTY_DATE_NUMBER DEFAULT for adjustmenttypes is EMPTY_TEXT_NUMBER DEFAULT FOR PER_ASG_JOB_NAME IS 'X' INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 ,check_start_date (date) ,check_end_date (date) ,comp_limit (number) ,CURR_YR_ST_date (date) ,CURR_YR_END_date (date) l_abs_typ_name_check = 'X' I = 1 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_start_date = check_start_date L_end_date = check_end_date Z = 1 l_abs_start_dt = '4712/12/31 00:00:00' (date) l_abs_end_dt = '4712/12/31 00:00:00' (date) l_person_id = GET_CONTEXT(PERSON_ID,0) l_job_name = PER_ASG_JOB_NAME L_RETURN_VALUE ='N' l_comp_limit_ch = 'X' l_comp_limit = 0 L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_curr_yr_st_dt = CURR_YR_ST_date l_curr_yr_END_dt = CURR_YR_END_date L_nxt_working_st_day = '4712/12/31 00:00:00' (date) L_nxt_working_day = '4712/12/31 00:00:00' (date) Annual[1] = '4712/12/31 00:00:00' (date) j = 1 l_duration = 0 BFL[1] = '4712/12/31 00:00:00' (date) L_prv_duration = 0 l_log =ESS_LOG_WRITE('[GET COMP DATE] l_person_id'||TO_CHAR(l_person_id)||'L_start_date:'||TO_CHAR(L_start_date)||'L_END_DATE:'||TO_CHAR(L_END_DATE)||'comp_limit:'||TO_CHAR(comp_limit)) CHANGE_CONTEXTS (START_DATE= L_start_date , END_DATE= L_END_DATE) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND (ANC_ABS_ENTRS_END_DATE > l_curr_yr_st_dt AND ANC_ABS_ENTRS_START_DATE < l_curr_yr_END_dt) THEN ( l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside l_abs_typ_name_check:'||l_abs_typ_name_check||'ANC_ABS_ENTRS_START_DATE'||TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD')||'ANC_ABS_ENTRS_END_DATE'||TO_CHAR(ANC_ABS_ENTRS_END_DATE,'YYYY/MM/DD')||'DUR:'||TO_CHAR(ANC_ABS_ENTRS_DURATION)) IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Brought Forward Leave') AND ( ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000118874119 OR ANC_ABS_ENTRS_DURATION => comp_limit) THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 1') EXIT ) ELSE IF ((( l_abs_typ_name_check = 'Hajj Leave' OR l_abs_typ_name_check = 'Hajj Leave' OR l_abs_typ_name_check = 'Marriage Leave' ) AND ANC_ABS_ENTRS_DURATION => comp_limit) OR l_abs_typ_name_check = 'Staff Rejuvenation Leave' OR l_abs_typ_name_check = 'Sabbatical Leave' OR l_abs_typ_name_check LIKE 'Prolonged Illness Leave%' OR l_abs_typ_name_check = 'Maternity Leave' ) THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 2') EXIT ) ELSE IF (l_abs_typ_name_check = 'Annual Leave' OR l_abs_typ_name_check = 'Brought Forward Leave') THEN ( l_duration = ANC_ABS_ENTRS_DURATION l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3'||'ANC_ABS_ENTRS_ABSENCE_REASON_ID'||TO_CHAR(ANC_ABS_ENTRS_ABSENCE_REASON_ID)) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') = TO_DATE(TO_CHAR(ANC_ABS_ENTRS_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') AND (L_prv_duration + ANC_ABS_ENTRS_DURATION) => comp_limit THEN ( L_RETURN_VALUE = 'Y' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:1') ) ELSE( l_msg = 'In' l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:2') L_prv_duration = ANC_ABS_ENTRS_DURATION L_nxt_working_day = ADD_DAYS(ANC_ABS_ENTRS_END_DATE,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', L_nxt_working_day, ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', L_nxt_working_day, ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] Inside 3:2 L_nxt_working_day'||TO_CHAR(L_nxt_working_day)) ) j = 1 l_log =ESS_LOG_WRITE('[GET COMP DATE] L_comp_limit'||TO_CHAR(L_comp_limit)) CHANGE_CONTEXTS (START_DATE= ANC_ABS_ENTRS_START_DATE , END_DATE= L_nxt_working_day) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( IF ((ANC_ABS_TYP_NAME = 'Annual Leave' AND l_abs_typ_name_check = 'Brought Forward Leave') OR (ANC_ABS_TYP_NAME = 'Brought Forward Leave' AND l_abs_typ_name_check = 'Annual Leave') OR (ANC_ABS_TYP_NAME = 'Annual Leave' AND l_abs_typ_name_check = 'Unpaid Leave')) AND L_nxt_working_day = ANC_ABS_ENTRS_START_DATE AND (l_duration + ANC_ABS_ENTRS_DURATION => comp_limit) THEN ( L_RETURN_VALUE = 'Y' EXIT ) ) ) j = j + 1 ) ) IF L_RETURN_VALUE = 'Y' THEN EXIT ) ) ) i = i + 1 ) ) ) l_log =ESS_LOG_WRITE('[GET COMP DATE] L_RETURN_VALUE'||L_RETURN_VALUE) RETURN L_RETURN_VALUE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated sick leave accrual for employees in Malaysia based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) INPUTS ARE IV_ACCRUAL ,IV_ACCRUALPERIODENDDATE (date) ,IV_ACCRUALPERIODSTARTDATE (date) ,IV_PLANENROLLMENTSTARTDATE (date) ,IV_PLANENROLLMENTENDDATE (date) ,IV_CALEDARENDDATE (date) ,IV_CALEDARSTARTDATE (date) ,IV_EVENT_DATES ,IV_BAND_CHG_DT1 (date) ,IV_BAND_CHG_BEFVAL1 ,IV_BAND_CHG_AFTVAL1 ,IV_BAND_CHG_DT2 (date) ,IV_BAND_CHG_AFTVAL2 ,IV_BAND_CHG_BEFVAL2 ,IV_BAND_CHG_DT3 (date) ,IV_BAND_CHG_BEFVAL3 ,IV_BAND_CHG_AFTVAL3 ,IV_BAND_CHG_DT4 (date) ,IV_BAND_CHG_AFTVAL4 ,IV_BAND_CHG_BEFVAL4 l_dm_date = '2019/09/23 00:00:00' (date) L_hire_date = PER_ASG_REL_DATE_START IF IV_PLANENROLLMENTSTARTDATE = l_dm_date AND IV_ACCRUALPERIODSTARTDATE < IV_PLANENROLLMENTSTARTDATE AND IV_PLANENROLLMENTSTARTDATE <> l_hire_date THEN ACCRUAL = 0 ELSE ACCRUAL = IV_ACCRUAL RETURN ACCRUAL",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates marriage leave applications in Hong Kong. Ensures the duration does not exceed a specified limit (e.g., 3\u20135 days), the leave is applied within a certain period after the marriage date, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '1951/01/01 00:00:00' (date) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MARITAL_STATUS IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_MARITAL_STATUS_DATE IS '4712/12/31 00:00:00'(date) INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME VALID = 'Y' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_marriage_date = PER_ASG_MARITAL_STATUS_DATE IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Please enter start time and end time according to your working hours. If you applying half day leave enter start time or end time according to your half day working hours' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' l_mgr_asg_status = 'X' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_MARITAL_STATUS != 'S' THEN ( IF TO_CHAR(l_marriage_date,'YYYY/MM/DD') = '4712/12/31' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Pleas update you Marriage Registration date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ADD_MONTHS(l_marriage_date,12) < iv_start_date THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Marriage Leave start date must not exceeding 1 Year from the Marriage Registration date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates the duration of absence plan types for employees in Vietnam based on work schedules and rosters. Determines the duration by comparing entered absence hours to total assigned shift hours, with adjustments for shift patterns. Returns the calculated duration.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_TIME IS '00:00' DEFAULT FOR IV_END_TIME IS '23:59' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_START_TIME(text),IV_END_TIME(text) ln_entry_duration_d = 0 ln_unrounded_duration_d = 0 ln_floor_duration_d = 0 ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') ln_entry_duration_d = GET_PAY_AVAILABILITY ('ASSIGN', ld_period_start_date, ld_period_end_date, 'Y', 'Y', 'Y', 'Y', 'D') ln_unrounded_duration_d = ln_entry_duration_d * PER_ASG_FTE_VALUE IF (ln_unrounded_duration_d - FLOOR(ln_unrounded_duration_d) <> 0 AND ln_unrounded_duration_d - FLOOR(ln_unrounded_duration_d) <> 0.5) THEN ln_floor_duration_d = FLOOR(ln_unrounded_duration_d) + 0.5 ELSE ln_floor_duration_d = ln_unrounded_duration_d DURATION = ln_floor_duration_d RETURN DURATION",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated sick leave accrual for employees in China based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) Default for IV_BAND_CHG_DT1 is '1951/01/01 00:00' (date) Default for IV_BAND_CHG_DT2 is '1951/01/01 00:00' (date) DEFAULT for IV_ACCRUALPERIODSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACCRUALPERIODENDDATE is '4712/12/31 00:00:00' (date) Default for IV_BAND_CHG_BEFVAL1 is 15 Default for IV_BAND_CHG_AFTVAL1 is 18 Default for IV_BAND_CHG_AFTVAL2 is 21 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'X' Default for IV_CEILING is 0 Default for IV_CARRYOVER is 0 Inputs are IV_ACCRUAL,IV_BAND_CHG_DT1,IV_BAND_CHG_DT2,IV_BAND_CHG_BEFVAL1,IV_BAND_CHG_AFTVAL1,IV_BAND_CHG_BEFVAL2,IV_BAND_CHG_AFTVAL2,IV_CARRYOVER,IV_CEILING,IV_ACCRUALPERIODSTARTDATE,IV_ACCRUALPERIODENDDATE ld_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) ld_term_start_date = TO_DATE('01-01-'||TO_CHAR(ld_effective_date, 'rrrr'),'dd-mm-rrrr') ld_term_end_date = TO_DATE('31-12-'||TO_CHAR(ld_effective_date, 'rrrr'),'dd-mm-rrrr') ld_band1_end_date = ADD_YEARS(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,3) ld_band2_end_date = ADD_YEARS(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,6) accrual = IV_ACCRUAL l_log = ess_log_write('***********************START********************************') l_log = ess_log_write('PERSON_NUMBER : '|| PER_ASG_PERSON_NUMBER) l_log = ess_log_write('ld_effective_date : '|| TO_CHAR(ld_effective_date,'DD-MM-YYYY')) l_log = ess_log_write('ld_band1_end_date : '|| TO_CHAR(ld_band1_end_date,'DD-MM-YYYY')) l_log = ess_log_write('ld_band2_end_date : '|| TO_CHAR(ld_band2_end_date,'DD-MM-YYYY')) l_log = ess_log_write('IV_BAND_CHG_BEFVAL1 : '|| TO_CHAR(IV_BAND_CHG_BEFVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL1 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL2 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL2)) l_log = ess_log_write('Initial Accrual : '|| TO_CHAR(IV_ACCRUAL)) l_log = ess_log_write('Accrual Period Start Date : '|| TO_CHAR(IV_ACCRUALPERIODSTARTDATE,'DD-MON-RRRR')) l_log = ess_log_write('Accrual Period End Date : '|| TO_CHAR(IV_ACCRUALPERIODENDDATE,'DD-MON-RRRR')) l_log = ess_log_write('***********************END********************************') IF (TO_CHAR(ld_effective_date,'YYYY') = TO_CHAR(ld_band1_end_date,'YYYY')) THEN ( l_log = ess_log_write('Within Band 1') l_no_of_ds1 = DAYS_BETWEEN(ld_band1_end_date,ld_term_start_date) + 1 l_log = ess_log_write('l_no_of_ds1 : '|| TO_CHAR(l_no_of_ds1)) l_no_of_ds2 = DAYS_BETWEEN(ld_term_end_date,ld_band1_end_date) + 1 l_log = ess_log_write('l_no_of_ds2 : '|| TO_CHAR(l_no_of_ds2)) l_no_of_ds3 = 0 l_log = ess_log_write('IV_BAND_CHG_BEFVAL1 : '|| TO_CHAR(IV_BAND_CHG_BEFVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL1 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL2 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL2)) accrual=(l_no_of_ds1*IV_BAND_CHG_BEFVAL1 + l_no_of_ds2 * IV_BAND_CHG_AFTVAL1 + l_no_of_ds3*IV_BAND_CHG_AFTVAL2)/ 365 l_log = ess_log_write('Accrual : '|| TO_CHAR(accrual)) ) IF (TO_CHAR(ld_effective_date,'YYYY') = TO_CHAR(ld_band2_end_date,'YYYY')) THEN ( l_log = ess_log_write('Within Band 2') l_no_of_ds1 = 0 l_no_of_ds2 = DAYS_BETWEEN(ld_band2_end_date,ld_term_start_date) + 1 l_log = ess_log_write('l_no_of_ds2 : '|| TO_CHAR(l_no_of_ds2)) l_no_of_ds3 = DAYS_BETWEEN(ld_term_end_date,ld_band2_end_date) + 1 l_log = ess_log_write('l_no_of_ds3 : '|| TO_CHAR(l_no_of_ds3)) l_log = ess_log_write('IV_BAND_CHG_BEFVAL1 : '|| TO_CHAR(IV_BAND_CHG_BEFVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL1 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL1)) l_log = ess_log_write('IV_BAND_CHG_AFTVAL2 : '|| TO_CHAR(IV_BAND_CHG_AFTVAL2)) accrual=(l_no_of_ds1*IV_BAND_CHG_BEFVAL1 + l_no_of_ds2 * IV_BAND_CHG_AFTVAL1 + l_no_of_ds3*IV_BAND_CHG_AFTVAL2)/ 365 l_log = ess_log_write('Accrual : '|| TO_CHAR(accrual)) ) l_log = ess_log_write(' Prorated Accrual considered : '|| TO_CHAR(accrual)) floored_accrual = FLOOR(accrual) decimal_accrual = accrual - floored_accrual IF (decimal_accrual < 0.5 ) THEN accrual = floored_accrual IF (decimal_accrual >= 0.5) THEN accrual = floored_accrual + 1 l_log = ess_log_write(' Final Accrual considered : '|| TO_CHAR(accrual)) carryover = IV_CARRYOVER ceiling = IV_CEILING l_log = ess_log_write(' Carryover : '|| TO_CHAR(IV_CARRYOVER)) l_log = ess_log_write(' Ceiling : '|| TO_CHAR(IV_CEILING)) return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates compassionate leave applications in China. Ensures the duration does not exceed 3\u20135 days (based on grade and reason), prohibits overlap between calendar years for non-contract employees, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' l_duration = IV_TOTALDURATION l_grade_name = PER_ASG_GRADE_NAME EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_probation_end = PER_ASG_DATE_PROBATION_END L_Ann_Acrl_Balance_emp = 0 L_Ann_Acrl_Balance_contr = 0 L_Ann_Acrl_Balance = 0 L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' L_hire_date = PER_ASG_REL_DATE_START L_job_name = PER_ASG_JOB_NAME L_user_person_type = PER_ASG_USER_PERSON_TYPE l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) L_sl_days = 0 I = 1 L_year_start_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(IV_START_DATE,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(PERSON_ID,0) l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You leave duration is incorrect. Leave duration must be in incremental of 0.5 days' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ISNULL(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE '%GRANDPARENT' OR UPPER(IV_ABSENCE_REASON) LIKE '%SIBLINGS') AND (l_duration > 1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply maximum of 1 day for the selected reason' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((UPPER(IV_ABSENCE_REASON) LIKE '%SPOUSE' OR UPPER(IV_ABSENCE_REASON) LIKE '%CHILDREN' OR UPPER(IV_ABSENCE_REASON) LIKE '%PARENTS' OR UPPER(IV_ABSENCE_REASON) LIKE '%PARENTS-IN-LAW') AND (l_duration > 3)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You can apply maximum of 3 days for the selected reason' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(L_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates unpaid leave applications in India. Ensures the duration complies with local policies, requires other leave balances (e.g., annual, sick) to be exhausted, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: default for per_asg_date_probation_end is '1951/01/01 00:00:00' (date) default for per_asg_rel_date_start is '1951/01/01 00:00:00' (date) default for per_asg_grade_name is 'X' default for per_asg_sex is 'X' default for global_pay_interface_extraction_date is '1951/01/01' default for iv_attribute_1 is 'X' default for per_asg_action_code is 'X' default for per_asg_job_name is 'X' default for per_asg_user_person_type is 'X' default_data_value for anc_per_abs_entrs_absence_entry_id_arr is 0 default for anc_abs_entrs_duration is 0 default for anc_abs_typ_name is ' ' default for anc_abs_entrs_absence_status_cd is ' ' default for anc_abs_entrs_end_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_start_date is '4712/12/31 00:00:00' (date) default for anc_abs_entrs_absence_type_id is 0 default for anc_abs_entrs_approval_status_cd is 'X' default for anc_abs_entrs_user_mode is 'X' default for per_asg_manager_user_person_id is 0 default for per_per_person_number is 'X' default for per_asg_employment_category is 'X' inputs are iv_start_date (date),iv_end_date (date),iv_caledarstartdate (date), iv_caledarenddate (date),iv_totalduration (number), iv_absence_reason (text), iv_attribute_1 (text) valid = 'Y' l_duration = iv_totalduration l_grade_name = per_asg_grade_name effdate = to_date(global_pay_interface_extraction_date ,'rrrr/mm/dd') l_hr_assign_id = get_context(hr_assignment_id,0) l_ldg_id = get_context(legislative_data_group_id,0) l_person_id = get_context(person_id,0) l_probation_end = per_asg_date_probation_end l_ann_acrl_balance_emp = 0 l_ann_acrl_balance_contr = 0 l_ann_acrl_balance = 0 l_year_start_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(effdate,'YYYY')||'-12-31','YYYY-MM-DD') l_plan_name = 'X' l_hire_date = per_asg_rel_date_start l_job_name = per_asg_job_name l_user_person_type = per_asg_user_person_type l_msg = 'X' l_abs_typ_name_check = 'X' l_abs_entry_id = get_context(absence_entry_id,0) l_absence_entry_id = to_char(l_abs_entry_id) l_sl_days = 0 i = 1 l_year_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_year_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') l_effective_date = get_context(effective_date,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(hr_assignment_id,0) l_person_id = get_context(person_id,0) l_asg_category = per_asg_employment_category l_fnd_person_number = get_value_set('CIMB_GET_FND_PERSON') l_mgr_asg_status = 'X' if MOD(l_duration,0.5) <> 0 then ( valid = 'N' error_message = 'CIMB_MSG_ERROR' token_name[1] = 'MSG' token_value[1] = 'Leave duration must be in 0.5 incremental.' return valid, error_message, token_name, token_value ) if isnull(l_fnd_person_number) = 'N' then l_fnd_person_number = 'N' change_contexts(hr_assignment_id = l_hr_assign_id, effective_date = effdate) ( l_manager_id = per_asg_manager_user_person_id ) l_mgr_asg_status = get_value_set('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = get_value_set('CIMB_GET_FND_PERSON_ID') change_contexts(effective_date=l_effective_date,absence_entry_id = l_abs_entry_id) ( l_user_mode=anc_abs_entrs_user_mode ) if (l_user_mode != 'ADMIN' and per_per_person_number = l_fnd_person_number) or (l_user_mode != 'ADMIN' and l_manager_id = TO_NUMBER(l_fnd_person_number_id)) then ( if iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') then ( valid = 'N' error_message = 'CIMB_PRIOR_DM' return valid, error_message ) if l_mgr_asg_status <> 'ACTIVE' or l_manager_id = 0 then ( valid = 'N' error_message = 'CIMB_INACTIVE_MGR_ERROR' return valid, error_message ) change_contexts(effective_date = l_year_end_date, legislative_data_group_id = l_ldg_id) ( l_ann_acrl_balance_emp = get_plan_balance('IN Annual Leave Plan') l_plan_name = 'IN Annual Leave Plan' ) if (iv_start_date > per_asg_date_probation_end and per_asg_date_probation_end < ADD_MONTHS(l_hire_date,24)) then ( if (l_ann_acrl_balance_emp > 0 or l_ann_acrl_balance_contr > 0) then ( valid = 'N' error_message = 'CIMB_UNPAID_ERROR' return valid, error_message ) ) if (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) or (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') and TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) then ( valid = 'N' error_message = 'CIMB_ABS_OVERLAP' return valid, error_message ) ) return valid,error_message",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the accrual and carryover limits for workers enrolled in a vacation plan, adjusting based on their full-time equivalent (FTE) value. Here's the precise business logic:\n\n1. The initial accrual is set to 5 and carryover to 0.\n2. Both accrual and carryover are multiplied by the employee's FTE value.\n3. The accrual is then rounded to the nearest 0.5 increment:\n   - If the decimal part of the accrual is 0, it remains unchanged.\n   - If the decimal part is greater than 0 and less than 0.5, it is rounded up to 0.5.\n   - If the decimal part is 0.5 or more, it is rounded up to the next whole number.\n\nThe formula returns the adjusted accrual and carryover values.\n\n***answer***: DEFAULT FOR PER_ASG_GRADE_NAME IS 'Associate' DEFAULT FOR PER_ASG_FTE_VALUE IS 1 accrual = 5 carryover = 0 final_accrual = 0 floored_accrual = 0 prorationFactor = 1 carryOverProration = 1 carryover = carryover * PER_ASG_FTE_VALUE accrual = accrual * PER_ASG_FTE_VALUE floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN accrual, carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated casual leave accrual for employees in India based on band changes. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies for casual leave. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) ln_same_year_duration = 0 lc_first_month_flag = 'N' ln_first_month_accrual = 0 ln_participation_duration = 0 ln_term_duration = 1 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ld_start_date = GREATEST (IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) ld_end_date = LEAST (IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE) ln_participation_duration = (TO_NUMBER(TO_CHAR(ld_end_date, 'yy')) - TO_NUMBER(TO_CHAR(ld_start_date, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(ld_end_date, 'mm')) - TO_NUMBER(TO_CHAR(ld_start_date, 'mm'))) + 1 ln_first_month_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF IV_PLANENROLLMENTENDDATE < IV_CALEDARENDDATE THEN ( IF (IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE) THEN ( ln_same_year_duration = (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ) ln_participation_duration = -1 * (ln_term_duration - ln_participation_duration - ln_same_year_duration) IF ( (TO_CHAR(IV_CALEDARSTARTDATE, 'mm') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'mm')) AND (TO_CHAR(IV_CALEDARSTARTDATE, 'yyyy') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'yyyy')) ) THEN (lc_first_month_flag = 'Y') ) prorated_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF (lc_first_month_flag = 'Y') THEN (prorated_accrual = ln_first_month_accrual) accrual = ROUND(prorated_accrual,2) floored_accrual = floor(ACCRUAL) decimal_accrual = ACCRUAL - floored_accrual IF (decimal_accrual = 0) THEN final_accrual = floored_accrual IF (decimal_accrual > 0 and decimal_accrual < 0.5) THEN final_accrual = floored_accrual + 0.5 IF (decimal_accrual >= 0.5) THEN final_accrual = floored_accrual + 1 accrual = final_accrual RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates cash disbursement or compensation for absence plans for Niaga employees. Determines payment amounts based on absence type, duration, and local policies, ensuring compliance with financial regulations. Returns the calculated disbursement amount.\n\n***answer***: DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ORIGINAL_DATE_OF_HIRE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) MIN=0 MAX=0 INCREMENT=1 l_ann_bal=0 l_term_date = PER_REL_ACTUAL_TERMINATION_DATE l_hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID, 0) l_person_id = GET_CONTEXT(PERSON_ID, 0) L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) IF(PER_REL_ACTUAL_TERMINATION_DATE WAS NOT DEFAULTED) THEN ( MIN=1 MAX=0 CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, PERSON_ID = l_person_id, EFFECTIVE_DATE = l_term_date, LEGISLATIVE_DATA_GROUP_ID = L_ldg_id) ( l_ann_bal = GET_PLAN_BALANCE('Annual Leave') ) MAX=l_ann_bal INCREMENT=1 ) RETURN MIN,MAX,INCREMENT",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated partial period accrual for employees in Hong Kong based on band changes or partial employment periods. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_PLANENROLLMENTENDDATE IS '4712/12/31 00:00:00' (date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE (date) ln_accrual = 0 ln_same_year_duration = 0 lc_first_month_flag = 'N' ln_first_month_accrual = 0 ln_participation_duration = 0 ln_term_duration = 1 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_CALEDARENDDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ld_start_date = GREATEST (IV_PLANENROLLMENTSTARTDATE,IV_CALEDARSTARTDATE) ld_end_date = LEAST (IV_PLANENROLLMENTENDDATE, IV_CALEDARENDDATE) ln_participation_duration = (TO_NUMBER(TO_CHAR(ld_end_date, 'yy')) - TO_NUMBER(TO_CHAR(ld_start_date, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(ld_end_date, 'mm')) - TO_NUMBER(TO_CHAR(ld_start_date, 'mm'))) + 0.7 ln_first_month_accrual = IV_ACCRUAL * (ln_participation_duration / ln_term_duration) IF IV_PLANENROLLMENTENDDATE < IV_CALEDARENDDATE THEN ( IF (IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE) THEN ( ln_same_year_duration = (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'yy')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'yy'))) * 12 + (TO_NUMBER(TO_CHAR(IV_PLANENROLLMENTSTARTDATE, 'mm')) - TO_NUMBER(TO_CHAR(IV_CALEDARSTARTDATE, 'mm'))) ) ln_participation_duration = (ln_term_duration - ln_participation_duration - ln_same_year_duration) IF ( (TO_CHAR(IV_CALEDARSTARTDATE, 'mm') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'mm')) AND (TO_CHAR(IV_CALEDARSTARTDATE, 'yyyy') = TO_CHAR(IV_PLANENROLLMENTENDDATE, 'yyyy')) ) THEN (lc_first_month_flag = 'Y') ) prorated_accrual = ln_participation_duration * ( IV_ACCRUAL / ln_term_duration) IF (lc_first_month_flag = 'Y') THEN (prorated_accrual = ln_first_month_accrual) accrual = prorated_accrual ln_accrual = accrual - FLOOR(accrual) IF ln_accrual <= 0.7 THEN accrual = FLOOR(accrual) + 0.5 IF ln_accrual > 0.7 THEN accrual = FLOOR(accrual) + 1 RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates inactive leave applications in Cambodia. Ensures the employee\u2019s status allows for inactive leave, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' VALID = 'Y' l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Selected leave type only for historical transaction. Please select other leave type' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE )",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sick leave applications in Cambodia. Ensures the duration does not exceed a specified limit (e.g., 10\u201330 days based on grade), requires a medical certificate for durations over 2 days, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF iv_start_date < TO_DATE('2019/09/23','YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_PRIOR_DM' RETURN VALID, ERROR_MESSAGE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 180 IF ADD_DAYS(EffDate,1) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Sick Leave - Inactive') AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_sl_days = L_sl_days + ANC_ABS_ENTRS_DURATION IF L_sl_days >= l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) i = i + 1 ) ) IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = l_abs_typ_name_check||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_sl_days)||' day(s). You are applying for another '|| to_char(l_duration)||' day(s)' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( L_without_cert_duration = 0 WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(j)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[j] AND (l_abs_typ_name_check = 'Sick Leave' AND l_abs_typ_name_check = 'Sick Leave - Inactive') AND (ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000115262932 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000117139859 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755198 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755055 OR ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000035854014) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Sick Leave for more than one (1) consecutive day will require a medical certificate. Please change reason for Sick Leave and attached Medical Certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE ( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION ) ) ) ) j = j + 1 ) ) IF (IV_ABSENCE_REASON = 'Medical Leave Without Certificate' AND (L_without_cert_duration + l_duration) > 3) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = IV_ABSENCE_REASON||' utilization from '||to_char(L_year_start_date,'dd-mon-yyyy')||' to '|| to_char(L_year_end_date,'dd-mon-yyyy')||' '||' is '||to_char(L_without_cert_duration)|| ' day(s). Please submit Medical Leave With Certificate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (IV_ABSENCE_REASON != 'Medical Leave Without Certificate' AND IV_TOTALDURATION <=1 ) THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attach your Medical Certificate and click \"Save and Close\". Go to \"Existing Leave\", click on \"Pencil\" icon next to saved \"Sick Leave\" and click \"Submit\"' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates sick leave applications in Cambodia (variant, possibly long-term sick leave). Ensures the duration does not exceed a specified limit (e.g., extended periods based on grade), requires a medical certificate, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_RSN_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD') L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' l_abs_rsn_name_check = 'X' i = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = GET_VALUE_SET('CIMB_GET_SHIFT','|=P_PERSON_ID='||TO_CHAR(l_person_id)||'|P_EFF_DATE='''||TO_CHAR(iv_start_date,'YYYY/MM/DD')||'''') l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF l_user_mode != 'ADMIN' THEN ( IF PER_ASG_GRADE_NAME LIKE 'C%' THEN l_sl_limit = 14 ELSE l_sl_limit = 180 IF ADD_DAYS(EffDate,1) < IV_START_DATE THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_FUTURE_ABSNECES' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days of Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_NO_BALANCE' RETURN VALID, ERROR_MESSAGE ) IF l_duration > 1 AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_SINGLE_DAY' RETURN VALID, ERROR_MESSAGE ) CHANGE_CONTEXTS (START_DATE= ADD_DAYS(L_year_start_date,-30) , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME l_abs_rsn_name_check = ANC_ABS_RSN_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Sick Leave' OR l_abs_typ_name_check = 'Sick Leave Inactive') AND l_abs_rsn_name_check = 'Medical Leave Without Certificate' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' THEN ( IF ANC_ABS_ENTRS_END_DATE => L_year_start_date AND ANC_ABS_ENTRS_START_DATE < L_year_start_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,L_year_start_date) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE >= L_year_start_date AND ANC_ABS_ENTRS_END_DATE <= L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(ANC_ABS_ENTRS_END_DATE,ANC_ABS_ENTRS_START_DATE) + 1 ELSE IF ANC_ABS_ENTRS_START_DATE < L_year_end_date AND ANC_ABS_ENTRS_END_DATE > L_year_end_date THEN L_sl_days = L_sl_days + DAYS_BETWEEN(L_year_end_date,ANC_ABS_ENTRS_START_DATE) + 1 IF L_sl_days > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have already utilized '||to_char(l_sl_days)||' days Medical Leave Without Certificate' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ELSE IF L_sl_days + l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'You can apply only for '||TO_CHAR(l_sl_limit-L_sl_days)||' of Sick Leave' RETURN VALID, ERROR_MESSAGE ) IF l_abs_rsn_name_check = 'Medical Leave Without Certificate' AND IV_ABSENCE_REASON = 'Medical Leave Without Certificate' THEN ( IF (ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,-1) OR ANC_ABS_ENTRS_START_DATE = ADD_DAYS(IV_START_DATE,1)) THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_SL_WOC_PRV_NXT_DAY' RETURN VALID, ERROR_MESSAGE ) ELSE( L_without_cert_duration = L_without_cert_duration + ANC_ABS_ENTRS_DURATION IF (L_without_cert_duration + l_duration) > 3 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have fully utilized Sick Leave Without Certification.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) ) ) ) i = i + 1 ) ) IF (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD')) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) IF IV_ABSENCE_REASON != 'Medical Leave Without Certificate' THEN ( l_param = '|=PER_ABSENCE_ENTRY_ID='||l_absence_entry_id l_value = GET_VALUE_SET('CIMB_ATTACHMENTS',l_param) if isnull(l_value) = 'N' then ( l_value = '0' ) IF l_value = '0' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MIN_DAYS_REQ' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please attached your sick leave certificate.' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment end date for brought forward leave (BFL) plans for employees in the UK. Uses the employee\u2019s actual termination date if available, otherwise defaults to the context end date or a specific policy date. Returns the calculated enrollment end date.\n\n***answer***: DEFAULT FOR GET_CURRENT_DATE IS '0001/01/01 00:00:00'(DATE) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' l_current_date = TO_CHAR(GET_CURRENT_DATE()) l_current_year = SUBSTR(l_current_date,0,4) l_start_date = TO_DATE(l_current_year||'/01/01 00:00:00') l_end_date = TO_DATE(l_current_year||'/04/30 00:00:00') l_eff_date = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') enrollmentEndDate = l_end_date RETURN enrollmentEndDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates the total duration of paternity leave based on various conditions. Here is the precise business logic:\n\n1. If the user mode is not 'ADMIN' and the person number matches the found person number or the manager ID matches the found person number ID, the following checks are performed:\n   - If the union is 'Association of Bank Officers, Peninsular Malaysia (ABOM)', 'National Union of Bank Employees (NUBE)', or 'Sabah Banking Employees Union (SABAHBEU)', the validation fails with an error message to select Paternity Leave (Calendar Days).\n   - If the grade is 'EQ.1', 'EQ.2', 'EQ.3', or 'EQ.4', the validation fails with an error message to select Paternity Leave (Calendar Days).\n   - If the manager assignment status is not 'ACTIVE' or the manager ID is 0, the validation fails with an error message indicating an inactive manager.\n   - If the shift is '2 Shift', '3 Shift', or '7 Days Banking' and the duration is not a whole number, the validation fails with an error message indicating that half-day leave is not allowed.\n   - If the duration is not a multiple of 0.5, the validation fails with an error message indicating an error with half-day leave.\n   - If the duration exceeds the sick leave limit of 5 days, the validation fails with an error message indicating the paternity leave entitlement per occasion.\n\n2. The formula iterates through each absence entry within the specified date range and checks if the absence type is 'Paternity Leave - 1st Time Father', 'Paternity Leave', or 'Compassionate Leave' with a specific reason ID. If the absence entry is not withdrawn, saved, or denied, the number of first days is incremented.\n\n3. If the total sick leave days exceed the limit of 5 days, the validation fails with an error message indicating the utilized days of paternity leave.\n\n4. If the start date of the leave is before the start of the year and the end date is on or after the start of the year, or if the start date is on or before the end of the year and the end date is after the end of the year, and the assignment category is not 'CONTRACT', the validation fails with an error message indicating that leave cannot overlap between two calendar years.\n\nThe formula returns a validation flag and an error message if any of these conditions are met.\n\n***answer***: DEFAULT FOR IV_TOTALDURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 default for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_CALEDARENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT FOR IV_ABSENCE_REASON IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR IV_ATTRIBUTE_2 IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' INPUTS ARE iv_start_date (date),iv_end_date (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text),IV_ATTRIBUTE_1 (Text), IV_ATTRIBUTE_2 (Text) l_duration = IV_TOTALDURATION VALID = 'Y' l_grade_name = PER_ASG_GRADE_NAME l_person_id = GET_CONTEXT(PERSON_ID,0) EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_asg_start = PER_ASG_REL_DATE_START l_asg_end = PER_ASG_REL_ACTUAL_TERMINATION_DATE L_ldg_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) l_abs_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) l_absence_entry_id = to_char(l_abs_entry_id) l_param = 'X' L_year_start_date = GREATEST(TO_DATE(TO_CHAR(EffDate,'YYYY')||'-01-01','YYYY-MM-DD'), l_asg_start) L_year_end_date = TO_DATE(TO_CHAR(EffDate,'YYYY')||'-12-31','YYYY-MM-DD') l_abs_typ_name_check = 'X' i = 1 j = 1 L_without_cert_duration = 0 l_sl_balance = 0 L_sl_days = 0 L_first_days = 0 l_asg_category = PER_ASG_EMPLOYMENT_CATEGORY l_shift = PER_ASG_BARGAINING_UNIT_CODE_NAME l_user_person_type = PER_ASG_USER_PERSON_TYPE l_sl_limit = 0 l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_union = PER_ASG_ATTRIBUTE7 l_mgr_asg_status = 'X' l_sl_limit = 5 CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_abs_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF (l_union = 'Association of Bank Officers, Peninsular Malaysia (ABOM)' OR l_union = 'National Union of Bank Employees (NUBE)' OR l_union = 'Sabah Banking Employees Union (SABAHBEU)') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please select Paternity Leave (Calendar Days).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF (l_grade_name = 'EQ.1' OR l_grade_name = 'EQ.2' OR l_grade_name = 'EQ.3' OR l_grade_name = 'EQ.4') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Please select Paternity Leave (Calendar Days).' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF l_mgr_asg_status <> 'ACTIVE' OR l_manager_id = 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) IF (l_shift = '2 Shift' OR l_shift = '3 Shift' OR l_shift = '7 Days Banking') AND MOD(l_duration,1) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_HALFDAY_NOTALLOW' RETURN VALID, ERROR_MESSAGE ) IF MOD(l_duration,0.5) <> 0 THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_HALFDAY_ERROR' RETURN VALID, ERROR_MESSAGE ) IF l_duration > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'Paternity Leave entitlement per ocassion is '||to_char(l_sl_limit)||' day(s).' ||l_union RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) CHANGE_CONTEXTS (START_DATE= L_year_start_date , END_DATE = L_year_end_date) ( WHILE (ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.EXISTS(I)) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID = ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[I]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name_check = ANC_ABS_TYP_NAME IF l_abs_entry_id <> ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i] AND (l_abs_typ_name_check = 'Paternity Leave - 1st Time Father' OR l_abs_typ_name_check = 'Paternity Leave' OR(l_abs_typ_name_check = 'Compassionate Leave' AND ANC_ABS_ENTRS_ABSENCE_REASON_ID = 300000003755052)) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED' ) AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' THEN ( L_first_days = L_first_days + 1 ) ) ) i = i + 1 ) ) IF L_sl_days + 1 > l_sl_limit THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You have utilized '||to_char(L_sl_days)||' days of Paternity Leave' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) IF ((TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') < TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(l_year_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') ) OR (TO_DATE(TO_CHAR(iv_start_date,'YYYY/MM/DD'),'YYYY/MM/DD') =< TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') AND TO_DATE(TO_CHAR(iv_end_date,'YYYY/MM/DD'),'YYYY/MM/DD') > TO_DATE(TO_CHAR(l_year_end_date,'YYYY/MM/DD'),'YYYY/MM/DD'))) AND l_asg_category != 'CONTRACT' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_ABS_OVERLAP' RETURN VALID, ERROR_MESSAGE ) ) RETURN VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates paternity working days leave applications in the UK. Ensures the duration complies with local policies, prohibits overlap between calendar years, checks the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT FOR GET_CURRENT_DATE IS '0001/01/01 00:00:00'(DATE) DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' l_current_date = TO_CHAR(GET_CURRENT_DATE()) l_current_year = SUBSTR(l_current_date,0,4) l_start_date = TO_DATE(l_current_year||'/01/01 00:00:00') l_eff_end_date = TO_DATE(l_current_year||'/05/01 00:00:00') l_eff_date = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') enrollmentStartDate = l_start_date RETURN enrollmentStartDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Determines the enrollment start date for brought forward leave (BFL) plans for employees in the UK. Uses the employee\u2019s hire date, plan enrollment date, or a specific policy date, ensuring compliance with local regulations. Returns the calculated enrollment start date.\n\n***answer***: DEFAULT FOR PER_ASG_DATE_PROBATION_END IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS '1951/01/01' DEFAULT FOR IV_ATTRIBUTE_1 IS 'X' DEFAULT FOR PER_ASG_ACTION_CODE IS 'X' DEFAULT FOR PER_ASG_JOB_NAME IS 'X' DEFAULT FOR PER_ASG_POSITION_NAME IS 'X' DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR ANC_ABS_ENTRS_USER_MODE IS 'X' DEFAULT FOR PER_ASG_MANAGER_USER_PERSON_ID IS 0 DEFAULT FOR PER_PER_PERSON_NUMBER IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE7 IS 'X' DEFAULT FOR PER_ASG_BARGAINING_UNIT_CODE_NAME IS 'X' INPUTS ARE IV_START_DATE (date),IV_END_DATE (date),IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date),IV_TOTALDURATION (Number), IV_ABSENCE_REASON (Text), IV_ATTRIBUTE_1 (Text) VALID = 'Y' EffDate = to_date(GLOBAL_PAY_INTERFACE_EXTRACTION_DATE ,'rrrr/mm/dd') l_fnd_person_number = GET_VALUE_SET('CIMB_GET_FND_PERSON') l_hr_assign_id = get_context(HR_ASSIGNMENT_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_absence_entry_id = GET_CONTEXT(ABSENCE_ENTRY_ID,0) IF isnull(l_fnd_person_number) = 'N' THEN l_fnd_person_number = 'N' CHANGE_CONTEXTS(HR_ASSIGNMENT_ID = l_hr_assign_id, effective_date = EffDate ) ( l_manager_id = PER_ASG_MANAGER_USER_PERSON_ID ) l_mgr_asg_status = GET_VALUE_SET('CIMB_GET_ASG_STATUS','|=P_MGR_PERSON_ID='||TO_CHAR(l_manager_id)) l_fnd_person_number_id = GET_VALUE_SET('CIMB_GET_FND_PERSON_ID') CHANGE_CONTEXTS(EFFECTIVE_DATE=l_effective_date,ABSENCE_ENTRY_ID = l_absence_entry_id) ( l_user_mode=ANC_ABS_ENTRS_USER_MODE ) IF (l_user_mode != 'ADMIN' AND PER_PER_PERSON_NUMBER = l_fnd_person_number) OR (l_user_mode != 'ADMIN' AND l_manager_id = TO_NUMBER(l_fnd_person_number_id)) THEN ( IF l_mgr_asg_status <> 'ACTIVE' THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_INACTIVE_MGR_ERROR' RETURN VALID, ERROR_MESSAGE ) ELSE ( l_msg = 'In' L_nxt_working_day = ADD_DAYS(EffDate,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(EffDate,2), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) IF L_chk_nxt_wrk_dur < 1 THEN ( WHILE (L_chk_nxt_wrk_dur < 1) LOOP ( L_nxt_working_day = ADD_DAYS(L_nxt_working_day,1) L_chk_nxt_wrk_dur = GET_PAY_AVAILABILITY ('ASSIGN', ADD_DAYS(EffDate,1), ADD_DAYS(L_nxt_working_day,1), 'Y', 'Y', 'Y', 'Y', 'D') l_msg = l_msg||'nx2'||TO_CHAR(L_nxt_working_day,'YYYY/MM/DD')||TO_CHAR(L_chk_nxt_wrk_dur) ) ) IF TO_DATE(TO_CHAR(L_nxt_working_day,'YYYY/MM/DD'),'YYYY/MM/DD') >= TO_DATE(TO_CHAR(IV_START_DATE,'YYYY/MM/DD'),'YYYY/MM/DD') THEN ( VALID = 'N' ERROR_MESSAGE = 'CIMB_MSG_ERROR' TOKEN_NAME[1] = 'MSG' TOKEN_VALUE[1] = 'You are submitting a late notification leave. Please change your leave date to minimum 3 days from current date' RETURN VALID, ERROR_MESSAGE, TOKEN_NAME, TOKEN_VALUE ) ) ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Calculates prorated annual leave accrual for employees under the NCC MS (National Cash & Carry Management System) in the UK. Restricts accrual during unpaid, maternity, emergency, or Hajj leave, adjusts for absence days, and aligns with local policies. Returns the accrual value and adjustments.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ABS_EXT_ACR_END_BAL IS 0 DEFAULT FOR PER_ASG_PERSON_NUMBER IS 'XXX' DEFAULT FOR UDT_Val is 'NULL' DEFAULT FOR PER_ASG_GRADE_ATTRIBUTE1 IS 'XXX' DEFAULT FOR PER_ASG_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_STANDARD_WORKING_HOURS IS 0 DEFAULT FOR HWP_EMP_WORKING_HOURS IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 IS 52.14 DEFAULT FOR PER_ASG_CONTRACT_ATTRIBUTE_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ACP_HIRE_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ASSIGNMENT_ID is 0 DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_EFFECTIVE_END_DATE IS '4712/12/31' (date) DEFAULT FOR PER_ASG_EFFECTIVE_START_DATE IS '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_DATE_START is '1951/01/01' (date) DEFAULT FOR PER_ASG_REL_LENGTH_OF_SERVICE_NEW is 0 DEFAULT_DATA_VALUE for PER_HIST_ASG_EFFECTIVE_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_PER_ENTERPRISE_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR PER_HIST_ASG_ACT_REASON_CODE IS 'No COde' DEFAULT FOR ANC_ABS_PLN_WS_CATEGORY_CD IS 'NO CODE' DEFAULT FOR PER_ASG_WORK_SCH_WORKDAY_PATTERN IS 'No' DEFAULT FOR PER_ASG_ASSIGNMENT_ID IS 0 DEFAULT FOR PER_ASG_ATTRIBUTE7 is 'X' DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER4 is 0 DEFAULT FOR PER_ASG_ATTRIBUTE_NUMBER1 is 0 DEFAULT FOR PER_ASG_ASSIGNMENT_NUMBER is 'X' DEFAULT FOR PER_ASG_GRADE_NAME is 'X' DEFAULT FOR PER_LEGAL_EMPLOYER_NAME is 'X' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE is 'X' DEFAULT FOR PER_GRADE_STEP_NAME is 'X' DEFAULT FOR PER_PER_BASIC_ATTRIBUTE_DATE1 is '0001/01/01' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01' (date) inputs are IV_ACCRUALPERIODSTARTDATE(date), IV_ACCRUALPERIODENDDATE(date), IV_CALEDARSTARTDATE (date), IV_CALEDARENDDATE (date), IV_PLANENROLLMENTSTARTDATE (date), IV_PLANENROLLMENTENDDATE(date), IV_CARRYOVER (number) assignment_id = 0 l_migration_date = '2020/04/01 00:00:00' (date) l_fy_date = '2020/04/01 00:00:00' (date) l_debug = ess_log_write(' ***** formula = EMG Annual Leave - NCC_MS_BU Accrual Matrix ***** ') l_debug = ess_log_write('Accrual Period Start Date: '+ to_char(IV_ACCRUALPERIODSTARTDATE)) l_debug = ess_log_write('Plan enrollment start date: ' + to_char(IV_PLANENROLLMENTSTARTDATE)) l_debug = ess_log_write('Calendar Start Date: ' + to_char(IV_CALEDARSTARTDATE)) l_debug = ess_log_write('Calendar End Date: ' + to_char(IV_CALEDARENDDATE)) l_debug = ess_log_write('Carryover: ' + to_char(IV_CARRYOVER)) l_debug = ess_log_write('Person id: ' + to_char(GET_CONTEXT(PERSON_ID,0))) l_debug = ess_log_write('***************Included Weekend******************'||TO_CHAR(PER_ASG_ASSIGNMENT_ID)) l_debug = ess_log_write(' Assignment Number: ' + PER_ASG_ASSIGNMENT_NUMBER) l_debug = ess_log_write('Reckonable Service Date: '+to_char(PER_PER_BASIC_ATTRIBUTE_DATE1,'DD-Mon-YYYY')) l_debug = ess_log_write('Continuous Service Date: '+ to_char(PER_ASG_REL_ATTRIBUTE_DATE1)) if (IV_CALEDARSTARTDATE < l_fy_date) then ( l_debug = ess_log_write('Effective Date is before migration date => No calculation of entitlement') accrual = 0 ) else ( BH_START_DATE = IV_ACCRUALPERIODSTARTDATE BH_END_DATE = IV_ACCRUALPERIODENDDATE Full_accrual_again = 0 l_asg_effective_end_date = PER_ASG_EFFECTIVE_END_DATE l_debug = ess_log_write('BH Start DATE:'||TO_CHAR(BH_START_DATE)||' BH End Date:'||TO_CHAR(BH_END_DATE)||' l_asg_effective_end_date '||to_char(l_asg_effective_end_date)) assignment_id = PER_ASG_ASSIGNMENT_ID LOS=0 FTE=0 Add_hours=0 accrual=0 l_length_of_service = 0 FTE=0 carryover=0 i=1 k=1 j='XX' UDT_Entry[0]= '4712/12/31 00:00:00' (date) BH=0 COMP_DATE= '4712/12/31 00:00:00' (date) ADJUST_HIRE_DATE = '4712/12/31 00:00:00' (date) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 l_fte = 1 l_column = ' ' l_days_in_year= 0 l_grade_step=' ' l_sub_date = substr(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),1,10) l_yyyy = substr(l_sub_date,1,4) l_mm = substr(l_sub_date,6,2) l_dd = substr(l_sub_date,9,2) l_debug = ess_log_write('l_sub_date: '|| l_sub_date) l_continous_date_after_addng_yrs = '1951/01/01 00:00:00' (date) if PER_PER_BASIC_ATTRIBUTE_DATE1 was defaulted then ( if PER_ASG_REL_ATTRIBUTE_DATE1 was defaulted then ( l_start_dt = ACP_HIRE_DATE l_continous_date = ACP_HIRE_DATE ) else ( l_start_dt = PER_ASG_REL_ATTRIBUTE_DATE1 l_continous_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) ) else ( l_start_dt = PER_PER_BASIC_ATTRIBUTE_DATE1 l_continous_date = PER_PER_BASIC_ATTRIBUTE_DATE1 ) t_no_of_days = DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),l_start_dt) l_debug = ess_log_write('t_no_of_days = ' + to_char(t_no_of_days)) l_length_of_service=ROUND((t_no_of_days/365),2) l_debug = ess_log_write('Length of Service: '+ to_char(l_length_of_service)) l_debug = ess_log_write('l_continous_date: '||to_char(l_continous_date)) IF(l_length_of_service>=5 AND l_length_of_service<10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,5) ) IF(l_length_of_service>=10) THEN ( l_continous_date_after_addng_yrs = ADD_YEARS(l_continous_date,10) ) l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) If IV_PLANENROLLMENTSTARTDATE > IV_CALEDARSTARTDATE THEN ( l_start_date=IV_PLANENROLLMENTSTARTDATE ) ELSE ( l_start_date=IV_CALEDARSTARTDATE ) if l_start_date<l_migration_date and IV_PLANENROLLMENTSTARTDATE<= l_fy_date then ( l_start_date = l_migration_date l_debug = ess_log_write('Calculating entitlements from migration date: '|| to_char(l_migration_date,'DD-Mon-YYYY')) ) l_debug = ess_log_write('l_start_date:'||to_char(l_start_date)||'PER_PERSON_ENTERPRISE_HIRE_DATE:'||to_char(PER_PERSON_ENTERPRISE_HIRE_DATE)||'ACP_HIRE_DATE'||to_char(ACP_HIRE_DATE)) WHILE (1=1) LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = l_start_date) ( l_debug = ess_log_write('In Loop getting assignment details') l_debug = ess_log_write('Asg Start Date: ' + to_char(PER_ASG_EFFECTIVE_START_DATE)) l_debug = ess_log_write('Asg End Date: ' + to_char(PER_ASG_EFFECTIVE_END_DATE)) l_debug = ess_log_write(' Contract Type: ' + PER_ASG_ATTRIBUTE7) l_contract_type = PER_ASG_ATTRIBUTE7 l_employer = PER_LEGAL_EMPLOYER_NAME l_grade = PER_ASG_GRADE_NAME if PER_ASG_ASSIGNMENT_STATUS_TYPE = 'INACTIVE' then (exit) l_debug = ess_log_write('Legal Employer: '+ l_employer) l_debug = ess_log_write('Grade Name: '+ l_grade) SET_INPUT ('hr_id', ASG_HR_ASG_ID) SET_INPUT ('eff_date', l_start_date) SET_INPUT ('mode', 'FTE') EXECUTE('EMG_FTE_CALL') l_fte = GET_OUTPUT('l_fte', l_fte ) l_debug = ess_log_write('l_fte ='||to_char(l_fte)) l_grade_step = PER_GRADE_STEP_NAME l_column='NCC_MS_'||l_grade_step l_debug = ess_log_write('l_continous_date_after_addng_yrs: '||to_char(l_continous_date_after_addng_yrs)) l_debug = ess_log_write('l_column: '+ l_column) accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_MS_BU_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_debug = ess_log_write('Accrual Rate: ' + to_char(accrual_rate)) IF(l_continous_date_after_addng_yrs>=l_start_date AND l_continous_date_after_addng_yrs=<PER_ASG_EFFECTIVE_END_DATE) THEN ( l_debug = ess_log_write('l_continous_date_after_addng_yrs '|| TO_CHAR(l_continous_date_after_addng_yrs)) l_los_before_ann = ((DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_continous_date))/365)-1 l_debug = ess_log_write('l_los_before_ann '||to_char(l_los_before_ann)) l_days_till_ann = (DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date))/365 l_len_of_serv_before_ann = DAYS_BETWEEN(l_continous_date_after_addng_yrs,l_start_date) LOS_PERMITABLE = TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_MS_BU_ANNUAL_LEAVE',l_column,to_char(l_los_before_ann),'0')) Full_accrual_again = l_days_till_ann*LOS_PERMITABLE*l_fte l_start_date = l_continous_date_after_addng_yrs l_debug = ess_log_write('l_los_before_ann '|| TO_CHAR(l_los_before_ann)||' l_days_till_ann '||to_char(l_days_till_ann)||' Full_accrual_again '||to_char(Full_accrual_again)||' l_start_date '||to_char(l_start_date)||' LOS_PERMITABLE '||to_char(LOS_PERMITABLE)||' l_len_of_serv_before_ann '||to_char(l_len_of_serv_before_ann)||' l_length_of_service '||to_char(l_length_of_service)) ) ELSE ( IF(l_continous_date_after_addng_yrs > PER_ASG_EFFECTIVE_END_DATE) THEN ( l_length_of_service = l_length_of_service - 1 accrual_rate=TO_NUMBER(GET_TABLE_VALUE('EMG_NCC_MS_BU_ANNUAL_LEAVE',l_column,to_char(l_length_of_service),'0')) l_length_of_service = l_length_of_service + 1 ) ) l_debug = ess_log_write('LOOP_END - '||TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'DD-Mon-YYYY')) l_end_date=PER_ASG_EFFECTIVE_END_DATE IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' THEN ( l_end_date=IV_CALEDARENDDATE ) l_days=DAYS_BETWEEN(l_end_date,l_start_date)+1 l_debug = ess_log_write('Accrual Days: '||TO_CHAR(l_days)) FTE_Accrual=accrual_rate*l_days/365*L_Fte l_debug = ess_log_write('FTE Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('BH_START_DATE - ' + to_char(BH_START_DATE)) l_debug = ess_log_write('BH_END_DATE - ' + to_char(BH_END_DATE)) l_debug = ess_log_write('ADJUST_HIRE_DATE - ' + to_char(ADJUST_HIRE_DATE)) IF(PER_PERSON_ENTERPRISE_HIRE_DATE <BH_START_DATE) THEN( COMP_DATE=BH_START_DATE ) ELSE( COMP_DATE = PER_PERSON_ENTERPRISE_HIRE_DATE ) l_debug = ess_log_write('COMP_DATE 1 - ' + to_char(COMP_DATE)) l_debug = ess_log_write('FTE_Accrual '||to_char(FTE_Accrual)) l_debug = ess_log_write('Bank_holiday '||to_char(Bank_holiday)) accrual=accrual+Full_accrual+FTE_Accrual+Bank_holiday+Full_accrual_again l_debug = ess_log_write('accrual '||to_char(accrual)) Full_accrual=0 FTE_Accrual=0 Bank_holiday=0 Full_accrual_again = 0 BH = 0 k=0 IF TO_CHAR(PER_ASG_EFFECTIVE_END_DATE,'YYYYMMDD')='47121231' OR (PER_PER_ENTERPRISE_TERMINATION_DATE = PER_ASG_EFFECTIVE_END_DATE) OR (PER_ASG_EFFECTIVE_START_DATE>IV_CALEDARENDDATE)THEN ( l_debug = ess_log_write('Loop Ended :'||to_char(PER_PER_ENTERPRISE_TERMINATION_DATE)) EXIT ) l_start_date = ADD_DAYS(PER_ASG_EFFECTIVE_END_DATE,1) ) ) ) accrual = least(accrual_rate,round(accrual,2)) l_debug = ess_log_write('accrual '||to_char(accrual)) l_carryover_limit = IV_CARRYOVER l_prorated_carryover = 0 l_debug = ess_log_write('IV_CARRYOVER ='||to_char(IV_CARRYOVER)) if IV_CALEDARSTARTDATE<l_fy_date then ( carryover = 0 ) else ( l_prorated_carryover = l_carryover_limit * l_fte if accrual >= l_prorated_carryover then ( carryover = l_prorated_carryover ) else ( carryover = accrual ) l_debug = ess_log_write('Carryover Logic Starts=> FTE: '+ to_char(l_fte)) l_debug = ess_log_write('Carryover: ' + to_char(carryover)) ) return accrual,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Validates paternity absence applications in the UK with custom rules. Ensures the employee has worked at least 3 months, the leave start date is within a specified period after the child\u2019s birth, prohibits leave during probation, verifies the manager\u2019s active status, and restricts applications before a specific date (e.g., September 2019). Returns a validity status with an error message if invalid.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_DATE_OF_DEATH is '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT for IV_TOTALDURATION is 0 DEFAULT for IV_START_DURATION is 0 DEFAULT for IV_END_DURATION is 0 DEFAULT for IV_ACTUALCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_ACTUALENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_EXPECTEDCHILDBIRTHDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDSTARTDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_PLANNEDENDDATE is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE1 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE2 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE3 is '4712/12/31 00:00:00' (date) DEFAULT for IV_INFORMATION_DATE4 is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_TYP_MAP_EVENT_TYPE_CODE is 'None' DEFAULT FOR IV_MATCHING_DATE is '4712/12/31 00:00:00' (date) INPUTS ARE IV_START_DATE,IV_END_DATE ,IV_TOTALDURATION,IV_START_DURATION,IV_END_DURATION,IV_ACTUALCHILDBIRTHDATE,IV_ACTUALSTARTDATE,IV_ACTUALENDDATE,IV_EXPECTEDCHILDBIRTHDATE,IV_PLANNEDSTARTDATE,IV_PLANNEDENDDATE,IV_INFORMATION_DATE1,IV_INFORMATION_DATE2,IV_INFORMATION_DATE3,IV_INFORMATION_DATE4,IV_MATCHING_DATE VALID='Y' ERROR_MESSAGE = 'Success' l_days_after = 0 l_event_type = ANC_ABS_TYP_MAP_EVENT_TYPE_CODE if(l_event_type = 'CHB') then ( if ( IV_EXPECTEDCHILDBIRTHDATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MAT_EDC_MISSING' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ELSE IF (l_event_type = 'PLC') then ( if ( IV_MATCHING_DATE WAS DEFAULTED ) then ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_MATCHING_DATE_MISSI' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) IF IV_EXPECTEDCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_START_DATE l_end_date = IV_END_DATE l_placement_date = IV_EXPECTEDCHILDBIRTHDATE ) IF IV_ACTUALCHILDBIRTHDATE WAS NOT DEFAULTED THEN ( l_start_date = IV_ACTUALSTARTDATE l_end_date = IV_ACTUALENDDATE l_placement_date = IV_ACTUALCHILDBIRTHDATE ) if(l_event_type = 'CHB') then ( IF (IV_EXPECTEDCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_PLANNEDSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_EXPECTEDCHILDBIRTHDATE > IV_PLANNEDSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) IF (IV_ACTUALCHILDBIRTHDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALSTARTDATE was NOT DEFAULTED) THEN ( IF( IV_ACTUALCHILDBIRTHDATE > IV_ACTUALSTARTDATE) THEN ( VALID ='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' return VALID, ERROR_MESSAGE, ERROR_CODE ) ) ) ) if(l_start_date < l_placement_date) then ( VALID='N' if(l_event_type = 'CHB') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_BIRTH' ) else if(l_event_type = 'PLC') then ( ERROR_MESSAGE = 'HRX:::HRX_GB_ABS_PAT_STA_ADOPT' ) ERROR_CODE = 'W' return VALID, ERROR_MESSAGE,ERROR_CODE ) l_days = days_between(l_end_date, l_start_date) +1 if (l_days = 7 or l_days = 14 ) then ( VALID='N' ERROR_CODE = 'W' ERROR_MESSAGE = 'EMG_PATERNITY_DAYS' return VALID, ERROR_MESSAGE,ERROR_CODE ) if (l_days = 1 or l_days = 2 or l_days = 3 or l_days = 4 or l_days = 5 or l_days = 6 or l_days = 8 or l_days = 9 or l_days = 10 or l_days = 11 or l_days = 12 or l_days = 13 ) then ( VALID='N' ERROR_CODE = 'E' ERROR_MESSAGE = 'EMG_PATERNITY_DAYS_ERROR' return VALID, ERROR_MESSAGE,ERROR_CODE ) return VALID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service and the accrual plan they are enrolled in. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.\n\nThe formula checks if the employee's citizenship code is not 'SA'. If the employee's grade is between 1 and 6 and their length of service is more than 2 years, or if the grade is 7 or 8 and the length of service is more than 1 year, or if the grade is 9A, 9B, 9C, 10, 11, or 12, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.\n\nThe formula then counts the number of dependents (infants, children, and others) and calculates the total accrual based on the number of dependents. It also checks for any dependent exit re-entry tickets and adjusts the accrual accordingly.\n\nFinally, the formula iterates through the employee's absence entries and adjusts the accrual if the absence type is 'Annual Leave' and the absence status is not 'ORA_WITHDRAWN'. If the absence attribute is 'Both', it further adjusts the accrual based on the number of tickets for adults, children, and infants.\n\nThe final accrual and carryover values are returned.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE4 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER4 is 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER5 is 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER6 is 0 INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_char(effdate,'YYYY') l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_char(effdate,'YYYY') accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 5000 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='C') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) if (PER_EXT_CONT_CONTACT_TYPE[J]='S' OR PER_EXT_CONT_CONTACT_TYPE[J]='P' OR PER_EXT_CONT_CONTACT_TYPE[J]='W' OR PER_EXT_CONT_CONTACT_TYPE[J]='H') then ( if (PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_count = l_count + 1 ) ) J=J+1 ) l_accrual_count = 0 l_accrual_count = l_infant_count + l_child_count + l_count l_total_count = 0 l_adult_ticket = 0 l_child_ticket = 0 l_infant_ticket = 0 j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Exit Re-entry') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) accrual = accrual*l_accrual_count l_total_count = l_adult_ticket + l_child_ticket + l_infant_ticket if(l_total_count <> 0) then ( accrual = accrual - l_total_count ) i=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( if(ANC_ABS_TYP_NAME = 'Annual Leave') then ( if(ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')then ( if(ANC_ABS_ENTRS_ATTRIBUTE4 = 'Both') then ( if(l_adult_ticket = 0) then ( l_adult_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER4 ) if(l_child_ticket = 0) then ( l_child_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER5 ) if(l_infant_ticket = 0) then ( l_infant_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER6 ) l_total_count = l_adult_ticket + l_child_ticket + l_infant_ticket start_year = to_char(ANC_ABS_ENTRS_START_DATE,'YYYY') temp= ESS_LOG_WRITE('ATTRIBUTE=' + ANC_ABS_ENTRS_ATTRIBUTE4) if(effyear = start_year) then ( if (accrual => 1) then ( accrual = accrual - l_total_count ) ) ) ) ) ) ) i=i+1 ) ) ) return accrual,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to validate the total duration of unpaid leave an employee can take within a five-year period. It checks the total duration of unpaid leave, including the current request and any previously approved or submitted unpaid leave within the last five years. If the total duration exceeds 90 days, the formula sets the validation status to 'N' (not valid) and provides an error message indicating that the employee is only eligible for 90 days of unpaid leave in five years. If the total duration is within the 90-day limit, the validation status is set to 'Y' (valid).\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE start_year_char = to_char(date_start,'YYYY') start_year = to_number(start_year_char) - 5 l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(start_year),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Unpaid Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD='APPROVED')) then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF (l_applicable_abs_days <= 90) then ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula validates the number of days an employee can apply for leave within a year, ensuring compliance with specific rules and restrictions. The formula checks the total duration of leave taken within a five-year period and ensures it does not exceed 90 days. It also verifies that the employee does not have any remaining annual leave balance before approving unpaid leave. Additionally, the formula restricts leave applications if the employee has completed one year of service or if the leave dates fall within a specific restricted period (April to December) and the user is not authorized to make changes during write a  period. The formula returns a validation status and an error message if any of the conditions are not met.\n\n***answer***: DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_LEGAL_ENTITY_ID IS 0 DEFAULT FOR PER_ASG_Position_NAME IS 'X' DEFAULT FOR PER_Position_NAME IS 'X' DEFAULT FOR PER_Position_FUNCTION_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR ACP_HIRE_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_DATE_PROBATION_END is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'A' INPUTS ARE iv_start_date (date), iv_end_date (date) l_start_date = TO_DATE('01/01/2016') l_end_date = TO_DATE('31/12'||'/'||TO_CHAR(iv_start_date,'YYYY'),'DD/MM/YYYY') VALID='Y' i=1 L_Absence_Type_Name = ANC_ABS_TYP_NAME l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) L_People_Group = 'X' L_Col_Name1 = 'Cambridge' L_Col_Name2 = 'Others' L_LE_ID = PER_ASG_LEGAL_ENTITY_ID L_Position = PER_ASG_Position_NAME L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_Eligible_Duration = 0 L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Eff_Dt = IV_START_DATE SET_INPUT('IV_PERSON_ID', L_Person_Id) SET_INPUT('IV_TERM_ID', L_Term_Id) SET_INPUT('IV_EFF_DT', L_Eff_Dt) l_log = 'XX' L_Eligible_Duration = 5 l_accrual_units = 0 effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) l_log = ESS_LOG_WRITE(TO_CHAR(L_Eligible_Duration)) l_log = ESS_LOG_WRITE(L_Position) first_leave_date = TO_DATE('0001/01/01 00:00:00') L_Duration = round(DAYS_BETWEEN(IV_END_DATE,IV_START_DATE)) L_Prev_Duration = 0 L_Total_Duration = 0 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(1) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[1]) ( if(l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( first_leave_date = ANC_ABS_ENTRS_START_DATE ) EXIT ) ) ) first_leave_date = ACP_HIRE_DATE first_leave_year = to_number(to_char(first_leave_date,'YYYY')) new_end_year = to_number(to_char(first_leave_date,'YYYY')) +5 new_end_date = TO_DATE(TO_CHAR(first_leave_date,'DD')||'/'||TO_CHAR(first_leave_date,'MM')||'/'||to_char(new_end_year),'DD/MM/YYYY') start_leave_date = IV_START_DATE start_leave_year = to_number(to_char(start_leave_date,'YYYY')) diff_mod = 0 if (IV_START_DATE >= new_end_date) then ( diff_years = start_leave_year - first_leave_year diff_mod = mod(diff_years,5) new_end_year = start_leave_year + (5-diff_mod) first_leave_year = start_leave_year - diff_mod new_end_date = TO_DATE(TO_CHAR(first_leave_date,'DD')||'/'||TO_CHAR(first_leave_date,'MM')||'/'||to_char(new_end_year),'DD/MM/YYYY') first_leave_date = TO_DATE(TO_CHAR(ACP_HIRE_DATE,'DD')||'/'||TO_CHAR(ACP_HIRE_DATE,'MM')||'/'||to_char(first_leave_year),'DD/MM/YYYY') ) CHANGE_CONTEXTS(START_DATE=first_leave_date, END_DATE=new_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if(l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( L_Prev_Duration = L_Prev_Duration + ANC_ABS_ENTRS_DURATION ) ) i= i+1 ) L_Total_Duration = L_Prev_Duration + L_Duration l_log = ESS_LOG_WRITE(TO_CHAR(L_Total_Duration)) l_log = ESS_LOG_WRITE(TO_CHAR(L_Prev_Duration)) ) L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Eff_Dt = IV_START_DATE l_accrual_units = 0 l_plan_id = 300000001445315 SET_INPUT('IV_PERSON_ID', L_Person_Id) SET_INPUT('IV_TERM_ID', L_Term_Id) SET_INPUT('IV_EFF_DT', L_Eff_Dt) SET_INPUT('IV_PLAN_ID',l_plan_id) EXECUTE('Unpaid Leave Balance') l_accrual_units = GET_OUTPUT('L_Leave_Balance', 0) IF (l_accrual_units > 1) THEN ( VALID = 'N' ERROR_MESSAGE = 'Annual Leave Balance greater than 0.Available balance as on '+to_char(L_Eff_Dt) + ' is : '+to_char(l_accrual_units) ) Limit_date = ADD_MONTHS(ACP_HIRE_DATE,12) If (IV_START_DATE > Limit_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'You are not eligibile as 1 year of service is completed' ) User_name = 'x' User_name = GET_VALUE_SET('LOGGED_IN_USER') Res_end_date='2020/12/31 00:00:00' (DATE) Res_start_date='2020/04/01 00:00:00' (DATE) If (to_date(to_char(iv_start_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_start_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to december should go through HR' ) ) If (to_date(to_char(iv_end_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_end_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to december should go through HR' ) ) return VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula is designed to calculate the proration factor for leave accrual. The proration factor is set to 1, indicating that there is no proration applied, and the full leave accrual is granted regardless of the employee's hire or termination dates. write a  formula ensures that employees receive their full leave entitlement without any adjustments based on their length of service or other factors.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' prorationFactor = 1 return prorationFactor",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service and the accrual plan they are enrolled in. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.\n\nThe formula checks if the employee's citizenship code is not 'SA'. If the employee's grade is between 1 and 6 and their length of service is more than 2 years, or if the grade is 7 or 8 and the length of service is more than 1 year, or if the grade is 9A, 9B, 9C, 10, 11, or 12, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.\n\nThe formula then counts the number of dependents (infants, children, and others) and calculates the total accrual based on the number of dependents. It also checks for any dependent ticket requests and adjusts the accrual accordingly.\n\nFinally, the formula iterates through the employee's absence entries and adjusts the accrual if the absence type is 'Annual Leave' and the absence status is not 'ORA_WITHDRAWN'. If the absence attribute is 'Employee only' or 'Both', it further adjusts the accrual based on the number of tickets for adults, children, and infants.\n\nThe final accrual and carryover values are returned.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE7 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_num(to_char(effdate,'YYYY')) accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 1 AND PER_ASG_ATTRIBUTE8='Y') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='C') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) if (PER_EXT_CONT_CONTACT_TYPE[J]='S') then ( if (PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_count = l_count + 1 ) ) J=J+1 ) j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Ticket Request') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) i=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( if(ANC_ABS_TYP_NAME = 'Annual Leave') then ( if(ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')then ( if(ANC_ABS_ENTRS_ATTRIBUTE7 = 'Employee only' OR ANC_ABS_ENTRS_ATTRIBUTE7 = 'Both') then ( start_year = to_num(to_char(ANC_ABS_ENTRS_START_DATE,'YYYY')) temp= ESS_LOG_WRITE('ATTRIBUTE=' + ANC_ABS_ENTRS_ATTRIBUTE7) if(effyear = start_year) then ( if (accrual => 1) then ( accrual = accrual - 1 ) ) ) ) ) ) ) i=i+1 ) ) ) return accrual,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the proration factor for leave accrual based on the employee's hire and termination dates within the current month and year. If the employee's hire date falls within the current month and year, the formula prorates the leave based on the number of days worked in that month. Similarly, if the termination date falls within the current month and year, the formula prorates the leave based on the number of days worked up to the termination date. If neither condition is met, the proration factor is set to 1, indicating no proration. write a  ensures that the leave accrual is accurately adjusted based on the employee's hire and termination dates.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' l_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days) hire_year_number = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'yyyy')) Termination_year_number = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'yyyy')) current_year_number = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'yyyy')) hire_month_no= to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'mm')) Termination_month_no= to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'mm')) current_month_no = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'mm')) no_of_days_month = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd')) no_of_days_month1 = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd')) Last_date_Hire_month = LAST_DAY(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) Last_date_terminate_month = LAST_DAY(PER_ASG_REL_ACTUAL_TERMINATION_DATE) Las_day_Hire = to_num(to_char(Last_date_Hire_month, 'dd')) Last_day_terminate_month = to_num(to_char(Last_date_terminate_month, 'dd')) if (ANC_ABS_PLN_NAME='Annual Leave Plan') then( if(hire_year_number = current_year_number AND hire_month_no = current_month_no) then ( Days = DAYS_BETWEEN(Last_date_Hire_month,PER_ASG_REL_ORIGINAL_DATE_OF_HIRE)+1 prorationFactor = Days/Las_day_Hire ) Else if(Termination_year_number = current_year_number AND Termination_month_no = current_month_no) Then ( First_date_of_terminate_month = TRUNC(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'MONTH') Days = DAYS_BETWEEN(PER_ASG_REL_ACTUAL_TERMINATION_DATE,First_date_of_terminate_month)+1 prorationFactor = Days/Last_day_terminate_month ) else ( prorationFactor = 1.0 ) ) return prorationFactor",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula validates the number of days an employee can apply for leave within a year, ensuring compliance with specific rules and restrictions. The formula checks the total duration of leave taken within a year and ensures it meets the following conditions:\n\nIf the leave duration is less than 12 days and the reason is related to salary advance (e.g., \"Local with Salary Advance,\" \"External with Salary Advance,\" etc.), the leave is not eligible for salary advance.\nIf the employee's citizenship is \"Saudi Arabia\" and the reason involves a ticket (e.g., \"External with Ticket,\" \"External with Ticket & Exit Re-entry,\" etc.), the leave is not eligible for a ticket.\nThe formula returns a validation status and an error message if any of the conditions are not met\n\n***answer***: DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_LEGAL_ENTITY_ID IS 0 DEFAULT FOR PER_ASG_Position_NAME IS 'X' DEFAULT FOR PER_Position_NAME IS 'X' DEFAULT FOR PER_Position_FUNCTION_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'X' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_DATE_PROBATION_END is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'A' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_NAME is 'X' DEFAULT FOR IV_ABSENCE_REASON IS ' ' INPUTS ARE iv_start_date (date), iv_end_date (date), IV_ABSENCE_REASON l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') VALID='Y' i=1 L_Absence_Type_Name = ANC_ABS_TYP_NAME l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) L_People_Group = 'X' L_Col_Name1 = 'Cambridge' L_Col_Name2 = 'Others' L_LE_ID = PER_ASG_LEGAL_ENTITY_ID L_Position = PER_ASG_Position_NAME L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_Eligible_Duration = 0 l_citizenship = PER_PER_CITIZENSHIP_LEG_NAME l_log = 'XX' reason = IV_ABSENCE_REASON L_Eligible_Duration = 5 l_log = ESS_LOG_WRITE(TO_CHAR(L_Eligible_Duration)) l_log = ESS_LOG_WRITE(L_Position) L_Duration = round(DAYS_BETWEEN(IV_END_DATE,IV_START_DATE)) L_Prev_Duration = 0 L_Total_Duration = 0 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if(l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( L_Prev_Duration = L_Prev_Duration + ANC_ABS_ENTRS_DURATION ) ) i=i+1 ) ) L_Total_Duration = L_Prev_Duration + L_Duration l_log = ESS_LOG_WRITE(TO_CHAR(L_Total_Duration)) l_log = ESS_LOG_WRITE(TO_CHAR(L_Prev_Duration)) IF(L_Duration < 12 AND reason = 'Local with Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF(L_Duration < 12 AND reason = 'External with Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF(L_Duration < 12 AND reason = 'External with Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF(L_Duration < 12 AND reason = 'External with Ticket & Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF(L_Duration < 12 AND reason = 'External with Ticket, Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Leaves less than 12 days are not eligibile for Salary Advance' ) IF (l_citizenship = 'Saudi Arabia' AND reason = 'External with Ticket') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Only Non-Saudi are eleigible for Tickets' ) IF (l_citizenship = 'Saudi Arabia' AND reason = 'External with Ticket & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Only Non-Saudi are eleigible for Tickets' ) IF (l_citizenship = 'Saudi Arabia' AND reason = 'External with Ticket & Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Only Non-Saudi are eleigible for Tickets' ) IF (l_citizenship = 'Saudi Arabia' AND reason = 'External with Ticket, Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'ANC_LEAVE_VALIDATION_ERROR'+ 'Only Non-Saudi are eleigible for Tickets' ) return VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula validates the total duration of unpaid leave an employee can take within a five-year period. It checks the total duration of unpaid leave, including the current request and any previously approved or submitted unpaid leave within the last five years. If the total duration exceeds 90 days, the formula sets the validation status to 'N' (not valid) and provides an error message indicating that the employee is only eligible for 90 days of unpaid leave in five years. If the total duration is within the 90-day limit, the validation status is set to 'Y' (valid). \n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' default for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is ' ' DEFAULT FOR PER_ASG_WORK_TERMS_ASSIGNMENT_ID is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) lc_plan_name ='Annual Leave Plan' VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE ln_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) ln_work_term_asg_id = PER_ASG_WORK_TERMS_ASSIGNMENT_ID ln_person_id = GET_CONTEXT(PERSON_ID,0) ld_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) ln_leg_group_id = GET_CONTEXT(LEGISLATIVE_DATA_GROUP_ID,0) start_year_char = to_char(date_start,'YYYY') start_year = to_number(start_year_char) - 5 l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(start_year),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if ((l_abs_typ_name ='Unpaid Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='COMPLETED' or ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' or ANC_ABS_ENTRS_APPROVAL_STATUS_CD ='APPROVED' OR ANC_ABS_ENTRS_APPROVAL_STATUS_CD='A')) then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 90 THEN ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for only 90 days of Unpaid leave in 5 years' return VALID, ERROR_MESSAGE ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service and the accrual plan they are enrolled in. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.\n\nThe formula checks if the employee's citizenship code is not 'SA'. If the employee's grade is between 1 and 6 and their length of service is more than 2 years, or if the grade is 7 or 8 and the length of service is more than 1 year, or if the grade is 9A, 9B, 9C, 10, 11, or 12, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.\n\nAdditionally, if the employee's grade is S2, S1, I2, I1, M4, M3, M2, M1, E2, or E1, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.\n\nThe formula then counts the number of dependents (infants, children, and others) and calculates the total accrual based on the number of dependents. It also checks for any dependent ticket requests and adjusts the accrual accordingly.\n\nThe final accrual and carryover values are returned.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE7 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_num(to_char(effdate,'YYYY')) accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 1 AND PER_ASG_ATTRIBUTE8='Y') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = 'S2' OR PER_ASG_GRADE_NAME = 'S1' OR PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'I1' OR PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'M3' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'E1') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='C') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) if (PER_EXT_CONT_CONTACT_TYPE[J]='S') then ( if (PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_count = l_count + 1 ) ) J=J+1 ) j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Ticket Request') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) ) carryover =0 return accrual,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service and the accrual plan they are enrolled in. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.\n\nThe formula checks if the employee's citizenship code is not 'SA'. If the employee's grade is between 1 and 6 and their length of service is more than 2 years, or if the grade is 7 or 8 and the length of service is more than 1 year, or if the grade is 9A, 9B, 9C, 10, 11, or 12, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 0.\n\nAdditionally, if the employee's grade is S2, S1, I2, I1, M4, M3, M2, M1, E2, or E1, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 0.\n\nThe formula then counts the number of dependents (infants, children, and others) and calculates the total accrual based on the number of dependents. It also checks for any dependent ticket requests and adjusts the accrual accordingly.\n\nFinally, the formula iterates through the employee's absence entries and adjusts the accrual if the absence type is 'Annual Leave' and the absence status is not 'ORA_WITHDRAWN'. If the absence attribute is 'Both', it further adjusts the accrual based on the number of tickets for adults, children, and infants.\n\nThe final accrual and carryover values are returned.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE7 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER4 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 is 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER2 is 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE_NUMBER3 is 0 INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_char(effdate,'YYYY') l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_char(effdate,'YYYY') l_log = 'XX' accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 0 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 0 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 0 ) if (PER_ASG_GRADE_NAME = 'S2' OR PER_ASG_GRADE_NAME = 'S1' OR PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'I1' OR PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'M3' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'E1') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Dependent',PER_ASG_GRADE_NAME)) carryover = 0 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='Brother' OR PER_EXT_CONT_CONTACT_TYPE[J]='Daughter' OR PER_EXT_CONT_CONTACT_TYPE[J]='Sister' OR PER_EXT_CONT_CONTACT_TYPE[J]='Son' OR PER_EXT_CONT_CONTACT_TYPE[J]='Father' OR PER_EXT_CONT_CONTACT_TYPE[J]='Husband' OR PER_EXT_CONT_CONTACT_TYPE[J]='ORA_HRX_IN_LAW' OR PER_EXT_CONT_CONTACT_TYPE[J]='Mother' OR PER_EXT_CONT_CONTACT_TYPE[J]='S' OR PER_EXT_CONT_CONTACT_TYPE[J]='Wife') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Yes') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) J=J+1 ) l_log = ESS_LOG_WRITE('Accrual1: '||TO_CHAR(accrual)) l_log = ESS_LOG_WRITE('infant1: '||TO_CHAR(l_infant_count)) l_log = ESS_LOG_WRITE('child1: '||TO_CHAR(l_child_count)) l_log = ESS_LOG_WRITE('Count1: '||TO_CHAR(l_count)) l_accrual_count = 0 l_accrual_count = l_infant_count + l_child_count + l_count l_total_count = 0 l_adult_ticket = 0 l_child_ticket = 0 l_infant_ticket = 0 j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Ticket Request') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) accrual = accrual*l_accrual_count l_total_count = l_adult_ticket + l_child_ticket + l_infant_ticket if(l_total_count <> 0) then ( accrual = accrual - l_total_count ) l_log = ESS_LOG_WRITE('Accrual2: '||TO_CHAR(accrual)) l_log = ESS_LOG_WRITE('infant2: '||TO_CHAR(l_infant_count)) l_log = ESS_LOG_WRITE('child2: '||TO_CHAR(l_child_count)) l_log = ESS_LOG_WRITE('Count2: '||TO_CHAR(l_count)) i=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( if(ANC_ABS_TYP_NAME = 'Annual Leave') then ( if(ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')then ( if(ANC_ABS_ENTRS_ATTRIBUTE7 = 'Both') then ( if(l_adult_ticket = 0) then ( l_adult_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER1 ) if(l_child_ticket = 0) then ( l_child_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER2 ) if(l_infant_ticket = 0) then ( l_infant_ticket = ANC_ABS_ENTRS_ATTRIBUTE_NUMBER3 ) l_total_count = l_adult_ticket + l_child_ticket + l_infant_ticket start_year = to_char(ANC_ABS_ENTRS_START_DATE,'YYYY') temp= ESS_LOG_WRITE('ATTRIBUTE=' + ANC_ABS_ENTRS_ATTRIBUTE7) if(effyear = start_year) then ( if (accrual => 1) then ( accrual = accrual - l_total_count ) ) ) ) ) ) ) i=i+1 ) ) ) return accrual,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the proration factor for leave accrual based on the employee's hire and termination dates within the current month and year. If the employee's hire date falls within the current month and year, the formula prorates the leave based on the number of days worked in that month. Similarly, if the termination date falls within the current month and year, the formula prorates the leave based on the number of days worked up to the termination date. If neither condition is met, the proration factor is set to 1, indicating no proration. write a  ensures that the leave accrual is accurately adjusted based on the employee's hire and termination dates.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for PER_ASG_REL_ACTUAL_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' l_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days) hire_year_number = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'yyyy')) Termination_year_number = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'yyyy')) current_year_number = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'yyyy')) hire_month_no= to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'mm')) Termination_month_no= to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'mm')) current_month_no = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'mm')) no_of_days_month = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd')) no_of_days_month1 = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd')) Last_date_Hire_month = LAST_DAY(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) Last_date_terminate_month = LAST_DAY(PER_ASG_REL_ACTUAL_TERMINATION_DATE) Las_day_Hire = to_num(to_char(Last_date_Hire_month, 'dd')) Last_day_terminate_month = to_num(to_char(Last_date_terminate_month, 'dd')) if (ANC_ABS_PLN_NAME='Annual Leave Plan') then( if(hire_year_number = current_year_number AND hire_month_no = current_month_no) then ( Days = DAYS_BETWEEN(Last_date_Hire_month,PER_ASG_REL_ORIGINAL_DATE_OF_HIRE)+1 prorationFactor = Days/Las_day_Hire ) Else if(Termination_year_number = current_year_number AND Termination_month_no = current_month_no) Then ( First_date_of_terminate_month = TRUNC(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'MONTH') Days = DAYS_BETWEEN(PER_ASG_REL_ACTUAL_TERMINATION_DATE,First_date_of_terminate_month)+1 prorationFactor = Days/Last_day_terminate_month ) else ( prorationFactor = 1.0 ) ) return prorationFactor",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service and the accrual plan they are enrolled in. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.\n\nThe formula checks if the employee's citizenship code is not 'SA'. If the employee's grade is between 1 and 6 and their length of service is more than 2 years, or if the grade is 7 or 8 and the length of service is more than 1 year, or if the grade is 9A, 9B, 9C, 10, 11, or 12, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.\n\nAdditionally, if the employee's grade is S2, S1, I2, I1, M4, M3, M2, M1, E2, or E1, the formula retrieves the accrual value from a table based on the grade and sets the carryover to 5000.\n\nThe formula then counts the number of dependents (infants, children, and others) and calculates the total accrual based on the number of dependents. It also checks for any dependent exit re-entry tickets and adjusts the accrual accordingly.\n\nFinally, the formula iterates through the employee's absence entries and adjusts the accrual if the absence type is 'Annual Leave' and the absence status is not 'ORA_WITHDRAWN'. If the absence attribute is 'Employee Only' or 'Both', it further adjusts the accrual based on the number of tickets for adults, children, and infants.\n\nThe final accrual and carryover values are returned.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE4 is ' ' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_PER_PERSON_ID IS -1 DEFAULT_DATA_VALUE for PER_PER_DOR_DOCUMENT_TYPE_NAME is ' ' DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2 is 0 DEFAULT_DATA_VALUE for PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3 is 0 DEFAULT_DATA_VALUE for PER_EXT_CONT_DATE_OF_BIRTH is '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE for PER_EXT_CONT_FIRST_NAME is 'N' DEFAULT_DATA_VALUE FOR PER_EXT_CONT_CONTACT_TYPE IS 'X' DEFAULT_DATA_VALUE FOR PER_PER_CONTACT_ATTRIBUTE1 IS 'X' INPUTS ARE IV_ACCRUAL l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_start_date = TO_DATE('01/01/2016','DD/MM/YYYY') l_end_date = TO_DATE('31/12/4712','DD/MM/YYYY') effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) effyear = to_num(to_char(effdate,'YYYY')) accrual = 0 IF(PER_PER_CITIZENSHIP_LEG_CODE<>'SA') then ( if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 2) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '1' OR PER_ASG_GRADE_NAME = '2' OR PER_ASG_GRADE_NAME = '3' OR PER_ASG_GRADE_NAME = '4' OR PER_ASG_GRADE_NAME = '5' OR PER_ASG_GRADE_NAME = '6') AND l_length_of_service > 1 AND PER_ASG_ATTRIBUTE8='Y') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if ((PER_ASG_GRADE_NAME = '7' OR PER_ASG_GRADE_NAME = '8') AND l_length_of_service > 1) then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) if (PER_ASG_GRADE_NAME = '9A' OR PER_ASG_GRADE_NAME = '9B' OR PER_ASG_GRADE_NAME = '9C' OR PER_ASG_GRADE_NAME = '10' OR PER_ASG_GRADE_NAME = '11' OR PER_ASG_GRADE_NAME = '12') then ( accrual = TO_NUM(GET_TABLE_VALUE('Ticket','Employee',PER_ASG_GRADE_NAME)) carryover = 5000 ) J=1 l_count=0 l_infant_count = 0 l_child_count = 0 WHILE (PER_EXT_CONT_PER_PERSON_ID.EXISTS(J)) LOOP ( l_contact_person_id=PER_EXT_CONT_PER_PERSON_ID[J] if (PER_EXT_CONT_CONTACT_TYPE[J]='C') then ( if(PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_child_age_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_EXT_CONT_DATE_OF_BIRTH[J]) l_child_age = l_child_age_days/365 if (l_child_age < 2 ) then ( l_infant_count = l_infant_count + 1 ) if (l_child_age < 12 ) then ( l_child_count = l_child_count + 1 ) if (l_child_age > 12 ) then ( l_count = l_count + 1 ) ) ) if (PER_EXT_CONT_CONTACT_TYPE[J]='S') then ( if (PER_PER_CONTACT_ATTRIBUTE1[J] = 'Y') then ( l_count = l_count + 1 ) ) J=J+1 ) j=1 while PER_PER_DOR_DOCUMENT_TYPE_NAME.exists(j) loop ( if ( PER_PER_DOR_DOCUMENT_TYPE_NAME[j] = 'Dependent Exit Re-entry') then ( l_adult_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER1[j] l_child_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER2[j] l_infant_ticket = PER_PER_DOR_DEI_ATTRIBUTE_NUMBER3[j] ) j=j+1 ) i=1 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS (ABSENCE_TYPE_ID = ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( if(ANC_ABS_TYP_NAME = 'Annual Leave') then ( if(ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN')then ( if(ANC_ABS_ENTRS_ATTRIBUTE4 = 'Employee Only' OR ANC_ABS_ENTRS_ATTRIBUTE4 = 'Both') then ( start_year = to_num(to_char(ANC_ABS_ENTRS_START_DATE,'YYYY')) temp= ESS_LOG_WRITE('ATTRIBUTE=' + ANC_ABS_ENTRS_ATTRIBUTE4) if(effyear = start_year) then ( if (accrual => 1) then ( accrual = accrual - 1 ) ) ) ) ) ) ) i=i+1 ) ) ) return accrual,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula validates the total duration of sick leave an employee can take within a year. It checks the total duration of sick leave, including the current request and any previously approved or submitted sick leave within the current year. If the total duration exceeds 120 days, the formula sets the validation status to 'N' (not valid) and provides an error message indicating that the employee is only eligible for 120 days of sick leave in a year. If the total duration is within the 120-day limit, the validation status is set to 'Y' (valid).\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Sick Leave' AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD='APPROVED')) then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 120 THEN ( VALID = 'N' ERROR_MESSAGE = 'You are eligible for only 120 days of Sick leave in an year' return VALID, ERROR_MESSAGE ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula validates the number of days an employee can apply for leave within a year, ensuring compliance with specific rules and restrictions. The formula includes several key validations:\n\nDuration of Leave: The leave duration must be at least one day.\nSaudi and Non-Saudi Validation: Saudi employees and certain non-Saudi employees cannot apply for annual leave with specific reasons such as \"External with Ticket,\" \"External with Exit Re-entry,\" etc. They must change the leave reason to \"Local\" or \"Local with Salary Advance.\"\nWork Schedule Validation: The formula checks if the leave starts or ends one day before or after a weekend based on the employee's work schedule. If there is already a leave ending or starting on the weekend, the new leave cannot be applied.\nTicket Balance Validation: The formula validates the ticket balance for employees applying for leave with reasons involving tickets. Employees cannot apply for tickets before completing one year in the organization. Additionally, employees cannot apply for tickets for themselves or their dependents more than once in the contractual year.\nThe formula returns a validation status and an error message if any of the conditions are not met.\n\n***answer***: DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '0001/01/01 00:00:00' (date) DEFAULT FOR PER_ASG_LEGAL_ENTITY_ID IS 0 DEFAULT FOR PER_ASG_Position_NAME IS 'X' DEFAULT FOR PER_Position_NAME IS 'X' DEFAULT FOR ACP_HIRE_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR PER_Position_FUNCTION_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 IS 'X' DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'X' DEFAULT FOR PER_ASG_DATE_PROBATION_END is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'A' DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS 'A' DEFAULT FOR PER_ASG_PEOPLE_GROUP_SEGMENT1 is 'X' DEFAULT FOR PER_WORK_SCHEDULE_EXCEPTION_CODE is 'X' DEFAULT FOR PER_WORK_SCHEDULE_EXCEPTION_MEANING is 'X' DEFAULT FOR PER_WORK_SCHEDULE_EXCEPTION_LOOKUP_MEANING is 'X' DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_START_DATE_TIME IS '0001/01/01 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_END_DATE_TIME IS '4712/12/31 00:00:00' (DATE) DEFAULT_DATA_VALUE FOR PER_EXT_CAL_COVERAGE_COVERAGE_NODE IS 'X' DEFAULT FOR IV_ABSENCE_REASON IS ' ' DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_REASON_ID IS 0 DEFAULT for ANC_ABS_ENTRS_ATTRIBUTE1 is 'XX' DEFAULT FOR IV_ATTRIBUTE_1 is 'XX' DEFAULT FOR PER_ASG_ATTRIBUTE12 is 'FRI-SAT' DEFAULT FOR PER_PER_PERSON_NUMBER is '0' INPUTS ARE iv_start_date (date), iv_end_date (date), IV_ABSENCE_REASON, IV_ATTRIBUTE_1 l_start_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-01-01','YYYY-MM-DD') l_end_date = TO_DATE(TO_CHAR(iv_start_date,'YYYY')||'-12-31','YYYY-MM-DD') VALID='Y' i=1 L_Absence_Type_Name = ANC_ABS_TYP_NAME l_absence_type_id = GET_CONTEXT(ABSENCE_TYPE_ID,0) flag = 0 L_People_Group = 'X' L_Col_Name1 = 'Cambridge' L_Col_Name2 = 'Others' L_LE_ID = PER_ASG_LEGAL_ENTITY_ID L_Position = PER_ASG_Position_NAME L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_Eligible_Duration = 0 l_citizenship = PER_ASG_PEOPLE_GROUP_SEGMENT1 l_log = 'XX' reason = IV_ABSENCE_REASON l_ticket = IV_ATTRIBUTE_1 reason1 = 300000035329930 reason2 = 300000035329932 reason3 = 300000035329934 reason4 = 300000035329936 L_Eligible_Duration = 5 duration = 0 l_log = ESS_LOG_WRITE(TO_CHAR(L_Eligible_Duration)) l_log = ESS_LOG_WRITE(L_Position) L_Duration = round(DAYS_BETWEEN(IV_END_DATE,IV_START_DATE)) effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) notice_period = round(DAYS_BETWEEN(IV_START_DATE,effdate)) L_Prev_Duration = 0 L_Total_Duration = 0 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if(l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'DENIED') then ( L_Prev_Duration = L_Prev_Duration + ANC_ABS_ENTRS_DURATION ) ) i=i+1 ) ) L_Total_Duration = L_Prev_Duration + L_Duration l_log = ESS_LOG_WRITE(TO_CHAR(L_Total_Duration)) l_log = ESS_LOG_WRITE(TO_CHAR(L_Prev_Duration)) User_name = 'x' User_name = GET_VALUE_SET('LOGGED_IN_USER') Res_end_date='2020/09/30 00:00:00' (DATE) Res_start_date='2020/04/01 00:00:00' (DATE) If (to_date(to_char(iv_start_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_start_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to september should go through HR' RETURN VALID, ERROR_MESSAGE ) ) If (to_date(to_char(iv_end_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_end_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to september should go through HR' RETURN VALID, ERROR_MESSAGE ) ) IF(L_Duration < 1 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'Duration of leave cannot be less then 1 day.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Exit Re-entry* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket & Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket & Salary Advance* reason please change leave reson to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket, Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket, Salary Advance & Exit Re-entry* reason please change leave reson to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket & Exit Re-entry* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Salary Advance & Exit Re-entry') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Salary Advance & Exit Re-entry* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Salary Advance* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) IF ((l_citizenship = 'Saudi' OR l_citizenship = 'Non Saudi-Other') AND reason = 'External with Ticket & Salary Advance') THEN ( VALID = 'N' ERROR_MESSAGE = 'Saudi employee cannot apply annual leave with *External with Ticket & Salary Advance* reason, please change leave reason to *Local* OR *Local with Salary Advance*.' RETURN VALID, ERROR_MESSAGE ) pre_weekend_date = TO_DATE('0001/01/01','YYYY/MM/DD') pre_weekend_day = 'XX' post_weekend_date = TO_DATE('0001/01/01','YYYY/MM/DD') post_weekend_day = 'XX' Work_schedule_day1 = SUBSTR(PER_ASG_ATTRIBUTE12,1,3) Work_schedule_day2 = SUBSTR(PER_ASG_ATTRIBUTE12,5,7) previous_date1 = ADD_DAYS(IV_START_DATE,-1) previous_date2 = ADD_DAYS(IV_START_DATE,-2) previous_day1 = GET_DATE_DAY_OF_WEEK(previous_date1) previous_day2 = GET_DATE_DAY_OF_WEEK(previous_date2) next_date1 = ADD_DAYS(IV_END_DATE,1) next_date2 = ADD_DAYS(IV_END_DATE,2) next_day1 = GET_DATE_DAY_OF_WEEK(next_date1) next_day2 = GET_DATE_DAY_OF_WEEK(next_date2) IF(previous_day1 = Work_schedule_day1) THEN ( pre_weekend_date = add_days(IV_START_DATE,-2) pre_weekend_day = GET_DATE_DAY_OF_WEEK(pre_weekend_date) ) IF (previous_day1 = Work_schedule_day2 AND previous_day2 = Work_schedule_day1) OR (previous_day1 = Work_schedule_day1 AND previous_day2 = Work_schedule_day2)THEN ( pre_weekend_date = add_days(IV_START_DATE,-3) pre_weekend_day = GET_DATE_DAY_OF_WEEK(pre_weekend_date) ) IF(next_day1 = Work_schedule_day1) THEN ( post_weekend_date = add_days(IV_END_DATE,2) post_weekend_day = GET_DATE_DAY_OF_WEEK(post_weekend_date) ) IF (next_day1 = Work_schedule_day2 AND next_day2 = Work_schedule_day1) OR (next_day1 = Work_schedule_day1 AND next_day2 = Work_schedule_day2)THEN ( post_weekend_date = add_days(IV_END_DATE,3) post_weekend_day = GET_DATE_DAY_OF_WEEK(post_weekend_date) ) post_weekend_date_new = SUBSTR(TO_CHAR(post_weekend_date),1,10) Context_end_date = ADD_DAYS(IV_START_DATE,100) CHANGE_CONTEXTS(START_DATE=ACP_HIRE_DATE, END_DATE=Context_end_date) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if((l_absence_type_id = ANC_ABS_ENTRS_ABSENCE_TYPE_ID AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='COMPLETED' or ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' or ANC_ABS_ENTRS_APPROVAL_STATUS_CD='APPROVED'OR ANC_ABS_ENTRS_ABSENCE_STATUS_CD='A')) THEN ( absence_start_date = SUBSTR(TO_CHAR(ANC_ABS_ENTRS_START_DATE),1,10) if (pre_weekend_date=ANC_ABS_ENTRS_END_DATE) then ( flag = 1 Exit ) IF(post_weekend_date_new = absence_start_date) THEN ( flag = 2 EXIT ) ) ) i=i+1 ) ) Leave_start_date = SUBSTR(TO_CHAR(IV_START_DATE),1,10) Leave_end_date = SUBSTR(TO_CHAR(IV_END_DATE),1,10) IF ( flag = 1) then ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply this leave starting on '||Leave_start_date||' as you already have a leave ending on '||pre_weekend_day Return VALID, ERROR_MESSAGE ) IF(flag = 2) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply this leave ending on '||Leave_end_date||' as you already have a leave starting on upcoming '||post_weekend_day Return VALID, ERROR_MESSAGE ) Anniversary_date =TO_DATE(TO_CHAR(ACP_HIRE_DATE,'DD/MM')||TO_CHAR(IV_START_DATE,'YYYY'),'DD/MM/YYYY') first_anniversary = ADD_YEARS(ACP_HIRE_DATE,1) first_anniversary = ADD_MONTHS(first_anniversary,-1) IF(IV_START_DATE < Anniversary_date) THEN ( l_start_date = ADD_YEARS(Anniversary_date,-1) l_end_date = Anniversary_date ) ELSE ( l_start_date = Anniversary_date l_end_date = ADD_YEARS(Anniversary_date,1) ) count1 = 0 count2 = 0 CHANGE_CONTEXTS(START_DATE=l_start_date, END_DATE=l_end_date) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_typ_reason = ANC_ABS_ENTRS_ABSENCE_REASON_ID l_ticket_members = ANC_ABS_ENTRS_ATTRIBUTE1 if((l_abs_typ_name = 'Annual Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'SAVED') AND (l_abs_typ_reason = reason1 OR l_abs_typ_reason = reason2 OR l_abs_typ_reason = reason3 OR l_abs_typ_reason = reason4) AND (ANC_ABS_ENTRS_ABSENCE_STATUS_CD='COMPLETED' or ANC_ABS_ENTRS_ABSENCE_STATUS_CD='SUBMITTED' or ANC_ABS_ENTRS_APPROVAL_STATUS_CD ='APPROVED' OR ANC_ABS_ENTRS_APPROVAL_STATUS_CD='A')) then ( IF(l_ticket_members = 'Employee Only') THEN count1 = count1 + 1 IF(l_ticket_members = 'Both') THEN count2 = count2 + 1 ) ) i=i+1 ) ) ) IF(l_ticket = 'XX'AND (reason ='External with Ticket' OR reason = 'External with Ticket & Salary Advance' OR reason = 'External with Ticket, Salary Advance & Exit Re-entry' OR reason = 'External with Ticket & Exit Re-entry')) THEN ( VALID = 'N' ERROR_MESSAGE = 'Please enter \"Tickets for Members\". ' return VALID,ERROR_MESSAGE ) IF((IV_START_DATE < first_anniversary) AND (reason ='External with Ticket' OR reason = 'External with Ticket & Salary Advance' OR reason = 'External with Ticket, Salary Advance & Exit Re-entry' OR reason = 'External with Ticket & Exit Re-entry')) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply for Ticket before completing One year in the Organization.' return VALID,ERROR_MESSAGE ) return VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service, grade, and citizenship. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.\n\nThe formula checks the employee's grade and citizenship to determine the accrual rate, ceiling, and carryover. For grades 1 to 6, if the employee is a Saudi citizen with less than 5 years of service, the accrual is 28 days per year. If the service is more than 5 years, the accrual is 30 days per year. For non-Saudi citizens, the accrual is 21 days per year for less than 5 years of service and 30 days per year for more than 5 years of service. The ceiling and carryover are set to 10000 and 5000, respectively, for less than 5 years of service, and 12000 and 6000 for more than 5 years of service.\n\nFor grades 7 and 8, the accrual is 28 days per year for less than 5 years of service and 30 days per year for more than 5 years of service, with the same ceiling and carryover values as above.\n\nFor grades 9A, 9B, and 9C, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 30 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 30 days per year. The ceiling and carryover are set to 12000 and 6000, respectively.\n\nFor grades 10A, 10B, 10C, 11, and 12, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 40 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 40 days per year for grades 10A, 10B, and 10C, and 44 days per year for grades 11 and 12. The ceiling and carryover are set to 12000 and 6000, respectively.\n\nIf the employee has a specific attribute or grade 'RS', the accrual is set to 30 days per year, with a ceiling of 12000 and carryover of 6000.\n\nIf the accrual exceeds 2.5 days per month and the employee does not have an exception flag, the accrual is capped at 2.5 days per month, with a ceiling of 12000 and carryover of 6000.\n\nThe final accrual, ceiling, and carryover values are returned.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') if(PER_ASG_GRADE_NAME='1' OR PER_ASG_GRADE_NAME='2' OR PER_ASG_GRADE_NAME='3' OR PER_ASG_GRADE_NAME='4' OR PER_ASG_GRADE_NAME='5' OR PER_ASG_GRADE_NAME='6') then ( IF(PER_PER_CITIZENSHIP_LEG_CODE='SA') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service<5) then ( accrual = 21/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME='7' OR PER_ASG_GRADE_NAME='8') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='9A' OR PER_ASG_GRADE_NAME='9B' OR PER_ASG_GRADE_NAME='9C') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 30 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C' OR PER_ASG_GRADE_NAME='11' OR PER_ASG_GRADE_NAME='12') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 40 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C') then ( accrual =40/12 ceiling = 12000 carryover=6000 ) else ( accrual =44/12 ceiling = 12000 carryover=6000 ) ) ) else ( accrual =35/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_ATTRIBUTE8='Y' OR PER_ASG_GRADE_NAME='RS') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(accrual > 2.5 and Exception_Flag <> 'Y') then ( accrual = 2.5 ceiling = 12000 carryover=6000 ) return accrual,ceiling,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service, grade, and citizenship. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.\n\nThe formula checks the employee's grade and citizenship to determine the accrual rate, ceiling, and carryover. For grades 1 to 6, if the employee is a Saudi citizen with less than 5 years of service, the accrual is 28 days per year. If the service is more than 5 years, the accrual is 30 days per year. For non-Saudi citizens, the accrual is 21 days per year for less than 5 years of service and 30 days per year for more than 5 years of service. The ceiling and carryover are set to 10000 and 5000, respectively, for less than 5 years of service, and 12000 and 6000 for more than 5 years of service.\n\nFor grades 7 and 8, the accrual is 28 days per year for less than 5 years of service and 30 days per year for more than 5 years of service, with the same ceiling and carryover values as above.\n\nFor grades 9A, 9B, and 9C, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 30 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 30 days per year. The ceiling and carryover are set to 12000 and 6000, respectively.\n\nFor grades 10A, 10B, 10C, 11, and 12, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 40 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 40 days per year for grades 10A, 10B, and 10C, and 44 days per year for grades 11 and 12. The ceiling and carryover are set to 12000 and 6000, respectively.\n\nIf the employee has a specific attribute or grade (e.g., PER_ASG_ATTRIBUTE8='Yes' or PER_ASG_GRADE_NAME='RS'), the accrual is set to 30 days per year, with a ceiling of 12000 and carryover of 6000.\n\nIf the employee has an exception flag and a specific exception value, the accrual is set to the exception value, with a ceiling of 12000 and carryover of 6000.\n\nIf the accrual exceeds 2.5 days per month and the employee does not have an exception flag, the accrual is capped at 2.5 days per month, with a ceiling of 12000 and carryover of 6000.\n\nThe formula also adjusts the accrual based on the number of unpaid leave days taken within the accrual period. The final accrual, ceiling, and carryover values are returned.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'No' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_NAME is 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS 'X' DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR Exception_Flag IS 'X' DEFAULT FOR Exception_value IS 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date),IV_ACCRUALPERIODSTARTDATE(date),IV_ACCRUALPERIODENDDATE(date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date),daily_rate l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) i= 1 l_payroll_date=(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date))) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) total_days = days_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE)+1 l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') Exception_value = GET_TABLE_VALUE('Annual_Leave_Exceptions','Value',PER_ASG_PERSON_NUMBER,'X') l_abs_start_date=IV_ACCRUALPERIODSTARTDATE l_abs_END_date=IV_ACCRUALPERIODENDDATE L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VAC_DAYS = GET_ABSENCE_DAYS_PER_TYPE('SANED Unpaid Leave',l_abs_start_date,l_abs_END_date) l_log = ess_log_write('L_VAC_DAYS: '||TO_CHAR(L_VAC_DAYS)) ) l_log = ess_log_write('IV_ACCRUALPERIODSTARTDATE: '||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ess_log_write('IV_ACCRUALPERIODENDDATE: '||TO_CHAR(IV_ACCRUALPERIODENDDATE)) if(PER_ASG_GRADE_NAME='1' OR PER_ASG_GRADE_NAME='2' OR PER_ASG_GRADE_NAME='3' OR PER_ASG_GRADE_NAME='4' OR PER_ASG_GRADE_NAME='5' OR PER_ASG_GRADE_NAME='6') then ( IF(PER_PER_CITIZENSHIP_LEG_CODE='SA') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N'))Then ( accrual = 28/12 ceiling = 10000 carryover=5000 ) If(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y'))Then ( accrual =30/12 ceiling = 12000 carryover=6000 ) If (l_length_of_service => 5) Then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual = 21/12 ceiling = 10000 carryover=5000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME='7' OR PER_ASG_GRADE_NAME='8') then ( if(l_length_of_service<5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N'))then ( accrual = 28/12 ceiling = 10000 carryover=5000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='9A' OR PER_ASG_GRADE_NAME='9B' OR PER_ASG_GRADE_NAME='9C') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA' And (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N') ) then ( accrual = 30 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else IF (PER_PER_CITIZENSHIP_LEG_CODE = 'SA' And (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y') )Then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C' OR PER_ASG_GRADE_NAME='11' OR PER_ASG_GRADE_NAME='12') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA' And (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N') ) then ( accrual = 40 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C') then ( accrual =40/12 ceiling = 12000 carryover=6000 ) else ( accrual =44/12 ceiling = 12000 carryover=6000 ) ) ) else ( accrual =35/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'CEO' OR PER_ASG_GRADE_NAME = 'T8' OR PER_ASG_GRADE_NAME = 'Z4' OR PER_ASG_GRADE_NAME = 'R4' OR PER_ASG_GRADE_NAME = 'W8' OR PER_ASG_GRADE_NAME = 'E6' OR PER_ASG_GRADE_NAME = 'P1' OR PER_ASG_GRADE_NAME = 'F2') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(PER_ASG_GRADE_NAME = 'B3' OR PER_ASG_GRADE_NAME = 'G2') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) If (l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y'))THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'N7') then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N'))then ( accrual =28/12 ceiling = 12000 carryover=6000 ) If (l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y'))then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual =21/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME = 'E1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'M3' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'I1') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'S1') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y'))THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) THEN ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'S2') then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N') ) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5and (PER_ASG_ATTRIBUTE8 = 'No' OR PER_ASG_ATTRIBUTE8 = 'N')) then ( accrual =21/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service < 5 and (PER_ASG_ATTRIBUTE8 = 'Yes' OR PER_ASG_ATTRIBUTE8 = 'Y')) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(l_length_of_service => 5) then ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) If(PER_ASG_ATTRIBUTE8='Yes' OR PER_ASG_GRADE_NAME='RS') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) If(Exception_Flag = 'Y' and Exception_value <> 'X') then ( accrual = (to_num(Exception_value)) ceiling = 12000 carryover=6000 ) If(accrual > 2.5 and Exception_Flag <> 'Y') then ( accrual = 2.5 ceiling = 12000 carryover=6000 ) l_log = ess_log_write('accrual1 '||TO_CHAR(accrual)) If (L_VAC_DAYS > 0) then ( daily_rate= accrual/total_days accrual_provided = total_days - L_VAC_DAYS accrual = accrual_provided*daily_rate ) return accrual,ceiling,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual, ceiling, and carryover of leave based on the employee's length of service, grade, and citizenship. The formula first determines the length of service by calculating the number of days between the hire date and the effective date, then converts write a  to years.\n\nThe formula checks the employee's grade and citizenship to determine the accrual rate, ceiling, and carryover. For grades 1 to 6, if the employee is a Saudi citizen with less than 5 years of service, the accrual is 28 days per year. If the service is more than 5 years, the accrual is 30 days per year. For non-Saudi citizens, the accrual is 21 days per year for less than 5 years of service and 30 days per year for more than 5 years of service. The ceiling and carryover are set to 10000 and 5000, respectively, for less than 5 years of service, and 12000 and 6000 for more than 5 years of service.\n\nFor grades 7 and 8, the accrual is 28 days per year for less than 5 years of service and 30 days per year for more than 5 years of service, with the same ceiling and carryover values as above.\n\nFor grades 9A, 9B, and 9C, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 30 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 30 days per year. The ceiling and carryover are set to 12000 and 6000, respectively.\n\nFor grades 10A, 10B, 10C, 11, and 12, if the hire date is before March 1, 2010, and the employee is a Saudi citizen, the accrual is 40 days per year plus an additional 5 days for every 10 years of service. For non-Saudi citizens, the accrual is 40 days per year for grades 10A, 10B, and 10C, and 44 days per year for grades 11 and 12. The ceiling and carryover are set to 12000 and 6000, respectively.\n\nIf the employee has a specific attribute or grade 'RS', the accrual is set to 30 days per year, with a ceiling of 12000 and carryover of 6000.\n\nThe final accrual, ceiling, and carryover values are returned.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') if(PER_ASG_GRADE_NAME='1' OR PER_ASG_GRADE_NAME='2' OR PER_ASG_GRADE_NAME='3' OR PER_ASG_GRADE_NAME='4' OR PER_ASG_GRADE_NAME='5' OR PER_ASG_GRADE_NAME='6') then ( IF(PER_PER_CITIZENSHIP_LEG_CODE='SA') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service<5) then ( accrual = 21/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME='7' OR PER_ASG_GRADE_NAME='8') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='9A' OR PER_ASG_GRADE_NAME='9B' OR PER_ASG_GRADE_NAME='9C') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 30 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C' OR PER_ASG_GRADE_NAME='11' OR PER_ASG_GRADE_NAME='12') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 40 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C') then ( accrual =40/12 ceiling = 12000 carryover=6000 ) else ( accrual =44/12 ceiling = 12000 carryover=6000 ) ) ) else ( accrual =35/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_ATTRIBUTE8='Y' OR PER_ASG_GRADE_NAME='RS') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) return accrual,ceiling,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the accrual rate for an employee's absence based on their hire and termination dates within the current month and year. The formula determines the number of days between the employee's hire date and the current effective date to calculate the length of service.\n\nIf the employee's termination date falls within the current month and year, the formula adjusts the accrual rate based on the proportion of days worked in that month. Similarly, if the hire date falls within the current month and year, the formula adjusts the accrual rate based on the proportion of days worked since the hire date. If both the hire and termination dates fall within the current month and year, the formula adjusts the accrual rate based on the number of days worked between the hire and termination dates.\n\nThe final accrual rate is then multiplied by the input accrual value to determine the total accrual for the period.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ACTUAL_TERMINATION_DATE IS '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'D' INPUTS ARE IV_ACCRUAL,IV_CALEDARSTARTDATE (date),IV_CALEDARENDDATE(date) l_no_of_days=DAYS_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE)+1 l_accrual = 1 l_length_of_service=(l_no_of_days) hire_year_number = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'yyyy')) current_year_number = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'yyyy')) hire_month_no= to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'mm')) current_month_no = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'mm')) no_of_days_month = to_num(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd')) Last_month_day = to_num(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)), 'dd')) l_last_date_of_term_month = to_num(to_char(LAST_DAY(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date))),'dd')) term_year_number = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'yyyy')) term_month_no= to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'mm')) no_of_days_term_month = to_num(to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd')) if( term_year_number=current_year_number AND term_month_no = current_month_no) then ( l_accrual = (no_of_days_term_month/l_last_date_of_term_month) l_log = ess_log_write('***********************START********************************') l_log = ess_log_write('***********If Termination only in this Month****************') l_log = ess_log_write('Hire Date : '||to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE, 'dd/mm/yyyy')) l_log = ess_log_write('Termination Date : '||to_char(PER_ASG_REL_ACTUAL_TERMINATION_DATE, 'dd/mm/yyyy')) l_log = ess_log_write('EFFECTIVE_DATE: '||TO_CHAR(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'dd/mm/yyyy')) l_log = ess_log_write('no_of_days_term_month: '||TO_CHAR(no_of_days_term_month)) l_log = ess_log_write('l_last_date_of_term_month: '||TO_CHAR(l_last_date_of_term_month)) l_log = ess_log_write('l_accrual: '||TO_CHAR(l_accrual)) l_log = ess_log_write('IV_ACCRUAL: '||TO_CHAR(IV_ACCRUAL)) ) if( hire_year_number = current_year_number AND hire_month_no = current_month_no ) then ( l_accrual = l_no_of_days/Last_month_day l_log = ess_log_write('****************** If Hire only at this Month *********************') l_log = ess_log_write('l_no_of_days: '||TO_CHAR(l_no_of_days)) l_log = ess_log_write('Last_month_day: '||TO_CHAR(Last_month_day)) l_log = ess_log_write('l_accrual: '||TO_CHAR(l_accrual)) l_log = ess_log_write('IV_ACCRUAL: '||TO_CHAR(IV_ACCRUAL)) l_log = ess_log_write('***********************End********************************') ) if( hire_year_number = current_year_number AND hire_month_no = current_month_no AND term_year_number=current_year_number AND term_month_no = current_month_no) then ( l_accrual = (l_no_of_days/l_last_date_of_term_month) l_log = ess_log_write('*************** If Hire and Termination at the Same Date ********************') l_log = ess_log_write('l_no_of_days: '||TO_CHAR(l_no_of_days)) l_log = ess_log_write('l_last_date_of_term_month: '||TO_CHAR(l_last_date_of_term_month)) l_log = ess_log_write('l_accrual: '||TO_CHAR(l_accrual)) l_log = ess_log_write('IV_ACCRUAL: '||TO_CHAR(IV_ACCRUAL)) l_log = ess_log_write('***********************End********************************') ) accrual = l_accrual*IV_ACCRUAL return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the duration of an absence, excluding weekends and holidays. It first determines the total number of days between the start and end dates of the absence. Then, it iterates through a predefined list of holidays and subtracts the number of holidays that fall within the absence period from the total duration. The final duration is the total number of days minus the number of holidays. write a  ensures that the absence duration accurately reflects the number of working days the employee is absent.\n\n***answer***: Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) Default for demo_date is '2015/03/21 00:00:00' (DATE) Default for date_start is '1951/01/01 00:00:00' (DATE) DEFAULT FOR holidays is EMPTY_DATE_NUMBER Default for l_holiday_days is 0 Default for num1 is 0 Default for num2 is 0 INPUTS are IV_START_DATE (date), IV_END_DATE (date) holidays[1]='2017/06/25 00:00:00' (DATE) holidays[2]='2017/06/26 00:00:00' (DATE) holidays[3]='2017/06/27 00:00:00' (DATE) holidays[4]='2017/06/28 00:00:00' (DATE) holidays[5]='2017/06/29 00:00:00' (DATE) holidays[6]='2017/09/24 00:00:00' (DATE) holidays[7]='2017/08/31 00:00:00' (DATE) holidays[8]='2017/09/01 00:00:00' (DATE) holidays[9]='2017/09/02 00:00:00' (DATE) holidays[10]='2017/09/03 00:00:00' (DATE) holidays[10]='2017/09/04 00:00:00' (DATE) holidays[10]='2017/09/05 00:00:00' (DATE) holidays[11]='2018/06/14 00:00:00' (DATE) holidays[12]='2018/06/15 00:00:00' (DATE) holidays[13]='2018/06/16 00:00:00' (DATE) holidays[14]='2018/06/17 00:00:00' (DATE) holidays[15]='2018/06/18 00:00:00' (DATE) holidays[16]='2018/06/19 00:00:00' (DATE) holidays[17]='2018/06/20 00:00:00' (DATE) holidays[18]='2018/08/19 00:00:00' (DATE) holidays[19]='2018/08/20 00:00:00' (DATE) holidays[20]='2018/08/21 00:00:00' (DATE) holidays[21]='2018/08/22 00:00:00' (DATE) holidays[22]='2018/08/23 00:00:00' (DATE) holidays[23]='2018/08/24 00:00:00' (DATE) holidays[24]='2018/08/25 00:00:00' (DATE) holidays[25]='2018/08/25 00:00:00' (DATE) holidays[26]='2018/09/23 00:00:00' (DATE) holidays[27]='2018/09/24 00:00:00' (DATE) holidays[28]='2019/06/02 00:00:00' (DATE) holidays[29]='2019/06/03 00:00:00' (DATE) holidays[30]='2019/06/04 00:00:00' (DATE) holidays[31]='2019/06/05 00:00:00' (DATE) holidays[32]='2019/06/06 00:00:00' (DATE) holidays[33]='2019/08/11 00:00:00' (DATE) holidays[34]='2019/08/12 00:00:00' (DATE) holidays[35]='2019/08/13 00:00:00' (DATE) holidays[36]='2019/08/14 00:00:00' (DATE) holidays[37]='2019/08/15 00:00:00' (DATE) holidays[38]='2019/08/16 00:00:00' (DATE) holidays[39]='2019/08/17 00:00:00' (DATE) holidays[40]='2019/08/18 00:00:00' (DATE) holidays[41]='2019/09/23 00:00:00' (DATE) holidays[42]='2020/09/23 00:00:00' (DATE) holidays[43]='2021/09/23 00:00:00' (DATE) holidays[44]='2022/09/23 00:00:00' (DATE) holidays[45]='2023/09/23 00:00:00' (DATE) holidays[46]='2024/09/23 00:00:00' (DATE) holidays[47]='2025/09/23 00:00:00' (DATE) holidays[48]='2021/05/12 00:00:00' (DATE) holidays[49]='2021/05/13 00:00:00' (DATE) holidays[50]='2021/05/16 00:00:00' (DATE) holidays[51]='2021/05/17 00:00:00' (DATE) holidays[52]='2021/07/19 00:00:00' (DATE) holidays[53]='2021/07/20 00:00:00' (DATE) holidays[54]='2021/07/21 00:00:00' (DATE) holidays[55]='2021/07/22 00:00:00' (DATE) l_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_weekday=to_char(l_date,'DAY') If (l_weekday= '7') then( duration=0 ) else( duration= 0 ) duration = days_between(IV_END_DATE,IV_START_DATE)+ 1 duration = floor(duration) I= 0 J=1 l_holiday_days = 0 while (I < duration) LOOP ( J=1 while (J<=HOLIDAYS.COUNT) LOOP ( if ( to_char(HOLIDAYS[J],'dd-MM-yyyy')=to_char(add_days(IV_START_DATE,I),'dd-MM-yyyy')) then ( l_holiday_days=l_holiday_days+1 ) J = J + 1 ) I= I + 1 ) duration = duration - l_holiday_days return duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  fast formula calculates the duration of an absence, excluding holidays. It first determines the total number of days between the start and end dates of the absence. Then, it iterates through a predefined list of holidays and subtracts the number of holidays that fall within the absence period from the total duration. The final duration is the total number of days minus the number of holidays. write a  ensures that the absence duration accurately reflects the number of working days the employee is absent.\n\n***answer***: Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) Default for demo_date is '2015/03/21 00:00:00' (DATE) Default for date_start is '1951/01/01 00:00:00' (DATE) DEFAULT FOR holidays is EMPTY_DATE_NUMBER Default for l_holiday_days is 0 Default for num1 is 0 Default for num2 is 0 INPUTS are IV_START_DATE (date), IV_END_DATE (date) holidays[1]='2017/06/25 00:00:00' (DATE) holidays[2]='2017/06/26 00:00:00' (DATE) holidays[3]='2017/06/27 00:00:00' (DATE) holidays[4]='2017/06/28 00:00:00' (DATE) holidays[5]='2017/06/29 00:00:00' (DATE) holidays[6]='2017/09/24 00:00:00' (DATE) holidays[7]='2017/08/31 00:00:00' (DATE) holidays[8]='2017/09/01 00:00:00' (DATE) holidays[9]='2017/09/02 00:00:00' (DATE) holidays[10]='2017/09/03 00:00:00' (DATE) holidays[10]='2017/09/04 00:00:00' (DATE) holidays[10]='2017/09/05 00:00:00' (DATE) holidays[11]='2018/06/14 00:00:00' (DATE) holidays[12]='2018/06/15 00:00:00' (DATE) holidays[13]='2018/06/16 00:00:00' (DATE) holidays[14]='2018/06/17 00:00:00' (DATE) holidays[15]='2018/06/18 00:00:00' (DATE) holidays[16]='2018/06/19 00:00:00' (DATE) holidays[17]='2018/06/20 00:00:00' (DATE) holidays[18]='2018/08/19 00:00:00' (DATE) holidays[19]='2018/08/20 00:00:00' (DATE) holidays[20]='2018/08/21 00:00:00' (DATE) holidays[21]='2018/08/22 00:00:00' (DATE) holidays[22]='2018/08/23 00:00:00' (DATE) holidays[23]='2018/08/24 00:00:00' (DATE) holidays[24]='2018/08/25 00:00:00' (DATE) holidays[25]='2018/08/25 00:00:00' (DATE) holidays[26]='2018/09/23 00:00:00' (DATE) holidays[27]='2018/09/24 00:00:00' (DATE) holidays[28]='2019/06/02 00:00:00' (DATE) holidays[29]='2019/06/03 00:00:00' (DATE) holidays[30]='2019/06/04 00:00:00' (DATE) holidays[31]='2019/06/05 00:00:00' (DATE) holidays[32]='2019/06/06 00:00:00' (DATE) holidays[33]='2019/08/11 00:00:00' (DATE) holidays[34]='2019/08/12 00:00:00' (DATE) holidays[35]='2019/08/13 00:00:00' (DATE) holidays[36]='2019/08/14 00:00:00' (DATE) holidays[37]='2019/08/15 00:00:00' (DATE) holidays[38]='2019/08/16 00:00:00' (DATE) holidays[39]='2019/08/17 00:00:00' (DATE) holidays[40]='2019/08/18 00:00:00' (DATE) holidays[41]='2019/09/23 00:00:00' (DATE) l_date=GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)) l_weekday=to_char(l_date,'DAY') If (l_weekday= '7') then( duration=0 ) else( duration= 0 ) duration = days_between(IV_END_DATE,IV_START_DATE)+ 1 duration = floor(duration) I= 0 J=1 l_holiday_days = 0 while (I < duration) LOOP ( J=1 while (J<=HOLIDAYS.COUNT) LOOP ( if ( to_char(HOLIDAYS[J],'dd-MM-yyyy')=to_char(add_days(IV_START_DATE,I),'dd-MM-yyyy')) then ( l_holiday_days=l_holiday_days+1 ) J = J + 1 ) I= I + 1 ) duration = duration - l_holiday_days return duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the duration of an absence while excluding the dates July 10, 2022, July 11, 2022, July 12, 2022, and July 13, 2022. It first determines the total number of days between the start and end dates of the absence. Then, it checks if any of these dates fall within the absence period and subtracts those days from the total duration. The final duration is the total number of days minus the excluded dates. write a  ensures that the absence duration accurately reflects the number of working days the employee is absent, excluding the specified dates.\n\n\n***answer***: Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) INPUTS are IV_START_DATE (date), IV_END_DATE (date) l_z = '2022/07/10' l_a = '2022/07/11' l_b = '2022/07/12' l_c = '2022/07/13' l_date_start = trunc(IV_START_DATE) l_duration = DAYS_BETWEEN(trunc(IV_END_DATE),trunc(IV_START_DATE)) + 1 If (l_z >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_z <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_a >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_a <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_b >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_b <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_c >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_c <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) duration = l_duration return duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the duration of an absence while excluding the dates July 10, 2022, July 11, 2022, July 12, 2022, July 13, 2022, and September 22, 2022. It first determines the total number of days between the start and end dates of the absence. Then, it checks if any of these dates fall within the absence period and subtracts those days from the total duration. The final duration is the total number of days minus the excluded dates\n\n***answer***: Default for IV_START_DATE is '0001/01/01 00:00:00' (DATE) Default for IV_END_DATE is '0001/01/01 00:00:00' (DATE) INPUTS are IV_START_DATE (date), IV_END_DATE (date) l_z = '2022/07/10' l_a = '2022/07/11' l_b = '2022/07/12' l_c = '2022/07/13' l_d = '2022/09/22' l_date_start = trunc(IV_START_DATE) l_duration = DAYS_BETWEEN(trunc(IV_END_DATE),trunc(IV_START_DATE)) + 1 If (l_z >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_z <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_a >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_a <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_b >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_b <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_c >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_c <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) If (l_d >= TO_CHAR(IV_START_DATE,'YYYY/MM/DD') and l_d <= TO_CHAR(IV_END_DATE,'YYYY/MM/DD')) then( l_duration = l_duration - 1 ) duration = l_duration return duration",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates whether the leave dates fall within specific holiday periods. It checks if the start and end dates of the leave overlap with any of the predefined holidays. If the leave dates do not fall within the holiday periods, the formula sets the validation status to 'N' (not valid) and provides an error message indicating that the leave cannot be applied as it is not a holiday. If the leave dates fall within the holiday periods, the validation status is set to 'Y' (valid). \n\n***answer***: DEFAULT FOR IV_START_DATE IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date) HOLIDAY[1] ='2022/07/07 00:00:00'(DATE) HOLIDAY[2] ='2022/07/14 00:00:00'(DATE) HOLIDAY[3] ='2022/02/21 00:00:00'(DATE) HOLIDAY[4] ='2022/02/23 00:00:00'(DATE) HOLIDAY[5] ='2022/04/30 00:00:00'(DATE) HOLIDAY[6] ='2022/05/05 00:00:00'(DATE) HOLIDAY[7] ='2022/09/21 00:00:00'(DATE) HOLIDAY[8] ='2022/09/23 00:00:00'(DATE) HOLIDAY[9] ='2023/02/22 00:00:00'(DATE) HOLIDAY[10] ='2023/02/23 00:00:00'(DATE) HOLIDAY[11] ='2023/04/23 00:00:00'(DATE) HOLIDAY[12] ='2023/04/27 00:00:00'(DATE) HOLIDAY[13] ='2023/06/27 00:00:00'(DATE) HOLIDAY[14] ='2023/06/30 00:00:00'(DATE) HOLIDAY[15] ='2023/07/02 00:00:00'(DATE) HOLIDAY[16] ='2023/07/03 00:00:00'(DATE) HOLIDAY[17] ='2023/09/24 00:00:00'(DATE) HOLIDAY[18] ='2023/09/25 00:00:00'(DATE) IF (IV_START_DATE <= HOLIDAY[1] OR IV_END_DATE >= HOLIDAY[2]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE <= HOLIDAY[3] OR IV_END_DATE >= HOLIDAY[4]) THEN ( VALID = 'N' ERROR_MESSAGE2 = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE <= HOLIDAY[5] OR IV_END_DATE >= HOLIDAY[6]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE <= HOLIDAY[7] OR IV_END_DATE >= HOLIDAY[8]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[9] OR IV_END_DATE >= HOLIDAY[10]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[11] OR IV_END_DATE >= HOLIDAY[12]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[13] OR IV_END_DATE >= HOLIDAY[14]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[15] OR IV_END_DATE >= HOLIDAY[16]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) IF (IV_START_DATE < HOLIDAY[17] OR IV_END_DATE >= HOLIDAY[18]) THEN ( VALID = 'N' ERROR_MESSAGE = 'You cant apply this leave as it is not Holiday' ) ELSE ( VALID = 'Y' RETURN VALID, ERROR_MESSAGE ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates whether the leave dates fall within a restricted period and if the user has the necessary permissions to make changes during that period. It checks if the start and end dates of the leave overlap with the restricted period from April 1, 2020, to December 31, 2020. If the leave dates fall within write a  period and the user is not authorized (i.e., the user name is not '14013278'), the formula sets the validation status to 'N' (not valid) and provides an error message indicating that any changes during write a  period should go through HR. If the leave dates do not fall within the restricted period or the user is authorized, the validation status is set to 'Y' (valid). write a  ensures that the leave application adheres to the specified business rules and restrictions.\n\n***answer***: DEFAULT FOR iv_Start_date IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR iv_end_date IS '4712/12/31 00:00:00' (DATE) INPUTS ARE iv_start_date (date), iv_end_date (date) VALID = 'Y' User_name = 'x' User_name = GET_VALUE_SET('LOGGED_IN_USER') Res_end_date='2020/12/31 00:00:00' (DATE) Res_start_date='2020/04/01 00:00:00' (DATE) If (to_date(to_char(iv_start_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_start_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to december should go through HR' ) ) If (to_date(to_char(iv_end_date,'dd-mm-yyyy')) >= to_date(to_char(Res_start_date,'dd-mm-yyyy')) AND to_date(to_char(iv_end_date,'dd-mm-yyyy')) <= to_date(to_char(Res_end_date,'dd-mm-yyyy'))) THEN ( IF(User_name <> '14013278') THEN ( VALID = 'N' ERROR_MESSAGE = 'Any changes between April to december should go through HR' ) ) return VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Length of Service:\n\nIf the length of service is less than 5 years:\nAccrual is 28/12 for grades 1 to 6, 7, 8, B3, G2, I2, S1, and N7 (if citizenship is not 'SA').\nAccrual is 21/12 for grades 1 to 6, N7, and S2 (if citizenship is not 'SA').\nIf the length of service is 5 years or more:\nAccrual is 30/12 for grades 1 to 6, 7, 8, B3, G2, I2, S1, and N7 (if citizenship is not 'SA').\nGrade and Citizenship:\n\nFor grades 9A, 9B, 9C:\nIf the hire date is before 1st March 2010 and citizenship is 'SA', accrual is 30 plus 5 for every 10 years of service, divided by 12.\nOtherwise, accrual is 30/12.\nFor grades 10A, 10B, 10C, 11, 12:\nIf the hire date is before 1st March 2010 and citizenship is 'SA', accrual is 40 plus 5 for every 10 years of service, divided by 12.\nOtherwise, accrual is 35/12 or 44/12 for grades 10A, 10B, 10C.\nFor grades CEO, T8, Z4, R4, W8, E6, P1, F2, RS, and if PER_ASG_ATTRIBUTE8 is 'Y':\nAccrual is 30/12.\nFor grade S2:\nIf citizenship is 'SA' and length of service is less than 5 years, accrual is 28/12.\nIf citizenship is 'SA' and length of service is 5 years or more, accrual is 30/12.\nIf citizenship is not 'SA' and length of service is less than 5 years, accrual is 21/12.\nIf citizenship is not 'SA' and length of service is 5 years or more, accrual is 30/12.\nExceptions:\n\nIf Exception_Flag is 'Y' and Exception_value is not 'X', accrual is set to the value of Exception_value.\nIf accrual exceeds 2.5 and Exception_Flag is not 'Y', accrual is capped at 2.5.\nUnpaid Leave Adjustment:\n\nIf there are unpaid leave days (L_VAC_DAYS > 0), the accrual is adjusted by subtracting the unpaid leave days from the total days and multiplying by the daily accrual rate.\nThe ceiling is consistently set to 12000 and carryover to 6000 across all conditions.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'X' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_NAME is 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS 'X' DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ASG_HR_ASG_ID is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date),IV_ACCRUALPERIODSTARTDATE(date),IV_ACCRUALPERIODENDDATE(date) l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) i= 1 l_payroll_date=(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date))) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) total_days = days_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE)+1 l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') Exception_value = GET_TABLE_VALUE('Annual_Leave_Exceptions','Value',PER_ASG_PERSON_NUMBER,'X') l_abs_start_date=IV_ACCRUALPERIODSTARTDATE l_abs_END_date=IV_ACCRUALPERIODENDDATE L_VAC_DAYS = GET_ABSENCE_DAYS_PER_TYPE('SANED Unpaid Leave',l_abs_start_date,l_abs_END_date) l_log = ess_log_write('L_VAC_DAYS: '||TO_CHAR(L_VAC_DAYS)) l_log = ess_log_write('IV_ACCRUALPERIODSTARTDATE: '||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ess_log_write('IV_ACCRUALPERIODENDDATE: '||TO_CHAR(IV_ACCRUALPERIODENDDATE)) if(PER_ASG_GRADE_NAME='1' OR PER_ASG_GRADE_NAME='2' OR PER_ASG_GRADE_NAME='3' OR PER_ASG_GRADE_NAME='4' OR PER_ASG_GRADE_NAME='5' OR PER_ASG_GRADE_NAME='6') then ( IF(PER_PER_CITIZENSHIP_LEG_CODE='SA') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service<5) then ( accrual = 21/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME='7' OR PER_ASG_GRADE_NAME='8') then ( if(l_length_of_service<5) then( accrual = 28/12 ceiling = 10000 carryover=5000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='9A' OR PER_ASG_GRADE_NAME='9B' OR PER_ASG_GRADE_NAME='9C') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 30 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C' OR PER_ASG_GRADE_NAME='11' OR PER_ASG_GRADE_NAME='12') then ( if(LEAST(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'2010/03/01 00:00:00' (date)) = PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( accrual = 40 accrual = accrual + (TRUNC((l_length_of_service/10),0) * 5) accrual = accrual/12 ceiling = 12000 carryover=6000 ) else ( if(PER_ASG_GRADE_NAME='10A' OR PER_ASG_GRADE_NAME='10B' OR PER_ASG_GRADE_NAME='10C') then ( accrual =40/12 ceiling = 12000 carryover=6000 ) else ( accrual =44/12 ceiling = 12000 carryover=6000 ) ) ) else ( accrual =35/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'CEO' OR PER_ASG_GRADE_NAME = 'T8' OR PER_ASG_GRADE_NAME = 'Z4' OR PER_ASG_GRADE_NAME = 'R4' OR PER_ASG_GRADE_NAME = 'W8' OR PER_ASG_GRADE_NAME = 'E6' OR PER_ASG_GRADE_NAME = 'P1' OR PER_ASG_GRADE_NAME = 'F2') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(PER_ASG_GRADE_NAME = 'B3' OR PER_ASG_GRADE_NAME = 'G2') then ( if(l_length_of_service < 5) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'N7') then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( if(l_length_of_service < 5) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5) then ( accrual =21/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_GRADE_NAME = 'E1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'M3' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'I1') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'S1') then ( if(l_length_of_service < 5) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) if(PER_ASG_GRADE_NAME = 'S2') then ( if(PER_PER_CITIZENSHIP_LEG_CODE = 'SA') then ( if(l_length_of_service < 5) then ( accrual =28/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) else ( if(l_length_of_service < 5) then ( accrual =21/12 ceiling = 12000 carryover=6000 ) else ( accrual =30/12 ceiling = 12000 carryover=6000 ) ) ) if(PER_ASG_ATTRIBUTE8='Y' OR PER_ASG_GRADE_NAME='RS') then ( accrual =30/12 ceiling = 12000 carryover=6000 ) if(Exception_Flag = 'Y' and Exception_value <> 'X') then ( accrual = (to_num(Exception_value)) ceiling = 12000 carryover=6000 ) if(accrual > 2.5 and Exception_Flag <> 'Y') then ( accrual = 2.5 ceiling = 12000 carryover=6000 ) l_log = ess_log_write('accrual1 '||TO_CHAR(accrual)) If (L_VAC_DAYS > 0) then ( daily_rate= accrual/total_days accrual_provided = total_days - L_VAC_DAYS accrual = accrual_provided*daily_rate ) return accrual,ceiling,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates the total duration of annual leave taken by an employee within the provided start and end dates. It calculates the total applicable absence days by summing the duration of the current leave request with the approved annual leave days within write a  date range. The formula iterates through each absence entry, checks if it is of type 'Annual Leave' and not withdrawn, and adds its duration to the total approved absence days. The result is the total applicable absence days, which is returned along with a validation flag.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR IV_TOTALDURATION is 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = IV_END_DATE l_yr_start_date = IV_START_DATE l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 WHILE ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) LOOP ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='Annual Leave' AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days return VALID,l_applicable_abs_days",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the accrual, ceiling, and carryover of leave for employees based on their length of service, grade, and any exceptions. Here's the precise business logic:\n\nLength of Service:\n\nThe formula calculates the length of service by determining the number of days between the employee's hire date and the current date, then dividing by 365 to get the number of years.\nGrade-Based Accrual:\n\nFor grades E1, E2, M1, M2, and CEO, the accrual is 3, the ceiling is 3, and the carryover is 0.\nFor grades M3 and M4, the accrual is 2, the ceiling is 2, and the carryover is 0.\nFor grades S1, S2, I1, and I2, the accrual is 0, the ceiling is 0, and the carryover is 0.\nUnpaid Leave Adjustment:\n\nIf there are unpaid leave days, the formula adjusts the accrual by subtracting the unpaid leave days from the total days and multiplying by the daily accrual rate.\nExceptions:\n\nIf there are specific exceptions for the employee, the formula retrieves the exception flag and value from a table and applies the exception value to the accrual.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_PLN_NAME is 'A' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT FOR PER_ASG_PERSON_NUMBER is 'X' DEFAULT FOR PER_PER_CITIZENSHIP_LEG_CODE IS 'X' DEFAULT FOR PER_ASG_GRADE_NAME IS 'X' DEFAULT FOR PER_ASG_ATTRIBUTE8 IS 'No' DEFAULT for PER_ASG_REL_ACCEPTED_TERMINATION_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_END is '4712/12/31 00:00:00' (date) DEFAULT for PAY_EARN_PERIOD_START is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_TYP_NAME is 'X' DEFAULT FOR GLOBAL_PAY_INTERFACE_EXTRACTION_DATE IS 'X' DEFAULT FOR ACP_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR Exception_Flag IS 'X' DEFAULT FOR Exception_value IS 'X' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date),IV_ACCRUALPERIODSTARTDATE(date),IV_ACCRUALPERIODENDDATE(date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date),daily_rate l_no_of_days=days_BETWEEN(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),PER_ASG_REL_ORIGINAL_DATE_OF_HIRE) l_length_of_service=(l_no_of_days/365) i= 1 l_payroll_date=(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date))) l_payroll_days=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'DD')) l_payroll_month=to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'MM')) l_payroll_year =to_number(to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)),'YYYY')) total_days = days_BETWEEN(IV_ACCRUALPERIODENDDATE,IV_ACCRUALPERIODSTARTDATE)+1 l_hire_days=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'DD')) l_hire_month=to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'MM')) l_hire_year =to_number(to_char(PER_ASG_REL_ORIGINAL_DATE_OF_HIRE,'YYYY')) l_termination_days=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'DD')) l_termination_month=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'MM')) l_termination_year=to_number(to_char(PER_ASG_REL_ACCEPTED_TERMINATION_DATE,'YYYY')) if(l_hire_month = l_payroll_month AND l_hire_year = l_payroll_year) then ( hire_termination_month_days = l_payroll_days - l_hire_days - 1 ) if(l_termination_month = l_payroll_month AND l_termination_year = l_payroll_year) then ( hire_termination_month_days = l_termination_days ) Exception_Flag = GET_TABLE_VALUE('Annual_Leave_Exceptions','Employee',PER_ASG_PERSON_NUMBER,'X') Exception_value = GET_TABLE_VALUE('Annual_Leave_Exceptions','Value',PER_ASG_PERSON_NUMBER,'X') l_abs_start_date=IV_ACCRUALPERIODSTARTDATE l_abs_END_date=IV_ACCRUALPERIODENDDATE L_PERSON_ID = GET_CONTEXT(PERSON_ID,0) CHANGE_CONTEXTS(PERSON_ID = L_Person_Id) ( L_VAC_DAYS = GET_ABSENCE_DAYS_PER_TYPE('SANED Unpaid Leave',l_abs_start_date,l_abs_END_date) l_log = ess_log_write('L_VAC_DAYS: '||TO_CHAR(L_VAC_DAYS)) ) l_log = ess_log_write('IV_ACCRUALPERIODSTARTDATE: '||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ess_log_write('IV_ACCRUALPERIODENDDATE: '||TO_CHAR(IV_ACCRUALPERIODENDDATE)) If(PER_ASG_GRADE_NAME = 'E1' OR PER_ASG_GRADE_NAME = 'E2' OR PER_ASG_GRADE_NAME = 'M1' OR PER_ASG_GRADE_NAME = 'M2' OR PER_ASG_GRADE_NAME = 'CEO') then ( accrual = 3 ceiling = 3 carryover=0 ) If(PER_ASG_GRADE_NAME = 'M4' OR PER_ASG_GRADE_NAME = 'M3') then ( accrual = 2 ceiling = 2 carryover=0 ) If(PER_ASG_GRADE_NAME = 'S2' OR PER_ASG_GRADE_NAME = 'S1' OR PER_ASG_GRADE_NAME = 'I2' OR PER_ASG_GRADE_NAME = 'I1') then ( accrual = 0 ceiling = 0 carryover=0 ) l_log = ess_log_write('accrual1 '||TO_CHAR(accrual)) If (L_VAC_DAYS > 0) then ( daily_rate= accrual/total_days accrual_provided = total_days - L_VAC_DAYS accrual = accrual_provided*daily_rate ) return accrual,ceiling,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the dates for a 'Travel Order' absence type. It ensures that the departure and arrival dates fall within the specified absence dates. Here is the precise business logic:\n\nIf the absence type is 'Travel Order' and the departure date is before the start date and the arrival date is after the end date, the validation fails with an error message asking to apply the departure and arrival dates within the absence dates.\nIf the absence type is 'Travel Order' and the departure date is equal to the start date but the arrival date is after the end date, the validation fails with an error message asking to apply the arrival date within the absence dates.\nIf the absence type is 'Travel Order' and the departure date is before the start date but the arrival date is equal to the end date, the validation fails with an error message asking to apply the departure date within the absence dates.\nThe formula returns a validation flag and an error message if any of these conditions are met.\n\n***answer***: DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR ANC_ABS_ENTRS_START_DATE is '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ATTRIBUTE_DATE1 IS '0001/01/01 00:00:00' (DATE) DEFAULT FOR IV_ATTRIBUTE_DATE2 IS '0001/01/01 00:00:00' (DATE) INPUTS ARE iv_start_date (date), iv_end_date (date), IV_ATTRIBUTE_DATE1 (date), IV_ATTRIBUTE_DATE2 (date) VALID='Y' L_Absence_Type_Name = ANC_ABS_TYP_NAME IF (L_Absence_Type_Name = 'Travel Order') and (IV_ATTRIBUTE_DATE1 < iv_start_date) AND (IV_ATTRIBUTE_DATE2 > iv_end_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'Please apply departure date and arraival date in between absence dates' ) IF (L_Absence_Type_Name = 'Travel Order') and (IV_ATTRIBUTE_DATE1 = iv_start_date) AND (IV_ATTRIBUTE_DATE2 > iv_end_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'Please apply arraival date in between absence dates' ) IF (L_Absence_Type_Name = 'Travel Order') and (IV_ATTRIBUTE_DATE1 < iv_start_date) AND (IV_ATTRIBUTE_DATE2 = iv_end_date) THEN ( VALID = 'N' ERROR_MESSAGE = 'Please apply departure date in between absence dates' ) RETURN VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula determines the start date of the calendar leave year for an employee's anniversary year based on their employment dates. It checks various dates such as the bonus vacation date, adjusted service date, and hire date to find the earliest relevant date. write a  date is then used as the anniversary date for the leave year.\n\n***answer***: DEFAULT FOR PER_ASG_USER_PERSON_TYPE IS 'Worker' DEFAULT FOR PER_PERSON_ENTERPRISE_HIRE_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31 00:00:00' (date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE3 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_PER_LATEST_REHIRE_DATE is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE6 is '0001/01/01 00:00:00' (Date) l_log_data = ESS_LOG_WRITE('Bonus vacation date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE3) ) l_log_data = ESS_LOG_WRITE('Adjusted Service date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1) ) l_log_data = ESS_LOG_WRITE('Hire date ...' + to_char(PER_PER_LATEST_REHIRE_DATE) ) if (PER_ASG_REL_ATTRIBUTE_DATE3 WAS NOT DEFAULTED) then ( lv_emp_begin_date =PER_ASG_REL_ATTRIBUTE_DATE3 ) else if ( PER_ASG_REL_ATTRIBUTE_DATE1 WAS NOT DEFAULTED) then ( lv_emp_begin_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) else ( lv_emp_begin_date = PER_REL_ATTRIBUTE_DATE6 ) anniversaryDate = lv_emp_begin_date RETURN anniversaryDate",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the accrual of personal leave for part-time employees based on the number of hours they worked in the previous year. It checks the employee's assignment information and calculates the total hours worked. Depending on the total hours worked, it assigns different accrual amounts:\n\nIf the employee worked between 500 and 999 hours, they accrue 8 hours of leave.\nIf they worked between 1000 and 1499 hours, they accrue 16 hours of leave.\nIf they worked 1500 hours or more, they accrue 24 hours of leave.\n\n***answer***: DEFAULT FOR PER_ASG_FULL_PART_TIME is 'X' DEFAULT FOR PER_ASG_EMPLOYEE_CATEGORY is 'X' L_Person_Id = GET_CONTEXT(PERSON_ID,0) accrual =0 L_prioryear = to_number((to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY')))-1 start_date = to_date(to_char(L_prioryear) || '/01/01' ,'YYYY/MM/DD') end_date = to_date(to_char(L_prioryear) || '/12/31' ,'YYYY/MM/DD') l_date = start_date pt_hours = 0 pt_hours1 =0 LC_ASSIGN_INFO = 'X' l_assign_id = 0 l_worker_category = 'X' l_employment_cat = 'X' WHILE l_date <= end_date LOOP ( CHANGE_CONTEXTS(EFFECTIVE_DATE = (l_date)) ( start_date = start_date end_date = end_date LC_ASSIGN_INFO = 'Y' ||GET_VALUE_SET('TOH_GET_ASSIGNMENT_INFO','|=P_PERSON_ID='''||TO_CHAR(L_Person_Id)||''''|| '|EFFECTIVE_DATE='''||TO_CHAR(l_date, 'YYYY/MM/DD')||'''') l_assign_id = TO_NUMBER(SUBSTR(SUBSTR(LC_ASSIGN_INFO, 1, INSTR(LC_ASSIGN_INFO, '~', 1, 1) - 1), 2)) l_worker_category = SUBSTR(LC_ASSIGN_INFO, INSTR(LC_ASSIGN_INFO, '~', 1, 1) + 1, INSTR(LC_ASSIGN_INFO, '~', 1, 2) - INSTR(LC_ASSIGN_INFO, '~', 1, 1) - 1) l_employment_cat = SUBSTR(LC_ASSIGN_INFO, INSTR(LC_ASSIGN_INFO, '~', 1, 2) + 1) l_log_data = ESS_LOG_WRITE(' LC_ASSIGN_INFO:'+ LC_ASSIGN_INFO +' '+ l_worker_category +' '+ l_employment_cat) IF ( (l_employment_cat = 'PR' OR l_employment_cat = 'PT' ) AND l_worker_category != 'TOH_9' AND LC_ASSIGN_INFO <> 'Y' ) THEN ( pt_hours1 = GET_CALCULATED_HOURS(l_assign_id, 'N', l_date, l_date, 'PAY Regular', 'APPROVED', 0) l_log_data = ESS_LOG_WRITE(' B999l_date:'+ to_char(l_date)+' PER_ASG_FULL_PART_TIME:'+ l_employment_cat +' pt_hours1:'+ to_char(pt_hours1)) ) ELSE pt_hours1 = 0 ) pt_hours = pt_hours + pt_hours1 l_log_data = ESS_LOG_WRITE(' C999l:'+ ' pt_hours:'+ to_char(pt_hours) + ' L_ASS_id: '+ to_char(l_assign_id ) + l_worker_category ) l_date = add_days(l_date,1) ) l_Regular_hours_prioryear = pt_hours L_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) L_Person_Id = GET_CONTEXT(PERSON_ID,0) accrual =0 L_prioryear = to_number((to_char(GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00' (date)),'YYYY')))-1 start_date = to_date(to_char(L_prioryear) || '/01/01' ,'YYYY/MM/DD') end_date = to_date(to_char(L_prioryear) || '/12/31' ,'YYYY/MM/DD') l_Regular_hours_prioryear = GET_REPORTED_HOURS(L_Person_Id, 'Y', start_date, end_date, 'PAY Regular', 'APPROVED', 0) l_log_data = ESS_LOG_WRITE(' Fast Formula Logic and Parameters - Starts') l_log_data = ESS_LOG_WRITE(' L_Person_Id:'+ to_char(L_Person_Id)) l_log_data = ESS_LOG_WRITE(' l_eff_date:'+ to_char(l_eff_date)) l_log_data = ESS_LOG_WRITE(' L_prioryear:'+ to_char(L_prioryear)) l_log_data = ESS_LOG_WRITE(' start_date:'+ to_char(start_date)) l_log_data = ESS_LOG_WRITE(' end_date:'+ to_char(end_date)) l_log_data = ESS_LOG_WRITE(' l_Regular_hours_prioryear:'+ to_char(l_Regular_hours_prioryear)) if (l_Regular_hours_prioryear >= 500 AND l_Regular_hours_prioryear < 1000 ) then ( accrual = 8 l_log_data = ESS_LOG_WRITE(' (l_Regular_hours_prioryear >= 500 AND l_Regular_hours_prioryear < 1000 ) : TRUE') ) else if (l_Regular_hours_prioryear >= 1000 AND l_Regular_hours_prioryear < 1500 ) then ( accrual = 16 l_log_data = ESS_LOG_WRITE(' (l_Regular_hours_prioryear >= 1000 AND l_Regular_hours_prioryear < 1500 ) : TRUE') ) else if (l_Regular_hours_prioryear >= 1500 ) then ( accrual = 24 l_log_data = ESS_LOG_WRITE(' (l_Regular_hours_prioryear >= 1500 ) : TRUE') ) l_log_data = ESS_LOG_WRITE(' Final accrual hours:'+ to_char(accrual)) l_log_data = ESS_LOG_WRITE(' Fast Formula Logic and Parameters - Ends') ceiling = 9999999 carryover = 9999999 return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates sick leave accrual based on the employee's bargaining unit code, employment category, and years of service. It determines the employee's start date and calculates the number of years they have been employed. Based on the number of years of service, it assigns different accrual amounts:\n\n1 year of service: 16 hours of sick leave\n2 years of service: 24 hours of sick leave\n3 years of service: 32 hours of sick leave\n4 or more years of service: 40 hours of sick leave\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'abcd' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT for PER_ASG_BARGAINING_UNIT_CODE is 'abcd' DEFAULT for PER_ASG_EMPLOYMENT_CATEGORY is 'abcd' DEFAULT for PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY is -1 DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE3 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_PER_LATEST_REHIRE_DATE is '0001/01/01 00:00:00' (Date) INPUTS ARE IV_ACCRUALPERIODENDDATE (Date) ,IV_ACCRUALPERIODSTARTDATE (Date) l_Accrual_Period_End_Date = IV_ACCRUALPERIODENDDATE l_Accrual_Period_Start_Date = IV_ACCRUALPERIODSTARTDATE l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) NullText = '**NULL**' l_absence_plan = NullText l_earned_hours = 0 l_accrual_rate = 4 l_bargaining_unit_code = NullText l_employment_Category = NullText l_Years_of_Service = -1 l_standard_hours = 80 l_accrual_rate_table = 'COR_SICK_ACCRUAL_RATE' l_accrual_hours_table = 'COR_ACCRUAL_CALCULATION' l_carryover = 0 l_ceiling = 0 l_approved = 'N' l_grp_type_id = 201 L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Hr_Relationship_Id = GET_CONTEXT(HR_RELATIONSHIP_ID,0) L_AccPlan_Id = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_absence_plan = ANC_ABS_PLN_NAME l_bargaining_unit_code = PER_ASG_BARGAINING_UNIT_CODE l_employment_Category = PER_ASG_EMPLOYMENT_CATEGORY l_Years_of_Service = PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY l_log_data = ESS_LOG_WRITE('Formula COR_SICK_ACCRUAL_CALC Starts ...') l_log_data = ESS_LOG_WRITE('Absence Plan: ' + l_absence_plan + ' ; Bargaining unit: ' + l_bargaining_unit_code + ' ; Employment Category: ' + l_employment_Category ) l_column = upper(l_bargaining_unit_code) l_row = l_employment_Category l_log_data = ESS_LOG_WRITE('Bonus vacation date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE3) ) l_log_data = ESS_LOG_WRITE('Adjusted Service date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1) ) l_log_data = ESS_LOG_WRITE('Hire date ...' + to_char(PER_PER_LATEST_REHIRE_DATE) ) if (PER_ASG_REL_ATTRIBUTE_DATE3 WAS NOT DEFAULTED) then ( lv_emp_begin_date =PER_ASG_REL_ATTRIBUTE_DATE3 ) else if ( PER_ASG_REL_ATTRIBUTE_DATE1 WAS NOT DEFAULTED) then ( lv_emp_begin_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) else ( lv_emp_begin_date = PER_PER_LATEST_REHIRE_DATE ) anniversaryDate = lv_emp_begin_date lv_number_of_years =0 accrual =0 lv_number_of_years = to_number( to_char(l_eff_date,'YYYY') ) - to_number( to_char(anniversaryDate,'YYYY')) if (lv_number_of_years = 1 ) then ( accrual =16 ) else if (lv_number_of_years = 2 ) then ( accrual =24 ) else if (lv_number_of_years = 3 ) then ( accrual =32 ) else if (lv_number_of_years >= 4 ) then ( accrual =40 ) l_log_data = ESS_LOG_WRITE('Rama Accrual: ' + to_char(accrual) + ' + ; Effective Date: ' + to_char(l_eff_date,'YYYY/MM/DD') + ' + ; anniversaryDate : ' + to_char(anniversaryDate,'YYYY/MM/DD') + ' Seniority ' + to_char(lv_number_of_years ) ) l_log_data = ESS_LOG_WRITE(' Formula COR_SICK_ACCRUAL_CALC Ends ...') ceiling = 9999999 carryover = 9999999 return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula calculates vacation accrual based on the employee's bargaining unit code, employment category, and hours worked. It first determines the employee's start date by checking various dates such as the bonus vacation date, adjusted service date, and hire date. If the start date falls on February 29th, it adjusts the date to February 28th.\n\nNext, it calculates the number of service days and years by finding the difference between the accrual period end date and the employee's start date. It also determines the anniversary month and day. The formula checks if the employee's anniversary falls within the accrual period. If it does, it retrieves a bonus accrual amount based on the number of service years.\n\nThe formula then retrieves the total reported and absence hours for the employee during the accrual period. It logs the earned hours for debugging purposes.\n\nFor the accrual calculation:\n\nIf the employee's work hours are 48 or more and their employment category is not 'RS', the accrual is set to 4 hours.\nIf the employment category is 'RS' and the work hours are 40 or more, the accrual is calculated based on the accrual rate and standard hours.\nIf the employee has less than one year of service, the accrual is set to zero.\nThe formula adds any bonus accrual to the calculated accrual.\nFinally, the formula logs the final accrual amount, carryover, and ceiling for debugging purposes and returns the calculated accrual, ceiling, and carryover.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'abcd' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT for PER_ASG_BARGAINING_UNIT_CODE is 'abcd' DEFAULT for PER_ASG_EMPLOYMENT_CATEGORY is 'abcd' DEFAULT for PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY is -1 DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE3 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_PER_LATEST_REHIRE_DATE is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE6 is '0001/01/01 00:00:00' (Date) INPUTS ARE IV_ACCRUALPERIODENDDATE (Date) ,IV_ACCRUALPERIODSTARTDATE (Date) l_Accrual_Period_End_Date = IV_ACCRUALPERIODENDDATE l_Accrual_Period_Start_Date = IV_ACCRUALPERIODSTARTDATE l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) NullText = '**NULL**' l_absence_plan = NullText l_absence_hours = 0 l_reported_hours = 0 l_earned_hours = 0 l_accrual_rate = 4 l_bargaining_unit_code = NullText l_employment_Category = NullText l_Years_of_Service = -1 l_standard_hours = 80 l_accrual_rate_table = 'COR_SICK_ACCRUAL_RATE' l_accrual_hours_table = 'COR_ACCRUAL_CALCULATION' l_carryover = 0 l_ceiling = 0 l_approved = 'Y' l_grp_type_id = 101 l_bonus_accrual = 0 l_accrual_start_date = IV_ACCRUALPERIODSTARTDATE l_accrual_end_date = IV_ACCRUALPERIODENDDATE accrual=0 L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Hr_Relationship_Id = GET_CONTEXT(HR_RELATIONSHIP_ID,0) L_AccPlan_Id = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_absence_plan = ANC_ABS_PLN_NAME l_bargaining_unit_code = PER_ASG_BARGAINING_UNIT_CODE l_employment_Category = PER_ASG_EMPLOYMENT_CATEGORY l_Years_of_Service = PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY l_log_data = ESS_LOG_WRITE('Bonus vacation date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE3) ) l_log_data = ESS_LOG_WRITE('Adjusted Service date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1) ) l_log_data = ESS_LOG_WRITE('Hire date ...' + to_char(PER_PER_LATEST_REHIRE_DATE) ) if (PER_ASG_REL_ATTRIBUTE_DATE3 WAS NOT DEFAULTED) then ( lv_emp_begin_date =PER_ASG_REL_ATTRIBUTE_DATE3 ) else if ( PER_ASG_REL_ATTRIBUTE_DATE1 WAS NOT DEFAULTED) then ( lv_emp_begin_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) else ( lv_emp_begin_date = PER_REL_ATTRIBUTE_DATE6 ) IF to_char(lv_emp_begin_date,'MMDD') = '0229' THEN lv_emp_begin_date = add_days(lv_emp_begin_date,-1) l_service_days =0 l_service_days = DAYS_BETWEEN(l_Accrual_Period_End_Date,lv_emp_begin_date) l_service_years = MONTHS_BETWEEN(l_Accrual_Period_End_Date,lv_emp_begin_date)/12 l_anniversary_month = to_char(lv_emp_begin_date,'MM') l_anniversary_day = to_char(lv_emp_begin_date,'DD') l_current_year = to_char(l_Accrual_Period_Start_Date,'YYYY') l_current_year2 = to_char(l_Accrual_Period_End_Date,'YYYY') l_current_anniversary = to_date(l_anniversary_month||l_anniversary_day||l_current_year,'MMDDYYYY') l_current_anniversary2 = to_date(l_anniversary_month||l_anniversary_day||l_current_year2,'MMDDYYYY') IF (l_current_anniversary >= l_Accrual_Period_Start_Date and l_current_anniversary <= l_Accrual_Period_End_Date) or (l_current_anniversary2 >= l_Accrual_Period_Start_Date and l_current_anniversary2 <= l_Accrual_Period_End_Date) then l_bonus_accrual = to_number(get_table_value('TOH_VACATION_BONUS_ACCRUAL','AMOUNT',to_char(l_service_years),'0')) l_log_data = ESS_LOG_WRITE('Formula Vacation Accrual Starts ...') l_log_data = ESS_LOG_WRITE('Absence Plan: ' + l_absence_plan + ' ; Bargaining unit: ' + l_bargaining_unit_code + ' ; Employment Category: ' + l_employment_Category ) l_column = upper(l_bargaining_unit_code) l_row = l_employment_Category CHANGE_CONTEXTS(GRP_TYPE_ID = l_grp_type_id, HR_ASSIGNMENT_ID= l_hr_assign_id,START_DATE = l_Accrual_Period_Start_Date,APPROVED = l_approved, PERSON_ID= L_Person_Id ,EFFECTIVE_DATE = l_Accrual_Period_End_Date) ( l_reported_hours = TOH_HW_ASG_WORK_HOURS_ASSIGNMENT_ASG_AAP ) l_absence_hours = to_number(get_value_set('TOH_GET_ABS_HOURS', '|=P_ASSIGNMENT_ID='''||to_char(l_person_id)||''''|| '|P_START_DATE='''||to_char(l_accrual_start_date,'YYYY/MM/DD')||''''|| '|P_END_DATE='''||to_char(l_accrual_end_date,'YYYY/MM/DD')||''''|| '|P_CATEGORY='''||'ToH Hours Towards OT'||'''')) l_work_hours = l_reported_hours + l_absence_hours l_log_data = ESS_LOG_WRITE('Updated version Earned Hours = ' + to_char(l_work_hours) + ' ; Standard Hours: ' + to_char(l_standard_hours) + ' ; Accrual Period Start Date: ' + to_char(trunc(l_Accrual_Period_Start_Date))) IF (l_work_hours >= 48 and l_employment_Category <> 'RS') then ( accrual = 4 ) ELSE IF (l_employment_Category ='RS' and l_work_hours >= 40) then ( accrual = least(round((l_accrual_rate/l_standard_hours) * l_work_hours,4),4) ) IF (l_service_days < 365) then ( accrual = 0 ) accrual = accrual + l_bonus_accrual l_log_data = ESS_LOG_WRITE('Rama Vacation Accrual: ' + to_char(accrual) + ' ; Carryover: ' + to_char(l_carryover) + ' ; Ceiling: ' + to_char(l_ceiling) + ' ; Earned Hours = ' + to_char(l_work_hours) + ' ; Standard Hours: ' + to_char(l_standard_hours) + ' ; Accrual Period Start Date: ' + to_char(l_Accrual_Period_Start_Date,'YYYY/MM/DD') ) l_log_data = ess_log_write('Vacation_Accrual : ' || to_char(accrual)) l_log_data = ESS_LOG_WRITE('RN Formula Vacation Accrual Ends ...') ceiling = 999999 carryover = 999999 return accrual,ceiling,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates absence entries to ensure that employees cannot request Workers' Compensation leave if their employment status does not match specific categories. It checks the duration of the requested leave and the employee's employment category. If the employment category is not one of the allowed categories for Workers' Compensation (such as full-time, part-time, or seasonal Workers' Compensation), and the leave duration is greater than zero, the formula sets the validation status to invalid and returns an error message indicating that Workers' Compensation cannot be requested with the current employment status.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'NA' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'NA' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY is ' ' INPUTS ARE iv_start_date (date), iv_end_date (date),IV_TOTALDURATION (number) l_payroll_id = GET_CONTEXT(PAYROLL_ID,0) lv_days = days_between(iv_end_date,iv_start_date) l_hr_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_asg_emp_cat ='XYZ' CHANGE_CONTEXTS (HR_ASSIGNMENT_ID = l_hr_assignment_id, EFFECTIVE_DATE= iv_start_date) ( l_asg_emp_cat = PER_ASG_EMPLOYMENT_CATEGORY ) lv_message = 'NA' VALID='Y' p_emp_cat = 'XYZ'||l_asg_emp_cat if ( trim(p_emp_cat) = 'XYZ' and IV_TOTALDURATION > 0 ) then ( VALID='N' lv_message = 'Workers Compensation cannot be requested when employment status is not Wokrer Comp' ) else if ( ( (l_asg_emp_cat <> 'WC_FT') or (l_asg_emp_cat <> 'WC_PT') or (l_asg_emp_cat <> 'WC_SE') ) and IV_TOTALDURATION > 0 ) then ( VALID='N' lv_message = 'Workers Compensation cannot be requested when employment status is not Wokrer Comp' ) ERROR_MESSAGE = lv_message return VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates sick leave accrual based on the employee's bargaining unit code, employment category, and years of service. Here's a detailed explanation of the calculation process:\n\nDetermine Employee Start Date: The formula checks various dates to determine the employee's start date. It prioritizes the bonus vacation date, adjusted service date, and hire date in that order.\n\nCalculate Years of Service: It calculates the number of years the employee has been in service by finding the difference between the current effective date and the employee's start date.\n\nAccrual Calculation:\n\nIf the employee has completed 1 year of service, they accrue 16 hours of sick leave.\nIf the employee has completed 2 years of service, they accrue 24 hours of sick leave.\nIf the employee has completed 3 years of service, they accrue 32 hours of sick leave.\nIf the employee has completed 4 or more years of service, they accrue 40 hours of sick leave. Return the accrued value\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'abcd' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT for PER_ASG_BARGAINING_UNIT_CODE is 'abcd' DEFAULT for PER_ASG_EMPLOYMENT_CATEGORY is 'abcd' DEFAULT for PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY is -1 DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE1 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_ASG_REL_ATTRIBUTE_DATE3 is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_PER_LATEST_REHIRE_DATE is '0001/01/01 00:00:00' (Date) DEFAULT FOR PER_REL_ATTRIBUTE_DATE6 is '0001/01/01 00:00:00' (Date) INPUTS ARE IV_ACCRUALPERIODENDDATE (Date) ,IV_ACCRUALPERIODSTARTDATE (Date) l_Accrual_Period_End_Date = IV_ACCRUALPERIODENDDATE l_Accrual_Period_Start_Date = IV_ACCRUALPERIODSTARTDATE l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) NullText = '**NULL**' l_absence_plan = NullText l_earned_hours = 0 l_accrual_rate = 4 l_bargaining_unit_code = NullText l_employment_Category = NullText l_Years_of_Service = -1 l_standard_hours = 80 l_accrual_rate_table = 'COR_SICK_ACCRUAL_RATE' l_accrual_hours_table = 'COR_ACCRUAL_CALCULATION' l_carryover = 0 l_ceiling = 0 l_approved = 'N' l_grp_type_id = 201 L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Hr_Relationship_Id = GET_CONTEXT(HR_RELATIONSHIP_ID,0) L_AccPlan_Id = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_absence_plan = ANC_ABS_PLN_NAME l_bargaining_unit_code = PER_ASG_BARGAINING_UNIT_CODE l_employment_Category = PER_ASG_EMPLOYMENT_CATEGORY l_Years_of_Service = PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY l_log_data = ESS_LOG_WRITE('Formula COR_SICK_ACCRUAL_CALC Starts ...') l_log_data = ESS_LOG_WRITE('Absence Plan: ' + l_absence_plan + ' ; Bargaining unit: ' + l_bargaining_unit_code + ' ; Employment Category: ' + l_employment_Category ) l_column = upper(l_bargaining_unit_code) l_row = l_employment_Category l_log_data = ESS_LOG_WRITE('Bonus vacation date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE3) ) l_log_data = ESS_LOG_WRITE('Adjusted Service date ...' + to_char(PER_ASG_REL_ATTRIBUTE_DATE1) ) l_log_data = ESS_LOG_WRITE('Hire date ...' + to_char(PER_PER_LATEST_REHIRE_DATE) ) if (PER_ASG_REL_ATTRIBUTE_DATE3 WAS NOT DEFAULTED) then ( lv_emp_begin_date =PER_ASG_REL_ATTRIBUTE_DATE3 ) else if ( PER_ASG_REL_ATTRIBUTE_DATE1 WAS NOT DEFAULTED) then ( lv_emp_begin_date = PER_ASG_REL_ATTRIBUTE_DATE1 ) else ( lv_emp_begin_date = PER_REL_ATTRIBUTE_DATE6 ) anniversaryDate = lv_emp_begin_date lv_number_of_years =0 accrual =0 lv_number_of_years = to_number( to_char(l_eff_date,'YYYY') ) - to_number( to_char(anniversaryDate,'YYYY')) if (lv_number_of_years = 1 ) then ( accrual =16 ) else if (lv_number_of_years = 2 ) then ( accrual =24 ) else if (lv_number_of_years = 3 ) then ( accrual =32 ) else if (lv_number_of_years >= 4 ) then ( accrual =40 ) l_log_data = ESS_LOG_WRITE('Rama Accrual: ' + to_char(accrual) + ' + ; Effective Date: ' + to_char(l_eff_date,'YYYY/MM/DD') + ' + ; anniversaryDate : ' + to_char(anniversaryDate,'YYYY/MM/DD') + ' Seniority ' + to_char(lv_number_of_years ) ) l_log_data = ESS_LOG_WRITE(' Formula COR_SICK_ACCRUAL_CALC Ends ...') ceiling = 9999999 carryover = 9999999 return accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates jury duty leave requests to ensure that employees do not enter multiple requests for the same type of absence on the same workday. Here's a detailed explanation of the calculation process:\n\nCheck Date Span: The formula first checks if the start and end dates of the leave request are different. If they are, it sets the validation status to invalid and returns an error message indicating that the request should not span over two dates and should be split into two separate requests.\n\nRetrieve Existing Absence Entries: If the start and end dates are the same, the formula retrieves existing absence entries for the given date range. It loops through these entries to check if there are any existing jury duty leave requests that have not been withdrawn.\n\nCalculate Total Duration: The formula calculates the total duration of the existing jury duty leave requests and adds the duration of the new request.\n\nValidate Request: If the total duration of the existing and new jury duty leave requests is greater than the duration of the new request alone, the formula sets the validation status to invalid and returns an error message indicating that multiple jury duty requests cannot be placed on the same workday. Otherwise, it sets the validation status to valid.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is 'NA' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR PER_ASG_NORMAL_HOURS is 0 DEFAULT for ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'NA' INPUTS ARE iv_start_date (date), iv_end_date (date), IV_TOTALDURATION (number) lv_working_hours = PER_ASG_NORMAL_HOURS/5 l_payroll_id = GET_CONTEXT(PAYROLL_ID,0) i=1 j=0 l_abs_duration2 =0 l_absence_type_id= GET_CONTEXT(ABSENCE_TYPE_ID,0) if (trunc(iv_start_date) <> trunc(iv_end_date) ) then ( VALID='N' ERROR_MESSAGE ='Request should not span over two dates ,please split your request into two' ) else ( CHANGE_CONTEXTS(START_DATE=iv_start_date, END_DATE=iv_end_date) ( while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( if(l_absence_type_id=ANC_ABS_ENTRS_ABSENCE_TYPE_ID and ANC_ABS_ENTRS_ABSENCE_STATUS_CD<> 'ORA_WITHDRAWN' ) then ( l_abs_duration2 = l_abs_duration2 + ANC_ABS_ENTRS_DURATION ) i=i+1 ) ) ) l_abs_duration2 = l_abs_duration2 + IV_TOTALDURATION if(l_abs_duration2 <> (IV_TOTALDURATION) ) then ( VALID='N' ERROR_MESSAGE ='You should not place two Jury requests for on one Work day, please withdraw your earlier request and place new one ' ) else( VALID='Y' ) ) return VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates unpaid leave requests to ensure that employees cannot request unpaid leave if they have available leave balances in their vacation, personal paid leave, or floating holiday plans. Here's a detailed explanation of the calculation process:\n\nRetrieve Leave Balances: The formula retrieves the available leave balances for the employee's vacation leave, personal paid leave, and floating holiday plans as of the start date of the leave request.\n\nCheck Leave Balances: It checks if any of the retrieved leave balances are greater than zero. If any of the leave balances are available, the formula sets the validation status to invalid and returns an error message indicating that unpaid leave cannot be requested when leave balances are available.\n\nValidation Result: If none of the leave balances are available, the formula sets the validation status to valid.\n\n***answer***: DEFAULT FOR PER_ASG_FULL_PART_TIME IS ' ' DEFAULT FOR PER_ASG_POS_ATTRIBUTE1 IS ' ' DEFAULT for PER_ASG_PERMANENT_TEMPORARY_FLAG is ' ' INPUTS ARE iv_start_date (date), iv_end_date (date),IV_TOTALDURATION (number) p_effective_date= GET_CONTEXT(EFFECTIVE_DATE,'0001/01/01 00:00:00' (DATE)) l_hr_assignment_id= GET_CONTEXT(HR_ASSIGNMENT_ID,1) p_vacation_plan_name ='ABS Vacation Leave' p_personal_plan_name='ABS Personal Paid Leave' p_floting_plan_name='ABS Floating Holiday' CHANGE_CONTEXTS (HR_ASSIGNMENT_ID = l_hr_assignment_id, EFFECTIVE_DATE= iv_start_date) ( l_vacation_accrual_units = 0 l_vacation_accrual_units = GET_PLAN_BALANCE(p_vacation_plan_name) l_log = PAY_INTERNAL_LOG_WRITE('[GET_PLAN_BALANCE] l_vacation_accrual_units '||TO_CHAR(l_vacation_accrual_units )) ) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID = l_hr_assignment_id, EFFECTIVE_DATE= iv_start_date) ( l_personal_accrual_units = 0 l_personal_accrual_units = GET_PLAN_BALANCE(p_personal_plan_name) l_log = PAY_INTERNAL_LOG_WRITE('[GET_PLAN_BALANCE] l_personal_accrual_units '||TO_CHAR(l_personal_accrual_units)) ) CHANGE_CONTEXTS (HR_ASSIGNMENT_ID = l_hr_assignment_id, EFFECTIVE_DATE= iv_start_date) ( l_floting_accrual_units = 0 l_floting_accrual_units = GET_PLAN_BALANCE(p_floting_plan_name) l_log = PAY_INTERNAL_LOG_WRITE('[GET_PLAN_BALANCE] l_floting_accrual_units '||TO_CHAR(l_floting_accrual_units)) ) if ( ( l_vacation_accrual_units > 0 or l_personal_accrual_units > 0 or l_floting_accrual_units > 0 ) ) then ( VALID = 'N' ERROR_MESSAGE ='Unpaid leave can not be request when Leave balance available' ) else ( VALID = 'Y' ) RETURN VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates sick leave accrual based on the employee's bargaining unit code, employment category, and hours worked. Here's a detailed explanation of the calculation process:\n\nDetermine Employee Information: The formula retrieves the employee's bargaining unit code, employment category, and years of service.\n\nRetrieve Work Hours: It retrieves the total reported and absence hours for the employee during the accrual period. write a  includes both the hours worked and the hours recorded as absence.\n\nCalculate Accrual:\n\nIf the employee's work hours are 48 or more and their employment category is not 'RS', the accrual is set to 4 hours.\nIf the employment category is 'RS' and the work hours are 40 or more, the accrual is calculated based on the accrual rate and standard hours.\nIf the work hours do not meet the above conditions, the accrual is set to zero.\nLogging and Return: The formula logs the calculated accrual amount, carryover, and ceiling for debugging purposes. It then returns the calculated accrual, ceiling, and carryover.\n\n***answer***: DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '4712/12/31 00:00:00' (date) DEFAULT for ANC_ABS_PLN_NAME is 'abcd' DEFAULT for ANC_ABS_PLN_PLAN_UOM is 'H' DEFAULT for PER_ASG_BARGAINING_UNIT_CODE is 'abcd' DEFAULT for PER_ASG_EMPLOYMENT_CATEGORY is 'abcd' DEFAULT for PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY is -1 INPUTS ARE IV_ACCRUALPERIODENDDATE (Date) ,IV_ACCRUALPERIODSTARTDATE (Date) l_Accrual_Period_End_Date = IV_ACCRUALPERIODENDDATE l_Accrual_Period_Start_Date = IV_ACCRUALPERIODSTARTDATE l_eff_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) NullText = '**NULL**' l_absence_plan = NullText l_earned_hours = 0 l_accrual_rate = 4 l_bargaining_unit_code = NullText l_employment_Category = NullText l_Years_of_Service = -1 l_reported_hours = 0 l_absence_hours = 0 l_standard_hours = 80 l_accrual_rate_table = 'COR_SICK_ACCRUAL_RATE' l_accrual_hours_table = 'COR_ACCRUAL_CALCULATION' l_carryover = 0 l_ceiling = 0 l_approved = 'Y' l_grp_type_id = 101 l_accrual_start_date = IV_ACCRUALPERIODSTARTDATE l_accrual_end_date = IV_ACCRUALPERIODENDDATE L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Hr_Relationship_Id = GET_CONTEXT(HR_RELATIONSHIP_ID,0) L_AccPlan_Id = GET_CONTEXT(ACCRUAL_PLAN_ID,0) l_hr_assign_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_absence_plan = ANC_ABS_PLN_NAME l_bargaining_unit_code = PER_ASG_BARGAINING_UNIT_CODE l_employment_Category = PER_ASG_EMPLOYMENT_CATEGORY l_Years_of_Service = PER_REL_LENGTH_OF_SERVICE_BY_SENIORITY l_log_data = ESS_LOG_WRITE('Formula COR_SICK_ACCRUAL_CALC Starts ...') l_log_data = ESS_LOG_WRITE('Absence Plan: ' + l_absence_plan + ' ; Bargaining unit: ' + l_bargaining_unit_code + ' ; Employment Category: ' + l_employment_Category ) l_column = upper(l_bargaining_unit_code) l_row = l_employment_Category CHANGE_CONTEXTS(GRP_TYPE_ID = l_grp_type_id, HR_ASSIGNMENT_ID= l_hr_assign_id,START_DATE = l_Accrual_Period_Start_Date,APPROVED = l_approved, PERSON_ID= L_Person_Id ,EFFECTIVE_DATE = l_Accrual_Period_End_Date) ( l_reported_hours = TOH_HW_ASG_WORK_HOURS_ASSIGNMENT_ASG_AAP ) l_absence_hours = to_number(get_value_set('TOH_GET_ABS_HOURS', '|=P_ASSIGNMENT_ID='''||to_char(l_person_id)||''''|| '|P_START_DATE='''||to_char(l_accrual_start_date,'YYYY/MM/DD')||''''|| '|P_END_DATE='''||to_char(l_accrual_end_date,'YYYY/MM/DD')||''''|| '|P_CATEGORY='''||'ToH Hours Towards OT'||'''')) l_work_hours = l_reported_hours + l_absence_hours l_log_data = ESS_LOG_WRITE('Updated version Earned Hours = ' + to_char(l_work_hours) + ' ; Standard Hours: ' + to_char(l_standard_hours) + ' ; Accrual Period Start Date: ' + to_char(trunc(l_Accrual_Period_Start_Date))) if (l_work_hours >= 48 and l_employment_Category <> 'RS') then ( accrual = 4 ) else if (l_employment_Category ='RS' and l_work_hours >= 40) then ( accrual = least(round((l_accrual_rate/l_standard_hours) * l_work_hours,4),4) ) else ( accrual = 0 ) l_log_data = ESS_LOG_WRITE('Rama Accrual: ' + to_char(accrual) + ' ; Carryover: ' + to_char(l_carryover) + ' ; Ceiling: ' + to_char(l_ceiling) + ' ; Earned Hours = ' + to_char(l_work_hours) + ' ; Standard Hours: ' + to_char(l_standard_hours) + ' ; Accrual Period Start Date: ' + to_char(l_Accrual_Period_Start_Date,'YYYY/MM/DD')+'l_employment_Category' + l_employment_Category ) l_log_data = ESS_LOG_WRITE(' Formula COR_SICK_ACCRUAL_CALC Ends ...') ceiling = 9999999 carryover = 9999999 return accrual,ceiling,carryover",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates the Massachusetts Paid Sick Leave (Non Exempt) requests to ensure that employees do not exceed the allowed 40 hours of leave in a year. Here's a detailed explanation of the calculation process:\n\nInitialize Variables: The formula initializes variables to store the total duration of the new leave request and the start date of the current year.\n\nRetrieve Existing Absence Entries: It retrieves existing absence entries for the given date range (from the start of the year to the start date of the new request). It loops through these entries to check if there are any existing Massachusetts Paid Sick Leave (Non Exempt) requests that have not been withdrawn, saved, or denied.\n\nCalculate Total Duration: The formula calculates the total duration of the existing approved Massachusetts Paid Sick Leave (Non Exempt) requests and adds the duration of the new request.\n\nValidate Request: If the total duration of the existing and new Massachusetts Paid Sick Leave (Non Exempt) requests exceeds 40 hours, the formula sets the validation status to invalid and returns an error message indicating that more than 40 hours cannot be applied for in a year. Otherwise, it sets the validation status to valid.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = '01-Jan-2022' (date) l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (l_abs_typ_name ='Massachusetts Paid Sick Leave (Non Exempt)') AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply more that 40 hours in Massachusetts Paid Sick Leave (Non Exempt) in a year.' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a global ansence entry validation formula to  ensure that employees cannot apply for more than 64 hours of New Mexico Paid Sick Leave in a year by validating the total duration of existing and new requests.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/07/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('30/06/'||to_char(l_next_year)),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'New Mexico Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date('30/06/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date('01/07/'|| to_char(l_prev_year),'DD/MM/YYYY') if (trunc(IV_START_DATE) >= l_curr_year_st) THEN ( l_curr_year_st = l_curr_year_st l_curr_year_end = l_curr_year_end ) if (trunc(IV_START_DATE) < l_curr_year_st) THEN ( l_curr_year_st = l_prev_year_date l_curr_year_end = l_curr_year_date ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 64) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_NM_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: The formula validates Colorado Paid Sick Leave requests to ensure employees do not exceed 48 hours of leave in a year. It checks if the leave duration is in increments of 0.25 hours. It retrieves the total approved absence hours for the current leave year and adds the duration of the new request. If the total exceeds 48 hours, the request is invalid. Otherwise, it is valid.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'Colorado Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_prev_year),'DD/MM/YYYY') l_remainder = mod(l_total_duration,0.25) if (l_remainder <> 0) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_CO_PST_SICK_ERR_MSG' return VALID, ERROR_MESSAGE ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 48) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_CO_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a global absence accrual matrix formula for that calculates sick leave accrual by dividing the total hours worked during the accrual period by 40 and rounding the result\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates Massachusetts Paid Sick Leave (Exempt) requests to ensure that employees do not exceed the allowed 40 hours of leave in a year. It checks the total duration of the new leave request and adds it to the total approved duration of existing leave requests of the same type for the current year. If the total exceeds 40 hours, the request is invalid. Otherwise, it is valid.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = '01-Jan-2022' (date) l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (l_abs_typ_name ='Massachusetts Paid Sick Leave (Exempt)') AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 40 THEN ( VALID = 'N' ERROR_MESSAGE = 'You cannot apply more that 40 hours in Massachusetts Paid Sick Leave (Exempt) in a year.' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates sick leave accrual for Connecticut Sick Leave based on the total hours worked during the accrual period. Here's the calculation logic:\n\nDetermine Hours Worked: The formula checks if the employee has worked more than 680 hours since their hire date or the cutoff date. If the employee has worked more than 680 hours, it calculates the total hours worked during the accrual period.\n\nCalculate Accrual: The formula calculates the accrual by dividing the total hours worked by 40 and rounding the result to two decimal places. If the employee has not yet completed 680 hours, it includes hours worked in the previous accrual period to determine if the threshold is met.\n\nAdjust for Previous Hours: If the employee has completed 680 hours before the cutoff date, the formula includes these hours in the total calculation and adjusts the accrual accordingly. the formula calculates sick leave accrual by dividing the total hours worked during the accrual period by 40 and rounding the result. It ensures that employees meet the 680-hour threshold before accruing sick leave\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00'(date) INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date) accrual = 0 l_accrual_curr = 0 l_accrual_prev = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_enrt_st_date = IV_PLANENROLLMENTSTARTDATE l_enrt_end_date = IV_PLANENROLLMENTENDDATE groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 l_Person_id = GET_CONTEXT(PERSON_ID,1) L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_hours_worked_char = '0' l_hours_worked = 0 l_Hire_date = PER_PERSON_ENTERPRISE_HIRE_DATE l_prev_acc_per_ed_date = '4712/12/31 00:00:00' (date) l_flag = 'N' l_debug = 'Y' l_person_number = GET_VALUE_SET('LHC_FETCH_PERSON_NUMBER_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''') l_cutoff_date = to_date(GET_TABLE_VALUE('LHC_PREVIOUS_YEAR_HOURS_WORKED', 'CONNECTICUT_SICK_LEAVE' ,'CUTOFF_DATE', '4712/12/31'),'YYYY/MM/DD') l_udt_hours = to_number(GET_TABLE_VALUE('LHC_PREVIOUS_YEAR_HOURS_WORKED', 'CONNECTICUT_SICK_LEAVE' ,l_person_number, '0')) if (l_udt_hours = 0) then ( if (l_Hire_date >= l_cutoff_date) then ( l_log_accrual = ess_log_write('Employee who hired after go-live date : ') l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_Hire_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_hours_worked = to_number(l_hours_worked_char) if (l_hours_worked > 680) then ( WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) if (l_flag='N') THEN ( l_prev_acc_per_ed_date=ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_Hire_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_prev_acc_per_ed_date,'YYYY/MM/DD HH24:MI:SS') l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'l_prev_acc_per_ed_date'||to_char(l_prev_acc_per_ed_date)) l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_log = ESS_LOG_WRITE('Vesting Period'||'l_hours_worked_char'||l_hours_worked_char) l_hours_worked = to_number(l_hours_worked_char) l_total_hours = l_hours_worked if (l_total_hours < 680) THEN ( accrual=accrual+Round((l_total_hours/40),2) l_log = ESS_LOG_WRITE('Vesting Period'||'accrual'||TO_CHAR(accrual)) l_flag='Y' ) ) ) ) else ( l_log_accrual = ess_log_write('Existing employee who already completed 680 hours as on go-live date : ') l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(IV_ACCRUALPERIODSTARTDATE,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_hours_worked = to_number(l_hours_worked_char) accrual = Round((l_hours_worked /40),2) ) ) else ( l_log_accrual = ess_log_write('Employee who completed 680 hours before go-live date : ') l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_cutoff_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(IV_ACCRUALPERIODENDDATE,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_hours_worked = to_number(l_hours_worked_char) l_total_hours = l_hours_worked + l_udt_hours if (l_total_hours > 680) then ( WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) if (l_flag='N') THEN ( l_prev_acc_per_ed_date=ADD_DAYS(IV_ACCRUALPERIODSTARTDATE,-1) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_cutoff_date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_prev_acc_per_ed_date,'YYYY/MM/DD HH24:MI:SS') l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'l_prev_acc_per_ed_date'||to_char(l_prev_acc_per_ed_date)) l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_log = ESS_LOG_WRITE('Vesting Period'||'l_hours_worked_char'||l_hours_worked_char) l_hours_worked = to_number(l_hours_worked_char) l_total_hours = l_hours_worked + l_udt_hours if (l_total_hours < 680) THEN ( accrual=accrual+Round((l_total_hours/40),2) l_log = ESS_LOG_WRITE('Vesting Period'||'accrual'||TO_CHAR(accrual)) l_flag='Y' ) ) ) ) if (l_debug = 'Y') then ( l_log_accrual = ess_log_write('PERIOD_START_DATE: ' || to_char(PERIOD_START_DATE)) l_log_accrual = ess_log_write('PERIOD_END_DATE: ' || to_char(PERIOD_END_DATE)) l_log_accrual = ess_log_write('l_enrt_st_date: ' || to_char(l_enrt_st_date)) l_log_accrual = ess_log_write('l_enrt_end_date: ' || to_char(l_enrt_end_date)) l_log_accrual = ess_log_write('l_Person_id: ' || to_char(l_Person_id)) l_log_accrual = ess_log_write('L_Assignemnt_id: ' || to_char(L_Assignemnt_id)) l_log_accrual = ess_log_write('l_hours_worked: ' || to_char(l_hours_worked)) l_log_accrual = ess_log_write('l_hours_worked_char: ' || (l_hours_worked_char)) l_log_accrual = ess_log_write('l_Hire_date: ' || to_char(l_Hire_date)) l_log_accrual = ess_log_write('l_cutoff_date: ' || to_char(l_cutoff_date)) l_log_accrual = ess_log_write('l_udt_hours: ' || to_char(l_udt_hours)) l_log_accrual = ess_log_write('Accrual: ' || to_char(Accrual)) l_log_accrual = ess_log_write('l_person_number: ' || (l_person_number)) ) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:\n\nIt initializes the total hours worked to zero.\nFor each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked.\nAfter summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 40 and rounding the result to two decimal places.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:\n\nIt initializes the total hours worked to zero.\nFor each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked.\nAfter summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 40 and rounding the result to two decimal places.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /40),2) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_CC_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates Arizona Paid Sick Leave requests to ensure that employees do not exceed the allowed 40 hours of leave in a year. It checks the total duration of the new leave request and adds it to the total approved duration of existing leave requests of the same type for the current year. If the total exceeds 40 hours, the request is invalid. Otherwise, it is valid.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'Arizona Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_prev_year),'DD/MM/YYYY') if (trunc(IV_START_DATE) >= l_curr_year_date) THEN ( l_curr_year_st = l_curr_year_date l_curr_year_end = add_days(l_next_year_date,-1) ) if (trunc(IV_START_DATE) < l_curr_year_date) THEN ( l_curr_year_st = l_prev_year_date l_curr_year_end = add_days(l_curr_year_date,-1) ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 40) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_AZ_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:\n\nIt initializes the total hours worked to zero.\nFor each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked.\nAfter summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_person_id = GET_CONTEXT(PERSON_ID,0) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_person_id '||to_char(l_person_id)) l_reg_hours = GET_REPORTED_HOURS(l_person_id,'Y',trunc(Period_start_date),trunc(Period_End_date),'*NULL*','APPROVED',0) l_reg_hours2 = GET_REPORTED_HOURS(l_person_id,'Y',trunc(Period_start_date),trunc(Period_End_date),'*NULL*','*NULL*',0) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_reg_hours '||to_char(l_reg_hours)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_reg_hours2 '||to_char(l_reg_hours2)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. Then, for each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 35 and rounding the result to two decimal places. The final accrual value is then returned\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /35),2) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees do not exceed the allowed sick leave hours.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'California Paid Sick Leave (Non Exempt)' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_prev_year),'DD/MM/YYYY') if (trunc(IV_START_DATE) >= l_curr_year_date) THEN ( l_curr_year_st = l_curr_year_date l_curr_year_end = add_days(l_next_year_date,-1) ) if (trunc(IV_START_DATE) < l_curr_year_date) THEN ( l_curr_year_st = l_prev_year_date l_curr_year_end = add_days(l_curr_year_date,-1) ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 40) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_CA_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the Paid Time Off (PTO) accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For non-salaried employees, it calculates the total hours worked in the first week and determines the first week's accrual based on whether the total hours worked are less than 32 hours. It then repeats the process for the second week. The accrual for each week is calculated as a percentage of the total hours worked, with a maximum limit. For salaried employees, the accrual is set to zero. The final accrual value is then returned\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_NAME is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_ID IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'Begin') l_accrual_matrix = IV_ACCRUAL groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_first_week_accrual = 0 l_second_week_accrual = 0 l_sal_basis = CMP_ASSIGNMENT_SALARY_BASIS_NAME l_asg_status_id = PER_ASG_ASSIGNMENT_STATUS_TYPE_ID l_debug_flag = 'Y' Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_first_week_date = add_days(Period_start_date,6) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_start_date: '||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_End_date '||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'L_Assignemnt_id '||to_char(L_Assignemnt_id)) Accrual = l_accrual_matrix if (l_sal_basis <> 'Salaried') then ( WHILE (Period_start_date <= l_first_week_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) if (l_total_hours_worked < 32) then ( l_first_week_accrual = 0 ) ELSE ( l_first_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) ) l_total_hours_worked = 0 WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) if (l_total_hours_worked < 32) then ( l_second_week_accrual = 0 ) ELSE ( l_second_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) ) accrual = l_first_week_accrual + l_second_week_accrual l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) ) if ((l_sal_basis = 'Salaried') and ((to_char(l_asg_status_id) = '2001') or (to_char(l_asg_status_id) = '2001'))) THEN ( l_log_accrual = ess_log_write('Employee is salaried..') Accrual = 0 ) if (l_debug_flag = 'Y') THEN ( l_log_accrual = ess_log_write('Accrual: ' || to_char(Accrual)) ) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for domestic workers in New York. It first checks if the employee has completed a one-year waiting period from their hire date. If the waiting period is completed, it calculates the average weekly hours worked over the past year. Based on the average hours worked, the formula determines the accrual amount: 24 hours for an average of 30 or more hours per week, 16 hours for an average of 20 to 29 hours per week, and 8 hours for less than 20 hours per week. The final accrual value is then returned.\n\n***answer***: DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_ELEMENT_TYPE_ID IS 0 DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME IS 'XX' DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00'(date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE IS '0001/01/01 00:00:00'(DATE) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME IS 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_VALUE IS 'X' Default FOR PAYROLL_NAME IS 'xx' INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_CALEDARSTARTDATE'|| TO_CHAR(IV_CALEDARSTARTDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_CALEDARENDDATE'|| TO_CHAR(IV_CALEDARENDDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODENDDATE)) l_enter_hire_date=PER_PERSON_ENTERPRISE_HIRE_DATE l_wait_period_end_date=ADD_DAYS(ADD_YEARS(l_enter_hire_date,1),-1) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_wait_period_end_date'||TO_CHAR(l_wait_period_end_date)) accrual = 0 l_hours_worked_char='0' l_hours_worked=0 l_avg_hours = 0 l_Prev_year_start_Date='0001/01/01 00:00:00'(DATE) l_Prev_year_end_Date='0001/01/01 00:00:00'(DATE) l_person_id=GET_CONTEXT(PERSON_ID,0) if (IV_ACCRUALPERIODENDDATE>l_wait_period_end_date AND IV_CALEDARSTARTDATE >= IV_ACCRUALPERIODSTARTDATE AND IV_CALEDARSTARTDATE<=IV_ACCRUALPERIODENDDATE) Then ( l_Prev_year_end_Date= ADD_DAYS(IV_CALEDARSTARTDATE,-1) l_Prev_year_start_Date= ADD_YEARS(l_Prev_year_end_Date,-1) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_Prev_year_start_Date'||TO_CHAR(l_Prev_year_start_Date)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_Prev_year_end_Date'||TO_CHAR(l_Prev_year_end_Date)) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_Prev_year_start_Date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_Prev_year_end_Date,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char'||l_hours_worked_char) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char'||l_hours_worked_char) l_person_number = GET_VALUE_SET('LHC_FETCH_PERSON_NUMBER_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''') l_days_between = days_between(IV_ACCRUALPERIODENDDATE,IV_PLANENROLLMENTSTARTDATE) if (l_days_between < 365) then ( l_hours_worked_char = GET_TABLE_VALUE('LHC_PREVIOUS_YEAR_HOURS_WORKED_UDT', 'NEW_YORK_DOMESTIC_WORKERS' ,l_person_number, '0') l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'Cut off period '||TO_CHAR(l_days_between)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char '||(l_hours_worked_char)) ) l_hours_worked = to_number(l_hours_worked_char) l_avg_hours=l_hours_worked/52 l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_avg_hours'||TO_CHAR(l_avg_hours)) If (l_avg_hours>=30) THEN accrual=24 ELSE IF (l_avg_hours>=20) THEN accrual=16 ELSE accrual=8 ) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee in New Mexico over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees do not exceed the allowed sick leave hours.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'XX' DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_END_DATE(date), IV_START_DATE(date) ,IV_TOTALDURATION l_abs_duration = IV_TOTALDURATION l_absence_type = ANC_ABS_TYP_NAME ld_start_date = IV_START_DATE ld_end_date = IV_END_DATE l_person_id = GET_CONTEXT( PERSON_ID,0) l_absence_type_id = GET_CONTEXT( ABSENCE_TYPE_ID,0) l_absence_name = '$$ ABS TYPE' l_duration_days=0 l_duration_hours=0 l_duration_cal=0 l_duration_weeks=0 l_duration_months=0 l_duration_years=0 l_occurences=0 l_exclude_abs_status = 'ORA_WITHDRAWN' lc_sickness_paid_name = 'New Mexico Paid Sick Leave' ld_start_date = TO_DATE('1951-01-01','yyyy-MM-dd') ld_end_date = TO_DATE('4712-12-31','yyyy-MM-dd') l_count=0 p_duration_hours=0 p_include_type_id=0 l_absence_duration=ANC_ABS_ENTRS_DURATION l_log = ESS_LOG_WRITE('l_count'||'l_count'|| TO_CHAR(l_count)) l_count=GET_ABSENCE_COUNTS (l_person_id , l_absence_type_id, 0, 0, 0, 0, 0, ld_start_date, ld_end_date, l_duration_days, l_duration_hours, l_duration_cal, l_duration_weeks, l_duration_months, l_duration_years, l_occurences, l_exclude_abs_status ) IF (lc_sickness_paid_name=ANC_ABS_TYP_NAME AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED') Then( If ( l_absence_duration + l_count >40 ) Then ( Valid ='N' ERROR_MESSAGE = l_count RETURN VALID, ERROR_MESSAGE ) Else ( Valid='Y' ) ) Return Valid",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'XX' DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_END_DATE(date), IV_START_DATE(date) ,IV_TOTALDURATION l_abs_duration = IV_TOTALDURATION l_absence_type = ANC_ABS_TYP_NAME ld_start_date = IV_START_DATE ld_end_date = IV_END_DATE l_person_id = GET_CONTEXT( PERSON_ID,0) l_absence_type_id = GET_CONTEXT( ABSENCE_TYPE_ID,0) l_absence_name = '$$ ABS TYPE' l_duration_days=0 l_duration_hours=0 l_duration_cal=0 l_duration_weeks=0 l_duration_months=0 l_duration_years=0 l_occurences=0 l_exclude_abs_status = 'ORA_WITHDRAWN' lc_sickness_paid_name = 'New Mexico Paid Sick Leave' ld_start_date = TO_DATE('1951-01-01','yyyy-MM-dd') ld_end_date = TO_DATE('4712-12-31','yyyy-MM-dd') l_count=0 p_duration_hours=0 p_include_type_id=0 l_absence_duration=ANC_ABS_ENTRS_DURATION l_log = ESS_LOG_WRITE('l_count'||'l_count'|| TO_CHAR(l_count)) l_count=GET_ABSENCE_COUNTS (l_person_id , l_absence_type_id, 0, 0, 0, 0, 0, ld_start_date, ld_end_date, l_duration_days, l_duration_hours, l_duration_cal, l_duration_weeks, l_duration_months, l_duration_years, l_occurences, l_exclude_abs_status ) IF (lc_sickness_paid_name=ANC_ABS_TYP_NAME AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED') Then( If ( l_absence_duration + l_count >40 ) Then ( Valid ='N' ERROR_MESSAGE = l_count RETURN VALID, ERROR_MESSAGE ) Else ( Valid='Y' ) ) Return Valid",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned. \n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) l_accrual = 0 l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) l_accrual = l_total_hours_worked/30 accrual = ROUND(l_accrual,2) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned. \n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Period_start_date: '||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Period_End_date '||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'L_Assignemnt_id '||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee in Illinois over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, if the total hours worked are 40 or more, the formula sets the accrual to 1. The final accrual value is then returned.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) IF l_total_hours_worked >=40 THEN ( accrual=1 l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) ) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of Family and Medical Leave Act (FMLA) absences for employees. It checks if the total duration of the submitted FMLA leave, combined with previously recorded FMLA leave within the past year, exceeds 2016 hours. If the total exceeds 2016 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees do not exceed the allowed FMLA leave hours. The formula also excludes absences with statuses \"DENIED\" and \"SAVED\" from the calculation.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = ADD_MONTHS (l_yr_end_date, -12) l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (l_abs_typ_name ='FMLA') AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 2016 THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_FMLA_VALIDATION_MESSAGE' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of voluntary leave absences for employees. It checks if the total duration of the submitted voluntary leave, combined with previously recorded voluntary leave within the current year, exceeds the allowed limit. The formula also ensures that the duration of the leave is a multiple of 4 hours. If the total exceeds the allowed limit or the duration is not a multiple of 4, the formula returns a validation error. Otherwise, it confirms the entry as valid.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ACP_HIRE_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR hr_assign_id IS 0 DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_NAME_ARR IS 'XXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = ADD_MONTHS (l_yr_end_date, -12) l_applicable_abs_days = 0 l_approved_abs_days = 0 l_effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) l_year=to_number(to_char(l_effdate,'YYYY')) l_date = to_date(to_char(l_year)||'/06/30','YYYY/MM/DD') l_start_date_year=to_number(to_char(IV_START_DATE,'YYYY')) l_year_start_date=to_date(to_char(l_start_date_year)||'/01/01','YYYY/MM/DD') l_year_end_date=to_date(to_char(l_start_date_year)||'/12/31','YYYY/MM/DD') l_end_date_year=to_number(to_char(IV_END_DATE,'YYYY')) l_mod=4 if ACP_HIRE_DATE was not defaulted and ACP_HIRE_DATE <= l_date and l_year<=2020 then ( l_days=8 )else if ACP_HIRE_DATE was not defaulted and ACP_HIRE_DATE <= l_date and l_year >2020 then ( l_days=17 ) else ( l_days=8 ) CHANGE_CONTEXTS(START_DATE=l_year_start_date, END_DATE=l_year_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (upper(l_abs_typ_name) = upper('Voluntary Time Off') or upper(l_abs_typ_name) = upper('Paid Time to Volunteer')) AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' and ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days if mod(duration,l_mod) <> 0 then ( VALID = 'N' ERROR_MESSAGE = 'AROC_VOLUNTARY_VALIDATION' ) else if l_applicable_abs_days >= l_days THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_VOL_MAX_LIMIT_VALIDATION' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of Paid Time Off (PTO) absences for employees. It ensures that PTO can only be taken in specific increments: 4 hours for exempt employees and 1 hour for non-exempt employees. The formula also includes custom logic to handle specific shift patterns, such as the \"Rotator 9/80\" shift, and adjusts the validation accordingly. If the duration of the PTO does not meet the required increments or exceeds the allowed limits, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees adhere to the company's PTO policies and guidelines.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for PER_JOBS_LEG_EFF_HRX_US_JOBS_FLSA_STATUS is 'X' DEFAULT for PER_JOB_JOB_CODE is 'X' DEFAULT for PER_ASG_JOB_CODE is 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_NAME_ARR IS 'XXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number),IV_START_TIME(text),IV_END_TIME(text) VALID = 'Y' ERROR_MESSAGE = ' ' lv_Exempt = 0 lv_NonExempt = 0 lv_duration = IV_TOTALDURATION lv_flsa_status = UPPER(PER_JOBS_LEG_EFF_HRX_US_JOBS_FLSA_STATUS) lv_Exempt = MOD(lv_duration,4) lv_NonExempt = MOD(lv_duration,1) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') lc_9_80_flag='N' l_days_between = DAYS_BETWEEN(ld_period_end_date,ld_period_start_date) CHANGE_CONTEXTS(START_DATE=ld_period_start_date, END_DATE=ld_period_end_date) ( i=1 while ANC_ASSIGNED_SHIFT_NAME_ARR.exists(i) loop ( lv_shift_name = ANC_ASSIGNED_SHIFT_NAME_ARR[i] i=i+1 ) ) lv_shift_name = lv_shift_name if (lv_shift_name like 'Rotator 9/80%') then ( lc_9_80_flag='Y' ) lv_Exempt_9 = MOD(lv_duration,9) lv_Exempt_10 = MOD(lv_duration,10) l_friday = 0 l_friday_factor = 0 l_other_day = 0 l_other_factor = 0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE while l_start_date <= l_end_date loop ( if (to_char(l_start_date,'D')) = '6' then ( l_friday = l_friday + 1 ) else if ((to_char(l_start_date,'D')) = '2' OR (to_char(l_start_date,'D')) = '3' OR (to_char(l_start_date,'D')) = '4' OR (to_char(l_start_date,'D')) = '5') then ( l_other_day = l_other_day + 1 ) l_start_date = ADD_DAYS(l_start_date,1) ) IF l_friday <> 0 then l_friday_factor = 4 IF l_other_day <> 0 then l_other_factor = 9 IF l_friday = 0 then l_friday_factor = 0 IF l_other_day = 0 then l_other_factor = 0 l_divisor = 0 l_divisor = (l_other_day*l_other_factor + l_friday*l_friday_factor) lv_Exempt_Dynamic = MOD(lv_duration,l_divisor) IF (((lv_shift_name like '4.5%') AND ((lv_Exempt_9 = 0) OR (lv_Exempt_Dynamic = 0))) OR ((lv_shift_name like '4/10%') AND (lv_Exempt_10 =0))) THEN (VALID = 'Y') ELSE IF PER_ASG_JOB_CODE = PER_JOB_JOB_CODE AND lv_flsa_status = 'EXEMPT' AND lv_Exempt > 0 and lc_9_80_flag='N' THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PTO_EXEMPT_VALIDATION' ) ELSE IF PER_ASG_JOB_CODE = PER_JOB_JOB_CODE AND lv_flsa_status = 'NONEXEMPT' AND lv_NonExempt > 0 and lc_9_80_flag='N' THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PTO_NONEXEMPT_VALIDATION' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of Long-Term Disability (LTD) absences for employees. It checks if the start date of the submitted LTD leave is the day after the end date of the last recorded Short-Term Disability (STD) leave. If the start date does not immediately follow the end date of the last STD leave, the formula returns a validation error. Otherwise, it confirms the entry as valid.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '0001/01/01 00:00:00' (date) Default for IV_ATTRIBUTE_DATE1 is '2050/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_ATTRIBUTE_DATE1 (Date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' last_end_date = '0001/01/01 00:00:00' (date) ERROR_MESSAGE = ' ' Return_date = IV_ATTRIBUTE_DATE1 duration = IV_TOTALDURATION date_start = IV_START_DATE currdtchar = GLOBAL_PAY_INTERFACE_EXTRACTION_DATE Eff1date= to_date(currdtchar,'rrrr/mm/dd') l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='STD') then ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( last_end_date = ANC_ABS_ENTRS_END_DATE ) ) ) ) i=i+1 ) ) IF (TRUNC(ADD_DAYS(last_end_date,1)) <> TRUNC(IV_START_DATE)) then ( VALID = 'N' ERROR_MESSAGE = 'AROC_LTD_ABSENCE_ERROR_MESSAGE' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of personal leave absences for employees. It checks if the employee has any personal leave balance available. If the balance is greater than or equal to one day, the formula returns a validation error, prompting the employee to utilize their personal leave balance first. Otherwise, it confirms the entry as valid.\n\n***answer***: DEFAULT FOR BEN_ABS_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date), iv_end_date (date), IV_TOTALDURATION L_Acrl_Balance_Personal = 0 L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Eff_Dt = IV_START_DATE L_Leave_Balance = 0 SET_INPUT('IV_PERSON_ID', L_Person_Id) SET_INPUT('IV_TERM_ID', L_Term_Id) SET_INPUT('IV_EFF_DT', L_Eff_Dt) EXECUTE('AROC_GET_LEAVE_BALANCE_FORMULA') L_Acrl_Balance_Personal = GET_OUTPUT('L_Leave_Balance', 0) IF (L_Acrl_Balance_Personal >= 1 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PERSONAL_LEAVE_VALIDATION' ) else ( VALID = 'Y' ) return VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a absence accrual formula to return the absence balance of Annual Leave for the employee\n\n***answer***: INPUTS ARE IV_PERSON_ID,IV_TERM_ID,IV_EFF_DT (DATE) DEFAULT FOR IV_PERSON_ID IS 0 DEFAULT FOR IV_TERM_ID IS 0 DEFAULT FOR IV_EFF_DT IS '2014/01/01' (DATE) L_Leave_Balance = 0 L_Accrual_Plan_ID = 300000052099598 L_Term_Id = IV_TERM_ID L_Person_Id = IV_PERSON_ID L_Eff_Dt = IV_EFF_DT CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = L_Accrual_Plan_ID, HR_ASSIGNMENT_ID = L_Term_Id, PERSON_ID = L_Person_Id, EFFECTIVE_DATE =L_Eff_Dt ) ( L_Leave_Balance = GET_ACCRUAL_BALANCE() ) return L_Leave_Balance",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to return the Global Assignment ID for an employee. It starts by retrieving the employee's ID and assignment ID from the context. Then, it iterates through the list of external assignments for the employee, checking for an active and primary assignment. Once it finds such an assignment, it sets the Global Assignment ID to that assignment's ID and exits the loop. The final Global Assignment ID is then returned. \n\n***answer***: DEFAULT FOR PER_ASG_ASSIGNMENT_ID is 0 L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_EFFECTIVE_DATE = GET_CONTEXT(EFFECTIVE_DATE,to_date('1951/01/01 00:00:00')) COUNT_FOR_ASG = 0 l = ess_log_write('GLOBAL 0:'||to_char(L_EFFECTIVE_DATE)||'PERSONID'||TO_CHAR(L_Person_ID)) KOUNT = PER_EXT_ASG_PERSON_ID.FIRST(-1234) WHILE PER_EXT_ASG_PERSON_ID.EXISTS(KOUNT) LOOP ( IF (L_Person_ID = PER_EXT_ASG_PERSON_ID[KOUNT]) THEN ( IF (PER_EXT_ASG_STATUS_TYPE[KOUNT] = 'ACTIVE' AND PER_EXT_ASG_PRIMARY_FLAG[KOUNT] = 'Y') THEN ( COUNT_FOR_ASG = KOUNT l = ess_log_write('GLOBAL:'||TO_CHAR(PER_EXT_ASG_ASSIGNMENT_ID[COUNT_FOR_ASG])) HR_NEW_ASSIGNMENT_ID = PER_EXT_ASG_ASSIGNMENT_ID[COUNT_FOR_ASG] EXIT ) ) KOUNT = PER_EXT_ASG_PERSON_ID.NEXT(KOUNT,-1234) ) RETURN HR_NEW_ASSIGNMENT_ID",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is Oracle Fast Formula?\n\n***answer***: Oracle Fast Formula is a tool used for creating custom business logic in Oracle HCM and Payroll. It allows you to define logic and calculations for things like payroll processing, benefits, and other HR processes. RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the syntax structure of a Fast Formula?\n\n***answer***: Fast Formula syntax typically consists of variables, functions, operators, and expressions. The formula logic is written in statements, and it usually ends with a RETURN statement to specify the output. RETURN variable",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What are the types of Fast Formulas?\n\n***answer***: There are three main types of Fast Formulas - Element Entry Formula, Validation Formula, and Aggregate Formula. RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you declare a variable in Oracle Fast Formula?\n\n***answer***: Variables are declared using the VARIABLE keyword followed by the variable name and type. VARIABLE salary NUMBER RETURN salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you return a value in a Fast Formula?\n\n***answer***: The result of the formula is returned using the RETURN statement. RETURN salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What types of data can a Fast Formula handle?\n\n***answer***: Fast Formulas handle various data types like NUMBER, DATE, CHAR, and BOOLEAN. RETURN data_type",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Can Fast Formulas use IF-ELSE conditions?\n\n***answer***: Yes, Fast Formulas can use IF-ELSE statements to control the flow based on conditions. IF salary > 1000 THEN bonus = salary * 0.1 ELSE bonus = 0 RETURN bonus",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you perform arithmetic operations in Fast Formula?\n\n***answer***: You can perform arithmetic operations using standard operators like +, -, *, /, and %. total_salary = basic_salary + bonus RETURN total_salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What are constants in Oracle Fast Formula?\n\n***answer***: Constants are predefined values, such as PI, TRUE, FALSE, and NULL. constant_value = 100 RETURN constant_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you write comments in Oracle Fast Formula?\n\n***answer***: You can write single-line comments using --, and multi-line comments using . -- This is a comment RETURN total_salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the use of NVL function in Fast Formula?\n\n***answer***: The NVL function replaces NULL values with a specified value. result = NVL(salary, 0) RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you use the TO_NUMBER function in Fast Formula?\n\n***answer***: The TO_NUMBER function converts a string to a numeric value. salary = TO_NUMBER('2000') RETURN salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What does the FUND function do?\n\n***answer***: The FUND function retrieves the value of a specific payroll element for an employee. fund_value = FUND('Earnings') RETURN fund_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the purpose of SYSDATE in a Fast Formula?\n\n***answer***: SYSDATE returns the current system date and time. current_date = SYSDATE RETURN current_date",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How can you round a number in Fast Formula?\n\n***answer***: Use the ROUND function to round a number to a specified decimal place. rounded_salary = ROUND(salary, 2) RETURN rounded_salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What does TRUNC do in Oracle Fast Formula?\n\n***answer***: The TRUNC function truncates a number or date to a specified precision. truncated_value = TRUNC(salary, 1) RETURN truncated_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the LENGTH function used for in Fast Formula?\n\n***answer***: The LENGTH function returns the length of a string. string_length = LENGTH('Oracle') RETURN string_length",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you compare two strings in Fast Formula?\n\n***answer***: Strings can be compared using = for equality or <> for inequality. IF name1 = name2 THEN RETURN 'Names are equal' ELSE RETURN 'Names are different'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How can you use UPPER and LOWER in Fast Formula?\n\n***answer***: The UPPER function converts a string to uppercase, and LOWER converts a string to lowercase. upper_name = UPPER('john') RETURN upper_name",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the ADD_MONTHS function in Fast Formula?\n\n***answer***: The ADD_MONTHS function adds or subtracts months from a given date. future_date = ADD_MONTHS(SYSDATE, 3) RETURN future_date",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you define a loop in Oracle Fast Formula?\n\n***answer***: You can define a FOR loop to iterate over a range of values. FOR i IN 1..10 LOOP result = i * 10 END LOOP RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the purpose of IS NULL in Fast Formula?\n\n***answer***: IS NULL is used to check if a value is NULL. IF variable IS NULL THEN RETURN 0 ELSE RETURN variable",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you handle errors in Fast Formula?\n\n***answer***: Fast Formula does not have built-in error handling mechanisms, but you can use RAISE to raise an error explicitly in the logic. IF salary < 0 THEN RAISE_APPLICATION_ERROR(-20001, 'Salary cannot be negative') RETURN salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Can you call external APIs from within a Fast Formula?\n\n***answer***: No, Fast Formula cannot call external APIs. It is designed to work within the Oracle HCM environment for internal logic. RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the GET_ELEMENT_ENTRY_VALUE function used for?\n\n***answer***: This function is used to retrieve the value of a payroll element for a specific employee within a given date range. element_value = GET_ELEMENT_ENTRY_VALUE('Earnings', '01-JAN-2024', '31-JAN-2024') RETURN element_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you access employee data in Fast Formula?\n\n***answer***: Employee data can be accessed through variables like PER_PERSONAL, PER_ASSIGNMENT, and others related to employee information. employee_name = PER_PERSONAL.FIRST_NAME RETURN employee_name",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How can you calculate payroll deductions using Fast Formula?\n\n***answer***: Payroll deductions can be calculated by defining a formula that uses payroll elements and applying the appropriate logic. deduction = salary * deduction_rate RETURN deduction",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the difference between ELEMENT_ENTRY and ELEMENT_TYPE in Fast Formula?\n\n***answer***: ELEMENT_ENTRY refers to a specific payroll element\u2019s value for an employee, while ELEMENT_TYPE refers to the classification of the payroll element. element_value = ELEMENT_ENTRY('Earnings') RETURN element_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you concatenate two strings in Fast Formula?\n\n***answer***: You concatenate strings using the || operator. full_name = first_name || ' ' || last_name RETURN full_name",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the use of CEIL function in Fast Formula?\n\n***answer***: The CEIL function rounds a number up to the nearest integer. rounded_salary = CEIL(salary) RETURN rounded_salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the purpose of the DEBUG function in Fast Formula?\n\n***answer***: The DEBUG function outputs debug messages to assist with formula troubleshooting. DEBUG('Current value of salary ' || salary) RETURN salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Why should you avoid using SELECT statements in Fast Formula?\n\n***answer***: Fast Formula is optimized for in-memory processing, and using SELECT statements may slow down performance. RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you ensure a Fast Formula executes efficiently?\n\n***answer***: Keep logic simple, avoid complex loops, minimize database calls, and use built-in functions like NVL for efficiency. IF NVL(salary, 0) > 1000 THEN RETURN salary ELSE RETURN 0",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Can you debug a Fast Formula in Oracle HCM?\n\n***answer***: Yes, you can use DEBUG functions or log output to debug Fast Formulas. DEBUG('Formula output ' || result) RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the impact of using too many nested IF statements in a Fast Formula?\n\n***answer***: Overusing nested IF statements can make the formula harder to read and may impact performance. IF salary > 1000 THEN IF salary < 2000 THEN RETURN salary * 0.1 ELSE RETURN salary * 0.2 RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the purpose of using the `COALESCE` function in Fast Formula?\n\n***answer***: The `COALESCE` function returns the first non-NULL value in a list of expressions. COALESCE(variable1, variable2, 'default') RETURN COALESCE(variable1, variable2, 'default')",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you define a constant value in a Fast Formula?\n\n***answer***: You define a constant using the `CONSTANT` keyword. CONSTANT TAX_RATE NUMBER(3,2) = 0.15 RETURN TAX_RATE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `ROUND` function used for in Fast Formula?\n\n***answer***: The `ROUND` function rounds a numeric value to a specified decimal place. rounded_value = ROUND(value, 2) RETURN rounded_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the difference between `IF-THEN-ELSE` and `CASE` statements in Fast Formula?\n\n***answer***: `IF-THEN-ELSE` allows you to execute conditional logic with multiple conditions. A `CASE` statement evaluates multiple conditions and returns a result based on the first matching condition. CASE WHEN condition1 THEN result1 WHEN condition2 THEN result2 ELSE default_result END RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you use `SELECT` in Fast Formula to query element values?\n\n***answer***: `SELECT` statements should be avoided in Fast Formula. It is designed for in-memory calculations, and queries against the database can slow down performance. Fast Formula uses other methods to fetch values. RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if a number is even or odd in Fast Formula?\n\n***answer***: You can use the modulus operator `%` to check if a number is divisible by 2. IF number % 2 = 0 THEN RETURN 'Even' ELSE RETURN 'Odd'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the purpose of the `PER_PERSONAL` table in Fast Formula?\n\n***answer***: The `PER_PERSONAL` table holds personal information about employees, such as their names, address, and contact details. employee_name = PER_PERSONAL.FIRST_NAME RETURN employee_name",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How can you extract the year from a date in Fast Formula?\n\n***answer***: You can use the `EXTRACT` function to extract the year part of a date. year = EXTRACT(YEAR FROM SYSDATE) RETURN year",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `SELECT_VALUE` function used for in Fast Formula?\n\n***answer***: The `SELECT_VALUE` function retrieves a specific value from a list or table based on a condition. value = SELECT_VALUE('Element', 'Condition') RETURN value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Can you use `NULLIF` in Fast Formula?\n\n***answer***: Yes, `NULLIF` returns `NULL` if two expressions are equal. Otherwise, it returns the first expression. result = NULLIF(value1, value2) RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `GET_EMPLOYEE_DATE` function in Fast Formula?\n\n***answer***: The `GET_EMPLOYEE_DATE` function retrieves the date associated with an employee's record for a specific event, such as hiring date. hire_date = GET_EMPLOYEE_DATE('HIRE_DATE') RETURN hire_date",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate the difference between two dates in Fast Formula?\n\n***answer***: You can subtract two dates to find the difference in days. date_diff = end_date - start_date RETURN date_diff",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `TRIM` function used for in Fast Formula?\n\n***answer***: The `TRIM` function removes leading and trailing spaces from a string. trimmed_string = TRIM(' Hello ') RETURN trimmed_string",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `ISDATE` function in Fast Formula?\n\n***answer***: The `ISDATE` function checks if a given expression is a valid date. IF ISDATE('2024-12-31') THEN RETURN 'Valid Date' ELSE RETURN 'Invalid Date'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How can you set a default value in Fast Formula?\n\n***answer***: You can use the `NVL` or `COALESCE` function to set a default value for NULL values. default_value = NVL(variable, 0) RETURN default_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you define a loop for a range of values in Fast Formula?\n\n***answer***: Use a `FOR` loop to iterate over a specified range. FOR i IN 1..5 LOOP result = i * 10 END LOOP RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you compare two dates in Fast Formula?\n\n***answer***: You can use standard comparison operators like `=`, `<`, or `>` to compare dates. IF start_date > end_date THEN RETURN 'Invalid date range' ELSE RETURN 'Valid date range'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What does `PER_ASSIGNMENT` represent in Fast Formula?\n\n***answer***: The `PER_ASSIGNMENT` table holds information about an employee\u2019s assignment, such as job, location, and department. assignment_name = PER_ASSIGNMENT.JOB RETURN assignment_name",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if a string is empty in Fast Formula?\n\n***answer***: You can use `LENGTH` function to check if a string is empty. IF LENGTH(string) = 0 THEN RETURN 'Empty' ELSE RETURN 'Not Empty'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the purpose of the `MONTHS_BETWEEN` function?\n\n***answer***: The `MONTHS_BETWEEN` function returns the number of months between two dates. months_diff = MONTHS_BETWEEN(end_date, start_date) RETURN months_diff",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `LAST_DAY` function used for in Fast Formula?\n\n***answer***: The `LAST_DAY` function returns the last day of the month for a given date. last_day_of_month = LAST_DAY(SYSDATE) RETURN last_day_of_month",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate the sum of a range of values in Fast Formula?\n\n***answer***: You can use a `FOR` loop to sum values over a range. sum = 0 FOR i IN 1..5 LOOP sum = sum + i END LOOP RETURN sum",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you handle NULL values when performing calculations in Fast Formula?\n\n***answer***: Use `NVL` or `COALESCE` functions to replace NULL values with a default value. total = NVL(value, 0) + 100 RETURN total",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the difference between `<>` and `!=` in Fast Formula?\n\n***answer***: Both `<>` and `!=` are used for inequality comparisons in Fast Formula. They are functionally identical. IF value <> 100 THEN RETURN 'Not Equal' ELSE RETURN 'Equal'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if a value exists in a list in Fast Formula?\n\n***answer***: Use a combination of `CASE` or `IF-THEN-ELSE` to check if a value is part of a predefined list. IF value IN ('A', 'B', 'C') THEN RETURN 'Found' ELSE RETURN 'Not Found'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `PER_JOB` table used for in Fast Formula?\n\n***answer***: The `PER_JOB` table holds job-related information for an employee, such as job code and description. job_description = PER_JOB.DESCRIPTION RETURN job_description",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you format a date in Fast Formula?\n\n***answer***: You can use `TO_CHAR` to format a date in a specific format. formatted_date = TO_CHAR(SYSDATE, 'DD-MON-YYYY') RETURN formatted_date",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you assign a value to a variable in Fast Formula?\n\n***answer***: You simply use the assignment operator (`=`) to assign values to variables. salary = basic_salary + bonus RETURN salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you implement a conditional calculation in Fast Formula?\n\n***answer***: You can use an `IF-THEN-ELSE` statement to apply conditional logic. IF salary > 1000 THEN RETURN salary * 0.1 ELSE RETURN 0",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `GET_ELEMENT_VALUE` function used for?\n\n***answer***: The `GET_ELEMENT_VALUE` function retrieves a specific element\u2019s value for an employee. element_value = GET_ELEMENT_VALUE('Bonus') RETURN element_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you generate a random number in Fast Formula?\n\n***answer***: You can use the `DBMS_RANDOM.VALUE` function to generate a random number. random_number = DBMS_RANDOM.VALUE(1, 100) RETURN random_number",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you create a date from separate year, month, and day values?\n\n***answer***: You can use the `TO_DATE` function to create a date from year, month, and day values. date_value = TO_DATE(year || '-' || month || '-' || day, 'YYYY-MM-DD') RETURN date_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate age from a date of birth in Fast Formula?\n\n***answer***: Use `SYSDATE` and subtract the birth date to calculate the age in years. age = FLOOR(MONTHS_BETWEEN(SYSDATE, birth_date) / 12) RETURN age",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate the percentage of a value in Fast Formula?\n\n***answer***: You can calculate the percentage by multiplying the value by the percentage. percentage_value = value * 0.15 RETURN percentage_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `DECODE` function used for in Fast Formula?\n\n***answer***: The `DECODE` function is similar to a CASE or IF-THEN-ELSE expression. It returns a value based on a condition. result = DECODE(variable, 'A', 'Yes', 'B', 'No', 'Unknown') RETURN result",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if an employee has a specific assignment status?\n\n***answer***: You can use `PER_ASSIGNMENT.STATUS` to check the assignment status. IF PER_ASSIGNMENT.STATUS = 'ACTIVE' THEN RETURN 'Active Employee' ELSE RETURN 'Inactive Employee'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate the number of workdays between two dates?\n\n***answer***: Use the `WORKDAYS_BETWEEN` function to find the number of workdays between two dates. workdays_diff = WORKDAYS_BETWEEN(start_date, end_date) RETURN workdays_diff",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the purpose of the `GET_ELEMENT_ENTRY_VALUE` function?\n\n***answer***: `GET_ELEMENT_ENTRY_VALUE` retrieves the value of a payroll element for a specific employee within a date range. element_value = GET_ELEMENT_ENTRY_VALUE('Earnings', '01-JAN-2024', '31-JAN-2024') RETURN element_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you get the current year in Fast Formula?\n\n***answer***: You can use the `EXTRACT` function to extract the current year from the system date. current_year = EXTRACT(YEAR FROM SYSDATE) RETURN current_year",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you compare two numbers in Fast Formula?\n\n***answer***: Use standard comparison operators such as `=`, `>`, `<`, `>=`, `<=`, and `<>`. IF salary > 1000 THEN RETURN 'Above threshold' ELSE RETURN 'Below threshold'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `LEAST` function used for in Fast Formula?\n\n***answer***: The `LEAST` function returns the smallest value in a list of expressions. smallest_value = LEAST(value1, value2, value3) RETURN smallest_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `GREATEST` function used for in Fast Formula?\n\n***answer***: The `GREATEST` function returns the largest value in a list of expressions. largest_value = GREATEST(value1, value2, value3) RETURN largest_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you get the first day of the current month in Fast Formula?\n\n***answer***: You can use the `TRUNC` function to get the first day of the current month. first_day_of_month = TRUNC(SYSDATE, 'MM') RETURN first_day_of_month",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you perform a case-insensitive comparison of strings in Fast Formula?\n\n***answer***: Use the `UPPER` or `LOWER` functions to make a case-insensitive comparison. IF UPPER(name) = UPPER('John') THEN RETURN 'Match' ELSE RETURN 'No Match'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if a number is negative in Fast Formula?\n\n***answer***: You can use an `IF` statement to check if a number is less than zero. IF number < 0 THEN RETURN 'Negative' ELSE RETURN 'Positive'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you format a currency value in Fast Formula?\n\n***answer***: Use `TO_CHAR` with a format mask to format a value as currency. formatted_value = TO_CHAR(value, '999,999.99') RETURN formatted_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if a date is in the future in Fast Formula?\n\n***answer***: You can use the `SYSDATE` to compare the date with the current system date. IF date > SYSDATE THEN RETURN 'Future Date' ELSE RETURN 'Past Date'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What does the `ADD_MONTHS` function do in Fast Formula?\n\n***answer***: The `ADD_MONTHS` function adds a specified number of months to a date. future_date = ADD_MONTHS(SYSDATE, 3) RETURN future_date",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate the difference between two times in Fast Formula?\n\n***answer***: You can subtract one time value from another to calculate the difference. time_diff = time_end - time_start RETURN time_diff",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if a string contains a substring in Fast Formula?\n\n***answer***: You can use the `INSTR` function to find if a string contains a substring. IF INSTR(string, 'Oracle') > 0 THEN RETURN 'Substring Found' ELSE RETURN 'Substring Not Found'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate the sum of values in a list using Fast Formula?\n\n***answer***: Use a loop to sum the values in a list. sum = 0 FOR i IN 1..count LOOP sum = sum + list(i) END LOOP RETURN sum",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you use `SELECT_VALUE` in Fast Formula?\n\n***answer***: `SELECT_VALUE` is used to retrieve a value from an element or table based on a condition. selected_value = SELECT_VALUE('Element', 'Condition') RETURN selected_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `FLOOR` function in Fast Formula?\n\n***answer***: The `FLOOR` function rounds a numeric value down to the nearest integer. floored_value = FLOOR(value) RETURN floored_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you extract the day of the week from a date in Fast Formula?\n\n***answer***: Use the `TO_CHAR` function to extract the day of the week. day_of_week = TO_CHAR(SYSDATE, 'Day') RETURN day_of_week",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you find the length of an array in Fast Formula?\n\n***answer***: Use the `COUNT` function to find the number of elements in an array. array_length = COUNT(array) RETURN array_length",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate the cumulative sum of a payroll element in Fast Formula?\n\n***answer***: Use the `SUM` function along with a date range to calculate the cumulative sum. cumulative_sum = SUM('Earnings', '01-JAN-2024', '31-DEC-2024') RETURN cumulative_sum",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `PER_JOB` table used for in Fast Formula?\n\n***answer***: The `PER_JOB` table contains job-related data such as job code and job title. job_code = PER_JOB.JOB_CODE RETURN job_code",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you get the last day of the previous month in Fast Formula?\n\n***answer***: Use the `ADD_MONTHS` and `LAST_DAY` functions. last_day_previous_month = LAST_DAY(ADD_MONTHS(SYSDATE, -1)) RETURN last_day_previous_month",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate the annual salary from a monthly salary in Fast Formula?\n\n***answer***: Multiply the monthly salary by 12 to calculate the annual salary. annual_salary = monthly_salary * 12 RETURN annual_salary",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you calculate a weighted average in Fast Formula?\n\n***answer***: Use a weighted formula to calculate the average. weighted_average = (value1 * weight1 + value2 * weight2) / (weight1 + weight2) RETURN weighted_average",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you create a date from a string in Fast Formula?\n\n***answer***: Use the `TO_DATE` function to convert a string to a date. date_value = TO_DATE('2024-12-31', 'YYYY-MM-DD') RETURN date_value",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: What is the `SYSDATE` function used for in Fast Formula?\n\n***answer***: `SYSDATE` returns the current system date and time. current_date = SYSDATE RETURN current_date",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if an element value is greater than a certain threshold in Fast Formula?\n\n***answer***: Use a conditional statement to check the value. IF element_value > threshold THEN RETURN 'Above Threshold' ELSE RETURN 'Below Threshold'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you set an element value conditionally in Fast Formula?\n\n***answer***: Use `IF-THEN` logic to set the value conditionally. IF salary > 5000 THEN bonus = 1000 ELSE bonus = 500 RETURN bonus",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you check if a variable is NULL in Fast Formula?\n\n***answer***: Use the `IS NULL` condition to check for NULL values. IF variable IS NULL THEN RETURN 'NULL' ELSE RETURN 'Not NULL'",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you convert a string to uppercase in Fast Formula?\n\n***answer***: Use the `UPPER` function to convert a string to uppercase. upper_case_string = UPPER('oracle') RETURN upper_case_string",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you use the `LENGTH` function in Fast Formula?\n\n***answer***: The `LENGTH` function returns the length of a string. string_length = LENGTH('Oracle Fast Formula') RETURN string_length",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: How do you concatenate two strings in Fast Formula?\n\n***answer***: Use the `||` operator to concatenate strings. full_name = first_name || ' ' || last_name RETURN full_name",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula validates Arizona Paid Sick Leave requests to ensure that employees do not exceed the allowed 40 hours of leave in a year. It checks the total duration of the new leave request and adds it to the total approved duration of existing leave requests of the same type for the current year. If the total exceeds 40 hours, the request is invalid. Otherwise, it is valid.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'Arizona Paid Sick Leave' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_prev_year),'DD/MM/YYYY') if (trunc(IV_START_DATE) >= l_curr_year_date) THEN ( l_curr_year_st = l_curr_year_date l_curr_year_end = add_days(l_next_year_date,-1) ) if (trunc(IV_START_DATE) < l_curr_year_date) THEN ( l_curr_year_st = l_prev_year_date l_curr_year_end = add_days(l_curr_year_date,-1) ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 40) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_AZ_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates sick leave accrual based on the total hours worked during the accrual period. Here's the calculation logic:\n\nIt initializes the total hours worked to zero.\nFor each day in the accrual period, it retrieves the regular work hours for the assignment and adds them to the total hours worked.\nAfter summing up the total hours worked for the entire period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_person_id = GET_CONTEXT(PERSON_ID,0) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_person_id '||to_char(l_person_id)) l_reg_hours = GET_REPORTED_HOURS(l_person_id,'Y',trunc(Period_start_date),trunc(Period_End_date),'*NULL*','APPROVED',0) l_reg_hours2 = GET_REPORTED_HOURS(l_person_id,'Y',trunc(Period_start_date),trunc(Period_End_date),'*NULL*','*NULL*',0) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_reg_hours '||to_char(l_reg_hours)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'l_reg_hours2 '||to_char(l_reg_hours2)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_AZ_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. Then, for each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 35 and rounding the result to two decimal places. The final accrual value is then returned\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /35),2) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_MI_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees do not exceed the allowed sick leave hours.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for PER_ASG_REL_ORIGINAL_DATE_OF_HIRE is '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_TYP_NAME IS ' ' DEFAULT FOR PER_ASG_LOC_COUNTRY IS 'X' DEFAULT FOR PER_ASG_EMPLOYMENT_CATEGORY IS 'X' DEFAULT FOR PER_ASG_ORG_DEPARTMENT_NAME is 'X' DEFAULT FOR PER_ASG_LEGISLATION_CODE is 'X' DEFAULT FOR PER_ASG_WORK_AT_HOME is 'X' DEFAULT FOR PER_ASG_HOURLY_SALARIED_CODE is 'X' DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD is 'X' DEFAULT FOR PER_ASG_REL_DATE_START IS '4712/12/31' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (DATE) DEFAULT FOR IV_TOTALDURATION IS 0 DEFAULT FOR PER_ASG_GRADE_CODE is '0' DEFAULT FOR ANC_ABS_TYP_NAME IS 'X' DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION Valid = 'Y' l_assignment_id = GET_CONTEXT(HR_ASSIGNMENT_ID,0) l_person_id = GET_CONTEXT(Person_ID,0) l_effective_date = GET_CONTEXT(EFFECTIVE_DATE,'4712/12/31 00:00:00'(date)) l_curr_year = to_char(IV_START_DATE,'YYYY') l_next_year = to_number(l_curr_year) + 1 l_prev_year = to_number(l_curr_year) - 1 l_curr_year_st = to_date(('01/01/'||l_curr_year),'DD/MM/YYYY') l_curr_year_end = to_date(('31/12/'||l_curr_year),'DD/MM/YYYY') l_abs_hrs = 0 l_total_duration = IV_TOTALDURATION l_remainder = 0 i = 1 l_abs_type_name = 'California Paid Sick Leave (Non Exempt)' l_abs_st_date = to_char(IV_START_DATE,'YYYY/MM/DD') l_hire_date = PER_ASG_REL_DATE_START l_curr_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'||l_curr_year,'DD/MM/YYYY') l_next_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_next_year),'DD/MM/YYYY') l_prev_year_date = to_date(to_char(l_hire_date,'DD/MM')||'/'|| to_char(l_prev_year),'DD/MM/YYYY') if (trunc(IV_START_DATE) >= l_curr_year_date) THEN ( l_curr_year_st = l_curr_year_date l_curr_year_end = add_days(l_next_year_date,-1) ) if (trunc(IV_START_DATE) < l_curr_year_date) THEN ( l_curr_year_st = l_prev_year_date l_curr_year_end = add_days(l_curr_year_date,-1) ) l_abs_hrs_round_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_ROUND_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_round_ref = '#' then ( l_abs_hrs_round = '0' ) else ( l_abs_hrs_round = substr(l_abs_hrs_round_ref,1,instr(l_abs_hrs_round_ref,'#')-1) ) l_abs_hrs_decimal_ref = GET_VALUE_SET('LHC_TOTAL_ABS_DURATION_DECIMAL_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''' ||'|P_ABS_ST_DATE='''||l_abs_st_date ||'''' ||'|P_ABS_TYPE='''||l_abs_type_name ||'''' ||'|P_YEAR_ST_DATE='''||to_char(l_curr_year_st,'YYYY/MM/DD') ||'''' ||'|P_YEAR_END_DATE='''||to_char(l_curr_year_end,'YYYY/MM/DD') ||'''') || '#' if l_abs_hrs_decimal_ref = '#' then ( l_abs_hrs_decimal = '0' ) else ( l_abs_hrs_decimal = substr(l_abs_hrs_decimal_ref,1,instr(l_abs_hrs_decimal_ref,'#')-1) ) if ((l_abs_hrs_round = '0') and (l_abs_hrs_decimal = '0')) then ( l_abs_hrs = 0 ) else ( l_abs_hrs = to_number(l_abs_hrs_round||'.'||l_abs_hrs_decimal) ) l_total_hrs = IV_TOTALDURATION + l_abs_hrs if (l_total_hrs > 40) THEN ( Valid = 'N' ERROR_MESSAGE = 'LHC_CA_PST_SICK_ABS_HRS_ERR' return VALID, ERROR_MESSAGE ) return valid,error_message",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the Paid Time Off (PTO) accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For non-salaried employees, it calculates the total hours worked in the first week and determines the first week's accrual based on whether the total hours worked are less than 32 hours. It then repeats the process for the second week. The accrual for each week is calculated as a percentage of the total hours worked, with a maximum limit. For salaried employees, the accrual is set to zero. The final accrual value is then returned\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 DEFAULT FOR CMP_ASSIGNMENT_SALARY_BASIS_NAME is 'XX' DEFAULT FOR PER_ASG_ASSIGNMENT_STATUS_TYPE_ID IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE, IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'Begin') l_accrual_matrix = IV_ACCRUAL groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) l_first_week_accrual = 0 l_second_week_accrual = 0 l_sal_basis = CMP_ASSIGNMENT_SALARY_BASIS_NAME l_asg_status_id = PER_ASG_ASSIGNMENT_STATUS_TYPE_ID l_debug_flag = 'Y' Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_first_week_date = add_days(Period_start_date,6) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_start_date: '||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'Period_End_date '||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('EMEA_UK_TIME_IN_LIEU_ACCRUAL_MATRIX'||'L_Assignemnt_id '||to_char(L_Assignemnt_id)) Accrual = l_accrual_matrix if (l_sal_basis <> 'Salaried') then ( WHILE (Period_start_date <= l_first_week_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) if (l_total_hours_worked < 32) then ( l_first_week_accrual = 0 ) ELSE ( l_first_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) ) l_total_hours_worked = 0 WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) if (l_total_hours_worked < 32) then ( l_second_week_accrual = 0 ) ELSE ( l_second_week_accrual = Least(Round((l_total_hours_worked * 0.02),2),0.8) ) accrual = l_first_week_accrual + l_second_week_accrual l_log = ESS_LOG_WRITE('LHC_HCBC_PTO_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) ) if ((l_sal_basis = 'Salaried') and ((to_char(l_asg_status_id) = '2001') or (to_char(l_asg_status_id) = '2001'))) THEN ( l_log_accrual = ess_log_write('Employee is salaried..') Accrual = 0 ) if (l_debug_flag = 'Y') THEN ( l_log_accrual = ess_log_write('Accrual: ' || to_char(Accrual)) ) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for domestic workers in New York. It first checks if the employee has completed a one-year waiting period from their hire date. If the waiting period is completed, it calculates the average weekly hours worked over the past year. Based on the average hours worked, the formula determines the accrual amount: 24 hours for an average of 30 or more hours per week, 16 hours for an average of 20 to 29 hours per week, and 8 hours for less than 20 hours per week. The final accrual value is then returned.\n\n***answer***: DEFAULT FOR PER_ASG_FTE_VALUE IS 0 DEFAULT FOR PER_ASG_NORMAL_HOURS IS 0 DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_ELEMENT_TYPE_ID IS 0 DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_VALUE_NAME IS 'XX' DEFAULT for PER_PERSON_ENTERPRISE_HIRE_DATE is '0001/01/01 00:00:00'(date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_START_DATE IS '0001/01/01 00:00:00'(DATE) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_EFFECTIVE_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_BASE_ELEMENT_NAME IS 'XX' DEFAULT_DATA_VALUE FOR ELEMENT_ENTRY_RGE_VALUE IS 'X' Default FOR PAYROLL_NAME IS 'xx' INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE (date), IV_ACCRUALPERIODENDDATE (date),IV_CALEDARSTARTDATE(date),IV_CALEDARENDDATE(date), IV_PLANENROLLMENTSTARTDATE(date), IV_PLANENROLLMENTENDDATE(date) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_CALEDARSTARTDATE'|| TO_CHAR(IV_CALEDARSTARTDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_CALEDARENDDATE'|| TO_CHAR(IV_CALEDARENDDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_ACCRUALPERIODSTARTDATE'||TO_CHAR(IV_ACCRUALPERIODSTARTDATE)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'IV_ACCRUALPERIODENDDATE'||TO_CHAR(IV_ACCRUALPERIODENDDATE)) l_enter_hire_date=PER_PERSON_ENTERPRISE_HIRE_DATE l_wait_period_end_date=ADD_DAYS(ADD_YEARS(l_enter_hire_date,1),-1) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_wait_period_end_date'||TO_CHAR(l_wait_period_end_date)) accrual = 0 l_hours_worked_char='0' l_hours_worked=0 l_avg_hours = 0 l_Prev_year_start_Date='0001/01/01 00:00:00'(DATE) l_Prev_year_end_Date='0001/01/01 00:00:00'(DATE) l_person_id=GET_CONTEXT(PERSON_ID,0) if (IV_ACCRUALPERIODENDDATE>l_wait_period_end_date AND IV_CALEDARSTARTDATE >= IV_ACCRUALPERIODSTARTDATE AND IV_CALEDARSTARTDATE<=IV_ACCRUALPERIODENDDATE) Then ( l_Prev_year_end_Date= ADD_DAYS(IV_CALEDARSTARTDATE,-1) l_Prev_year_start_Date= ADD_YEARS(l_Prev_year_end_Date,-1) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_Prev_year_start_Date'||TO_CHAR(l_Prev_year_start_Date)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_Prev_year_end_Date'||TO_CHAR(l_Prev_year_end_Date)) l_param = '|=P_PERSON_ID='||to_char(l_person_id) ||' |P_ST_DATE='|| to_char(l_Prev_year_start_Date,'YYYY/MM/DD HH24:MI:SS')||' |P_ED_DATE='|| to_char(l_Prev_year_end_Date,'YYYY/MM/DD HH24:MI:SS') l_hours_worked_char = GET_VALUE_SET_VALUE('LHC_GET_REGULAR_HOURS_WORKED',l_param ) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char'||l_hours_worked_char) IF ISNULL(l_hours_worked_char) = 'N' THEN l_hours_worked_char = '0' l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char'||l_hours_worked_char) l_person_number = GET_VALUE_SET('LHC_FETCH_PERSON_NUMBER_VS','|=P_PERSON_ID='''||to_char(l_person_id)||'''') l_days_between = days_between(IV_ACCRUALPERIODENDDATE,IV_PLANENROLLMENTSTARTDATE) if (l_days_between < 365) then ( l_hours_worked_char = GET_TABLE_VALUE('LHC_PREVIOUS_YEAR_HOURS_WORKED_UDT', 'NEW_YORK_DOMESTIC_WORKERS' ,l_person_number, '0') l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'Cut off period '||TO_CHAR(l_days_between)) l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_hours_worked_char '||(l_hours_worked_char)) ) l_hours_worked = to_number(l_hours_worked_char) l_avg_hours=l_hours_worked/52 l_log = ESS_LOG_WRITE('LHC_NY_DOM_ACCRUAL_MATRIX'||'l_avg_hours'||TO_CHAR(l_avg_hours)) If (l_avg_hours>=30) THEN accrual=24 ELSE IF (l_avg_hours>=20) THEN accrual=16 ELSE accrual=8 ) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee in New Mexico over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees do not exceed the allowed sick leave hours.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'XX' DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_END_DATE(date), IV_START_DATE(date) ,IV_TOTALDURATION l_abs_duration = IV_TOTALDURATION l_absence_type = ANC_ABS_TYP_NAME ld_start_date = IV_START_DATE ld_end_date = IV_END_DATE l_person_id = GET_CONTEXT( PERSON_ID,0) l_absence_type_id = GET_CONTEXT( ABSENCE_TYPE_ID,0) l_absence_name = '$$ ABS TYPE' l_duration_days=0 l_duration_hours=0 l_duration_cal=0 l_duration_weeks=0 l_duration_months=0 l_duration_years=0 l_occurences=0 l_exclude_abs_status = 'ORA_WITHDRAWN' lc_sickness_paid_name = 'New Mexico Paid Sick Leave' ld_start_date = TO_DATE('1951-01-01','yyyy-MM-dd') ld_end_date = TO_DATE('4712-12-31','yyyy-MM-dd') l_count=0 p_duration_hours=0 p_include_type_id=0 l_absence_duration=ANC_ABS_ENTRS_DURATION l_log = ESS_LOG_WRITE('l_count'||'l_count'|| TO_CHAR(l_count)) l_count=GET_ABSENCE_COUNTS (l_person_id , l_absence_type_id, 0, 0, 0, 0, 0, ld_start_date, ld_end_date, l_duration_days, l_duration_hours, l_duration_cal, l_duration_weeks, l_duration_months, l_duration_years, l_occurences, l_exclude_abs_status ) IF (lc_sickness_paid_name=ANC_ABS_TYP_NAME AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED') Then( If ( l_absence_duration + l_count >40 ) Then ( Valid ='N' ERROR_MESSAGE = l_count RETURN VALID, ERROR_MESSAGE ) Else ( Valid='Y' ) ) Return Valid",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of sick leave absences for employees. It checks if the total duration of the submitted sick leave, combined with previously recorded sick leave, exceeds 40 hours within a specified period. If the total exceeds 40 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid.\n\n***answer***: DEFAULT FOR IV_START_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR IV_END_DATE IS '4712/12/31 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_ABSENCE_STATUS_CD IS 'XX' DEFAULT FOR ANC_ABS_TYP_NAME IS 'XX' DEFAULT FOR ANC_ABS_ENTRS_DURATION IS 0 INPUTS ARE IV_END_DATE(date), IV_START_DATE(date) ,IV_TOTALDURATION l_abs_duration = IV_TOTALDURATION l_absence_type = ANC_ABS_TYP_NAME ld_start_date = IV_START_DATE ld_end_date = IV_END_DATE l_person_id = GET_CONTEXT( PERSON_ID,0) l_absence_type_id = GET_CONTEXT( ABSENCE_TYPE_ID,0) l_absence_name = '$$ ABS TYPE' l_duration_days=0 l_duration_hours=0 l_duration_cal=0 l_duration_weeks=0 l_duration_months=0 l_duration_years=0 l_occurences=0 l_exclude_abs_status = 'ORA_WITHDRAWN' lc_sickness_paid_name = 'New Mexico Paid Sick Leave' ld_start_date = TO_DATE('1951-01-01','yyyy-MM-dd') ld_end_date = TO_DATE('4712-12-31','yyyy-MM-dd') l_count=0 p_duration_hours=0 p_include_type_id=0 l_absence_duration=ANC_ABS_ENTRS_DURATION l_log = ESS_LOG_WRITE('l_count'||'l_count'|| TO_CHAR(l_count)) l_count=GET_ABSENCE_COUNTS (l_person_id , l_absence_type_id, 0, 0, 0, 0, 0, ld_start_date, ld_end_date, l_duration_days, l_duration_hours, l_duration_cal, l_duration_weeks, l_duration_months, l_duration_years, l_occurences, l_exclude_abs_status ) IF (lc_sickness_paid_name=ANC_ABS_TYP_NAME AND ANC_ABS_ENTRS_ABSENCE_STATUS_CD = 'SUBMITTED') Then( If ( l_absence_duration + l_count >40 ) Then ( Valid ='N' ERROR_MESSAGE = l_count RETURN VALID, ERROR_MESSAGE ) Else ( Valid='Y' ) ) Return Valid",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned. \n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_MA_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) l_accrual = 0 l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_MA_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) l_accrual = l_total_hours_worked/30 accrual = ROUND(l_accrual,2) l_log = ESS_LOG_WRITE('LHC_MA_PST_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, it calculates the accrual by dividing the total hours worked by 30 and rounding the result to two decimal places. The final accrual value is then returned. \n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT FOR LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Begin') groupTypeId = 201 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Period_start_date: '||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'Period_End_date '||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'L_Assignemnt_id '||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) accrual = Round((l_total_hours_worked /30),2) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) l_log = ESS_LOG_WRITE('LHC_OR_PST_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula calculates the sick leave accrual for an employee in Illinois over a specified period. It starts by initializing the total hours worked to zero. For each day within the accrual period, it adds the regular work hours for that day to the total hours worked. After iterating through all the days in the period, if the total hours worked are 40 or more, the formula sets the accrual to 1. The final accrual value is then returned.\n\n***answer***: DEFAULT FOR IV_ACCRUAL IS 0 DEFAULT FOR IV_ACCRUALPERIODSTARTDATE IS '01-JAN-1900' (date) DEFAULT FOR IV_ACCRUALPERIODENDDATE IS '01-JAN-1900' (date) DEFAULT For LHC_REGULAR_WORK_HOURS_ASG_RP IS 0 INPUTS ARE IV_ACCRUAL, IV_ACCRUALPERIODSTARTDATE, IV_ACCRUALPERIODENDDATE,IV_CALEDARSTARTDATE(date) accrual = 0 PERIOD_START_DATE = IV_ACCRUALPERIODSTARTDATE PERIOD_END_DATE = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Begin') groupTypeId = 101 l_total_hours_worked = 0 l_hours_sum = 0 L_Assignemnt_id = GET_CONTEXT(HR_ASSIGNMENT_ID,1) Period_start_date = IV_ACCRUALPERIODSTARTDATE Period_End_date = IV_ACCRUALPERIODENDDATE l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Period_start_date:'||to_char(Period_start_date)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'Period_End_date'||to_char(Period_End_date)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'L_Assignemnt_id'||to_char(L_Assignemnt_id)) WHILE (Period_start_date <= Period_End_date) LOOP ( CHANGE_CONTEXTS (EFFECTIVE_DATE = Period_start_date, HR_ASSIGNMENT_ID = L_Assignemnt_id, GRP_TYPE_ID = groupTypeId) ( l_hours_sum = LHC_REGULAR_WORK_HOURS_ASG_RP l_total_hours_worked = l_total_hours_worked + l_hours_sum l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'= l_total_hours_worked '||to_char(l_hours_sum)) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'= Period_start_date '||to_char(Period_start_date)) ) Period_start_date = ADD_DAYS(Period_start_date,1) ) IF l_total_hours_worked >=40 THEN ( accrual=1 l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'accrual_loop= '||to_char(accrual)) ) l_log = ESS_LOG_WRITE('LHC_IL_PAID_SICK_ACCRUAL_MATRIX'||'accrual'|| TO_CHAR(accrual)) RETURN accrual",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of Family and Medical Leave Act (FMLA) absences for employees. It checks if the total duration of the submitted FMLA leave, combined with previously recorded FMLA leave within the past year, exceeds 2016 hours. If the total exceeds 2016 hours, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees do not exceed the allowed FMLA leave hours. The formula also excludes absences with statuses \"DENIED\" and \"SAVED\" from the calculation.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = ADD_MONTHS (l_yr_end_date, -12) l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (l_abs_typ_name ='FMLA') AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' AND ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days IF l_applicable_abs_days > 2016 THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_FMLA_VALIDATION_MESSAGE' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of voluntary leave absences for employees. It checks if the total duration of the submitted voluntary leave, combined with previously recorded voluntary leave within the current year, exceeds the allowed limit. The formula also ensures that the duration of the leave is a multiple of 4 hours. If the total exceeds the allowed limit or the duration is not a multiple of 4, the formula returns a validation error. Otherwise, it confirms the entry as valid.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT FOR ANC_ABS_ENTRS_APPROVAL_STATUS_CD IS ' ' DEFAULT FOR ACP_HIRE_DATE IS '1951/01/01 00:00:00' (date) DEFAULT FOR hr_assign_id IS 0 DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_NAME_ARR IS 'XXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' ERROR_MESSAGE = ' ' duration = IV_TOTALDURATION date_start = IV_START_DATE l_yr_end_date = date_start l_yr_start_date = ADD_MONTHS (l_yr_end_date, -12) l_applicable_abs_days = 0 l_approved_abs_days = 0 l_effdate = get_context(effective_date, '0001/01/01 00:00:00'(date)) l_year=to_number(to_char(l_effdate,'YYYY')) l_date = to_date(to_char(l_year)||'/06/30','YYYY/MM/DD') l_start_date_year=to_number(to_char(IV_START_DATE,'YYYY')) l_year_start_date=to_date(to_char(l_start_date_year)||'/01/01','YYYY/MM/DD') l_year_end_date=to_date(to_char(l_start_date_year)||'/12/31','YYYY/MM/DD') l_end_date_year=to_number(to_char(IV_END_DATE,'YYYY')) l_mod=4 if ACP_HIRE_DATE was not defaulted and ACP_HIRE_DATE <= l_date and l_year<=2020 then ( l_days=8 )else if ACP_HIRE_DATE was not defaulted and ACP_HIRE_DATE <= l_date and l_year >2020 then ( l_days=17 ) else ( l_days=8 ) CHANGE_CONTEXTS(START_DATE=l_year_start_date, END_DATE=l_year_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME l_abs_status = ANC_ABS_ENTRS_ABSENCE_STATUS_CD IF (upper(l_abs_typ_name) = upper('Voluntary Time Off') or upper(l_abs_typ_name) = upper('Paid Time to Volunteer')) AND (l_abs_status <> 'ORA_WITHDRAWN' and l_abs_status <> 'SAVED' and ANC_ABS_ENTRS_APPROVAL_STATUS_CD <> 'DENIED') then ( l_approved_abs_days = l_approved_abs_days + ANC_ABS_ENTRS_DURATION ) ) ) i=i+1 ) ) l_applicable_abs_days = duration + l_approved_abs_days if mod(duration,l_mod) <> 0 then ( VALID = 'N' ERROR_MESSAGE = 'AROC_VOLUNTARY_VALIDATION' ) else if l_applicable_abs_days >= l_days THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_VOL_MAX_LIMIT_VALIDATION' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of Paid Time Off (PTO) absences for employees. It ensures that PTO can only be taken in specific increments: 4 hours for exempt employees and 1 hour for non-exempt employees. The formula also includes custom logic to handle specific shift patterns, such as the \"Rotator 9/80\" shift, and adjusts the validation accordingly. If the duration of the PTO does not meet the required increments or exceeds the allowed limits, the formula returns a validation error. Otherwise, it confirms the entry as valid. write a  ensures that employees adhere to the company's PTO policies and guidelines.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_DURATION is 0 DEFAULT for PER_JOBS_LEG_EFF_HRX_US_JOBS_FLSA_STATUS is 'X' DEFAULT for PER_JOB_JOB_CODE is 'X' DEFAULT for PER_ASG_JOB_CODE is 'X' DEFAULT_DATA_VALUE FOR ANC_ASSIGNED_SHIFT_NAME_ARR IS 'XXX' INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_TOTALDURATION (number),IV_START_TIME(text),IV_END_TIME(text) VALID = 'Y' ERROR_MESSAGE = ' ' lv_Exempt = 0 lv_NonExempt = 0 lv_duration = IV_TOTALDURATION lv_flsa_status = UPPER(PER_JOBS_LEG_EFF_HRX_US_JOBS_FLSA_STATUS) lv_Exempt = MOD(lv_duration,4) lv_NonExempt = MOD(lv_duration,1) ld_period_start_date = to_date(to_char(IV_START_DATE,'DD/MM/RRRR')||' '||IV_START_TIME,'DD/MM/RRRR HH24:MI:SS') ld_period_end_date = to_date(to_char(IV_END_DATE,'DD/MM/RRRR')||' '||IV_END_TIME,'DD/MM/RRRR HH24:MI:SS') lc_9_80_flag='N' l_days_between = DAYS_BETWEEN(ld_period_end_date,ld_period_start_date) CHANGE_CONTEXTS(START_DATE=ld_period_start_date, END_DATE=ld_period_end_date) ( i=1 while ANC_ASSIGNED_SHIFT_NAME_ARR.exists(i) loop ( lv_shift_name = ANC_ASSIGNED_SHIFT_NAME_ARR[i] i=i+1 ) ) lv_shift_name = lv_shift_name if (lv_shift_name like 'Rotator 9/80%') then ( lc_9_80_flag='Y' ) lv_Exempt_9 = MOD(lv_duration,9) lv_Exempt_10 = MOD(lv_duration,10) l_friday = 0 l_friday_factor = 0 l_other_day = 0 l_other_factor = 0 l_start_date = IV_START_DATE l_end_date = IV_END_DATE while l_start_date <= l_end_date loop ( if (to_char(l_start_date,'D')) = '6' then ( l_friday = l_friday + 1 ) else if ((to_char(l_start_date,'D')) = '2' OR (to_char(l_start_date,'D')) = '3' OR (to_char(l_start_date,'D')) = '4' OR (to_char(l_start_date,'D')) = '5') then ( l_other_day = l_other_day + 1 ) l_start_date = ADD_DAYS(l_start_date,1) ) IF l_friday <> 0 then l_friday_factor = 4 IF l_other_day <> 0 then l_other_factor = 9 IF l_friday = 0 then l_friday_factor = 0 IF l_other_day = 0 then l_other_factor = 0 l_divisor = 0 l_divisor = (l_other_day*l_other_factor + l_friday*l_friday_factor) lv_Exempt_Dynamic = MOD(lv_duration,l_divisor) IF (((lv_shift_name like '4.5%') AND ((lv_Exempt_9 = 0) OR (lv_Exempt_Dynamic = 0))) OR ((lv_shift_name like '4/10%') AND (lv_Exempt_10 =0))) THEN (VALID = 'Y') ELSE IF PER_ASG_JOB_CODE = PER_JOB_JOB_CODE AND lv_flsa_status = 'EXEMPT' AND lv_Exempt > 0 and lc_9_80_flag='N' THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PTO_EXEMPT_VALIDATION' ) ELSE IF PER_ASG_JOB_CODE = PER_JOB_JOB_CODE AND lv_flsa_status = 'NONEXEMPT' AND lv_NonExempt > 0 and lc_9_80_flag='N' THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PTO_NONEXEMPT_VALIDATION' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of Long-Term Disability (LTD) absences for employees. It checks if the start date of the submitted LTD leave is the day after the end date of the last recorded Short-Term Disability (STD) leave. If the start date does not immediately follow the end date of the last STD leave, the formula returns a validation error. Otherwise, it confirms the entry as valid.\n\n***answer***: DEFAULT_DATA_VALUE for ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR is 0 DEFAULT for ANC_ABS_ENTRS_ABSENCE_TYPE_ID is 0 DEFAULT for ANC_ABS_TYP_NAME is ' ' DEFAULT for ANC_ABS_ENTRS_DURATION is 0 default for ANC_ABS_ENTRS_ABSENCE_STATUS_CD is ' ' DEFAULT FOR ANC_ABS_ENTRS_END_DATE is '0001/01/01 00:00:00' (date) Default for IV_ATTRIBUTE_DATE1 is '2050/01/01 00:00:00' (date) INPUTS ARE IV_START_DATE (date), IV_END_DATE (date), IV_ATTRIBUTE_DATE1 (Date), IV_TOTALDURATION (number) absence_type_name = ANC_ABS_TYP_NAME VALID = 'Y' last_end_date = '0001/01/01 00:00:00' (date) ERROR_MESSAGE = ' ' Return_date = IV_ATTRIBUTE_DATE1 duration = IV_TOTALDURATION date_start = IV_START_DATE currdtchar = GLOBAL_PAY_INTERFACE_EXTRACTION_DATE Eff1date= to_date(currdtchar,'rrrr/mm/dd') l_yr_end_date = TO_DATE('31/12'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_yr_start_date = TO_DATE('01/01'||'/'||to_char(date_start,'YYYY'),'DD/MM/YYYY') l_applicable_abs_days = 0 l_approved_abs_days = 0 CHANGE_CONTEXTS(START_DATE=l_yr_start_date, END_DATE=l_yr_end_date) ( i=1 while ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR.exists(i) loop ( CHANGE_CONTEXTS(ABSENCE_ENTRY_ID=ANC_PER_ABS_ENTRS_ABSENCE_ENTRY_ID_ARR[i]) ( CHANGE_CONTEXTS(ABSENCE_TYPE_ID=ANC_ABS_ENTRS_ABSENCE_TYPE_ID) ( l_abs_typ_name = ANC_ABS_TYP_NAME if (l_abs_typ_name ='STD') then ( IF (ANC_ABS_ENTRS_ABSENCE_STATUS_CD <> 'ORA_WITHDRAWN') then ( last_end_date = ANC_ABS_ENTRS_END_DATE ) ) ) ) i=i+1 ) ) IF (TRUNC(ADD_DAYS(last_end_date,1)) <> TRUNC(IV_START_DATE)) then ( VALID = 'N' ERROR_MESSAGE = 'AROC_LTD_ABSENCE_ERROR_MESSAGE' ) ELSE ( VALID = 'Y' ) return VALID, ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to validate the entry of personal leave absences for employees. It checks if the employee has any personal leave balance available. If the balance is greater than or equal to one day, the formula returns a validation error, prompting the employee to utilize their personal leave balance first. Otherwise, it confirms the entry as valid.\n\n***answer***: DEFAULT FOR BEN_ABS_DATE_START IS '1951/01/01 00:00:00' (date) DEFAULT FOR ANC_ABS_ENTRS_START_DATE IS '4712/12/31 00:00:00' (date) INPUTS ARE iv_start_date (date), iv_end_date (date), IV_TOTALDURATION L_Acrl_Balance_Personal = 0 L_Person_Id = GET_CONTEXT(PERSON_ID,0) L_Term_Id = GET_CONTEXT(HR_TERM_ID,0) L_Eff_Dt = IV_START_DATE L_Leave_Balance = 0 SET_INPUT('IV_PERSON_ID', L_Person_Id) SET_INPUT('IV_TERM_ID', L_Term_Id) SET_INPUT('IV_EFF_DT', L_Eff_Dt) EXECUTE('AROC_GET_LEAVE_BALANCE_FORMULA') L_Acrl_Balance_Personal = GET_OUTPUT('L_Leave_Balance', 0) IF (L_Acrl_Balance_Personal >= 1 ) THEN ( VALID = 'N' ERROR_MESSAGE = 'AROC_PERSONAL_LEAVE_VALIDATION' ) else ( VALID = 'Y' ) return VALID,ERROR_MESSAGE",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: Write a absence accrual formula to return the absence balance of Annual Leave for the employee\n\n***answer***: INPUTS ARE IV_PERSON_ID,IV_TERM_ID,IV_EFF_DT (DATE) DEFAULT FOR IV_PERSON_ID IS 0 DEFAULT FOR IV_TERM_ID IS 0 DEFAULT FOR IV_EFF_DT IS '2014/01/01' (DATE) L_Leave_Balance = 0 L_Accrual_Plan_ID = 300000052099598 L_Term_Id = IV_TERM_ID L_Person_Id = IV_PERSON_ID L_Eff_Dt = IV_EFF_DT CHANGE_CONTEXTS(ACCRUAL_PLAN_ID = L_Accrual_Plan_ID, HR_ASSIGNMENT_ID = L_Term_Id, PERSON_ID = L_Person_Id, EFFECTIVE_DATE =L_Eff_Dt ) ( L_Leave_Balance = GET_ACCRUAL_BALANCE() ) return L_Leave_Balance",
        "metadata": {
            "source": "dataset"
        }
    },
    {
        "page_content": "***question***: write a  formula is designed to return the Global Assignment ID for an employee. It starts by retrieving the employee's ID and assignment ID from the context. Then, it iterates through the list of external assignments for the employee, checking for an active and primary assignment. Once it finds such an assignment, it sets the Global Assignment ID to that assignment's ID and exits the loop. The final Global Assignment ID is then returned. \n\n***answer***: DEFAULT FOR PER_ASG_ASSIGNMENT_ID is 0 L_Person_ID = GET_CONTEXT(PERSON_ID,0) L_Assignment_ID = GET_CONTEXT(HR_ASSIGNMENT_ID,0) L_EFFECTIVE_DATE = GET_CONTEXT(EFFECTIVE_DATE,to_date('1951/01/01 00:00:00')) COUNT_FOR_ASG = 0 l = ess_log_write('GLOBAL 0:'||to_char(L_EFFECTIVE_DATE)||'PERSONID'||TO_CHAR(L_Person_ID)) KOUNT = PER_EXT_ASG_PERSON_ID.FIRST(-1234) WHILE PER_EXT_ASG_PERSON_ID.EXISTS(KOUNT) LOOP ( IF (L_Person_ID = PER_EXT_ASG_PERSON_ID[KOUNT]) THEN ( IF (PER_EXT_ASG_STATUS_TYPE[KOUNT] = 'ACTIVE' AND PER_EXT_ASG_PRIMARY_FLAG[KOUNT] = 'Y') THEN ( COUNT_FOR_ASG = KOUNT l = ess_log_write('GLOBAL:'||TO_CHAR(PER_EXT_ASG_ASSIGNMENT_ID[COUNT_FOR_ASG])) HR_NEW_ASSIGNMENT_ID = PER_EXT_ASG_ASSIGNMENT_ID[COUNT_FOR_ASG] EXIT ) ) KOUNT = PER_EXT_ASG_PERSON_ID.NEXT(KOUNT,-1234) ) RETURN HR_NEW_ASSIGNMENT_ID",
        "metadata": {
            "source": "dataset"
        }
    }
]